

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sun May 19 18:52:51 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	79F133
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text10,local,class=CODE,merge=1,delta=2
    18                           	psect	text15,local,class=CODE,merge=1,delta=2
    19                           	psect	text22,local,class=CODE,merge=1,delta=2
    20                           	psect	text29,local,class=CODE,merge=1,delta=2
    21                           	psect	text31,local,class=CODE,merge=1,delta=2
    22                           	psect	intentry,global,class=CODE,delta=2
    23                           	psect	pa_nodes0,global,class=CODE,delta=2
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F887 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	text0
    62  0000                     __ptext0:	
    63  000E                     _TMR1	set	14
    64  0012                     _T2CON	set	18
    65  0010                     _T1CON	set	16
    66  000D                     _PIR2	set	13
    67  000C                     _PIR1	set	12
    68  000B                     _INTCON	set	11
    69  0007                     _PORTC	set	7
    70  0006                     _PORTB	set	6
    71  0005                     _PORTA	set	5
    72  0060                     _TMR1IF	set	96
    73  0061                     _TMR2IF	set	97
    74  005F                     _GIE	set	95
    75  0030                     _RB0	set	48
    76  0031                     _RB1	set	49
    77  0032                     _RB2	set	50
    78  0029                     _RA1	set	41
    79  002A                     _RA2	set	42
    80  002C                     _RA4	set	44
    81  002D                     _RA5	set	45
    82  002E                     _RA6	set	46
    83  0095                     _WPUB	set	149
    84  0092                     _PR2	set	146
    85  008F                     _OSCCON	set	143
    86  008D                     _PIE2	set	141
    87  008C                     _PIE1	set	140
    88  0087                     _TRISC	set	135
    89  0086                     _TRISB	set	134
    90  0085                     _TRISA	set	133
    91  0081                     _OPTION_REG	set	129
    92  0460                     _TMR1IE	set	1120
    93  0461                     _TMR2IE	set	1121
    94  0105                     _WDTCON	set	261
    95  018F                     _WPUC	set	399
    96  018E                     _WPUA	set	398
    97                           
    98                           	psect	cinit
    99  000F                     start_initialization:	
   100                           ; #config settings
   101                           
   102  000F                     __initialization:	
   103  000F  3020               	movlw	low __pbssBANK0
   104                           
   105                           ; Clear objects allocated to COMMON
   106  0010  01F9               	clrf	__pbssCOMMON& (0+127)
   107  0011  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   108                           
   109                           ; Clear objects allocated to BANK0
   110  0012  1383               	bcf	3,7	;select IRP bank0
   111  0013  0084               	movwf	4
   112  0014  3058               	movlw	low (__pbssBANK0+56)
   113  0015  120A  118A  24A3   	fcall	clear_ram0
   114  0018                     end_of_initialization:	
   115                           ;End of C runtime variable initialization code
   116                           
   117  0018                     __end_of__initialization:	
   118  0018  0183               	clrf	3
   119  0019  120A  118A  2B26   	ljmp	_main	;jump to C main() function
   120                           
   121                           	psect	bssCOMMON
   122  0079                     __pbssCOMMON:	
   123  0079                     _SeletedLine:	
   124  0079                     	ds	1
   125  007A                     _Fbodysensor:	
   126  007A                     	ds	1
   127                           
   128                           	psect	bssBANK0
   129  0020                     __pbssBANK0:	
   130  0020                     _CNTkey2:	
   131  0020                     	ds	2
   132  0022                     _CNTkey1:	
   133  0022                     	ds	2
   134  0024                     _CNTfct:	
   135  0024                     	ds	2
   136  0026                     _CNTfctStart:	
   137  0026                     	ds	2
   138  0028                     _CNTbodyExitTime:	
   139  0028                     	ds	2
   140  002A                     _CNTbodyInTime:	
   141  002A                     	ds	2
   142  002C                     _BufCntAdd:	
   143  002C                     	ds	2
   144  002E                     _CNTbody_l:	
   145  002E                     	ds	2
   146  0030                     _CNTbody_h:	
   147  0030                     	ds	2
   148  0032                     _CNTflush:	
   149  0032                     	ds	2
   150  0034                     _AD_Result:	
   151  0034                     	ds	2
   152  0036                     _MainTime_1s:	
   153  0036                     	ds	2
   154  0038                     _CNTbreath_Led3:	
   155  0038                     	ds	2
   156  003A                     _CNTbreath_Led2:	
   157  003A                     	ds	2
   158  003C                     _CNTbreath_Led1:	
   159  003C                     	ds	2
   160  003E                     _CNTbreath_Led:	
   161  003E                     	ds	2
   162  0040                     _CurrentIO:	
   163  0040                     	ds	1
   164  0041                     _CNTfctFlashLed:	
   165  0041                     	ds	1
   166  0042                     _CNTfctSensior:	
   167  0042                     	ds	1
   168  0043                     _SEQbody:	
   169  0043                     	ds	1
   170  0044                     _u8stsBodySensor:	
   171  0044                     	ds	1
   172  0045                     _SEQflsuh:	
   173  0045                     	ds	1
   174  0046                     _Fflush1:	
   175  0046                     	ds	1
   176  0047                     _MainTime_1min:	
   177  0047                     	ds	1
   178  0048                     _SEQmain:	
   179  0048                     	ds	1
   180  0049                     _templ:	
   181  0049                     	ds	1
   182  004A                     _RX_Buf:	
   183  004A                     	ds	1
   184  004B                     _fctBits001:	
   185  004B                     	ds	1
   186  004C                     _FledBits01:	
   187  004C                     	ds	1
   188  004D                     _Fsys1m:	
   189  004D                     	ds	1
   190  004E                     _Fsys1s:	
   191  004E                     	ds	1
   192  004F                     _Fsys1:	
   193  004F                     	ds	1
   194  0050                     _KeyLines:	
   195  0050                     	ds	8
   196                           
   197                           	psect	clrtext
   198  04A3                     clear_ram0:	
   199                           ;	Called with FSR containing the base address, and
   200                           ;	W with the last address+1
   201                           
   202  04A3  0064               	clrwdt	;clear the watchdog before getting into this loop
   203  04A4                     clrloop0:	
   204  04A4  0180               	clrf	0	;clear RAM location pointed to by FSR
   205  04A5  0A84               	incf	4,f	;increment pointer
   206  04A6  0604               	xorwf	4,w	;XOR with final address
   207  04A7  1903               	btfsc	3,2	;have we reached the end yet?
   208  04A8  3400               	retlw	0	;all done for this memory range, return
   209  04A9  0604               	xorwf	4,w	;XOR again to restore value
   210  04AA  2CA4               	goto	clrloop0	;do the next byte
   211                           
   212                           	psect	cstackCOMMON
   213  0070                     __pcstackCOMMON:	
   214  0070                     ?_LED_Time:	
   215  0070                     ?_LED_Key:	
   216                           ; 1 bytes @ 0x0
   217                           
   218  0070                     ?_LED_Judge:	
   219                           ; 1 bytes @ 0x0
   220                           
   221  0070                     ?_LED_Con:	
   222                           ; 1 bytes @ 0x0
   223                           
   224  0070                     ?_FCTloop:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0070                     ?_GsensorLoop:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     ?_GflushLoop:	
   231                           ; 1 bytes @ 0x0
   232                           
   233  0070                     ?_FlushTime:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  0070                     ?_FlushJudge:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  0070                     ?_FlushCon:	
   240                           ; 1 bytes @ 0x0
   241                           
   242  0070                     ?_GkeyLoop:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0070                     ?_SensorKey:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0070                     ?_SensorTime:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0070                     ?_SensorJudge:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0070                     ?_SensorControl:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0070                     ?_FCTkey:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     ?_FCTjudge:	
   261                           ; 1 bytes @ 0x0
   262                           
   263  0070                     ?_ScanKey:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0070                     ?_KeyControl:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ?_GledLoop:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     ?_INT_LED_SHOW:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0070                     ??_INT_LED_SHOW:	
   276                           ; 1 bytes @ 0x0
   277                           
   278  0070                     ?_Init_GPIO:	
   279                           ; 1 bytes @ 0x0
   280                           
   281  0070                     ?_Init_IC:	
   282                           ; 1 bytes @ 0x0
   283                           
   284  0070                     ?_Init_TIMER1:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0070                     ?_Init_TIMER2:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0070                     ?_main:	
   291                           ; 1 bytes @ 0x0
   292                           
   293  0070                     ?_Int_ALL:	
   294                           ; 1 bytes @ 0x0
   295                           
   296  0070                     ??_Int_ALL:	
   297                           ; 1 bytes @ 0x0
   298                           
   299  0070                     ?_G_KEY:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0070                     ?_R_KEY:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     ?_key1:	
   306                           ; 1 bytes @ 0x0
   307                           
   308  0070                     ?_key2:	
   309                           ; 1 bytes @ 0x0
   310                           
   311                           
   312                           ; 1 bytes @ 0x0
   313  0070                     	ds	2
   314  0072                     ??_LED_Time:	
   315  0072                     ??_LED_Key:	
   316                           ; 1 bytes @ 0x2
   317                           
   318  0072                     ??_LED_Judge:	
   319                           ; 1 bytes @ 0x2
   320                           
   321  0072                     ??_LED_Con:	
   322                           ; 1 bytes @ 0x2
   323                           
   324  0072                     ??_FCTloop:	
   325                           ; 1 bytes @ 0x2
   326                           
   327  0072                     ??_FlushTime:	
   328                           ; 1 bytes @ 0x2
   329                           
   330  0072                     ??_FlushCon:	
   331                           ; 1 bytes @ 0x2
   332                           
   333  0072                     ??_SensorKey:	
   334                           ; 1 bytes @ 0x2
   335                           
   336  0072                     ??_SensorTime:	
   337                           ; 1 bytes @ 0x2
   338                           
   339  0072                     ??_SensorJudge:	
   340                           ; 1 bytes @ 0x2
   341                           
   342  0072                     ??_SensorControl:	
   343                           ; 1 bytes @ 0x2
   344                           
   345  0072                     ??_FCTkey:	
   346                           ; 1 bytes @ 0x2
   347                           
   348  0072                     ??_FCTjudge:	
   349                           ; 1 bytes @ 0x2
   350                           
   351  0072                     ??_ScanKey:	
   352                           ; 1 bytes @ 0x2
   353                           
   354  0072                     ??_KeyControl:	
   355                           ; 1 bytes @ 0x2
   356                           
   357  0072                     ??_GledLoop:	
   358                           ; 1 bytes @ 0x2
   359                           
   360  0072                     ?_Delay:	
   361                           ; 1 bytes @ 0x2
   362                           
   363  0072                     ??_Init_GPIO:	
   364                           ; 1 bytes @ 0x2
   365                           
   366  0072                     ??_Init_IC:	
   367                           ; 1 bytes @ 0x2
   368                           
   369  0072                     ??_Init_TIMER1:	
   370                           ; 1 bytes @ 0x2
   371                           
   372  0072                     ??_Init_TIMER2:	
   373                           ; 1 bytes @ 0x2
   374                           
   375  0072                     ??_G_KEY:	
   376                           ; 1 bytes @ 0x2
   377                           
   378  0072                     ??_R_KEY:	
   379                           ; 1 bytes @ 0x2
   380                           
   381  0072                     ??_key1:	
   382                           ; 1 bytes @ 0x2
   383                           
   384  0072                     ??_key2:	
   385                           ; 1 bytes @ 0x2
   386                           
   387  0072                     ScanKey@line_num:	
   388                           ; 1 bytes @ 0x2
   389                           
   390  0072                     Delay@dtemp:	
   391                           ; 1 bytes @ 0x2
   392                           
   393                           
   394                           ; 2 bytes @ 0x2
   395  0072                     	ds	1
   396  0073                     ??_GsensorLoop:	
   397                           
   398                           ; 1 bytes @ 0x3
   399  0073                     	ds	1
   400  0074                     ??_GkeyLoop:	
   401  0074                     ??_Delay:	
   402                           ; 1 bytes @ 0x4
   403                           
   404  0074                     ?_Delay_nms:	
   405                           ; 1 bytes @ 0x4
   406                           
   407  0074                     Delay_nms@inittempl:	
   408                           ; 1 bytes @ 0x4
   409                           
   410                           
   411                           ; 2 bytes @ 0x4
   412  0074                     	ds	2
   413  0076                     ??_FlushJudge:	
   414  0076                     ??_Delay_nms:	
   415                           ; 1 bytes @ 0x6
   416                           
   417  0076                     FlushJudge@Key_Step:	
   418                           ; 1 bytes @ 0x6
   419                           
   420  0076                     Delay_nms@i:	
   421                           ; 1 bytes @ 0x6
   422                           
   423                           
   424                           ; 2 bytes @ 0x6
   425  0076                     	ds	1
   426  0077                     ??_GflushLoop:	
   427                           
   428                           ; 1 bytes @ 0x7
   429  0077                     	ds	1
   430  0078                     Delay_nms@gtemp:	
   431                           
   432                           ; 1 bytes @ 0x8
   433  0078                     	ds	1
   434  0079                     ??_main:	
   435                           
   436                           	psect	cstackBANK0
   437  0058                     __pcstackBANK0:	
   438                           ; 1 bytes @ 0x9
   439                           
   440  0058                     _KeyControl$3137:	
   441                           
   442                           ; 2 bytes @ 0x0
   443  0058                     	ds	2
   444  005A                     _KeyControl$3138:	
   445                           
   446                           ; 2 bytes @ 0x2
   447  005A                     	ds	2
   448  005C                     _KeyControl$3139:	
   449                           
   450                           ; 2 bytes @ 0x4
   451  005C                     	ds	2
   452  005E                     KeyControl@this:	
   453                           
   454                           ; 1 bytes @ 0x6
   455  005E                     	ds	1
   456                           
   457                           	psect	maintext
   458  0326                     __pmaintext:	
   459 ;;
   460 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   461 ;;
   462 ;; *************** function _main *****************
   463 ;; Defined at:
   464 ;;		line 473 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\main.c"
   465 ;; Parameters:    Size  Location     Type
   466 ;;		None
   467 ;; Auto vars:     Size  Location     Type
   468 ;;		None
   469 ;; Return value:  Size  Location     Type
   470 ;;                  1    wreg      void 
   471 ;; Registers used:
   472 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   473 ;; Tracked objects:
   474 ;;		On entry : B00/0
   475 ;;		On exit  : 300/0
   476 ;;		Unchanged: 0/0
   477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   478 ;;      Params:         0       0       0       0       0
   479 ;;      Locals:         0       0       0       0       0
   480 ;;      Temps:          0       0       0       0       0
   481 ;;      Totals:         0       0       0       0       0
   482 ;;Total ram usage:        0 bytes
   483 ;; Hardware stack levels required when called:    6
   484 ;; This function calls:
   485 ;;		_Delay_nms
   486 ;;		_FCTloop
   487 ;;		_GflushLoop
   488 ;;		_GledLoop
   489 ;;		_GsensorLoop
   490 ;;		_Init_GPIO
   491 ;;		_Init_IC
   492 ;;		_Init_TIMER1
   493 ;;		_Init_TIMER2
   494 ;; This function is called by:
   495 ;;		Startup code after reset
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           
   500                           ;psect for function _main
   501  0326                     _main:	
   502                           
   503                           ;incstack = 0
   504                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   505  0326  0000               	nop	;# 
   506  0327  0064               	clrwdt	;# 
   507                           
   508                           ;main.c: 478: INTCON = 0;
   509  0328  018B               	clrf	11	;volatile
   510                           
   511                           ;main.c: 480: Init_GPIO();
   512  0329  120A  118A  2464  120A  118A  	fcall	_Init_GPIO
   513                           
   514                           ;main.c: 481: Init_IC();
   515  032E  120A  118A  2479  120A  118A  	fcall	_Init_IC
   516                           
   517                           ;main.c: 482: Delay_nms(200);
   518  0333  30C8               	movlw	200
   519  0334  00F4               	movwf	Delay_nms@inittempl
   520  0335  01F5               	clrf	Delay_nms@inittempl+1
   521  0336  120A  118A  2419  120A  118A  	fcall	_Delay_nms
   522                           
   523                           ;main.c: 483: Init_TIMER1();
   524  033B  120A  118A  248B  120A  118A  	fcall	_Init_TIMER1
   525                           
   526                           ;main.c: 484: Init_TIMER2();
   527  0340  120A  118A  2498  120A  118A  	fcall	_Init_TIMER2
   528                           
   529                           ;main.c: 495: INTCON = 0XC0;
   530  0345  30C0               	movlw	192
   531  0346  008B               	movwf	11	;volatile
   532  0347                     l7283:	
   533                           
   534                           ;main.c: 499: {
   535                           ;main.c: 501: if (Fsys1.bits.bit_1 == 1)
   536  0347  1CCF               	btfss	_Fsys1,1	;volatile
   537  0348  2B47               	goto	l7283
   538  0349  0064               	clrwdt	;# 
   539                           
   540                           ;main.c: 505: Fsys1.bits.bit_1 = 0;
   541  034A  1283               	bcf	3,5	;RP0=0, select bank0
   542  034B  1303               	bcf	3,6	;RP1=0, select bank0
   543  034C  10CF               	bcf	_Fsys1,1	;volatile
   544                           
   545                           ;main.c: 506: switch (SEQmain)
   546  034D  2B6C               	goto	l7297
   547  034E                     l7287:	
   548                           
   549                           ;main.c: 509: FCTloop();
   550  034E  120A  118A  2395  120A  118A  	fcall	_FCTloop
   551                           
   552                           ;main.c: 510: break;
   553  0353  2B8C               	goto	l7299
   554  0354                     l1922:	
   555                           ;main.c: 511: case 1:
   556                           
   557                           
   558                           ;main.c: 512: if(fctBits001.bits.bit_0 == 0)
   559  0354  184B               	btfsc	_fctBits001,0	;volatile
   560  0355  2B8C               	goto	l7299
   561                           
   562                           ;main.c: 513: {
   563                           ;main.c: 514: GsensorLoop();
   564  0356  120A  118A  2230  120A  118A  	fcall	_GsensorLoop
   565  035B  2B8C               	goto	l7299
   566  035C                     l1926:	
   567                           ;main.c: 523: case 4:
   568                           
   569                           
   570                           ;main.c: 524: if(fctBits001.bits.bit_0 == 0)
   571  035C  184B               	btfsc	_fctBits001,0	;volatile
   572  035D  2B8C               	goto	l7299
   573                           
   574                           ;main.c: 525: {
   575                           ;main.c: 526: GflushLoop();
   576  035E  120A  118A  201C  120A  118A  	fcall	_GflushLoop
   577  0363  2B8C               	goto	l7299
   578  0364                     l1931:	
   579                           ;main.c: 538: case 8:
   580                           
   581                           
   582                           ;main.c: 539: if(fctBits001.bits.bit_0 == 0)
   583  0364  184B               	btfsc	_fctBits001,0	;volatile
   584  0365  2B8C               	goto	l7299
   585                           
   586                           ;main.c: 540: {
   587                           ;main.c: 541: GledLoop();
   588  0366  120A  118A  2444  120A  118A  	fcall	_GledLoop
   589  036B  2B8C               	goto	l7299
   590  036C                     l7297:	
   591  036C  0848               	movf	_SEQmain,w	;volatile
   592                           
   593                           ; Switch size 1, requested type "space"
   594                           ; Number of cases is 10, Range of values is 0 to 9
   595                           ; switch strategies available:
   596                           ; Name         Instructions Cycles
   597                           ; simple_byte           31    16 (average)
   598                           ; direct_byte           38     8 (fixed)
   599                           ; jumptable            260     6 (fixed)
   600                           ;	Chosen strategy is simple_byte
   601  036D  3A00               	xorlw	0	; case 0
   602  036E  1903               	skipnz
   603  036F  2B4E               	goto	l7287
   604  0370  3A01               	xorlw	1	; case 1
   605  0371  1903               	skipnz
   606  0372  2B54               	goto	l1922
   607  0373  3A03               	xorlw	3	; case 2
   608  0374  1903               	skipnz
   609  0375  2B8C               	goto	l7299
   610  0376  3A01               	xorlw	1	; case 3
   611  0377  1903               	skipnz
   612  0378  2B8C               	goto	l7299
   613  0379  3A07               	xorlw	7	; case 4
   614  037A  1903               	skipnz
   615  037B  2B5C               	goto	l1926
   616  037C  3A01               	xorlw	1	; case 5
   617  037D  1903               	skipnz
   618  037E  2B8C               	goto	l7299
   619  037F  3A03               	xorlw	3	; case 6
   620  0380  1903               	skipnz
   621  0381  2B8C               	goto	l7299
   622  0382  3A01               	xorlw	1	; case 7
   623  0383  1903               	skipnz
   624  0384  2B8C               	goto	l7299
   625  0385  3A0F               	xorlw	15	; case 8
   626  0386  1903               	skipnz
   627  0387  2B64               	goto	l1931
   628  0388  3A01               	xorlw	1	; case 9
   629  0389  1903               	skipnz
   630  038A  2B8C               	goto	l7299
   631  038B  2B8C               	goto	l7299
   632  038C                     l7299:	
   633                           
   634                           ;main.c: 551: if (++SEQmain >= 10)
   635  038C  300A               	movlw	10
   636  038D  1283               	bcf	3,5	;RP0=0, select bank0
   637  038E  1303               	bcf	3,6	;RP1=0, select bank0
   638  038F  0AC8               	incf	_SEQmain,f	;volatile
   639  0390  0248               	subwf	_SEQmain,w	;volatile
   640  0391  1C03               	skipc
   641  0392  2B47               	goto	l7283
   642                           
   643                           ;main.c: 552: {
   644                           ;main.c: 553: SEQmain = 0;
   645  0393  01C8               	clrf	_SEQmain	;volatile
   646  0394  2B47               	goto	l7283
   647  0395                     __end_of_main:	
   648                           
   649                           	psect	text1
   650  0498                     __ptext1:	
   651 ;; *************** function _Init_TIMER2 *****************
   652 ;; Defined at:
   653 ;;		line 174 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\main.c"
   654 ;; Parameters:    Size  Location     Type
   655 ;;		None
   656 ;; Auto vars:     Size  Location     Type
   657 ;;		None
   658 ;; Return value:  Size  Location     Type
   659 ;;                  1    wreg      void 
   660 ;; Registers used:
   661 ;;		wreg
   662 ;; Tracked objects:
   663 ;;		On entry : 300/0
   664 ;;		On exit  : 300/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   667 ;;      Params:         0       0       0       0       0
   668 ;;      Locals:         0       0       0       0       0
   669 ;;      Temps:          0       0       0       0       0
   670 ;;      Totals:         0       0       0       0       0
   671 ;;Total ram usage:        0 bytes
   672 ;; Hardware stack levels used:    1
   673 ;; Hardware stack levels required when called:    2
   674 ;; This function calls:
   675 ;;		Nothing
   676 ;; This function is called by:
   677 ;;		_main
   678 ;; This function uses a non-reentrant model
   679 ;;
   680                           
   681                           
   682                           ;psect for function _Init_TIMER2
   683  0498                     _Init_TIMER2:	
   684                           
   685                           ;main.c: 176: PR2 = 24;
   686                           
   687                           ;incstack = 0
   688                           ; Regs used in _Init_TIMER2: [wreg]
   689  0498  3018               	movlw	24
   690  0499  1683               	bsf	3,5	;RP0=1, select bank1
   691  049A  0092               	movwf	18	;volatile
   692                           
   693                           ;main.c: 177: TMR2IF = 0;
   694  049B  1283               	bcf	3,5	;RP0=0, select bank0
   695  049C  108C               	bcf	12,1	;volatile
   696                           
   697                           ;main.c: 178: TMR2IE = 1;
   698  049D  1683               	bsf	3,5	;RP0=1, select bank1
   699  049E  148C               	bsf	12,1	;volatile
   700                           
   701                           ;main.c: 179: T2CON = 5;
   702  049F  3005               	movlw	5
   703  04A0  1283               	bcf	3,5	;RP0=0, select bank0
   704  04A1  0092               	movwf	18	;volatile
   705  04A2  0008               	return
   706  04A3                     __end_of_Init_TIMER2:	
   707                           
   708                           	psect	text2
   709  048B                     __ptext2:	
   710 ;; *************** function _Init_TIMER1 *****************
   711 ;; Defined at:
   712 ;;		line 152 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\main.c"
   713 ;; Parameters:    Size  Location     Type
   714 ;;		None
   715 ;; Auto vars:     Size  Location     Type
   716 ;;		None
   717 ;; Return value:  Size  Location     Type
   718 ;;                  1    wreg      void 
   719 ;; Registers used:
   720 ;;		wreg
   721 ;; Tracked objects:
   722 ;;		On entry : 0/100
   723 ;;		On exit  : 300/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   726 ;;      Params:         0       0       0       0       0
   727 ;;      Locals:         0       0       0       0       0
   728 ;;      Temps:          0       0       0       0       0
   729 ;;      Totals:         0       0       0       0       0
   730 ;;Total ram usage:        0 bytes
   731 ;; Hardware stack levels used:    1
   732 ;; Hardware stack levels required when called:    2
   733 ;; This function calls:
   734 ;;		Nothing
   735 ;; This function is called by:
   736 ;;		_main
   737 ;; This function uses a non-reentrant model
   738 ;;
   739                           
   740                           
   741                           ;psect for function _Init_TIMER1
   742  048B                     _Init_TIMER1:	
   743                           
   744                           ;main.c: 156: TMR1 = 0xE0C0;
   745                           
   746                           ;incstack = 0
   747                           ; Regs used in _Init_TIMER1: [wreg]
   748  048B  30E0               	movlw	224
   749  048C  1283               	bcf	3,5	;RP0=0, select bank0
   750  048D  1303               	bcf	3,6	;RP1=0, select bank0
   751  048E  008F               	movwf	15	;volatile
   752  048F  30C0               	movlw	192
   753  0490  008E               	movwf	14	;volatile
   754                           
   755                           ;main.c: 157: TMR1IF = 0;
   756  0491  100C               	bcf	12,0	;volatile
   757                           
   758                           ;main.c: 158: TMR1IE = 1;
   759  0492  1683               	bsf	3,5	;RP0=1, select bank1
   760  0493  140C               	bsf	12,0	;volatile
   761                           
   762                           ;main.c: 159: T1CON = 0x01;
   763  0494  3001               	movlw	1
   764  0495  1283               	bcf	3,5	;RP0=0, select bank0
   765  0496  0090               	movwf	16	;volatile
   766  0497  0008               	return
   767  0498                     __end_of_Init_TIMER1:	
   768                           
   769                           	psect	text3
   770  0479                     __ptext3:	
   771 ;; *************** function _Init_IC *****************
   772 ;; Defined at:
   773 ;;		line 96 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\main.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;		None
   776 ;; Auto vars:     Size  Location     Type
   777 ;;		None
   778 ;; Return value:  Size  Location     Type
   779 ;;                  1    wreg      void 
   780 ;; Registers used:
   781 ;;		wreg, status,2
   782 ;; Tracked objects:
   783 ;;		On entry : 300/300
   784 ;;		On exit  : 300/100
   785 ;;		Unchanged: 0/0
   786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   787 ;;      Params:         0       0       0       0       0
   788 ;;      Locals:         0       0       0       0       0
   789 ;;      Temps:          0       0       0       0       0
   790 ;;      Totals:         0       0       0       0       0
   791 ;;Total ram usage:        0 bytes
   792 ;; Hardware stack levels used:    1
   793 ;; Hardware stack levels required when called:    2
   794 ;; This function calls:
   795 ;;		Nothing
   796 ;; This function is called by:
   797 ;;		_main
   798 ;; This function uses a non-reentrant model
   799 ;;
   800                           
   801                           
   802                           ;psect for function _Init_IC
   803  0479                     _Init_IC:	
   804                           
   805                           ;incstack = 0
   806                           ; Regs used in _Init_IC: [wreg+status,2]
   807  0479  0064               	clrwdt	;# 
   808                           
   809                           ;main.c: 103: INTCON = 0x00;
   810  047A  018B               	clrf	11	;volatile
   811                           
   812                           ;main.c: 108: PIR1 = 0;
   813  047B  1283               	bcf	3,5	;RP0=0, select bank0
   814  047C  1303               	bcf	3,6	;RP1=0, select bank0
   815  047D  018C               	clrf	12	;volatile
   816                           
   817                           ;main.c: 113: PIR2 = 0;
   818  047E  018D               	clrf	13	;volatile
   819                           
   820                           ;main.c: 118: WDTCON = 0x01;
   821  047F  3001               	movlw	1
   822  0480  1703               	bsf	3,6	;RP1=1, select bank2
   823  0481  0085               	movwf	5	;volatile
   824                           
   825                           ;main.c: 123: OPTION_REG = 0b00001110;
   826  0482  300E               	movlw	14
   827  0483  1683               	bsf	3,5	;RP0=1, select bank1
   828  0484  1303               	bcf	3,6	;RP1=0, select bank1
   829  0485  0081               	movwf	1	;volatile
   830                           
   831                           ;main.c: 128: OSCCON = 0x71;
   832  0486  3071               	movlw	113
   833  0487  008F               	movwf	15	;volatile
   834                           
   835                           ;main.c: 133: PIE1 = 0;
   836  0488  018C               	clrf	12	;volatile
   837                           
   838                           ;main.c: 138: PIE2 = 0;
   839  0489  018D               	clrf	13	;volatile
   840  048A  0008               	return
   841  048B                     __end_of_Init_IC:	
   842                           
   843                           	psect	text4
   844  0464                     __ptext4:	
   845 ;; *************** function _Init_GPIO *****************
   846 ;; Defined at:
   847 ;;		line 62 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\main.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;		None
   850 ;; Auto vars:     Size  Location     Type
   851 ;;		None
   852 ;; Return value:  Size  Location     Type
   853 ;;                  1    wreg      void 
   854 ;; Registers used:
   855 ;;		wreg, status,2
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 300/300
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   861 ;;      Params:         0       0       0       0       0
   862 ;;      Locals:         0       0       0       0       0
   863 ;;      Temps:          0       0       0       0       0
   864 ;;      Totals:         0       0       0       0       0
   865 ;;Total ram usage:        0 bytes
   866 ;; Hardware stack levels used:    1
   867 ;; Hardware stack levels required when called:    2
   868 ;; This function calls:
   869 ;;		Nothing
   870 ;; This function is called by:
   871 ;;		_main
   872 ;; This function uses a non-reentrant model
   873 ;;
   874                           
   875                           
   876                           ;psect for function _Init_GPIO
   877  0464                     _Init_GPIO:	
   878                           
   879                           ;main.c: 66: PORTA = 0B01000000;
   880                           
   881                           ;incstack = 0
   882                           ; Regs used in _Init_GPIO: [wreg+status,2]
   883  0464  3040               	movlw	64
   884  0465  1283               	bcf	3,5	;RP0=0, select bank0
   885  0466  1303               	bcf	3,6	;RP1=0, select bank0
   886  0467  0085               	movwf	5	;volatile
   887                           
   888                           ;main.c: 67: PORTB = 0B00000001;
   889  0468  3001               	movlw	1
   890  0469  0086               	movwf	6	;volatile
   891                           
   892                           ;main.c: 68: PORTC = 0B00000000;
   893  046A  0187               	clrf	7	;volatile
   894                           
   895                           ;main.c: 71: TRISA = 0B01000000;
   896  046B  3040               	movlw	64
   897  046C  1683               	bsf	3,5	;RP0=1, select bank1
   898  046D  0085               	movwf	5	;volatile
   899                           
   900                           ;main.c: 72: TRISB = 0B00000111;
   901  046E  3007               	movlw	7
   902  046F  0086               	movwf	6	;volatile
   903                           
   904                           ;main.c: 73: TRISC = 0B00000000;
   905  0470  0187               	clrf	7	;volatile
   906                           
   907                           ;main.c: 76: WPUA = 0B00000000;
   908  0471  1703               	bsf	3,6	;RP1=1, select bank3
   909  0472  018E               	clrf	14	;volatile
   910                           
   911                           ;main.c: 77: WPUB = 0B00000010;
   912  0473  3002               	movlw	2
   913  0474  1303               	bcf	3,6	;RP1=0, select bank1
   914  0475  0095               	movwf	21	;volatile
   915                           
   916                           ;main.c: 78: WPUC = 0B00000000;
   917  0476  1703               	bsf	3,6	;RP1=1, select bank3
   918  0477  018F               	clrf	15	;volatile
   919  0478  0008               	return
   920  0479                     __end_of_Init_GPIO:	
   921                           
   922                           	psect	text5
   923  0230                     __ptext5:	
   924 ;; *************** function _GsensorLoop *****************
   925 ;; Defined at:
   926 ;;		line 19 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\sensor.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;		None
   929 ;; Auto vars:     Size  Location     Type
   930 ;;		None
   931 ;; Return value:  Size  Location     Type
   932 ;;                  1    wreg      void 
   933 ;; Registers used:
   934 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   935 ;; Tracked objects:
   936 ;;		On entry : 300/0
   937 ;;		On exit  : 0/0
   938 ;;		Unchanged: 0/0
   939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   940 ;;      Params:         0       0       0       0       0
   941 ;;      Locals:         0       0       0       0       0
   942 ;;      Temps:          0       0       0       0       0
   943 ;;      Totals:         0       0       0       0       0
   944 ;;Total ram usage:        0 bytes
   945 ;; Hardware stack levels used:    1
   946 ;; Hardware stack levels required when called:    3
   947 ;; This function calls:
   948 ;;		_SensorControl
   949 ;;		_SensorJudge
   950 ;;		_SensorKey
   951 ;;		_SensorTime
   952 ;; This function is called by:
   953 ;;		_main
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957                           
   958                           ;psect for function _GsensorLoop
   959  0230                     _GsensorLoop:	
   960                           
   961                           ;sensor.c: 21: SensorKey();
   962                           
   963                           ;incstack = 0
   964                           ; Regs used in _GsensorLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   965  0230  223A  120A  118A   	fcall	_SensorKey
   966                           
   967                           ;sensor.c: 22: SensorTime();
   968  0233  223B  120A  118A   	fcall	_SensorTime
   969                           
   970                           ;sensor.c: 23: SensorJudge();
   971  0236  228E  120A  118A   	fcall	_SensorJudge
   972                           
   973                           ;sensor.c: 24: SensorControl();
   974  0239  2A73               	ljmp	l6965
   975  023A                     __end_of_GsensorLoop:	
   976  023A                     __ptext7:	
   977 ;; *************** function _SensorKey *****************
   978 ;; Defined at:
   979 ;;		line 27 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\sensor.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;		None
   982 ;; Auto vars:     Size  Location     Type
   983 ;;		None
   984 ;; Return value:  Size  Location     Type
   985 ;;                  1    wreg      void 
   986 ;; Registers used:
   987 ;;		None
   988 ;; Tracked objects:
   989 ;;		On entry : 300/0
   990 ;;		On exit  : 300/0
   991 ;;		Unchanged: 300/0
   992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   993 ;;      Params:         0       0       0       0       0
   994 ;;      Locals:         0       0       0       0       0
   995 ;;      Temps:          0       0       0       0       0
   996 ;;      Totals:         0       0       0       0       0
   997 ;;Total ram usage:        0 bytes
   998 ;; Hardware stack levels used:    1
   999 ;; Hardware stack levels required when called:    2
  1000 ;; This function calls:
  1001 ;;		Nothing
  1002 ;; This function is called by:
  1003 ;;		_GsensorLoop
  1004 ;; This function uses a non-reentrant model
  1005 ;;
  1006                           
  1007                           
  1008                           ;psect for function _SensorKey
  1009  023A                     _SensorKey:	
  1010                           
  1011                           ;incstack = 0
  1012                           ; Regs used in _SensorKey: []
  1013  023A  0008               	return
  1014  023B                     __end_of_SensorKey:	
  1015  023B                     __ptext6:	
  1016 ;; *************** function _SensorTime *****************
  1017 ;; Defined at:
  1018 ;;		line 33 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\sensor.c"
  1019 ;; Parameters:    Size  Location     Type
  1020 ;;		None
  1021 ;; Auto vars:     Size  Location     Type
  1022 ;;		None
  1023 ;; Return value:  Size  Location     Type
  1024 ;;                  1    wreg      void 
  1025 ;; Registers used:
  1026 ;;		wreg, status,2, status,0
  1027 ;; Tracked objects:
  1028 ;;		On entry : 300/0
  1029 ;;		On exit  : 300/0
  1030 ;;		Unchanged: 0/0
  1031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1032 ;;      Params:         0       0       0       0       0
  1033 ;;      Locals:         0       0       0       0       0
  1034 ;;      Temps:          0       0       0       0       0
  1035 ;;      Totals:         0       0       0       0       0
  1036 ;;Total ram usage:        0 bytes
  1037 ;; Hardware stack levels used:    1
  1038 ;; Hardware stack levels required when called:    2
  1039 ;; This function calls:
  1040 ;;		Nothing
  1041 ;; This function is called by:
  1042 ;;		_GsensorLoop
  1043 ;; This function uses a non-reentrant model
  1044 ;;
  1045                           
  1046                           
  1047                           ;psect for function _SensorTime
  1048  023B                     _SensorTime:	
  1049                           
  1050                           ;sensor.c: 35: if(Fbodysensor.bits.bit_0 == 1)
  1051                           
  1052                           ;incstack = 0
  1053                           ; Regs used in _SensorTime: [wreg+status,2+status,0]
  1054  023B  1C7A               	btfss	_Fbodysensor,0	;volatile
  1055  023C  2A5F               	goto	l6899
  1056                           
  1057                           ;sensor.c: 36: {
  1058                           ;sensor.c: 37: Fbodysensor.bits.bit_5 = 0;
  1059  023D  12FA               	bcf	_Fbodysensor,5	;volatile
  1060                           
  1061                           ;sensor.c: 38: CNTbodyExitTime = 0;
  1062  023E  01A8               	clrf	_CNTbodyExitTime	;volatile
  1063  023F  01A9               	clrf	_CNTbodyExitTime+1	;volatile
  1064                           
  1065                           ;sensor.c: 39: if(FledBits01.bits.bit_2 == 0)
  1066  0240  194C               	btfsc	_FledBits01,2	;volatile
  1067  0241  2A5A               	goto	l3829
  1068                           
  1069                           ;sensor.c: 40: {
  1070                           ;sensor.c: 41: if(++CNTbodyInTime >= 6000)
  1071  0242  0AAA               	incf	_CNTbodyInTime,f	;volatile
  1072  0243  1903               	skipnz
  1073  0244  0AAB               	incf	_CNTbodyInTime+1,f	;volatile
  1074  0245  3017               	movlw	23
  1075  0246  022B               	subwf	_CNTbodyInTime+1,w	;volatile
  1076  0247  3070               	movlw	112
  1077  0248  1903               	skipnz
  1078  0249  022A               	subwf	_CNTbodyInTime,w	;volatile
  1079  024A  1C03               	skipc
  1080  024B  2A52               	goto	l6893
  1081                           
  1082                           ;sensor.c: 42: {
  1083                           ;sensor.c: 43: CNTbodyInTime = 6000;
  1084  024C  3070               	movlw	112
  1085  024D  00AA               	movwf	_CNTbodyInTime	;volatile
  1086  024E  3017               	movlw	23
  1087  024F  00AB               	movwf	_CNTbodyInTime+1	;volatile
  1088                           
  1089                           ;sensor.c: 44: Fbodysensor.bits.bit_3 = 1;
  1090  0250  15FA               	bsf	_Fbodysensor,3	;volatile
  1091                           
  1092                           ;sensor.c: 45: }
  1093  0251  0008               	return
  1094  0252                     l6893:	
  1095                           
  1096                           ;sensor.c: 46: else if(CNTbodyInTime >= 500)
  1097  0252  3001               	movlw	1
  1098  0253  022B               	subwf	_CNTbodyInTime+1,w	;volatile
  1099  0254  30F4               	movlw	244
  1100  0255  1903               	skipnz
  1101  0256  022A               	subwf	_CNTbodyInTime,w	;volatile
  1102  0257  1803               	btfsc	3,0
  1103                           
  1104                           ;sensor.c: 47: {
  1105                           ;sensor.c: 48: Fbodysensor.bits.bit_4 = 1;
  1106  0258  167A               	bsf	_Fbodysensor,4	;volatile
  1107  0259  0008               	return
  1108  025A                     l3829:	
  1109                           
  1110                           ;sensor.c: 51: else
  1111                           ;sensor.c: 52: {
  1112                           ;sensor.c: 53: if(Fbodysensor.bits.bit_4 == 0)
  1113  025A  1A7A               	btfsc	_Fbodysensor,4	;volatile
  1114  025B  0008               	return
  1115                           
  1116                           ;sensor.c: 54: {
  1117                           ;sensor.c: 55: CNTbodyInTime = 0;
  1118  025C  01AA               	clrf	_CNTbodyInTime	;volatile
  1119  025D  01AB               	clrf	_CNTbodyInTime+1	;volatile
  1120                           
  1121                           ;sensor.c: 56: }
  1122                           ;sensor.c: 57: }
  1123                           ;sensor.c: 58: }
  1124  025E  0008               	return
  1125  025F                     l6899:	
  1126                           
  1127                           ;sensor.c: 59: else
  1128                           ;sensor.c: 60: {
  1129                           ;sensor.c: 61: CNTbodyInTime = 0;
  1130  025F  01AA               	clrf	_CNTbodyInTime	;volatile
  1131  0260  01AB               	clrf	_CNTbodyInTime+1	;volatile
  1132                           
  1133                           ;sensor.c: 62: Fbodysensor.bits.bit_4 = 0;
  1134  0261  127A               	bcf	_Fbodysensor,4	;volatile
  1135                           
  1136                           ;sensor.c: 63: Fbodysensor.bits.bit_3 = 0;
  1137  0262  11FA               	bcf	_Fbodysensor,3	;volatile
  1138                           
  1139                           ;sensor.c: 64: if(++CNTbodyExitTime >= 500)
  1140  0263  0AA8               	incf	_CNTbodyExitTime,f	;volatile
  1141  0264  1903               	skipnz
  1142  0265  0AA9               	incf	_CNTbodyExitTime+1,f	;volatile
  1143  0266  3001               	movlw	1
  1144  0267  0229               	subwf	_CNTbodyExitTime+1,w	;volatile
  1145  0268  30F4               	movlw	244
  1146  0269  1903               	skipnz
  1147  026A  0228               	subwf	_CNTbodyExitTime,w	;volatile
  1148  026B  1C03               	skipc
  1149  026C  0008               	return
  1150                           
  1151                           ;sensor.c: 65: {
  1152                           ;sensor.c: 66: CNTbodyExitTime = 500;
  1153  026D  30F4               	movlw	244
  1154  026E  00A8               	movwf	_CNTbodyExitTime	;volatile
  1155  026F  3001               	movlw	1
  1156  0270  00A9               	movwf	_CNTbodyExitTime+1	;volatile
  1157                           
  1158                           ;sensor.c: 67: Fbodysensor.bits.bit_5 = 1;
  1159  0271  16FA               	bsf	_Fbodysensor,5	;volatile
  1160  0272  0008               	return
  1161  0273                     __end_of_SensorTime:	
  1162  0273                     __ptext9:	
  1163 ;; *************** function _SensorControl *****************
  1164 ;; Defined at:
  1165 ;;		line 179 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\sensor.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;		None
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;		None
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      void 
  1172 ;; Registers used:
  1173 ;;		wreg
  1174 ;; Tracked objects:
  1175 ;;		On entry : 300/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1179 ;;      Params:         0       0       0       0       0
  1180 ;;      Locals:         0       0       0       0       0
  1181 ;;      Temps:          1       0       0       0       0
  1182 ;;      Totals:         1       0       0       0       0
  1183 ;;Total ram usage:        1 bytes
  1184 ;; Hardware stack levels used:    1
  1185 ;; Hardware stack levels required when called:    2
  1186 ;; This function calls:
  1187 ;;		Nothing
  1188 ;; This function is called by:
  1189 ;;		_GsensorLoop
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           
  1194                           ;psect for function _SensorControl
  1195  0273                     _SensorControl:	
  1196  0273                     l6965:	
  1197                           ;incstack = 0
  1198                           ; Regs used in _SensorControl: [wreg]
  1199                           
  1200                           
  1201                           ;sensor.c: 181: Fbodysensor.bits.bit_1 = 0;
  1202  0273  10FA               	bcf	_Fbodysensor,1	;volatile
  1203                           
  1204                           ;sensor.c: 182: Fbodysensor.bits.bit_2 = 0;
  1205  0274  117A               	bcf	_Fbodysensor,2	;volatile
  1206                           
  1207                           ;sensor.c: 183: if(Fbodysensor.bits.bit_6 != Fbodysensor.bits.bit_0)
  1208  0275  1C7A               	btfss	_Fbodysensor,0	;volatile
  1209  0276  2A79               	goto	u1520
  1210  0277  3001               	movlw	1
  1211  0278  2A7A               	goto	u1522
  1212  0279                     u1520:	
  1213  0279  3000               	movlw	0
  1214  027A                     u1522:	
  1215  027A  00F2               	movwf	??_SensorControl
  1216  027B  1F7A               	btfss	_Fbodysensor,6	;volatile
  1217  027C  2A7F               	goto	u1530
  1218  027D  3001               	movlw	1
  1219  027E  2A80               	goto	u1532
  1220  027F                     u1530:	
  1221  027F  3000               	movlw	0
  1222  0280                     u1532:	
  1223  0280  0672               	xorwf	??_SensorControl,w
  1224  0281  1903               	skipnz
  1225  0282  0008               	return
  1226                           
  1227                           ;sensor.c: 184: {
  1228                           ;sensor.c: 185: if(Fbodysensor.bits.bit_0 == 1)
  1229  0283  1C7A               	btfss	_Fbodysensor,0	;volatile
  1230  0284  2A87               	goto	l3866
  1231                           
  1232                           ;sensor.c: 186: {
  1233                           ;sensor.c: 187: Fbodysensor.bits.bit_1 = 1;
  1234  0285  14FA               	bsf	_Fbodysensor,1	;volatile
  1235                           
  1236                           ;sensor.c: 188: }
  1237  0286  2A88               	goto	l3867
  1238  0287                     l3866:	
  1239                           
  1240                           ;sensor.c: 189: else
  1241                           ;sensor.c: 190: {
  1242                           ;sensor.c: 191: Fbodysensor.bits.bit_2 = 1;
  1243  0287  157A               	bsf	_Fbodysensor,2	;volatile
  1244  0288                     l3867:	
  1245                           
  1246                           ;sensor.c: 192: }
  1247                           ;sensor.c: 193: Fbodysensor.bits.bit_6 = Fbodysensor.bits.bit_0;
  1248  0288  1C7A               	btfss	_Fbodysensor,0	;volatile
  1249  0289  2A8C               	goto	u1560
  1250  028A  177A               	bsf	_Fbodysensor,6	;volatile
  1251  028B  0008               	return
  1252  028C                     u1560:	
  1253  028C  137A               	bcf	_Fbodysensor,6	;volatile
  1254  028D  0008               	return
  1255  028E                     __end_of_SensorControl:	
  1256  028E                     __ptext8:	
  1257 ;; *************** function _SensorJudge *****************
  1258 ;; Defined at:
  1259 ;;		line 73 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\sensor.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;		None
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;		None
  1264 ;; Return value:  Size  Location     Type
  1265 ;;                  1    wreg      void 
  1266 ;; Registers used:
  1267 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1268 ;; Tracked objects:
  1269 ;;		On entry : 300/0
  1270 ;;		On exit  : 300/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1273 ;;      Params:         0       0       0       0       0
  1274 ;;      Locals:         0       0       0       0       0
  1275 ;;      Temps:          0       0       0       0       0
  1276 ;;      Totals:         0       0       0       0       0
  1277 ;;Total ram usage:        0 bytes
  1278 ;; Hardware stack levels used:    1
  1279 ;; Hardware stack levels required when called:    2
  1280 ;; This function calls:
  1281 ;;		Nothing
  1282 ;; This function is called by:
  1283 ;;		_GsensorLoop
  1284 ;; This function uses a non-reentrant model
  1285 ;;
  1286                           
  1287                           
  1288                           ;psect for function _SensorJudge
  1289  028E                     _SensorJudge:	
  1290                           
  1291                           ;sensor.c: 75: switch (SEQbody)
  1292                           
  1293                           ;incstack = 0
  1294                           ; Regs used in _SensorJudge: [wreg-fsr0h+status,2+status,0]
  1295  028E  2B0B               	goto	l6963
  1296  028F                     l3841:	
  1297                           ;sensor.c: 76: {
  1298                           ;sensor.c: 77: case 0:
  1299                           
  1300                           
  1301                           ;sensor.c: 78: Fbodysensor.bits.bit_0 = 0;
  1302  028F  107A               	bcf	_Fbodysensor,0	;volatile
  1303                           
  1304                           ;sensor.c: 79: FledBits01.bits.bit_2 = 0;
  1305  0290  114C               	bcf	_FledBits01,2	;volatile
  1306                           
  1307                           ;sensor.c: 110: }
  1308  0291  2AA0               	goto	l6913
  1309  0292                     l6925:	
  1310                           
  1311                           ;sensor.c: 111: else
  1312                           ;sensor.c: 112: {
  1313                           ;sensor.c: 113: if(++CNTbody_l >= 6)
  1314  0292  0AAE               	incf	_CNTbody_l,f	;volatile
  1315  0293  1903               	skipnz
  1316  0294  0AAF               	incf	_CNTbody_l+1,f	;volatile
  1317  0295  3000               	movlw	0
  1318  0296  022F               	subwf	_CNTbody_l+1,w	;volatile
  1319  0297  3006               	movlw	6
  1320  0298  1903               	skipnz
  1321  0299  022E               	subwf	_CNTbody_l,w	;volatile
  1322  029A  1C03               	skipc
  1323  029B  2AC2               	goto	l6931
  1324                           
  1325                           ;sensor.c: 114: {
  1326                           ;sensor.c: 115: CNTbody_h = 0;
  1327  029C  01B0               	clrf	_CNTbody_h	;volatile
  1328  029D  01B1               	clrf	_CNTbody_h+1	;volatile
  1329                           
  1330                           ;sensor.c: 116: CNTbody_l = 0;
  1331  029E  01AE               	clrf	_CNTbody_l	;volatile
  1332  029F  01AF               	clrf	_CNTbody_l+1	;volatile
  1333  02A0                     l6913:	
  1334                           
  1335                           ;sensor.c: 80: SEQbody = 1;
  1336  02A0  3001               	movlw	1
  1337  02A1  00C3               	movwf	_SEQbody	;volatile
  1338                           
  1339                           ;sensor.c: 81: break;
  1340  02A2  0008               	return
  1341  02A3                     l3843:	
  1342                           ;sensor.c: 84: case 1:
  1343                           
  1344                           
  1345                           ;sensor.c: 85: Fbodysensor.bits.bit_0 = 0;
  1346  02A3  107A               	bcf	_Fbodysensor,0	;volatile
  1347                           
  1348                           ;sensor.c: 86: FledBits01.bits.bit_2 = 0;
  1349  02A4  114C               	bcf	_FledBits01,2	;volatile
  1350                           
  1351                           ;sensor.c: 87: if(RB1 == 0)
  1352  02A5  1886               	btfsc	6,1	;volatile
  1353  02A6  2AB8               	goto	l6921
  1354                           
  1355                           ;sensor.c: 88: {
  1356                           ;sensor.c: 89: if(++CNTbody_h >= 3)
  1357  02A7  0AB0               	incf	_CNTbody_h,f	;volatile
  1358  02A8  1903               	skipnz
  1359  02A9  0AB1               	incf	_CNTbody_h+1,f	;volatile
  1360  02AA  3000               	movlw	0
  1361  02AB  0231               	subwf	_CNTbody_h+1,w	;volatile
  1362  02AC  3003               	movlw	3
  1363  02AD  1903               	skipnz
  1364  02AE  0230               	subwf	_CNTbody_h,w	;volatile
  1365  02AF  1C03               	skipc
  1366  02B0  0008               	return
  1367                           
  1368                           ;sensor.c: 90: {
  1369                           ;sensor.c: 91: CNTbody_h = 0;
  1370  02B1  01B0               	clrf	_CNTbody_h	;volatile
  1371  02B2  01B1               	clrf	_CNTbody_h+1	;volatile
  1372                           
  1373                           ;sensor.c: 92: CNTbody_l = 0;
  1374  02B3  01AE               	clrf	_CNTbody_l	;volatile
  1375  02B4  01AF               	clrf	_CNTbody_l+1	;volatile
  1376                           
  1377                           ;sensor.c: 93: SEQbody = 2;
  1378  02B5  3002               	movlw	2
  1379  02B6  00C3               	movwf	_SEQbody	;volatile
  1380                           
  1381                           ;sensor.c: 94: break;
  1382  02B7  0008               	return
  1383  02B8                     l6921:	
  1384                           
  1385                           ;sensor.c: 97: else
  1386                           ;sensor.c: 98: {
  1387                           ;sensor.c: 99: CNTbody_h = 0;
  1388  02B8  01B0               	clrf	_CNTbody_h	;volatile
  1389  02B9  01B1               	clrf	_CNTbody_h+1	;volatile
  1390  02BA  0008               	return
  1391  02BB                     l3847:	
  1392                           ;sensor.c: 104: case 2:
  1393                           
  1394                           
  1395                           ;sensor.c: 105: Fbodysensor.bits.bit_0 = 0;
  1396  02BB  107A               	bcf	_Fbodysensor,0	;volatile
  1397                           
  1398                           ;sensor.c: 106: FledBits01.bits.bit_2 = 0;
  1399  02BC  114C               	bcf	_FledBits01,2	;volatile
  1400                           
  1401                           ;sensor.c: 107: if(RB1 == 0)
  1402  02BD  1886               	btfsc	6,1	;volatile
  1403  02BE  2A92               	goto	l6925
  1404                           
  1405                           ;sensor.c: 108: {
  1406                           ;sensor.c: 109: ++CNTbody_h;
  1407  02BF  0AB0               	incf	_CNTbody_h,f	;volatile
  1408  02C0  1903               	skipnz
  1409  02C1  0AB1               	incf	_CNTbody_h+1,f	;volatile
  1410  02C2                     l6931:	
  1411                           
  1412                           ;sensor.c: 119: }
  1413                           ;sensor.c: 120: }
  1414                           ;sensor.c: 121: BufCntAdd = CNTbody_h +CNTbody_l;
  1415  02C2  231D  120A  118A   	fcall	PL8	;call to abstracted procedure
  1416                           
  1417                           ;sensor.c: 122: if(BufCntAdd >= 30)
  1418  02C5  3000               	movlw	0
  1419  02C6  022D               	subwf	_BufCntAdd+1,w	;volatile
  1420  02C7  301E               	movlw	30
  1421  02C8  1903               	skipnz
  1422  02C9  022C               	subwf	_BufCntAdd,w	;volatile
  1423  02CA  1C03               	skipc
  1424  02CB  0008               	return
  1425  02CC                     l6935:	
  1426                           
  1427                           ;sensor.c: 123: {
  1428                           ;sensor.c: 124: SEQbody = 3;
  1429  02CC  3003               	movlw	3
  1430  02CD  00C3               	movwf	_SEQbody	;volatile
  1431                           
  1432                           ;sensor.c: 125: break;
  1433  02CE  0008               	return
  1434  02CF                     l3852:	
  1435                           ;sensor.c: 129: case 3:
  1436                           
  1437                           
  1438                           ;sensor.c: 130: Fbodysensor.bits.bit_0 = 1;
  1439  02CF  147A               	bsf	_Fbodysensor,0	;volatile
  1440                           
  1441                           ;sensor.c: 131: FledBits01.bits.bit_2 = 0;
  1442  02D0  114C               	bcf	_FledBits01,2	;volatile
  1443                           
  1444                           ;sensor.c: 132: if(RB1 == 1)
  1445  02D1  1C86               	btfss	6,1	;volatile
  1446  02D2  2AE4               	goto	l6943
  1447                           
  1448                           ;sensor.c: 133: {
  1449                           ;sensor.c: 134: if(++CNTbody_l >= 3)
  1450  02D3  0AAE               	incf	_CNTbody_l,f	;volatile
  1451  02D4  1903               	skipnz
  1452  02D5  0AAF               	incf	_CNTbody_l+1,f	;volatile
  1453  02D6  3000               	movlw	0
  1454  02D7  022F               	subwf	_CNTbody_l+1,w	;volatile
  1455  02D8  3003               	movlw	3
  1456  02D9  1903               	skipnz
  1457  02DA  022E               	subwf	_CNTbody_l,w	;volatile
  1458  02DB  1C03               	skipc
  1459  02DC  0008               	return
  1460                           
  1461                           ;sensor.c: 135: {
  1462                           ;sensor.c: 136: CNTbody_h = 0;
  1463  02DD  01B0               	clrf	_CNTbody_h	;volatile
  1464  02DE  01B1               	clrf	_CNTbody_h+1	;volatile
  1465                           
  1466                           ;sensor.c: 137: CNTbody_l = 0;
  1467  02DF  01AE               	clrf	_CNTbody_l	;volatile
  1468  02E0  01AF               	clrf	_CNTbody_l+1	;volatile
  1469                           
  1470                           ;sensor.c: 138: SEQbody = 4;
  1471  02E1  3004               	movlw	4
  1472  02E2  00C3               	movwf	_SEQbody	;volatile
  1473                           
  1474                           ;sensor.c: 139: break;
  1475  02E3  0008               	return
  1476  02E4                     l6943:	
  1477                           
  1478                           ;sensor.c: 142: else
  1479                           ;sensor.c: 143: {
  1480                           ;sensor.c: 144: CNTbody_l = 0;
  1481  02E4  01AE               	clrf	_CNTbody_l	;volatile
  1482  02E5  01AF               	clrf	_CNTbody_l+1	;volatile
  1483  02E6  0008               	return
  1484  02E7                     l3856:	
  1485                           ;sensor.c: 148: case 4:
  1486                           
  1487                           
  1488                           ;sensor.c: 149: Fbodysensor.bits.bit_0 = 1;
  1489  02E7  147A               	bsf	_Fbodysensor,0	;volatile
  1490                           
  1491                           ;sensor.c: 150: FledBits01.bits.bit_2 = 1;
  1492  02E8  154C               	bsf	_FledBits01,2	;volatile
  1493                           
  1494                           ;sensor.c: 151: if(RB1 == 0)
  1495  02E9  1886               	btfsc	6,1	;volatile
  1496  02EA  2AFA               	goto	l6951
  1497                           
  1498                           ;sensor.c: 152: {
  1499                           ;sensor.c: 153: if(++CNTbody_h >= 6)
  1500  02EB  0AB0               	incf	_CNTbody_h,f	;volatile
  1501  02EC  1903               	skipnz
  1502  02ED  0AB1               	incf	_CNTbody_h+1,f	;volatile
  1503  02EE  3000               	movlw	0
  1504  02EF  0231               	subwf	_CNTbody_h+1,w	;volatile
  1505  02F0  3006               	movlw	6
  1506  02F1  1903               	skipnz
  1507  02F2  0230               	subwf	_CNTbody_h,w	;volatile
  1508  02F3  1C03               	skipc
  1509  02F4  2AFD               	goto	l6953
  1510                           
  1511                           ;sensor.c: 154: {
  1512                           ;sensor.c: 155: CNTbody_h = 0;
  1513  02F5  01B0               	clrf	_CNTbody_h	;volatile
  1514  02F6  01B1               	clrf	_CNTbody_h+1	;volatile
  1515                           
  1516                           ;sensor.c: 156: CNTbody_l = 0;
  1517  02F7  01AE               	clrf	_CNTbody_l	;volatile
  1518  02F8  01AF               	clrf	_CNTbody_l+1	;volatile
  1519  02F9  2ACC               	goto	l6935
  1520  02FA                     l6951:	
  1521                           
  1522                           ;sensor.c: 161: else
  1523                           ;sensor.c: 162: {
  1524                           ;sensor.c: 163: ++CNTbody_l;
  1525  02FA  0AAE               	incf	_CNTbody_l,f	;volatile
  1526  02FB  1903               	skipnz
  1527  02FC  0AAF               	incf	_CNTbody_l+1,f	;volatile
  1528  02FD                     l6953:	
  1529                           
  1530                           ;sensor.c: 164: }
  1531                           ;sensor.c: 165: BufCntAdd = CNTbody_h +CNTbody_l;
  1532  02FD  231D  120A  118A   	fcall	PL8	;call to abstracted procedure
  1533                           
  1534                           ;sensor.c: 166: if(BufCntAdd >= 500)
  1535  0300  3001               	movlw	1
  1536  0301  022D               	subwf	_BufCntAdd+1,w	;volatile
  1537  0302  30F4               	movlw	244
  1538  0303  1903               	skipnz
  1539  0304  022C               	subwf	_BufCntAdd,w	;volatile
  1540  0305  1C03               	skipc
  1541  0306  0008               	return
  1542  0307  2AA0               	goto	l6913
  1543  0308                     l6957:	
  1544                           
  1545                           ;sensor.c: 173: SEQbody = 0;
  1546  0308  01C3               	clrf	_SEQbody	;volatile
  1547                           
  1548                           ;sensor.c: 174: FledBits01.bits.bit_2 = 0;
  1549  0309  114C               	bcf	_FledBits01,2	;volatile
  1550                           
  1551                           ;sensor.c: 175: break;
  1552  030A  0008               	return
  1553  030B                     l6963:	
  1554  030B  0843               	movf	_SEQbody,w	;volatile
  1555                           
  1556                           ; Switch size 1, requested type "space"
  1557                           ; Number of cases is 5, Range of values is 0 to 4
  1558                           ; switch strategies available:
  1559                           ; Name         Instructions Cycles
  1560                           ; simple_byte           16     9 (average)
  1561                           ; direct_byte           23     8 (fixed)
  1562                           ; jumptable            260     6 (fixed)
  1563                           ;	Chosen strategy is simple_byte
  1564  030C  3A00               	xorlw	0	; case 0
  1565  030D  1903               	skipnz
  1566  030E  2A8F               	goto	l3841
  1567  030F  3A01               	xorlw	1	; case 1
  1568  0310  1903               	skipnz
  1569  0311  2AA3               	goto	l3843
  1570  0312  3A03               	xorlw	3	; case 2
  1571  0313  1903               	skipnz
  1572  0314  2ABB               	goto	l3847
  1573  0315  3A01               	xorlw	1	; case 3
  1574  0316  1903               	skipnz
  1575  0317  2ACF               	goto	l3852
  1576  0318  3A07               	xorlw	7	; case 4
  1577  0319  1903               	skipnz
  1578  031A  2AE7               	goto	l3856
  1579  031B  2B08               	goto	l6957
  1580  031C  0008               	return
  1581  031D                     __end_of_SensorJudge:	
  1582  031D                     PL8:	
  1583  031D  082E               	movf	_CNTbody_l,w	;volatile
  1584  031E  0730               	addwf	_CNTbody_h,w	;volatile
  1585  031F  00AC               	movwf	_BufCntAdd	;volatile
  1586  0320  082F               	movf	_CNTbody_l+1,w	;volatile
  1587  0321  1803               	skipnc
  1588  0322  0A2F               	incf	_CNTbody_l+1,w	;volatile
  1589  0323  0731               	addwf	_CNTbody_h+1,w	;volatile
  1590  0324  00AD               	movwf	_BufCntAdd+1	;volatile
  1591  0325  0008               	return
  1592  0326                     __end_ofPL8:	
  1593                           
  1594                           	psect	text10
  1595  0444                     __ptext10:	
  1596 ;; *************** function _GledLoop *****************
  1597 ;; Defined at:
  1598 ;;		line 16 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\light.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;		None
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;		None
  1603 ;; Return value:  Size  Location     Type
  1604 ;;                  1    wreg      void 
  1605 ;; Registers used:
  1606 ;;		status,2, status,0, pclath, cstack
  1607 ;; Tracked objects:
  1608 ;;		On entry : 300/0
  1609 ;;		On exit  : 300/0
  1610 ;;		Unchanged: 0/0
  1611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1612 ;;      Params:         0       0       0       0       0
  1613 ;;      Locals:         0       0       0       0       0
  1614 ;;      Temps:          0       0       0       0       0
  1615 ;;      Totals:         0       0       0       0       0
  1616 ;;Total ram usage:        0 bytes
  1617 ;; Hardware stack levels used:    1
  1618 ;; Hardware stack levels required when called:    3
  1619 ;; This function calls:
  1620 ;;		_LED_Con
  1621 ;;		_LED_Judge
  1622 ;;		_LED_Key
  1623 ;;		_LED_Time
  1624 ;; This function is called by:
  1625 ;;		_main
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           
  1630                           ;psect for function _GledLoop
  1631  0444                     _GledLoop:	
  1632                           
  1633                           ;light.c: 18: LED_Time();
  1634                           
  1635                           ;incstack = 0
  1636                           ; Regs used in _GledLoop: [status,2+status,0+pclath+cstack]
  1637  0444  244F  120A  118A   	fcall	_LED_Time
  1638                           
  1639                           ;light.c: 19: LED_Key();
  1640  0447  244E  120A  118A   	fcall	_LED_Key
  1641                           
  1642                           ;light.c: 20: LED_Judge();
  1643  044A  245C  120A  118A   	fcall	_LED_Judge
  1644                           
  1645                           ;light.c: 21: LED_Con();
  1646  044D  2C52               	ljmp	l6761
  1647  044E                     __end_of_GledLoop:	
  1648  044E                     __ptext12:	
  1649 ;; *************** function _LED_Key *****************
  1650 ;; Defined at:
  1651 ;;		line 24 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\light.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;		None
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;		None
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  1    wreg      void 
  1658 ;; Registers used:
  1659 ;;		None
  1660 ;; Tracked objects:
  1661 ;;		On entry : 300/0
  1662 ;;		On exit  : 300/0
  1663 ;;		Unchanged: 300/0
  1664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1665 ;;      Params:         0       0       0       0       0
  1666 ;;      Locals:         0       0       0       0       0
  1667 ;;      Temps:          0       0       0       0       0
  1668 ;;      Totals:         0       0       0       0       0
  1669 ;;Total ram usage:        0 bytes
  1670 ;; Hardware stack levels used:    1
  1671 ;; Hardware stack levels required when called:    2
  1672 ;; This function calls:
  1673 ;;		Nothing
  1674 ;; This function is called by:
  1675 ;;		_GledLoop
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           
  1680                           ;psect for function _LED_Key
  1681  044E                     _LED_Key:	
  1682                           
  1683                           ;incstack = 0
  1684                           ; Regs used in _LED_Key: []
  1685  044E  0008               	return
  1686  044F                     __end_of_LED_Key:	
  1687  044F                     __ptext11:	
  1688 ;; *************** function _LED_Time *****************
  1689 ;; Defined at:
  1690 ;;		line 45 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\light.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;		None
  1693 ;; Auto vars:     Size  Location     Type
  1694 ;;		None
  1695 ;; Return value:  Size  Location     Type
  1696 ;;                  1    wreg      void 
  1697 ;; Registers used:
  1698 ;;		None
  1699 ;; Tracked objects:
  1700 ;;		On entry : 300/0
  1701 ;;		On exit  : 300/0
  1702 ;;		Unchanged: 0/0
  1703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1704 ;;      Params:         0       0       0       0       0
  1705 ;;      Locals:         0       0       0       0       0
  1706 ;;      Temps:          0       0       0       0       0
  1707 ;;      Totals:         0       0       0       0       0
  1708 ;;Total ram usage:        0 bytes
  1709 ;; Hardware stack levels used:    1
  1710 ;; Hardware stack levels required when called:    2
  1711 ;; This function calls:
  1712 ;;		Nothing
  1713 ;; This function is called by:
  1714 ;;		_GledLoop
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           
  1719                           ;psect for function _LED_Time
  1720  044F                     _LED_Time:	
  1721                           
  1722                           ;light.c: 47: if(Fsys1m.bits.bit_0 == 1)
  1723                           
  1724                           ;incstack = 0
  1725                           ; Regs used in _LED_Time: []
  1726  044F  184D               	btfsc	_Fsys1m,0	;volatile
  1727                           
  1728                           ;light.c: 48: {
  1729                           ;light.c: 49: Fsys1m.bits.bit_0 = 0;
  1730  0450  104D               	bcf	_Fsys1m,0	;volatile
  1731  0451  0008               	return
  1732  0452                     __end_of_LED_Time:	
  1733  0452                     __ptext14:	
  1734 ;; *************** function _LED_Con *****************
  1735 ;; Defined at:
  1736 ;;		line 84 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\light.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;		None
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;		None
  1741 ;; Return value:  Size  Location     Type
  1742 ;;                  1    wreg      void 
  1743 ;; Registers used:
  1744 ;;		None
  1745 ;; Tracked objects:
  1746 ;;		On entry : 300/0
  1747 ;;		On exit  : 300/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1750 ;;      Params:         0       0       0       0       0
  1751 ;;      Locals:         0       0       0       0       0
  1752 ;;      Temps:          0       0       0       0       0
  1753 ;;      Totals:         0       0       0       0       0
  1754 ;;Total ram usage:        0 bytes
  1755 ;; Hardware stack levels used:    1
  1756 ;; Hardware stack levels required when called:    2
  1757 ;; This function calls:
  1758 ;;		Nothing
  1759 ;; This function is called by:
  1760 ;;		_GledLoop
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           
  1765                           ;psect for function _LED_Con
  1766  0452                     _LED_Con:	
  1767  0452                     l6761:	
  1768                           ;incstack = 0
  1769                           ; Regs used in _LED_Con: []
  1770                           
  1771                           
  1772                           ;light.c: 86: RA5 = FledBits01.bits.bit_0;
  1773  0452  1C4C               	btfss	_FledBits01,0	;volatile
  1774  0453  2C58               	goto	u1100
  1775  0454  1283               	bcf	3,5	;RP0=0, select bank0
  1776  0455  1303               	bcf	3,6	;RP1=0, select bank0
  1777  0456  1685               	bsf	5,5	;volatile
  1778  0457  0008               	return
  1779  0458                     u1100:	
  1780  0458  1283               	bcf	3,5	;RP0=0, select bank0
  1781  0459  1303               	bcf	3,6	;RP1=0, select bank0
  1782  045A  1285               	bcf	5,5	;volatile
  1783  045B  0008               	return
  1784  045C                     __end_of_LED_Con:	
  1785  045C                     __ptext13:	
  1786 ;; *************** function _LED_Judge *****************
  1787 ;; Defined at:
  1788 ;;		line 53 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\light.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;		None
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;		None
  1793 ;; Return value:  Size  Location     Type
  1794 ;;                  1    wreg      void 
  1795 ;; Registers used:
  1796 ;;		None
  1797 ;; Tracked objects:
  1798 ;;		On entry : 300/0
  1799 ;;		On exit  : 300/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1802 ;;      Params:         0       0       0       0       0
  1803 ;;      Locals:         0       0       0       0       0
  1804 ;;      Temps:          0       0       0       0       0
  1805 ;;      Totals:         0       0       0       0       0
  1806 ;;Total ram usage:        0 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; Hardware stack levels required when called:    2
  1809 ;; This function calls:
  1810 ;;		Nothing
  1811 ;; This function is called by:
  1812 ;;		_GledLoop
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           
  1817                           ;psect for function _LED_Judge
  1818  045C                     _LED_Judge:	
  1819                           
  1820                           ;light.c: 55: if(Fbodysensor.bits.bit_0 == 1)
  1821                           
  1822                           ;incstack = 0
  1823                           ; Regs used in _LED_Judge: []
  1824  045C  1C7A               	btfss	_Fbodysensor,0	;volatile
  1825  045D  2C62               	goto	l6759
  1826                           
  1827                           ;light.c: 56: {
  1828                           ;light.c: 57: FledBits01.bits.bit_0 = 1;
  1829  045E  144C               	bsf	_FledBits01,0	;volatile
  1830                           
  1831                           ;light.c: 58: if(Fbodysensor.bits.bit_4 == 0)
  1832  045F  1E7A               	btfss	_Fbodysensor,4	;volatile
  1833                           
  1834                           ;light.c: 59: {
  1835                           ;light.c: 60: if(FledBits01.bits.bit_2 == 1)
  1836  0460  1D4C               	btfss	_FledBits01,2	;volatile
  1837  0461  0008               	return
  1838  0462                     l6759:	
  1839                           
  1840                           ;light.c: 61: {
  1841                           ;light.c: 62: FledBits01.bits.bit_0 = 0;
  1842  0462  104C               	bcf	_FledBits01,0	;volatile
  1843  0463  0008               	return
  1844  0464                     __end_of_LED_Judge:	
  1845                           
  1846                           	psect	text15
  1847  001C                     __ptext15:	
  1848 ;; *************** function _GflushLoop *****************
  1849 ;; Defined at:
  1850 ;;		line 15 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\flush.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;		None
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;		None
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  1    wreg      void 
  1857 ;; Registers used:
  1858 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 300/0
  1861 ;;		On exit  : 300/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1864 ;;      Params:         0       0       0       0       0
  1865 ;;      Locals:         0       0       0       0       0
  1866 ;;      Temps:          0       0       0       0       0
  1867 ;;      Totals:         0       0       0       0       0
  1868 ;;Total ram usage:        0 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    5
  1871 ;; This function calls:
  1872 ;;		_FlushCon
  1873 ;;		_FlushJudge
  1874 ;;		_FlushTime
  1875 ;; This function is called by:
  1876 ;;		_main
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           
  1881                           ;psect for function _GflushLoop
  1882  001C                     _GflushLoop:	
  1883                           
  1884                           ;flush.c: 17: FlushTime();
  1885                           
  1886                           ;incstack = 0
  1887                           ; Regs used in _GflushLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1888  001C  2023  120A  118A   	fcall	_FlushTime
  1889                           
  1890                           ;flush.c: 18: FlushJudge();
  1891  001F  20EC  120A  118A   	fcall	_FlushJudge
  1892                           
  1893                           ;flush.c: 19: FlushCon();
  1894  0022  2824               	ljmp	l6799
  1895  0023                     __end_of_GflushLoop:	
  1896  0023                     __ptext16:	
  1897 ;; *************** function _FlushTime *****************
  1898 ;; Defined at:
  1899 ;;		line 22 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\flush.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;		None
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;		None
  1904 ;; Return value:  Size  Location     Type
  1905 ;;                  1    wreg      void 
  1906 ;; Registers used:
  1907 ;;		None
  1908 ;; Tracked objects:
  1909 ;;		On entry : 300/0
  1910 ;;		On exit  : 300/0
  1911 ;;		Unchanged: 300/0
  1912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1913 ;;      Params:         0       0       0       0       0
  1914 ;;      Locals:         0       0       0       0       0
  1915 ;;      Temps:          0       0       0       0       0
  1916 ;;      Totals:         0       0       0       0       0
  1917 ;;Total ram usage:        0 bytes
  1918 ;; Hardware stack levels used:    1
  1919 ;; Hardware stack levels required when called:    2
  1920 ;; This function calls:
  1921 ;;		Nothing
  1922 ;; This function is called by:
  1923 ;;		_GflushLoop
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           
  1928                           ;psect for function _FlushTime
  1929  0023                     _FlushTime:	
  1930                           
  1931                           ;incstack = 0
  1932                           ; Regs used in _FlushTime: []
  1933  0023  0008               	return
  1934  0024                     __end_of_FlushTime:	
  1935  0024                     __ptext21:	
  1936 ;; *************** function _FlushCon *****************
  1937 ;; Defined at:
  1938 ;;		line 107 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\flush.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;		None
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;		None
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  1    wreg      void 
  1945 ;; Registers used:
  1946 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1947 ;; Tracked objects:
  1948 ;;		On entry : 300/0
  1949 ;;		On exit  : 300/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1952 ;;      Params:         0       0       0       0       0
  1953 ;;      Locals:         0       0       0       0       0
  1954 ;;      Temps:          0       0       0       0       0
  1955 ;;      Totals:         0       0       0       0       0
  1956 ;;Total ram usage:        0 bytes
  1957 ;; Hardware stack levels used:    1
  1958 ;; Hardware stack levels required when called:    2
  1959 ;; This function calls:
  1960 ;;		Nothing
  1961 ;; This function is called by:
  1962 ;;		_GflushLoop
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966                           
  1967                           ;psect for function _FlushCon
  1968  0024                     _FlushCon:	
  1969  0024                     l6799:	
  1970                           ;incstack = 0
  1971                           ; Regs used in _FlushCon: [wreg-fsr0h+status,2+status,0]
  1972                           
  1973                           
  1974                           ;flush.c: 109: switch (SEQflsuh)
  1975  0024  28C8               	goto	l6877
  1976  0025                     l2876:	
  1977                           ;flush.c: 110: {
  1978                           ;flush.c: 111: case FLUSH_INIT_0:
  1979                           
  1980                           
  1981                           ;flush.c: 112: Fflush1.bits.bit_6 = 0;
  1982  0025  1346               	bcf	_Fflush1,6	;volatile
  1983                           
  1984                           ;flush.c: 113: RA2 = 0;
  1985  0026  1105               	bcf	5,2	;volatile
  1986                           
  1987                           ;flush.c: 114: RA4 = 0;
  1988  0027  1205               	bcf	5,4	;volatile
  1989                           
  1990                           ;flush.c: 115: RA1 = 0;
  1991  0028  1085               	bcf	5,1	;volatile
  1992                           
  1993                           ;flush.c: 116: if((Fflush1.bits.bit_1 == 1) || (Fflush1.bits.bit_3 == 1))
  1994  0029  18C6               	btfsc	_Fflush1,1	;volatile
  1995  002A  282D               	goto	l6803
  1996  002B  1DC6               	btfss	_Fflush1,3	;volatile
  1997  002C  0008               	return
  1998  002D                     l6803:	
  1999                           
  2000                           ;flush.c: 117: {
  2001                           ;flush.c: 118: SEQflsuh = FLUSH_INIT_1;
  2002  002D  3001               	movlw	1
  2003  002E  2830               	goto	L15
  2004  002F                     l6807:	
  2005                           
  2006                           ;flush.c: 128: {
  2007                           ;flush.c: 129: SEQflsuh = FLUSH_END_0;
  2008  002F  3009               	movlw	9
  2009  0030                     L15:	
  2010  0030  00C5               	movwf	_SEQflsuh	;volatile
  2011                           
  2012                           ;flush.c: 119: CNTflush = 0;
  2013  0031  01B2               	clrf	_CNTflush	;volatile
  2014  0032  01B3               	clrf	_CNTflush+1	;volatile
  2015  0033  0008               	return
  2016  0034                     l2881:	
  2017                           ;flush.c: 122: case FLUSH_INIT_1:
  2018                           
  2019                           
  2020                           ;flush.c: 123: Fflush1.bits.bit_6 = 1;
  2021  0034  1746               	bsf	_Fflush1,6	;volatile
  2022                           
  2023                           ;flush.c: 124: RA2 = 0;
  2024  0035  1105               	bcf	5,2	;volatile
  2025                           
  2026                           ;flush.c: 125: RA4 = 0;
  2027  0036  1205               	bcf	5,4	;volatile
  2028                           
  2029                           ;flush.c: 126: RA1 = 0;
  2030  0037  1085               	bcf	5,1	;volatile
  2031                           
  2032                           ;flush.c: 127: if(Fbodysensor.bits.bit_0 == 1)
  2033  0038  187A               	btfsc	_Fbodysensor,0	;volatile
  2034  0039  282F               	goto	l6807
  2035                           
  2036                           ;flush.c: 132: }
  2037                           ;flush.c: 133: if(++CNTflush >= 5)
  2038  003A  0AB2               	incf	_CNTflush,f	;volatile
  2039  003B  1903               	skipnz
  2040  003C  0AB3               	incf	_CNTflush+1,f	;volatile
  2041  003D  3000               	movlw	0
  2042  003E  0233               	subwf	_CNTflush+1,w	;volatile
  2043  003F  3005               	movlw	5
  2044  0040  1903               	skipnz
  2045  0041  0232               	subwf	_CNTflush,w	;volatile
  2046  0042  1C03               	skipc
  2047  0043  0008               	return
  2048                           
  2049                           ;flush.c: 134: {
  2050                           ;flush.c: 135: CNTflush = 0;
  2051  0044  01B2               	clrf	_CNTflush	;volatile
  2052  0045  01B3               	clrf	_CNTflush+1	;volatile
  2053                           
  2054                           ;flush.c: 136: SEQflsuh = FLUSH_INIT_2;
  2055  0046  3002               	movlw	2
  2056  0047  00C5               	movwf	_SEQflsuh	;volatile
  2057  0048  0008               	return
  2058  0049                     l2884:	
  2059                           ;flush.c: 139: case FLUSH_INIT_2:
  2060                           
  2061                           
  2062                           ;flush.c: 140: Fflush1.bits.bit_6 = 1;
  2063  0049  1746               	bsf	_Fflush1,6	;volatile
  2064                           
  2065                           ;flush.c: 141: RA2 = 0;
  2066  004A  1105               	bcf	5,2	;volatile
  2067                           
  2068                           ;flush.c: 142: RA4 = 0;
  2069  004B  1205               	bcf	5,4	;volatile
  2070                           
  2071                           ;flush.c: 143: RA1 = 0;
  2072  004C  1085               	bcf	5,1	;volatile
  2073                           
  2074                           ;flush.c: 144: if(Fbodysensor.bits.bit_0 == 1)
  2075  004D  187A               	btfsc	_Fbodysensor,0	;volatile
  2076  004E  282F               	goto	l6807
  2077                           
  2078                           ;flush.c: 149: }
  2079                           ;flush.c: 151: if(Fflush1.bits.bit_1 == 1)
  2080  004F  1CC6               	btfss	_Fflush1,1	;volatile
  2081  0050  2854               	goto	l2886
  2082                           
  2083                           ;flush.c: 152: {
  2084                           ;flush.c: 153: SEQflsuh = FLUSH_BIG_0;
  2085  0051  3003               	movlw	3
  2086  0052  00C5               	movwf	_SEQflsuh	;volatile
  2087                           
  2088                           ;flush.c: 154: }
  2089  0053  0008               	return
  2090  0054                     l2886:	
  2091                           
  2092                           ;flush.c: 155: else if(Fflush1.bits.bit_3 == 1)
  2093  0054  1DC6               	btfss	_Fflush1,3	;volatile
  2094  0055  0008               	return
  2095                           
  2096                           ;flush.c: 156: {
  2097                           ;flush.c: 157: SEQflsuh = FLUSH_SML_0;
  2098  0056  3006               	movlw	6
  2099  0057  00C5               	movwf	_SEQflsuh	;volatile
  2100  0058  0008               	return
  2101  0059                     l2889:	
  2102                           ;flush.c: 160: case FLUSH_BIG_0:
  2103                           
  2104                           
  2105                           ;flush.c: 161: Fflush1.bits.bit_6 = 1;
  2106                           
  2107                           ;flush.c: 162: RA2 = 0;
  2108                           
  2109                           ;flush.c: 163: RA4 = 1;
  2110                           
  2111                           ;flush.c: 164: RA1 = 1;
  2112                           
  2113                           ;flush.c: 165: if(++CNTflush >= 10)
  2114  0059  221F  120A  118A   	fcall	PL4	;call to abstracted procedure
  2115  005C  1903               	skipnz
  2116  005D  0232               	subwf	_CNTflush,w	;volatile
  2117  005E  1C03               	skipc
  2118  005F  0008               	return
  2119                           
  2120                           ;flush.c: 166: {
  2121                           ;flush.c: 167: CNTflush = 0;
  2122  0060  01B2               	clrf	_CNTflush	;volatile
  2123  0061  01B3               	clrf	_CNTflush+1	;volatile
  2124                           
  2125                           ;flush.c: 168: SEQflsuh = FLUSH_BIG_1;
  2126  0062  3004               	movlw	4
  2127  0063  00C5               	movwf	_SEQflsuh	;volatile
  2128  0064  0008               	return
  2129  0065                     l2891:	
  2130                           ;flush.c: 171: case FLUSH_BIG_1:
  2131                           
  2132                           
  2133                           ;flush.c: 172: Fflush1.bits.bit_6 = 1;
  2134  0065  1746               	bsf	_Fflush1,6	;volatile
  2135                           
  2136                           ;flush.c: 173: RA2 = 1;
  2137  0066  1505               	bsf	5,2	;volatile
  2138                           
  2139                           ;flush.c: 174: RA4 = 1;
  2140  0067  1605               	bsf	5,4	;volatile
  2141                           
  2142                           ;flush.c: 175: RA1 = 1;
  2143  0068  1485               	bsf	5,1	;volatile
  2144                           
  2145                           ;flush.c: 177: if(++CNTflush >= 100)
  2146  0069  0AB2               	incf	_CNTflush,f	;volatile
  2147  006A  1903               	skipnz
  2148  006B  0AB3               	incf	_CNTflush+1,f	;volatile
  2149  006C  3000               	movlw	0
  2150  006D  0233               	subwf	_CNTflush+1,w	;volatile
  2151  006E  3064               	movlw	100
  2152  006F  1903               	skipnz
  2153  0070  0232               	subwf	_CNTflush,w	;volatile
  2154  0071  1C03               	skipc
  2155  0072  0008               	return
  2156                           
  2157                           ;flush.c: 178: {
  2158                           ;flush.c: 179: CNTflush = 0;
  2159  0073  01B2               	clrf	_CNTflush	;volatile
  2160  0074  01B3               	clrf	_CNTflush+1	;volatile
  2161                           
  2162                           ;flush.c: 180: SEQflsuh = FLUSH_BIG_2;
  2163  0075  3005               	movlw	5
  2164  0076  00C5               	movwf	_SEQflsuh	;volatile
  2165  0077  0008               	return
  2166  0078                     l2893:	
  2167                           ;flush.c: 191: case FLUSH_BIG_2:
  2168                           
  2169                           
  2170                           ;flush.c: 192: Fflush1.bits.bit_6 = 1;
  2171                           
  2172                           ;flush.c: 193: RA2 = 0;
  2173                           
  2174                           ;flush.c: 194: RA4 = 1;
  2175                           
  2176                           ;flush.c: 195: RA1 = 1;
  2177                           
  2178                           ;flush.c: 196: if(++CNTflush >= 10)
  2179  0078  221F  120A  118A   	fcall	PL4	;call to abstracted procedure
  2180  007B                     L14:	
  2181  007B  1903               	skipnz
  2182  007C  0232               	subwf	_CNTflush,w	;volatile
  2183  007D  1C03               	skipc
  2184  007E  0008               	return
  2185                           
  2186                           ;flush.c: 197: {
  2187                           ;flush.c: 198: CNTflush = 0;
  2188  007F  01B2               	clrf	_CNTflush	;volatile
  2189  0080  01B3               	clrf	_CNTflush+1	;volatile
  2190                           
  2191                           ;flush.c: 199: SEQflsuh = FLUSH_END_0;
  2192  0081  3009               	movlw	9
  2193  0082  00C5               	movwf	_SEQflsuh	;volatile
  2194  0083  0008               	return
  2195  0084                     l2895:	
  2196                           ;flush.c: 203: case FLUSH_SML_0:
  2197                           
  2198                           
  2199                           ;flush.c: 204: Fflush1.bits.bit_6 = 1;
  2200                           
  2201                           ;flush.c: 205: RA2 = 0;
  2202                           
  2203                           ;flush.c: 206: RA4 = 1;
  2204                           
  2205                           ;flush.c: 207: RA1 = 0;
  2206                           
  2207                           ;flush.c: 208: if(++CNTflush >= 5)
  2208  0084  2215  120A  118A   	fcall	PL2	;call to abstracted procedure
  2209  0087  1903               	skipnz
  2210  0088  0232               	subwf	_CNTflush,w	;volatile
  2211  0089  1C03               	skipc
  2212  008A  0008               	return
  2213                           
  2214                           ;flush.c: 209: {
  2215                           ;flush.c: 210: CNTflush = 0;
  2216  008B  01B2               	clrf	_CNTflush	;volatile
  2217  008C  01B3               	clrf	_CNTflush+1	;volatile
  2218                           
  2219                           ;flush.c: 211: SEQflsuh = FLUSH_SML_1;
  2220  008D  3007               	movlw	7
  2221  008E  00C5               	movwf	_SEQflsuh	;volatile
  2222  008F  0008               	return
  2223  0090                     l2897:	
  2224                           ;flush.c: 214: case FLUSH_SML_1:
  2225                           
  2226                           
  2227                           ;flush.c: 215: Fflush1.bits.bit_6 = 1;
  2228  0090  1746               	bsf	_Fflush1,6	;volatile
  2229                           
  2230                           ;flush.c: 216: RA2 = 1;
  2231  0091  1505               	bsf	5,2	;volatile
  2232                           
  2233                           ;flush.c: 217: RA4 = 1;
  2234  0092  1605               	bsf	5,4	;volatile
  2235                           
  2236                           ;flush.c: 218: RA1 = 0;
  2237                           
  2238                           ;flush.c: 220: if(++CNTflush >= 100)
  2239  0093  2229  120A  118A   	fcall	PL6	;call to abstracted procedure
  2240  0096  3064               	movlw	100
  2241  0097  1903               	skipnz
  2242  0098  0232               	subwf	_CNTflush,w	;volatile
  2243  0099  1C03               	skipc
  2244  009A  0008               	return
  2245                           
  2246                           ;flush.c: 221: {
  2247                           ;flush.c: 222: CNTflush = 0;
  2248  009B  01B2               	clrf	_CNTflush	;volatile
  2249  009C  01B3               	clrf	_CNTflush+1	;volatile
  2250                           
  2251                           ;flush.c: 223: SEQflsuh = FLUSH_SML_2;
  2252  009D  3008               	movlw	8
  2253  009E  00C5               	movwf	_SEQflsuh	;volatile
  2254  009F  0008               	return
  2255  00A0                     l2899:	
  2256                           ;flush.c: 226: case FLUSH_SML_2:
  2257                           
  2258                           
  2259                           ;flush.c: 227: Fflush1.bits.bit_6 = 1;
  2260                           
  2261                           ;flush.c: 228: RA2 = 0;
  2262                           
  2263                           ;flush.c: 229: RA4 = 1;
  2264                           
  2265                           ;flush.c: 230: RA1 = 0;
  2266                           
  2267                           ;flush.c: 231: if(++CNTflush >= 5)
  2268  00A0  2215  120A  118A   	fcall	PL2	;call to abstracted procedure
  2269  00A3  287B               	goto	L14
  2270  00A4                     l2901:	
  2271                           ;flush.c: 238: case FLUSH_END_0:
  2272                           
  2273                           
  2274                           ;flush.c: 239: Fflush1.bits.bit_6 = 1;
  2275  00A4  1746               	bsf	_Fflush1,6	;volatile
  2276                           
  2277                           ;flush.c: 240: RA2 = 0;
  2278  00A5  1105               	bcf	5,2	;volatile
  2279                           
  2280                           ;flush.c: 241: RA4 = 0;
  2281  00A6  1205               	bcf	5,4	;volatile
  2282                           
  2283                           ;flush.c: 242: RA1 = 0;
  2284                           
  2285                           ;flush.c: 243: if(++CNTflush >= 5)
  2286  00A7  2229  120A  118A   	fcall	PL6	;call to abstracted procedure
  2287  00AA  3005               	movlw	5
  2288  00AB  1903               	skipnz
  2289  00AC  0232               	subwf	_CNTflush,w	;volatile
  2290  00AD  1C03               	skipc
  2291  00AE  0008               	return
  2292                           
  2293                           ;flush.c: 244: {
  2294                           ;flush.c: 245: CNTflush = 0;
  2295  00AF  01B2               	clrf	_CNTflush	;volatile
  2296  00B0  01B3               	clrf	_CNTflush+1	;volatile
  2297                           
  2298                           ;flush.c: 246: SEQflsuh = FLUSH_END_1;
  2299  00B1  300A               	movlw	10
  2300  00B2  00C5               	movwf	_SEQflsuh	;volatile
  2301  00B3  0008               	return
  2302  00B4                     l2903:	
  2303                           ;flush.c: 249: case FLUSH_END_1:
  2304                           
  2305                           
  2306                           ;flush.c: 250: Fflush1.bits.bit_6 = 0;
  2307  00B4  1346               	bcf	_Fflush1,6	;volatile
  2308                           
  2309                           ;flush.c: 251: RA2 = 0;
  2310  00B5  1105               	bcf	5,2	;volatile
  2311                           
  2312                           ;flush.c: 252: RA4 = 0;
  2313  00B6  1205               	bcf	5,4	;volatile
  2314                           
  2315                           ;flush.c: 253: RA1 = 0;
  2316  00B7  1085               	bcf	5,1	;volatile
  2317                           
  2318                           ;flush.c: 254: SEQflsuh = FLUSH_INIT_0;
  2319  00B8  01C5               	clrf	_SEQflsuh	;volatile
  2320                           
  2321                           ;flush.c: 255: CNTflush = 0;
  2322  00B9  01B2               	clrf	_CNTflush	;volatile
  2323  00BA  01B3               	clrf	_CNTflush+1	;volatile
  2324                           
  2325                           ;flush.c: 256: Fflush1.bits.bit_1 = 0;
  2326  00BB  10C6               	bcf	_Fflush1,1	;volatile
  2327                           
  2328                           ;flush.c: 257: Fflush1.bits.bit_3 = 0;
  2329  00BC  11C6               	bcf	_Fflush1,3	;volatile
  2330                           
  2331                           ;flush.c: 258: break;
  2332  00BD  0008               	return
  2333  00BE                     l2904:	
  2334                           ;flush.c: 259: default:
  2335                           
  2336                           
  2337                           ;flush.c: 260: Fflush1.bits.bit_6 = 0;
  2338  00BE  1346               	bcf	_Fflush1,6	;volatile
  2339                           
  2340                           ;flush.c: 261: RA2 = 0;
  2341  00BF  1105               	bcf	5,2	;volatile
  2342                           
  2343                           ;flush.c: 262: RA4 = 0;
  2344  00C0  1205               	bcf	5,4	;volatile
  2345                           
  2346                           ;flush.c: 263: RA1 = 0;
  2347  00C1  1085               	bcf	5,1	;volatile
  2348                           
  2349                           ;flush.c: 264: Fflush1.bits.bit_1 = 0;
  2350  00C2  10C6               	bcf	_Fflush1,1	;volatile
  2351                           
  2352                           ;flush.c: 265: Fflush1.bits.bit_3 = 0;
  2353  00C3  11C6               	bcf	_Fflush1,3	;volatile
  2354                           
  2355                           ;flush.c: 266: SEQflsuh = FLUSH_INIT_0;
  2356  00C4  01C5               	clrf	_SEQflsuh	;volatile
  2357                           
  2358                           ;flush.c: 267: CNTflush = 0;
  2359  00C5  01B2               	clrf	_CNTflush	;volatile
  2360  00C6  01B3               	clrf	_CNTflush+1	;volatile
  2361                           
  2362                           ;flush.c: 268: break;
  2363  00C7  0008               	return
  2364  00C8                     l6877:	
  2365  00C8  0845               	movf	_SEQflsuh,w	;volatile
  2366                           
  2367                           ; Switch size 1, requested type "space"
  2368                           ; Number of cases is 11, Range of values is 0 to 10
  2369                           ; switch strategies available:
  2370                           ; Name         Instructions Cycles
  2371                           ; simple_byte           34    18 (average)
  2372                           ; direct_byte           41     8 (fixed)
  2373                           ; jumptable            260     6 (fixed)
  2374                           ;	Chosen strategy is simple_byte
  2375  00C9  3A00               	xorlw	0	; case 0
  2376  00CA  1903               	skipnz
  2377  00CB  2825               	goto	l2876
  2378  00CC  3A01               	xorlw	1	; case 1
  2379  00CD  1903               	skipnz
  2380  00CE  2834               	goto	l2881
  2381  00CF  3A03               	xorlw	3	; case 2
  2382  00D0  1903               	skipnz
  2383  00D1  2849               	goto	l2884
  2384  00D2  3A01               	xorlw	1	; case 3
  2385  00D3  1903               	skipnz
  2386  00D4  2859               	goto	l2889
  2387  00D5  3A07               	xorlw	7	; case 4
  2388  00D6  1903               	skipnz
  2389  00D7  2865               	goto	l2891
  2390  00D8  3A01               	xorlw	1	; case 5
  2391  00D9  1903               	skipnz
  2392  00DA  2878               	goto	l2893
  2393  00DB  3A03               	xorlw	3	; case 6
  2394  00DC  1903               	skipnz
  2395  00DD  2884               	goto	l2895
  2396  00DE  3A01               	xorlw	1	; case 7
  2397  00DF  1903               	skipnz
  2398  00E0  2890               	goto	l2897
  2399  00E1  3A0F               	xorlw	15	; case 8
  2400  00E2  1903               	skipnz
  2401  00E3  28A0               	goto	l2899
  2402  00E4  3A01               	xorlw	1	; case 9
  2403  00E5  1903               	skipnz
  2404  00E6  28A4               	goto	l2901
  2405  00E7  3A03               	xorlw	3	; case 10
  2406  00E8  1903               	skipnz
  2407  00E9  28B4               	goto	l2903
  2408  00EA  28BE               	goto	l2904
  2409  00EB  0008               	return
  2410  00EC                     __end_of_FlushCon:	
  2411  00EC                     __ptext17:	
  2412 ;; *************** function _FlushJudge *****************
  2413 ;; Defined at:
  2414 ;;		line 26 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\flush.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;		None
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;  Key_Step        1    6[COMMON] unsigned char 
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  1    wreg      void 
  2421 ;; Registers used:
  2422 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2423 ;; Tracked objects:
  2424 ;;		On entry : 300/0
  2425 ;;		On exit  : 300/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2428 ;;      Params:         0       0       0       0       0
  2429 ;;      Locals:         1       0       0       0       0
  2430 ;;      Temps:          0       0       0       0       0
  2431 ;;      Totals:         1       0       0       0       0
  2432 ;;Total ram usage:        1 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    4
  2435 ;; This function calls:
  2436 ;;		_GkeyLoop
  2437 ;; This function is called by:
  2438 ;;		_GflushLoop
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           
  2443                           ;psect for function _FlushJudge
  2444  00EC                     _FlushJudge:	
  2445                           
  2446                           ;flush.c: 31: if(Fbodysensor.bits.bit_3 == 1)
  2447                           
  2448                           ;incstack = 0
  2449                           ; Regs used in _FlushJudge: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2450  00EC  1DFA               	btfss	_Fbodysensor,3	;volatile
  2451  00ED  28F1               	goto	l2859
  2452                           
  2453                           ;flush.c: 32: {
  2454                           ;flush.c: 33: Fflush1.bits.bit_0 = 1;
  2455  00EE  1446               	bsf	_Fflush1,0	;volatile
  2456                           
  2457                           ;flush.c: 34: Fflush1.bits.bit_2 = 0;
  2458  00EF  1146               	bcf	_Fflush1,2	;volatile
  2459                           
  2460                           ;flush.c: 35: }
  2461  00F0  2907               	goto	l2860
  2462  00F1                     l2859:	
  2463                           
  2464                           ;flush.c: 36: else if(Fbodysensor.bits.bit_4 == 1)
  2465  00F1  1E7A               	btfss	_Fbodysensor,4	;volatile
  2466  00F2  28F5               	goto	l7237
  2467                           
  2468                           ;flush.c: 37: {
  2469                           ;flush.c: 38: Fflush1.bits.bit_2 = 1;
  2470  00F3  1546               	bsf	_Fflush1,2	;volatile
  2471  00F4  28F9               	goto	L1
  2472  00F5                     l7237:	
  2473                           ;flush.c: 40: }
  2474                           
  2475                           ;flush.c: 39: Fflush1.bits.bit_0 = 0;
  2476                           
  2477                           
  2478                           ;flush.c: 41: else if (SEQflsuh)
  2479  00F5  0845               	movf	_SEQflsuh,w	;volatile
  2480  00F6  1903               	btfsc	3,2
  2481  00F7  28FB               	goto	l7241
  2482  00F8                     l7239:	
  2483                           
  2484                           ;flush.c: 42: {
  2485                           ;flush.c: 43: Fflush1.bits.bit_2 = 0;
  2486  00F8  1146               	bcf	_Fflush1,2	;volatile
  2487  00F9                     L1:	
  2488                           
  2489                           ;flush.c: 44: Fflush1.bits.bit_0 = 0;
  2490  00F9  1046               	bcf	_Fflush1,0	;volatile
  2491                           
  2492                           ;flush.c: 45: }
  2493  00FA  2907               	goto	l2860
  2494  00FB                     l7241:	
  2495                           
  2496                           ;flush.c: 46: else
  2497                           ;flush.c: 47: {
  2498                           ;flush.c: 48: Key_Step = GkeyLoop();
  2499  00FB  211B  120A  118A   	fcall	_GkeyLoop
  2500  00FE  00F6               	movwf	FlushJudge@Key_Step
  2501                           
  2502                           ;flush.c: 49: if (Key_Step)
  2503  00FF  0876               	movf	FlushJudge@Key_Step,w
  2504  0100  1903               	btfsc	3,2
  2505  0101  28F8               	goto	l7239
  2506                           
  2507                           ;flush.c: 50: {
  2508                           ;flush.c: 51: SEQflsuh = Key_Step;
  2509  0102  0876               	movf	FlushJudge@Key_Step,w
  2510  0103  00C5               	movwf	_SEQflsuh	;volatile
  2511                           
  2512                           ;flush.c: 52: CNTflush = 0;
  2513  0104  01B2               	clrf	_CNTflush	;volatile
  2514  0105  01B3               	clrf	_CNTflush+1	;volatile
  2515                           
  2516                           ;flush.c: 53: Fflush1.bits.bit_7 = 1;
  2517  0106  17C6               	bsf	_Fflush1,7	;volatile
  2518  0107                     l2860:	
  2519                           ;flush.c: 54: }else
  2520                           
  2521                           
  2522                           ;flush.c: 58: }
  2523                           ;flush.c: 59: }
  2524                           ;flush.c: 76: if (Fbodysensor.bits.bit_2 == 1)
  2525  0107  197A               	btfsc	_Fbodysensor,2	;volatile
  2526                           
  2527                           ;flush.c: 77: {
  2528                           ;flush.c: 78: Fflush1.bits.bit_7 = 1;
  2529  0108  17C6               	bsf	_Fflush1,7	;volatile
  2530                           
  2531                           ;flush.c: 79: }
  2532                           ;flush.c: 80: if (Fflush1.bits.bit_7 == 1)
  2533  0109  1FC6               	btfss	_Fflush1,7	;volatile
  2534  010A  0008               	return
  2535                           
  2536                           ;flush.c: 81: {
  2537                           ;flush.c: 82: if (Fflush1.bits.bit_6 == 1)
  2538  010B  1F46               	btfss	_Fflush1,6	;volatile
  2539  010C  2910               	goto	l2869
  2540                           
  2541                           ;flush.c: 83: {
  2542                           ;flush.c: 84: Fflush1.bits.bit_2 = 0;
  2543  010D  1146               	bcf	_Fflush1,2	;volatile
  2544                           
  2545                           ;flush.c: 85: Fflush1.bits.bit_0 = 0;
  2546  010E  1046               	bcf	_Fflush1,0	;volatile
  2547                           
  2548                           ;flush.c: 86: return;
  2549  010F  0008               	return
  2550  0110                     l2869:	
  2551                           
  2552                           ;flush.c: 87: }
  2553                           ;flush.c: 88: Fflush1.bits.bit_7 = 0;
  2554  0110  13C6               	bcf	_Fflush1,7	;volatile
  2555                           
  2556                           ;flush.c: 89: if(Fflush1.bits.bit_0 == 1)
  2557  0111  1C46               	btfss	_Fflush1,0	;volatile
  2558  0112  2916               	goto	l2871
  2559                           
  2560                           ;flush.c: 90: {
  2561                           ;flush.c: 91: Fflush1.bits.bit_0 = 0;
  2562  0113  1046               	bcf	_Fflush1,0	;volatile
  2563                           
  2564                           ;flush.c: 92: Fflush1.bits.bit_1 = 1;
  2565  0114  14C6               	bsf	_Fflush1,1	;volatile
  2566                           
  2567                           ;flush.c: 93: return;
  2568  0115  0008               	return
  2569  0116                     l2871:	
  2570                           
  2571                           ;flush.c: 94: }
  2572                           ;flush.c: 95: if(Fflush1.bits.bit_2 == 1)
  2573  0116  1D46               	btfss	_Fflush1,2	;volatile
  2574  0117  0008               	return
  2575                           
  2576                           ;flush.c: 96: {
  2577                           ;flush.c: 97: Fflush1.bits.bit_2 = 0;
  2578  0118  1146               	bcf	_Fflush1,2	;volatile
  2579                           
  2580                           ;flush.c: 98: Fflush1.bits.bit_3 = 1;
  2581  0119  15C6               	bsf	_Fflush1,3	;volatile
  2582  011A  0008               	return
  2583  011B                     __end_of_FlushJudge:	
  2584  011B                     __ptext18:	
  2585 ;; *************** function _GkeyLoop *****************
  2586 ;; Defined at:
  2587 ;;		line 7 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\key.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;		None
  2590 ;; Auto vars:     Size  Location     Type
  2591 ;;		None
  2592 ;; Return value:  Size  Location     Type
  2593 ;;                  1    wreg      unsigned char 
  2594 ;; Registers used:
  2595 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2596 ;; Tracked objects:
  2597 ;;		On entry : 300/0
  2598 ;;		On exit  : 300/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2601 ;;      Params:         0       0       0       0       0
  2602 ;;      Locals:         0       0       0       0       0
  2603 ;;      Temps:          2       0       0       0       0
  2604 ;;      Totals:         2       0       0       0       0
  2605 ;;Total ram usage:        2 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; Hardware stack levels required when called:    3
  2608 ;; This function calls:
  2609 ;;		_KeyControl
  2610 ;;		_ScanKey
  2611 ;; This function is called by:
  2612 ;;		_FlushJudge
  2613 ;; This function uses a non-reentrant model
  2614 ;;
  2615                           
  2616                           
  2617                           ;psect for function _GkeyLoop
  2618  011B                     _GkeyLoop:	
  2619                           
  2620                           ;key.c: 9: for ( SeletedLine = 0; SeletedLine < 2; SeletedLine++)
  2621                           
  2622                           ;incstack = 0
  2623                           ; Regs used in _GkeyLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2624  011B  01F9               	clrf	_SeletedLine	;volatile
  2625  011C                     L7:	
  2626  011C  3002               	movlw	2
  2627  011D  0279               	subwf	_SeletedLine,w	;volatile
  2628  011E  1803               	btfsc	3,0
  2629  011F  3400               	retlw	0
  2630                           
  2631                           ;key.c: 10: {
  2632                           ;key.c: 11: KeyLines[SeletedLine].flags.level =ScanKey(SeletedLine);
  2633  0120  0879               	movf	_SeletedLine,w	;volatile
  2634  0121  2202  120A  118A   	fcall	_ScanKey
  2635  0124  00F4               	movwf	??_GkeyLoop
  2636  0125  0879               	movf	_SeletedLine,w	;volatile
  2637  0126  00F5               	movwf	??_GkeyLoop+1
  2638  0127  3001               	movlw	1
  2639  0128  1003               	clrc
  2640  0129                     L2:	
  2641  0129  0DF5               	rlf	??_GkeyLoop+1,f
  2642  012A  3EFF               	addlw	-1
  2643  012B  1003               	clrc
  2644  012C  1D03               	skipz
  2645  012D  2929               	goto	L2
  2646  012E  0D75               	rlf	??_GkeyLoop+1,w
  2647  012F  3E50               	addlw	(low (_KeyLines| 0))& (0+255)
  2648  0130  0084               	movwf	4
  2649  0131  0DF4               	rlf	??_GkeyLoop,f
  2650  0132  0DF4               	rlf	??_GkeyLoop,f
  2651  0133  1383               	bcf	3,7	;select IRP bank0
  2652  0134  0800               	movf	0,w
  2653  0135  0674               	xorwf	??_GkeyLoop,w
  2654  0136  39FB               	andlw	-5
  2655  0137  0674               	xorwf	??_GkeyLoop,w
  2656  0138  0080               	movwf	0
  2657                           
  2658                           ;key.c: 13: if(KeyLines[SeletedLine].flags.is_forbidden)
  2659  0139  0879               	movf	_SeletedLine,w	;volatile
  2660  013A  00F4               	movwf	??_GkeyLoop
  2661  013B  3001               	movlw	1
  2662  013C  1003               	clrc
  2663  013D                     L3:	
  2664  013D  0DF4               	rlf	??_GkeyLoop,f
  2665  013E  3EFF               	addlw	-1
  2666  013F  1003               	clrc
  2667  0140  1D03               	skipz
  2668  0141  293D               	goto	L3
  2669  0142  0D74               	rlf	??_GkeyLoop,w
  2670  0143  3E50               	addlw	(low (_KeyLines| 0))& (0+255)
  2671  0144  0084               	movwf	4
  2672  0145  1C00               	btfss	0,0
  2673  0146  2963               	goto	l7205
  2674                           
  2675                           ;key.c: 14: {
  2676                           ;key.c: 15: if (KeyLines[SeletedLine].flags.level)
  2677  0147  0879               	movf	_SeletedLine,w	;volatile
  2678  0148  00F4               	movwf	??_GkeyLoop
  2679  0149  3001               	movlw	1
  2680  014A  1003               	clrc
  2681  014B                     L4:	
  2682  014B  0DF4               	rlf	??_GkeyLoop,f
  2683  014C  3EFF               	addlw	-1
  2684  014D  1003               	clrc
  2685  014E  1D03               	skipz
  2686  014F  294B               	goto	L4
  2687  0150  0D74               	rlf	??_GkeyLoop,w
  2688  0151  3E50               	addlw	(low (_KeyLines| 0))& (0+255)
  2689  0152  0084               	movwf	4
  2690  0153  1D00               	btfss	0,2
  2691  0154  2983               	goto	l7221
  2692                           
  2693                           ;key.c: 16: {
  2694                           ;key.c: 17: KeyLines[SeletedLine].flags.is_forbidden = 0;
  2695  0155  0879               	movf	_SeletedLine,w	;volatile
  2696  0156  00F4               	movwf	??_GkeyLoop
  2697  0157  3001               	movlw	1
  2698  0158  1003               	clrc
  2699  0159                     L5:	
  2700  0159  0DF4               	rlf	??_GkeyLoop,f
  2701  015A  3EFF               	addlw	-1
  2702  015B  1003               	clrc
  2703  015C  1D03               	skipz
  2704  015D  2959               	goto	L5
  2705  015E  0D74               	rlf	??_GkeyLoop,w
  2706  015F  3E50               	addlw	(low (_KeyLines| 0))& (0+255)
  2707  0160  0084               	movwf	4
  2708  0161  1000               	bcf	0,0
  2709  0162  2983               	goto	l7221
  2710  0163                     l7205:	
  2711                           
  2712                           ;key.c: 20: }
  2713                           ;key.c: 21: if (KeyControl(&KeyLines[SeletedLine]))
  2714  0163  0879               	movf	_SeletedLine,w	;volatile
  2715  0164  00F4               	movwf	??_GkeyLoop
  2716  0165  3001               	movlw	1
  2717  0166  1003               	clrc
  2718  0167                     L6:	
  2719  0167  0DF4               	rlf	??_GkeyLoop,f
  2720  0168  3EFF               	addlw	-1
  2721  0169  1003               	clrc
  2722  016A  1D03               	skipz
  2723  016B  2967               	goto	L6
  2724  016C  0D74               	rlf	??_GkeyLoop,w
  2725  016D  3E50               	addlw	(low (_KeyLines| 0))& (0+255)
  2726  016E  2185  120A  118A   	fcall	_KeyControl
  2727  0171  3A00               	xorlw	0
  2728  0172  1D03               	btfss	3,2
  2729  0173  297B               	goto	l7219
  2730  0174  2983               	goto	l7221
  2731  0175                     l5720:	
  2732                           ;key.c: 24: {
  2733                           ;key.c: 25: case PortA:
  2734                           
  2735                           
  2736                           ;key.c: 26: Fflush1.bits.bit_0 = 1;
  2737  0175  1446               	bsf	_Fflush1,0	;volatile
  2738                           
  2739                           ;key.c: 27: KeyLines[PortB].flags.is_forbidden = 1;
  2740  0176  1454               	bsf	_KeyLines+4,0	;volatile
  2741                           
  2742                           ;key.c: 28: return FLUSH_BIG_0;
  2743  0177  3403               	retlw	3
  2744  0178                     l5722:	
  2745                           ;key.c: 29: case PortB:
  2746                           
  2747                           
  2748                           ;key.c: 30: Fflush1.bits.bit_2 = 1;
  2749  0178  1546               	bsf	_Fflush1,2	;volatile
  2750                           
  2751                           ;key.c: 31: KeyLines[PortA].flags.is_forbidden = 1;
  2752  0179  1450               	bsf	_KeyLines,0	;volatile
  2753                           
  2754                           ;key.c: 32: return FLUSH_SML_0;
  2755  017A  3406               	retlw	6
  2756  017B                     l7219:	
  2757  017B  0879               	movf	_SeletedLine,w	;volatile
  2758                           
  2759                           ; Switch size 1, requested type "space"
  2760                           ; Number of cases is 2, Range of values is 0 to 1
  2761                           ; switch strategies available:
  2762                           ; Name         Instructions Cycles
  2763                           ; simple_byte            7     4 (average)
  2764                           ; direct_byte           14     8 (fixed)
  2765                           ; jumptable            260     6 (fixed)
  2766                           ;	Chosen strategy is simple_byte
  2767  017C  3A00               	xorlw	0	; case 0
  2768  017D  1903               	skipnz
  2769  017E  2975               	goto	l5720
  2770  017F  3A01               	xorlw	1	; case 1
  2771  0180  1903               	skipnz
  2772  0181  2978               	goto	l5722
  2773  0182  2983               	goto	l7221
  2774  0183                     l7221:	
  2775  0183  0AF9               	incf	_SeletedLine,f	;volatile
  2776  0184  291C               	goto	L7
  2777  0185                     __end_of_GkeyLoop:	
  2778                           ;key.c: 38: }
  2779                           ;key.c: 39: }
  2780                           ;key.c: 40: return 0;
  2781                           
  2782  0185                     __ptext20:	
  2783 ;; *************** function _KeyControl *****************
  2784 ;; Defined at:
  2785 ;;		line 58 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\key.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;  this            1    wreg     PTR struct _KEY_PRIVATE
  2788 ;;		 -> KeyLines(8), 
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;  this            1    6[BANK0 ] PTR struct _KEY_PRIVATE
  2791 ;;		 -> KeyLines(8), 
  2792 ;; Return value:  Size  Location     Type
  2793 ;;                  1    wreg      unsigned char 
  2794 ;; Registers used:
  2795 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2796 ;; Tracked objects:
  2797 ;;		On entry : B00/0
  2798 ;;		On exit  : B00/0
  2799 ;;		Unchanged: 0/0
  2800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2801 ;;      Params:         0       0       0       0       0
  2802 ;;      Locals:         0       7       0       0       0
  2803 ;;      Temps:          2       0       0       0       0
  2804 ;;      Totals:         2       7       0       0       0
  2805 ;;Total ram usage:        9 bytes
  2806 ;; Hardware stack levels used:    1
  2807 ;; Hardware stack levels required when called:    2
  2808 ;; This function calls:
  2809 ;;		Nothing
  2810 ;; This function is called by:
  2811 ;;		_GkeyLoop
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815                           
  2816                           ;psect for function _KeyControl
  2817  0185                     _KeyControl:	
  2818                           
  2819                           ;incstack = 0
  2820                           ; Regs used in _KeyControl: [wreg-fsr0h+status,2+status,0]
  2821                           ;KeyControl@this stored from wreg
  2822  0185  00DE               	movwf	KeyControl@this
  2823                           
  2824                           ;key.c: 60: if(!(this->flags.level))
  2825  0186  0084               	movwf	4
  2826                           
  2827                           ;key.c: 61: {
  2828                           ;key.c: 62: if (this->flags.is_pressing)
  2829  0187  085E               	movf	KeyControl@this,w
  2830  0188  1900               	btfsc	0,2
  2831  0189  29DB               	goto	L11
  2832  018A  0084               	movwf	4
  2833                           
  2834                           ;key.c: 63: {
  2835                           ;key.c: 64: this->cnt = 0;
  2836  018B  0A5E               	incf	KeyControl@this,w
  2837  018C  1C80               	btfss	0,1
  2838  018D  29C0               	goto	L12
  2839  018E  0084               	movwf	4
  2840  018F  0180               	clrf	0
  2841                           
  2842                           ;key.c: 66: if (((++(this->cnt_timeout)) > (600)?(0 == ((this->cnt_timeout) = 0)):0))
  2843  0190  085E               	movf	KeyControl@this,w
  2844  0191  3E02               	addlw	2
  2845  0192  0084               	movwf	4
  2846  0193  3001               	movlw	1
  2847  0194  0780               	addwf	0,f
  2848  0195  0A84               	incf	4,f
  2849  0196  1803               	skipnc
  2850  0197  0A80               	incf	0,f
  2851  0198  0384               	decf	4,f
  2852  0199  0800               	movf	0,w
  2853  019A  00F2               	movwf	??_KeyControl
  2854  019B  0A84               	incf	4,f
  2855  019C  0800               	movf	0,w
  2856  019D  00F3               	movwf	??_KeyControl+1
  2857  019E  3002               	movlw	2
  2858  019F  0273               	subwf	??_KeyControl+1,w
  2859  01A0  3059               	movlw	89
  2860  01A1  1903               	skipnz
  2861  01A2  0272               	subwf	??_KeyControl,w
  2862  01A3  1803               	skipnc
  2863  01A4  29A7               	goto	l7151
  2864  01A5  01D8               	clrf	_KeyControl$3137
  2865  01A6  29B7               	goto	L8
  2866  01A7                     l7151:	
  2867  01A7  085E               	movf	KeyControl@this,w
  2868  01A8  3E02               	addlw	2
  2869  01A9  0084               	movwf	4
  2870  01AA  0180               	clrf	0
  2871  01AB  0A84               	incf	4,f
  2872  01AC  0180               	clrf	0
  2873  01AD  01F2               	clrf	??_KeyControl
  2874  01AE  01F3               	clrf	??_KeyControl+1
  2875  01AF  0872               	movf	??_KeyControl,w
  2876  01B0  0473               	iorwf	??_KeyControl+1,w
  2877  01B1  1D03               	btfss	3,2
  2878  01B2  29B5               	goto	u1840
  2879  01B3  3001               	movlw	1
  2880  01B4  29B6               	goto	u1850
  2881  01B5                     u1840:	
  2882  01B5  3000               	movlw	0
  2883  01B6                     u1850:	
  2884  01B6  00D8               	movwf	_KeyControl$3137
  2885  01B7                     L8:	
  2886  01B7  01D9               	clrf	_KeyControl$3137+1
  2887  01B8  0858               	movf	_KeyControl$3137,w
  2888  01B9  0459               	iorwf	_KeyControl$3137+1,w
  2889  01BA  1903               	btfsc	3,2
  2890  01BB  3400               	retlw	0
  2891                           
  2892                           ;key.c: 67: {
  2893                           ;key.c: 68: this->flags.is_forbidden = 1;
  2894  01BC  085E               	movf	KeyControl@this,w
  2895  01BD  0084               	movwf	4
  2896  01BE  1400               	bsf	0,0
  2897  01BF  3400               	retlw	0
  2898  01C0                     L12:	
  2899                           ;key.c: 72: {
  2900                           ;key.c: 73: if (((++(this->cnt)) > (10)?(0 == ((this->cnt) = 0)):0))
  2901                           
  2902  01C0  0084               	movwf	4
  2903  01C1  300B               	movlw	11
  2904  01C2  0A80               	incf	0,f
  2905  01C3  0200               	subwf	0,w
  2906  01C4  1803               	skipnc
  2907  01C5  29C8               	goto	l7161
  2908  01C6  01DA               	clrf	_KeyControl$3138
  2909  01C7  29D1               	goto	L9
  2910  01C8                     l7161:	
  2911  01C8  0A5E               	incf	KeyControl@this,w
  2912  01C9  0084               	movwf	4
  2913  01CA  0180               	clrf	0
  2914  01CB  1D03               	btfss	3,2
  2915  01CC  29CF               	goto	u1880
  2916  01CD  3001               	movlw	1
  2917  01CE  29D0               	goto	u1890
  2918  01CF                     u1880:	
  2919  01CF  3000               	movlw	0
  2920  01D0                     u1890:	
  2921  01D0  00DA               	movwf	_KeyControl$3138
  2922  01D1                     L9:	
  2923  01D1  01DB               	clrf	_KeyControl$3138+1
  2924  01D2  085A               	movf	_KeyControl$3138,w
  2925  01D3  045B               	iorwf	_KeyControl$3138+1,w
  2926  01D4  1903               	btfsc	3,2
  2927  01D5  3400               	retlw	0
  2928                           
  2929                           ;key.c: 74: {
  2930                           ;key.c: 75: this->flags.is_pressing = 1;
  2931  01D6  085E               	movf	KeyControl@this,w
  2932  01D7  0084               	movwf	4
  2933  01D8  3001               	movlw	1
  2934  01D9  1480               	bsf	0,1
  2935                           
  2936                           ;key.c: 76: return 1;
  2937  01DA  0008               	return
  2938  01DB                     L11:	
  2939                           ;key.c: 81: else
  2940                           ;key.c: 82: {
  2941                           ;key.c: 83: if (this->flags.is_pressing)
  2942                           
  2943  01DB  0084               	movwf	4
  2944                           
  2945                           ;key.c: 84: {
  2946                           ;key.c: 85: if (((++(this->cnt)) > (10)?(0 == ((this->cnt) = 0)):0))
  2947  01DC  0A5E               	incf	KeyControl@this,w
  2948  01DD  1C80               	btfss	0,1
  2949  01DE  29F9               	goto	L13
  2950  01DF  0084               	movwf	4
  2951  01E0  300B               	movlw	11
  2952  01E1  0A80               	incf	0,f
  2953  01E2  0200               	subwf	0,w
  2954  01E3  1803               	skipnc
  2955  01E4  29E7               	goto	l7177
  2956  01E5  01DC               	clrf	_KeyControl$3139
  2957  01E6  29F0               	goto	L10
  2958  01E7                     l7177:	
  2959  01E7  0A5E               	incf	KeyControl@this,w
  2960  01E8  0084               	movwf	4
  2961  01E9  0180               	clrf	0
  2962  01EA  1D03               	btfss	3,2
  2963  01EB  29EE               	goto	u1930
  2964  01EC  3001               	movlw	1
  2965  01ED  29EF               	goto	u1940
  2966  01EE                     u1930:	
  2967  01EE  3000               	movlw	0
  2968  01EF                     u1940:	
  2969  01EF  00DC               	movwf	_KeyControl$3139
  2970  01F0                     L10:	
  2971  01F0  01DD               	clrf	_KeyControl$3139+1
  2972  01F1  085C               	movf	_KeyControl$3139,w
  2973  01F2  045D               	iorwf	_KeyControl$3139+1,w
  2974  01F3  1903               	btfsc	3,2
  2975  01F4  3400               	retlw	0
  2976                           
  2977                           ;key.c: 86: {
  2978                           ;key.c: 87: this->flags.is_pressing = 0;
  2979  01F5  085E               	movf	KeyControl@this,w
  2980  01F6  0084               	movwf	4
  2981  01F7  1080               	bcf	0,1
  2982  01F8  3400               	retlw	0
  2983  01F9                     L13:	
  2984                           ;key.c: 90: {
  2985                           ;key.c: 91: this->cnt = 0;
  2986                           
  2987  01F9  0084               	movwf	4
  2988  01FA  0180               	clrf	0
  2989                           
  2990                           ;key.c: 92: this->cnt_timeout = 0;
  2991  01FB  085E               	movf	KeyControl@this,w
  2992  01FC  3E02               	addlw	2
  2993  01FD  0084               	movwf	4
  2994  01FE  0180               	clrf	0
  2995  01FF  0A84               	incf	4,f
  2996  0200  0180               	clrf	0
  2997                           
  2998                           ;key.c: 93: }
  2999                           ;key.c: 95: }
  3000                           ;key.c: 96: return 0;
  3001  0201  3400               	retlw	0
  3002  0202                     __end_of_KeyControl:	
  3003  0202                     __ptext19:	
  3004 ;; *************** function _ScanKey *****************
  3005 ;; Defined at:
  3006 ;;		line 45 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\key.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  line_num        1    wreg     enum E872
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  line_num        1    2[COMMON] enum E872
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  1    wreg      unsigned char 
  3013 ;; Registers used:
  3014 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3015 ;; Tracked objects:
  3016 ;;		On entry : 300/0
  3017 ;;		On exit  : 300/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3020 ;;      Params:         0       0       0       0       0
  3021 ;;      Locals:         1       0       0       0       0
  3022 ;;      Temps:          0       0       0       0       0
  3023 ;;      Totals:         1       0       0       0       0
  3024 ;;Total ram usage:        1 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:    2
  3027 ;; This function calls:
  3028 ;;		Nothing
  3029 ;; This function is called by:
  3030 ;;		_GkeyLoop
  3031 ;; This function uses a non-reentrant model
  3032 ;;
  3033                           
  3034                           
  3035                           ;psect for function _ScanKey
  3036  0202                     _ScanKey:	
  3037                           
  3038                           ;incstack = 0
  3039                           ; Regs used in _ScanKey: [wreg-fsr0h+status,2+status,0]
  3040                           ;ScanKey@line_num stored from wreg
  3041  0202  00F2               	movwf	ScanKey@line_num
  3042                           
  3043                           ;key.c: 47: switch (line_num)
  3044  0203  2A0C               	goto	l6651
  3045  0204                     l6641:	
  3046                           
  3047                           ;key.c: 50: return RA6;
  3048  0204  3000               	movlw	0
  3049  0205  1B05               	btfsc	5,6	;volatile
  3050  0206  3001               	movlw	1
  3051  0207  0008               	return
  3052  0208                     l6645:	
  3053                           
  3054                           ;key.c: 52: return RB0;
  3055  0208  3000               	movlw	0
  3056  0209  1806               	btfsc	6,0	;volatile
  3057  020A  3001               	movlw	1
  3058  020B  0008               	return
  3059  020C                     l6651:	
  3060  020C  0872               	movf	ScanKey@line_num,w
  3061                           
  3062                           ; Switch size 1, requested type "space"
  3063                           ; Number of cases is 2, Range of values is 0 to 1
  3064                           ; switch strategies available:
  3065                           ; Name         Instructions Cycles
  3066                           ; simple_byte            7     4 (average)
  3067                           ; direct_byte           14     8 (fixed)
  3068                           ; jumptable            260     6 (fixed)
  3069                           ;	Chosen strategy is simple_byte
  3070  020D  3A00               	xorlw	0	; case 0
  3071  020E  1903               	skipnz
  3072  020F  2A04               	goto	l6641
  3073  0210  3A01               	xorlw	1	; case 1
  3074  0211  1903               	skipnz
  3075  0212  2A08               	goto	l6645
  3076  0213  2A14               	goto	l5729
  3077  0214                     l5729:	
  3078  0214  0008               	return
  3079  0215                     __end_of_ScanKey:	
  3080  0215                     PL2:	
  3081  0215  1746               	bsf	_Fflush1,6	;volatile
  3082  0216  1105               	bcf	5,2	;volatile
  3083  0217  1605               	bsf	5,4	;volatile
  3084  0218  1085               	bcf	5,1	;volatile
  3085  0219  0AB2               	incf	_CNTflush,f	;volatile
  3086  021A  1903               	skipnz
  3087  021B  0AB3               	incf	_CNTflush+1,f	;volatile
  3088  021C  3000               	movlw	0
  3089  021D  0233               	subwf	_CNTflush+1,w	;volatile
  3090  021E  3405               	retlw	5
  3091  021F                     __end_ofPL2:	
  3092  021F                     PL4:	
  3093  021F  1746               	bsf	_Fflush1,6	;volatile
  3094  0220  1105               	bcf	5,2	;volatile
  3095  0221  1605               	bsf	5,4	;volatile
  3096  0222  1485               	bsf	5,1	;volatile
  3097  0223  0AB2               	incf	_CNTflush,f	;volatile
  3098  0224  1903               	skipnz
  3099  0225  0AB3               	incf	_CNTflush+1,f	;volatile
  3100  0226  3000               	movlw	0
  3101  0227  0233               	subwf	_CNTflush+1,w	;volatile
  3102  0228  340A               	retlw	10
  3103  0229                     __end_ofPL4:	
  3104  0229                     PL6:	
  3105  0229  1085               	bcf	5,1	;volatile
  3106  022A  0AB2               	incf	_CNTflush,f	;volatile
  3107  022B  1903               	skipnz
  3108  022C  0AB3               	incf	_CNTflush+1,f	;volatile
  3109  022D  3000               	movlw	0
  3110  022E  0233               	subwf	_CNTflush+1,w	;volatile
  3111  022F  0008               	return
  3112  0230                     __end_ofPL6:	
  3113                           
  3114                           	psect	text22
  3115  0395                     __ptext22:	
  3116 ;; *************** function _FCTloop *****************
  3117 ;; Defined at:
  3118 ;;		line 20 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\fct.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;		None
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;		None
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  1    wreg      void 
  3125 ;; Registers used:
  3126 ;;		wreg, status,2, status,0, pclath, cstack
  3127 ;; Tracked objects:
  3128 ;;		On entry : 300/0
  3129 ;;		On exit  : 300/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3132 ;;      Params:         0       0       0       0       0
  3133 ;;      Locals:         0       0       0       0       0
  3134 ;;      Temps:          0       0       0       0       0
  3135 ;;      Totals:         0       0       0       0       0
  3136 ;;Total ram usage:        0 bytes
  3137 ;; Hardware stack levels used:    1
  3138 ;; Hardware stack levels required when called:    4
  3139 ;; This function calls:
  3140 ;;		_FCTjudge
  3141 ;;		_FCTkey
  3142 ;; This function is called by:
  3143 ;;		_main
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147                           
  3148                           ;psect for function _FCTloop
  3149  0395                     _FCTloop:	
  3150                           
  3151                           ;fct.c: 22: FCTkey();
  3152                           
  3153                           ;incstack = 0
  3154                           ; Regs used in _FCTloop: [wreg+status,2+status,0+pclath+cstack]
  3155  0395  23C0  120A  118A   	fcall	_FCTkey
  3156                           
  3157                           ;fct.c: 23: FCTjudge();
  3158  0398  2B99               	ljmp	l6987
  3159  0399                     __end_of_FCTloop:	
  3160  0399                     __ptext24:	
  3161 ;; *************** function _FCTjudge *****************
  3162 ;; Defined at:
  3163 ;;		line 80 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\fct.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;		None
  3166 ;; Auto vars:     Size  Location     Type
  3167 ;;		None
  3168 ;; Return value:  Size  Location     Type
  3169 ;;                  1    wreg      void 
  3170 ;; Registers used:
  3171 ;;		status,2, status,0, pclath, cstack
  3172 ;; Tracked objects:
  3173 ;;		On entry : 300/0
  3174 ;;		On exit  : 300/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3177 ;;      Params:         0       0       0       0       0
  3178 ;;      Locals:         0       0       0       0       0
  3179 ;;      Temps:          0       0       0       0       0
  3180 ;;      Totals:         0       0       0       0       0
  3181 ;;Total ram usage:        0 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; Hardware stack levels required when called:    3
  3184 ;; This function calls:
  3185 ;;		_G_KEY
  3186 ;;		_R_KEY
  3187 ;;		_key1
  3188 ;;		_key2
  3189 ;; This function is called by:
  3190 ;;		_FCTloop
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           
  3195                           ;psect for function _FCTjudge
  3196  0399                     _FCTjudge:	
  3197  0399                     l6987:	
  3198                           ;incstack = 0
  3199                           ; Regs used in _FCTjudge: [status,2+status,0+pclath+cstack]
  3200                           
  3201                           
  3202                           ;fct.c: 82: if(fctBits001.bits.bit_0 == 1)
  3203  0399  1C4B               	btfss	_fctBits001,0	;volatile
  3204  039A  2BA5               	goto	l4801
  3205                           
  3206                           ;fct.c: 83: {
  3207                           ;fct.c: 84: if(RB1 == 0)
  3208  039B  1886               	btfsc	6,1	;volatile
  3209  039C  2B9E               	goto	l4802
  3210                           
  3211                           ;fct.c: 85: {
  3212                           ;fct.c: 86: R_KEY();
  3213  039D  2BB1               	ljmp	l6743
  3214  039E                     l4802:	
  3215                           ;fct.c: 87: }
  3216                           
  3217                           
  3218                           ;fct.c: 88: else
  3219                           ;fct.c: 89: {
  3220                           ;fct.c: 90: if(RA6 == 0)
  3221  039E  1B05               	btfsc	5,6	;volatile
  3222  039F  2BA1               	goto	l4804
  3223                           
  3224                           ;fct.c: 91: {
  3225                           ;fct.c: 92: key1();
  3226  03A0  2BB6               	ljmp	l6745
  3227  03A1                     l4804:	
  3228                           ;fct.c: 93: }
  3229                           
  3230                           
  3231                           ;fct.c: 94: else
  3232                           ;fct.c: 95: {
  3233                           ;fct.c: 96: if(RB0 == 0)
  3234  03A1  1806               	btfsc	6,0	;volatile
  3235  03A2  2BA4               	goto	l6997
  3236                           
  3237                           ;fct.c: 97: {
  3238                           ;fct.c: 98: key2();
  3239  03A3  2BBB               	ljmp	l6747
  3240  03A4                     l6997:	
  3241                           ;fct.c: 99: }
  3242                           
  3243                           
  3244                           ;fct.c: 100: else
  3245                           ;fct.c: 101: {
  3246                           ;fct.c: 102: G_KEY();
  3247  03A4  2BAC               	ljmp	l6741
  3248  03A5                     l4801:	
  3249                           
  3250                           ;fct.c: 107: else if(fctBits001.bits.bit_0 == 0)
  3251  03A5  184B               	btfsc	_fctBits001,0	;volatile
  3252  03A6  0008               	return
  3253                           
  3254                           ;fct.c: 108: {
  3255                           ;fct.c: 109: RA5 = 0;
  3256  03A7  1285               	bcf	5,5	;volatile
  3257                           
  3258                           ;fct.c: 110: RA2 = 0;
  3259  03A8  1105               	bcf	5,2	;volatile
  3260                           
  3261                           ;fct.c: 111: RA4 = 0;
  3262  03A9  1205               	bcf	5,4	;volatile
  3263                           
  3264                           ;fct.c: 112: RA1 = 0;
  3265  03AA  1085               	bcf	5,1	;volatile
  3266  03AB  0008               	return
  3267  03AC                     __end_of_FCTjudge:	
  3268  03AC                     __ptext28:	
  3269 ;; *************** function _G_KEY *****************
  3270 ;; Defined at:
  3271 ;;		line 48 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\fct.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;		None
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;		None
  3276 ;; Return value:  Size  Location     Type
  3277 ;;                  1    wreg      void 
  3278 ;; Registers used:
  3279 ;;		None
  3280 ;; Tracked objects:
  3281 ;;		On entry : 300/0
  3282 ;;		On exit  : 300/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3285 ;;      Params:         0       0       0       0       0
  3286 ;;      Locals:         0       0       0       0       0
  3287 ;;      Temps:          0       0       0       0       0
  3288 ;;      Totals:         0       0       0       0       0
  3289 ;;Total ram usage:        0 bytes
  3290 ;; Hardware stack levels used:    1
  3291 ;; Hardware stack levels required when called:    2
  3292 ;; This function calls:
  3293 ;;		Nothing
  3294 ;; This function is called by:
  3295 ;;		_FCTjudge
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           
  3300                           ;psect for function _G_KEY
  3301  03AC                     _G_KEY:	
  3302  03AC                     l6741:	
  3303                           ;incstack = 0
  3304                           ; Regs used in _G_KEY: []
  3305                           
  3306                           
  3307                           ;fct.c: 50: RA5 = 0;
  3308  03AC  1285               	bcf	5,5	;volatile
  3309                           
  3310                           ;fct.c: 51: RA2 = 0;
  3311  03AD  1105               	bcf	5,2	;volatile
  3312                           
  3313                           ;fct.c: 52: RA4 = 1;
  3314  03AE  1605               	bsf	5,4	;volatile
  3315                           
  3316                           ;fct.c: 53: RA1 = 0;
  3317  03AF  1085               	bcf	5,1	;volatile
  3318  03B0  0008               	return
  3319  03B1                     __end_of_G_KEY:	
  3320  03B1                     __ptext27:	
  3321 ;; *************** function _R_KEY *****************
  3322 ;; Defined at:
  3323 ;;		line 56 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\fct.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;		None
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;		None
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  1    wreg      void 
  3330 ;; Registers used:
  3331 ;;		None
  3332 ;; Tracked objects:
  3333 ;;		On entry : 300/0
  3334 ;;		On exit  : 300/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3337 ;;      Params:         0       0       0       0       0
  3338 ;;      Locals:         0       0       0       0       0
  3339 ;;      Temps:          0       0       0       0       0
  3340 ;;      Totals:         0       0       0       0       0
  3341 ;;Total ram usage:        0 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    2
  3344 ;; This function calls:
  3345 ;;		Nothing
  3346 ;; This function is called by:
  3347 ;;		_FCTjudge
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           
  3352                           ;psect for function _R_KEY
  3353  03B1                     _R_KEY:	
  3354  03B1                     l6743:	
  3355                           ;incstack = 0
  3356                           ; Regs used in _R_KEY: []
  3357                           
  3358                           
  3359                           ;fct.c: 58: RA5 = 0;
  3360  03B1  1285               	bcf	5,5	;volatile
  3361                           
  3362                           ;fct.c: 59: RA2 = 1;
  3363  03B2  1505               	bsf	5,2	;volatile
  3364                           
  3365                           ;fct.c: 60: RA4 = 1;
  3366  03B3  1605               	bsf	5,4	;volatile
  3367                           
  3368                           ;fct.c: 61: RA1 = 0;
  3369  03B4  1085               	bcf	5,1	;volatile
  3370  03B5  0008               	return
  3371  03B6                     __end_of_R_KEY:	
  3372  03B6                     __ptext26:	
  3373 ;; *************** function _key1 *****************
  3374 ;; Defined at:
  3375 ;;		line 64 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\fct.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;		None
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;		None
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  1    wreg      void 
  3382 ;; Registers used:
  3383 ;;		None
  3384 ;; Tracked objects:
  3385 ;;		On entry : 300/0
  3386 ;;		On exit  : 300/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3389 ;;      Params:         0       0       0       0       0
  3390 ;;      Locals:         0       0       0       0       0
  3391 ;;      Temps:          0       0       0       0       0
  3392 ;;      Totals:         0       0       0       0       0
  3393 ;;Total ram usage:        0 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; Hardware stack levels required when called:    2
  3396 ;; This function calls:
  3397 ;;		Nothing
  3398 ;; This function is called by:
  3399 ;;		_FCTjudge
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           
  3404                           ;psect for function _key1
  3405  03B6                     _key1:	
  3406  03B6                     l6745:	
  3407                           ;incstack = 0
  3408                           ; Regs used in _key1: []
  3409                           
  3410                           
  3411                           ;fct.c: 66: RA5 = 1;
  3412  03B6  1685               	bsf	5,5	;volatile
  3413                           
  3414                           ;fct.c: 67: RA2 = 0;
  3415  03B7  1105               	bcf	5,2	;volatile
  3416                           
  3417                           ;fct.c: 68: RA4 = 1;
  3418  03B8  1605               	bsf	5,4	;volatile
  3419                           
  3420                           ;fct.c: 69: RA1 = 0;
  3421  03B9  1085               	bcf	5,1	;volatile
  3422  03BA  0008               	return
  3423  03BB                     __end_of_key1:	
  3424  03BB                     __ptext25:	
  3425 ;; *************** function _key2 *****************
  3426 ;; Defined at:
  3427 ;;		line 72 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\fct.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;		None
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;		None
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  1    wreg      void 
  3434 ;; Registers used:
  3435 ;;		None
  3436 ;; Tracked objects:
  3437 ;;		On entry : 300/0
  3438 ;;		On exit  : 300/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3441 ;;      Params:         0       0       0       0       0
  3442 ;;      Locals:         0       0       0       0       0
  3443 ;;      Temps:          0       0       0       0       0
  3444 ;;      Totals:         0       0       0       0       0
  3445 ;;Total ram usage:        0 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    2
  3448 ;; This function calls:
  3449 ;;		Nothing
  3450 ;; This function is called by:
  3451 ;;		_FCTjudge
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           
  3456                           ;psect for function _key2
  3457  03BB                     _key2:	
  3458  03BB                     l6747:	
  3459                           ;incstack = 0
  3460                           ; Regs used in _key2: []
  3461                           
  3462                           
  3463                           ;fct.c: 74: RA5 = 0;
  3464  03BB  1285               	bcf	5,5	;volatile
  3465                           
  3466                           ;fct.c: 75: RA2 = 0;
  3467  03BC  1105               	bcf	5,2	;volatile
  3468                           
  3469                           ;fct.c: 76: RA4 = 1;
  3470  03BD  1605               	bsf	5,4	;volatile
  3471                           
  3472                           ;fct.c: 77: RA1 = 1;
  3473  03BE  1485               	bsf	5,1	;volatile
  3474  03BF  0008               	return
  3475  03C0                     __end_of_key2:	
  3476  03C0                     __ptext23:	
  3477 ;; *************** function _FCTkey *****************
  3478 ;; Defined at:
  3479 ;;		line 26 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\fct.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;		None
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;		None
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  1    wreg      void 
  3486 ;; Registers used:
  3487 ;;		wreg, status,2, status,0
  3488 ;; Tracked objects:
  3489 ;;		On entry : 300/0
  3490 ;;		On exit  : 300/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3493 ;;      Params:         0       0       0       0       0
  3494 ;;      Locals:         0       0       0       0       0
  3495 ;;      Temps:          0       0       0       0       0
  3496 ;;      Totals:         0       0       0       0       0
  3497 ;;Total ram usage:        0 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    2
  3500 ;; This function calls:
  3501 ;;		Nothing
  3502 ;; This function is called by:
  3503 ;;		_FCTloop
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           
  3508                           ;psect for function _FCTkey
  3509  03C0                     _FCTkey:	
  3510                           
  3511                           ;fct.c: 28: if(RB2 == 1)
  3512                           
  3513                           ;incstack = 0
  3514                           ; Regs used in _FCTkey: [wreg+status,2+status,0]
  3515  03C0  1D06               	btfss	6,2	;volatile
  3516  03C1  0008               	return
  3517                           
  3518                           ;fct.c: 29: {
  3519                           ;fct.c: 30: if(++CNTfctStart >= 100)
  3520  03C2  0AA6               	incf	_CNTfctStart,f	;volatile
  3521  03C3  1903               	skipnz
  3522  03C4  0AA7               	incf	_CNTfctStart+1,f	;volatile
  3523  03C5  3000               	movlw	0
  3524  03C6  0227               	subwf	_CNTfctStart+1,w	;volatile
  3525  03C7  3064               	movlw	100
  3526  03C8  1903               	skipnz
  3527  03C9  0226               	subwf	_CNTfctStart,w	;volatile
  3528  03CA  1C03               	skipc
  3529  03CB  0008               	return
  3530                           
  3531                           ;fct.c: 31: {
  3532                           ;fct.c: 33: fctBits001.bits.bit_0 = 1;
  3533  03CC  144B               	bsf	_fctBits001,0	;volatile
  3534                           
  3535                           ;fct.c: 34: if(RB2 == 1)
  3536  03CD  1D06               	btfss	6,2	;volatile
  3537  03CE  0008               	return
  3538                           
  3539                           ;fct.c: 35: {
  3540                           ;fct.c: 36: if(++CNTfctStart >= 500)
  3541  03CF  0AA6               	incf	_CNTfctStart,f	;volatile
  3542  03D0  1903               	skipnz
  3543  03D1  0AA7               	incf	_CNTfctStart+1,f	;volatile
  3544  03D2  3001               	movlw	1
  3545  03D3  0227               	subwf	_CNTfctStart+1,w	;volatile
  3546  03D4  30F4               	movlw	244
  3547  03D5  1903               	skipnz
  3548  03D6  0226               	subwf	_CNTfctStart,w	;volatile
  3549  03D7  1C03               	skipc
  3550  03D8  0008               	return
  3551                           
  3552                           ;fct.c: 37: {
  3553                           ;fct.c: 38: fctBits001.bits.bit_0 = 0;
  3554  03D9  104B               	bcf	_fctBits001,0	;volatile
  3555                           
  3556                           ;fct.c: 39: CNTfctStart = 0;
  3557  03DA  01A6               	clrf	_CNTfctStart	;volatile
  3558  03DB  01A7               	clrf	_CNTfctStart+1	;volatile
  3559  03DC  0008               	return
  3560  03DD                     __end_of_FCTkey:	
  3561                           
  3562                           	psect	text29
  3563  0419                     __ptext29:	
  3564 ;; *************** function _Delay_nms *****************
  3565 ;; Defined at:
  3566 ;;		line 35 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\main.c"
  3567 ;; Parameters:    Size  Location     Type
  3568 ;;  inittempl       2    4[COMMON] unsigned int 
  3569 ;; Auto vars:     Size  Location     Type
  3570 ;;  i               2    6[COMMON] unsigned int 
  3571 ;;  gtemp           1    8[COMMON] unsigned char 
  3572 ;; Return value:  Size  Location     Type
  3573 ;;                  1    wreg      void 
  3574 ;; Registers used:
  3575 ;;		wreg, status,2, status,0, pclath, cstack
  3576 ;; Tracked objects:
  3577 ;;		On entry : 300/100
  3578 ;;		On exit  : 0/0
  3579 ;;		Unchanged: 0/0
  3580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3581 ;;      Params:         2       0       0       0       0
  3582 ;;      Locals:         3       0       0       0       0
  3583 ;;      Temps:          0       0       0       0       0
  3584 ;;      Totals:         5       0       0       0       0
  3585 ;;Total ram usage:        5 bytes
  3586 ;; Hardware stack levels used:    1
  3587 ;; Hardware stack levels required when called:    3
  3588 ;; This function calls:
  3589 ;;		_Delay
  3590 ;; This function is called by:
  3591 ;;		_main
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           
  3596                           ;psect for function _Delay_nms
  3597  0419                     _Delay_nms:	
  3598                           
  3599                           ;main.c: 37: unsigned int i;
  3600                           ;main.c: 38: unsigned char gtemp;
  3601                           ;main.c: 40: gtemp = 0;
  3602                           
  3603                           ;incstack = 0
  3604                           ; Regs used in _Delay_nms: [wreg+status,2+status,0+pclath+cstack]
  3605  0419  01F8               	clrf	Delay_nms@gtemp
  3606                           
  3607                           ;main.c: 41: if (GIE == 1)
  3608  041A  1F8B               	btfss	11,7	;volatile
  3609  041B  2C1F               	goto	l7021
  3610                           
  3611                           ;main.c: 42: {
  3612                           ;main.c: 43: gtemp = 1;
  3613  041C  01F8               	clrf	Delay_nms@gtemp
  3614  041D  0AF8               	incf	Delay_nms@gtemp,f
  3615                           
  3616                           ;main.c: 44: GIE = 0;
  3617  041E  138B               	bcf	11,7	;volatile
  3618  041F                     l7021:	
  3619                           
  3620                           ;main.c: 45: }
  3621                           ;main.c: 46: for (i = 0; i < inittempl; i++)
  3622  041F  01F6               	clrf	Delay_nms@i
  3623  0420  01F7               	clrf	Delay_nms@i+1
  3624  0421                     l7027:	
  3625  0421  0875               	movf	Delay_nms@inittempl+1,w
  3626  0422  0277               	subwf	Delay_nms@i+1,w
  3627  0423  1D03               	skipz
  3628  0424  2C27               	goto	u1715
  3629  0425  0874               	movf	Delay_nms@inittempl,w
  3630  0426  0276               	subwf	Delay_nms@i,w
  3631  0427                     u1715:	
  3632  0427  1803               	btfsc	3,0
  3633  0428  2C34               	goto	l7029
  3634                           
  3635                           ;main.c: 47: {
  3636                           ;main.c: 48: Delay(154);
  3637  0429  309A               	movlw	154
  3638  042A  00F2               	movwf	Delay@dtemp
  3639  042B  01F3               	clrf	Delay@dtemp+1
  3640  042C  2438  120A  118A   	fcall	_Delay
  3641  042F  0064               	clrwdt	;# 
  3642  0430  0AF6               	incf	Delay_nms@i,f
  3643  0431  1903               	skipnz
  3644  0432  0AF7               	incf	Delay_nms@i+1,f
  3645  0433  2C21               	goto	l7027
  3646  0434                     l7029:	
  3647                           
  3648                           ;main.c: 50: }
  3649                           ;main.c: 51: if (gtemp == 1)
  3650  0434  0B78               	decfsz	Delay_nms@gtemp,w
  3651  0435  0008               	return
  3652                           
  3653                           ;main.c: 52: GIE = 1;
  3654  0436  178B               	bsf	11,7	;volatile
  3655  0437  0008               	return
  3656  0438                     __end_of_Delay_nms:	
  3657  0438                     __ptext30:	
  3658 ;; *************** function _Delay *****************
  3659 ;; Defined at:
  3660 ;;		line 27 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\main.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;  dtemp           2    2[COMMON] unsigned int 
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;		None
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  1    wreg      void 
  3667 ;; Registers used:
  3668 ;;		wreg, status,2, status,0
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/100
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3674 ;;      Params:         2       0       0       0       0
  3675 ;;      Locals:         0       0       0       0       0
  3676 ;;      Temps:          0       0       0       0       0
  3677 ;;      Totals:         2       0       0       0       0
  3678 ;;Total ram usage:        2 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; Hardware stack levels required when called:    2
  3681 ;; This function calls:
  3682 ;;		Nothing
  3683 ;; This function is called by:
  3684 ;;		_Delay_nms
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           
  3689                           ;psect for function _Delay
  3690  0438                     _Delay:	
  3691  0438                     l6765:	
  3692                           ;main.c: 29: while (dtemp--)
  3693                           
  3694                           ;incstack = 0
  3695                           ; Regs used in _Delay: [wreg+status,2+status,0]
  3696                           
  3697  0438  3001               	movlw	1
  3698  0439  02F2               	subwf	Delay@dtemp,f
  3699  043A  3000               	movlw	0
  3700  043B  1C03               	skipc
  3701  043C  03F3               	decf	Delay@dtemp+1,f
  3702  043D  02F3               	subwf	Delay@dtemp+1,f
  3703  043E  0F72               	incfsz	Delay@dtemp,w
  3704  043F  2C38               	goto	l6765
  3705  0440  0A73               	incf	Delay@dtemp+1,w
  3706  0441  1903               	btfsc	3,2
  3707  0442  0008               	return
  3708  0443  2C38               	goto	l6765
  3709  0444                     __end_of_Delay:	
  3710                           
  3711                           	psect	text31
  3712  03DD                     __ptext31:	
  3713 ;; *************** function _Int_ALL *****************
  3714 ;; Defined at:
  3715 ;;		line 563 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\main.c"
  3716 ;; Parameters:    Size  Location     Type
  3717 ;;		None
  3718 ;; Auto vars:     Size  Location     Type
  3719 ;;		None
  3720 ;; Return value:  Size  Location     Type
  3721 ;;                  1    wreg      void 
  3722 ;; Registers used:
  3723 ;;		wreg, status,2, status,0, pclath, cstack
  3724 ;; Tracked objects:
  3725 ;;		On entry : 0/0
  3726 ;;		On exit  : 300/0
  3727 ;;		Unchanged: 0/0
  3728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3729 ;;      Params:         0       0       0       0       0
  3730 ;;      Locals:         0       0       0       0       0
  3731 ;;      Temps:          2       0       0       0       0
  3732 ;;      Totals:         2       0       0       0       0
  3733 ;;Total ram usage:        2 bytes
  3734 ;; Hardware stack levels used:    1
  3735 ;; Hardware stack levels required when called:    1
  3736 ;; This function calls:
  3737 ;;		_INT_LED_SHOW
  3738 ;; This function is called by:
  3739 ;;		Interrupt level 1
  3740 ;; This function uses a non-reentrant model
  3741 ;;
  3742                           
  3743                           
  3744                           ;psect for function _Int_ALL
  3745  03DD                     _Int_ALL:	
  3746                           
  3747                           ;main.c: 566: if (TMR1IF)
  3748  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  3749  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  3750  03DF  1C0C               	btfss	12,0	;volatile
  3751  03E0  2BF5               	goto	i1l7135
  3752                           
  3753                           ;main.c: 567: {
  3754                           ;main.c: 573: TMR1 = 0xE0C0;
  3755  03E1  30E0               	movlw	224
  3756  03E2  008F               	movwf	15	;volatile
  3757  03E3  30C0               	movlw	192
  3758  03E4  008E               	movwf	14	;volatile
  3759                           
  3760                           ;main.c: 574: TMR1IF = 0;
  3761  03E5  100C               	bcf	12,0	;volatile
  3762                           
  3763                           ;main.c: 577: Fsys1.bits.bit_1 = 1;
  3764  03E6  14CF               	bsf	_Fsys1,1	;volatile
  3765                           
  3766                           ;main.c: 580: if (++MainTime_1s >= 1000)
  3767  03E7  0AB6               	incf	_MainTime_1s,f	;volatile
  3768  03E8  1903               	skipnz
  3769  03E9  0AB7               	incf	_MainTime_1s+1,f	;volatile
  3770  03EA  3003               	movlw	3
  3771  03EB  0237               	subwf	_MainTime_1s+1,w	;volatile
  3772  03EC  30E8               	movlw	232
  3773  03ED  1903               	skipnz
  3774  03EE  0236               	subwf	_MainTime_1s,w	;volatile
  3775  03EF  1C03               	skipc
  3776  03F0  2BF5               	goto	i1l7135
  3777                           
  3778                           ;main.c: 581: {
  3779                           ;main.c: 582: MainTime_1s = 0;
  3780  03F1  01B6               	clrf	_MainTime_1s	;volatile
  3781  03F2  01B7               	clrf	_MainTime_1s+1	;volatile
  3782                           
  3783                           ;main.c: 583: Fsys1s.byte = 0xFF;
  3784  03F3  30FF               	movlw	255
  3785  03F4  00CE               	movwf	_Fsys1s	;volatile
  3786  03F5                     i1l7135:	
  3787                           
  3788                           ;main.c: 591: }
  3789                           ;main.c: 592: }
  3790                           ;main.c: 595: if (TMR2IF)
  3791  03F5  1C8C               	btfss	12,1	;volatile
  3792  03F6  2BF9               	goto	i1l1946
  3793                           
  3794                           ;main.c: 596: {
  3795                           ;main.c: 597: TMR2IF = 0;
  3796  03F7  108C               	bcf	12,1	;volatile
  3797                           
  3798                           ;main.c: 598: INT_LED_SHOW();
  3799  03F8  2400               	fcall	_INT_LED_SHOW
  3800  03F9                     i1l1946:	
  3801  03F9  0871               	movf	??_Int_ALL+1,w
  3802  03FA  008A               	movwf	10
  3803  03FB  0E70               	swapf	??_Int_ALL^(0+-128),w
  3804  03FC  0083               	movwf	3
  3805  03FD  0EFE               	swapf	126,f
  3806  03FE  0E7E               	swapf	126,w
  3807  03FF  0009               	retfie
  3808  0400                     __end_of_Int_ALL:	
  3809  0400                     __ptext32:	
  3810 ;; *************** function _INT_LED_SHOW *****************
  3811 ;; Defined at:
  3812 ;;		line 193 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_79F133\ABM007_79F133\source\light.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;		None
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;		None
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  1    wreg      void 
  3819 ;; Registers used:
  3820 ;;		wreg, status,2, status,0
  3821 ;; Tracked objects:
  3822 ;;		On entry : 300/0
  3823 ;;		On exit  : 300/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3826 ;;      Params:         0       0       0       0       0
  3827 ;;      Locals:         0       0       0       0       0
  3828 ;;      Temps:          0       0       0       0       0
  3829 ;;      Totals:         0       0       0       0       0
  3830 ;;Total ram usage:        0 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; This function calls:
  3833 ;;		Nothing
  3834 ;; This function is called by:
  3835 ;;		_Int_ALL
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           
  3840                           ;psect for function _INT_LED_SHOW
  3841  0400                     _INT_LED_SHOW:	
  3842                           
  3843                           ;light.c: 196: if(FledBits01.bits.bit_0 == 1)
  3844                           
  3845                           ;incstack = 0
  3846                           ; Regs used in _INT_LED_SHOW: [wreg+status,2+status,0]
  3847  0400  1C4C               	btfss	_FledBits01,0	;volatile
  3848  0401  0008               	return
  3849                           
  3850                           ;light.c: 197: {
  3851                           ;light.c: 198: if (++CNTbreath_Led == 80)
  3852  0402  0ABE               	incf	_CNTbreath_Led,f	;volatile
  3853  0403  1903               	skipnz
  3854  0404  0ABF               	incf	_CNTbreath_Led+1,f	;volatile
  3855  0405  3050               	movlw	80
  3856  0406  063E               	xorwf	_CNTbreath_Led,w	;volatile
  3857  0407  043F               	iorwf	_CNTbreath_Led+1,w	;volatile
  3858  0408  1D03               	btfss	3,2
  3859  0409  2C0D               	goto	i1l7011
  3860                           
  3861                           ;light.c: 199: {
  3862                           ;light.c: 200: CNTbreath_Led = 0;
  3863  040A  01BE               	clrf	_CNTbreath_Led	;volatile
  3864  040B  01BF               	clrf	_CNTbreath_Led+1	;volatile
  3865                           
  3866                           ;light.c: 201: RA5 = 0;
  3867  040C  1285               	bcf	5,5	;volatile
  3868  040D                     i1l7011:	
  3869                           
  3870                           ;light.c: 202: }
  3871                           ;light.c: 203: if (CNTbreath_Led >= CNTbreath_Led2)
  3872  040D  083B               	movf	_CNTbreath_Led2+1,w	;volatile
  3873  040E  023F               	subwf	_CNTbreath_Led+1,w	;volatile
  3874  040F  1D03               	skipz
  3875  0410  2C13               	goto	u169_25
  3876  0411  083A               	movf	_CNTbreath_Led2,w	;volatile
  3877  0412  023E               	subwf	_CNTbreath_Led,w	;volatile
  3878  0413                     u169_25:	
  3879  0413  1C03               	skipc
  3880  0414  2C17               	goto	i1l933
  3881                           
  3882                           ;light.c: 204: {
  3883                           ;light.c: 205: RA5 = 1;
  3884  0415  1685               	bsf	5,5	;volatile
  3885                           
  3886                           ;light.c: 206: }
  3887  0416  0008               	return
  3888  0417                     i1l933:	
  3889                           
  3890                           ;light.c: 207: else
  3891                           ;light.c: 208: {
  3892                           ;light.c: 209: RA5 = 0;
  3893  0417  1285               	bcf	5,5	;volatile
  3894  0418  0008               	return
  3895  0419                     __end_of_INT_LED_SHOW:	
  3896  007E                     btemp	set	126	;btemp
  3897  007E                     wtemp0	set	126
  3898                           
  3899                           	psect	intentry
  3900  0004                     __pintentry:	
  3901                           ;incstack = 0
  3902                           ; Regs used in _Int_ALL: [wreg+status,2+status,0+pclath+cstack]
  3903                           
  3904  0004                     interrupt_function:	
  3905  007E                     saved_w	set	btemp
  3906  0004  00FE               	movwf	btemp
  3907  0005  0E03               	swapf	3,w
  3908  0006  00F0               	movwf	??_Int_ALL
  3909  0007  080A               	movf	10,w
  3910  0008  00F1               	movwf	??_Int_ALL+1
  3911  0009  120A  118A  2BDD   	ljmp	_Int_ALL


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80      7      63
    BANK1            80      0       0
    BANK3            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    KeyControl@this	PTR struct _KEY_PRIVATE size(1) Largest target is 8
		 -> KeyLines(BANK0[8]), 


Critical Paths under _main in COMMON

    _main->_Delay_nms
    _GsensorLoop->_SensorControl
    _GflushLoop->_FlushJudge
    _FlushJudge->_GkeyLoop
    _GkeyLoop->_KeyControl
    _Delay_nms->_Delay

Critical Paths under _Int_ALL in COMMON

    None.

Critical Paths under _main in BANK0

    _GkeyLoop->_KeyControl

Critical Paths under _Int_ALL in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Int_ALL in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Int_ALL in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Int_ALL in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     919
                          _Delay_nms
                            _FCTloop
                         _GflushLoop
                           _GledLoop
                        _GsensorLoop
                          _Init_GPIO
                            _Init_IC
                        _Init_TIMER1
                        _Init_TIMER2
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_IC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_GPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GsensorLoop                                          0     0      0       0
                      _SensorControl
                        _SensorJudge
                          _SensorKey
                         _SensorTime
 ---------------------------------------------------------------------------------
 (2) _SensorTime                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorKey                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorJudge                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorControl                                        1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GledLoop                                             0     0      0       0
                            _LED_Con
                          _LED_Judge
                            _LED_Key
                           _LED_Time
 ---------------------------------------------------------------------------------
 (2) _LED_Time                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Key                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Judge                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Con                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GflushLoop                                           0     0      0     699
                           _FlushCon
                         _FlushJudge
                          _FlushTime
 ---------------------------------------------------------------------------------
 (2) _FlushTime                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FlushJudge                                           1     1      0     699
                                              6 COMMON     1     1      0
                           _GkeyLoop
 ---------------------------------------------------------------------------------
 (3) _GkeyLoop                                             2     2      0     631
                                              4 COMMON     2     2      0
                         _KeyControl
                            _ScanKey
 ---------------------------------------------------------------------------------
 (4) _ScanKey                                              1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _KeyControl                                           9     9      0     609
                                              2 COMMON     2     2      0
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _FlushCon                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FCTloop                                              0     0      0       0
                           _FCTjudge
                             _FCTkey
 ---------------------------------------------------------------------------------
 (2) _FCTkey                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FCTjudge                                             0     0      0       0
                              _G_KEY
                              _R_KEY
                               _key1
                               _key2
 ---------------------------------------------------------------------------------
 (3) _key2                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _key1                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _R_KEY                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _G_KEY                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay_nms                                            5     3      2     220
                                              4 COMMON     5     3      2
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _Delay                                                2     0      2      86
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Int_ALL                                              2     2      0       0
                                              0 COMMON     2     2      0
                       _INT_LED_SHOW
 ---------------------------------------------------------------------------------
 (6) _INT_LED_SHOW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_nms
     _Delay
   _FCTloop
     _FCTjudge
       _G_KEY
       _R_KEY
       _key1
       _key2
     _FCTkey
   _GflushLoop
     _FlushCon
     _FlushJudge
       _GkeyLoop
         _KeyControl
         _ScanKey
     _FlushTime
   _GledLoop
     _LED_Con
     _LED_Judge
     _LED_Key
     _LED_Time
   _GsensorLoop
     _SensorControl
     _SensorJudge
     _SensorKey
     _SensorTime
   _Init_GPIO
   _Init_IC
   _Init_TIMER1
   _Init_TIMER2

 _Int_ALL (ROOT)
   _INT_LED_SHOW

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      7      3F       4       78.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BITBANK3            50      0       0       7        0.0%
BANK3               50      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
ABS                  0      0      4A      11        0.0%
DATA                 0      0      4A      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun May 19 18:52:51 2024

                     PL2 0215                       PL4 021F                       PL6 0229  
                     PL8 031D                       fsr 0004                      _GIE 005F  
                    _RA1 0029                      _RA2 002A                      _RB0 0030  
                    _RB1 0031                      _RA4 002C                      _RB2 0032  
                    _RA5 002D                      _RA6 002E                      _PR2 0092  
                    fsr0 0004                      indf 0000          __end_of_LED_Con 045C  
        __end_of_LED_Key 044F          __end_of_FCTloop 0399                     l1922 0354  
                   l1931 0364                     l2901 00A4                     l1926 035C  
                   l2903 00B4                     l2904 00BE                     l2860 0107  
                   l7021 041F                     l2871 0116                     l4801 03A5  
                   l2881 0034                     l3841 028F                     l4802 039E  
                   l7027 0421                     l2891 0065                     l2859 00F1  
                   l3843 02A3                     l4804 03A1                     l2884 0049  
                   l2876 0025                     l3852 02CF                     l7029 0434  
                   l2893 0078                     l7221 0183                     l7205 0163  
                   l2869 0110                     l3829 025A                     l2886 0054  
                   l2895 0084                     l7151 01A7                     l3847 02BB  
                   l5720 0175                     l3856 02E7                     l2897 0090  
                   l2889 0059                     l7161 01C8                     l7241 00FB  
                   l5722 0178                     l3866 0287                     l2899 00A0  
                   l7219 017B                     l3867 0288                     l7237 00F5  
                   l7239 00F8                     l7177 01E7                     l5729 0214  
                   l6641 0204                     l6803 002D                     l6651 020C  
                   l7283 0347                     l6741 03AC                     l6645 0208  
                   l6743 03B1                     l6807 002F                     l7287 034E  
                   l6745 03B6                     l6761 0452                     l6921 02B8  
                   l6913 02A0                     l7297 036C                     l6747 03BB  
                   l6931 02C2                     l7299 038C                     l6765 0438  
                   l6925 0292                     l6759 0462                     l6951 02FA  
                   l6943 02E4                     l6935 02CC                     l6953 02FD  
                   l6963 030B                     l6877 00C8                     l6965 0273  
                   l6957 0308                     l6893 0252                     l6799 0024  
                   l6987 0399                     l6899 025F                     l6997 03A4  
                   u1100 0458                     u1520 0279                     u1530 027F  
                   u1522 027A                     u1532 0280                     u1560 028C  
                   u1715 0427                     _PIE1 008C                     u1840 01B5  
                   _PIE2 008D                     u1930 01EE                     u1850 01B6  
                   u1940 01EF                     u1880 01CF                     u1890 01D0  
                   _PIR1 000C                     _PIR2 000D                     _TMR1 000E  
                   _WPUA 018E                     _WPUB 0095                     _WPUC 018F  
                   _key1 03B6                     _key2 03BB                     _main 0326  
          ??_Init_TIMER1 0072            ??_Init_TIMER2 0072                     btemp 007E  
                   start 000C       __size_of_LED_Judge 0008               _FledBits01 004C  
        __end_of_Int_ALL 0400          __end_of_Init_IC 048B          __end_of_ScanKey 0215  
       __end_of_LED_Time 0452         __end_of_FCTjudge 03AC            ??_GsensorLoop 0073  
                  ?_key1 0070                    ?_key2 0070                    ?_main 0070  
                  _T1CON 0010                    _T2CON 0012                    i1l933 0417  
                  _G_KEY 03AC                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _R_KEY 03B1                    _Delay 0438  
                  _Fsys1 004F               _GflushLoop 001C                    _templ 0049  
                  pclath 000A               _KeyControl 0185                    status 0003  
                  wtemp0 007E               _FlushJudge 00EC         __end_of_GledLoop 044E  
        __initialization 000F         __end_of_GkeyLoop 0185             __end_of_key1 03BB  
           __end_of_key2 03C0             __end_of_main 0395      __end_of_Init_TIMER1 0498  
    __end_of_Init_TIMER2 04A3       FlushJudge@Key_Step 0076         __end_of_FlushCon 00EC  
     __size_of_Delay_nms 001F                   ??_key1 0072                   ??_key2 0072  
                 ??_main 0079              _Fbodysensor 007A                   ?_G_KEY 0070  
              ??_LED_Con 0072                ??_LED_Key 0072                ??_FCTloop 0072  
                 ?_R_KEY 0070                   ?_Delay 0072        __end_of_LED_Judge 0464  
  __end_of_SensorControl 028E      __end_of_GsensorLoop 023A                   i1l1946 03F9  
                 i1l7011 040D                   i1l7135 03F5                   _FCTkey 03C0  
                 _INTCON 000B                   _CNTfct 0024                   u169_25 0413  
     __size_of_Init_GPIO 0015                   _OSCCON 008F                   _TMR1IE 0460  
                 _TMR1IF 0060                   _TMR2IE 0461                   _TMR2IF 0061  
     __size_of_FlushTime 0001            ?_INT_LED_SHOW 0070                   _WDTCON 0105  
              ??_Int_ALL 0070                ??_Init_IC 0072                   _RX_Buf 004A  
          _CNTfctSensior 0042                ??_ScanKey 0072            _CNTbodyInTime 002A  
                 _Fsys1m 004D                   _Fsys1s 004E            _CNTbreath_Led 003E  
             _SensorTime 023B            ??_SensorJudge 0072           KeyControl@this 005E  
            _MainTime_1s 0036       __size_of_SensorKey 0001                   saved_w 007E  
     Delay_nms@inittempl 0074              ?_GflushLoop 0070              ?_KeyControl 0070  
         ??_INT_LED_SHOW 0070        __end_of_Delay_nms 0438  __end_of__initialization 0018  
              ?_LED_Time 0070                ?_FCTjudge 0070              _Init_TIMER1 048B  
            _Init_TIMER2 0498            __end_of_G_KEY 03B1              ?_FlushJudge 0070  
          __end_of_R_KEY 03B6            __end_of_Delay 0444           __pcstackCOMMON 0070  
             __end_ofPL2 021F               __end_ofPL4 0229               __end_ofPL6 0230  
             __end_ofPL8 0326        __end_of_Init_GPIO 0479        __end_of_FlushTime 0024  
            _GsensorLoop 0230                  ??_G_KEY 0072      __end_of_SensorJudge 031D  
                ??_R_KEY 0072                  ??_Delay 0074                ?_GledLoop 0070  
              ?_GkeyLoop 0070               __pbssBANK0 0020                  ?_FCTkey 0070  
             _fctBits001 004B                ?_FlushCon 0070               ??_LED_Time 0072  
             ??_FCTjudge 0072        __end_of_SensorKey 023B               __pmaintext 0326  
            ?_SensorTime 0070               __pintentry 0004      __size_of_GflushLoop 0007  
        ScanKey@line_num 0072      __size_of_KeyControl 007D           _CNTfctFlashLed 0041  
                _LED_Con 0452                  _LED_Key 044E                  _FCTloop 0395  
                _CNTkey1 0022                  _CNTkey2 0020      __size_of_FlushJudge 002F  
             ??_GledLoop 0072              _SeletedLine 0079                  _SEQbody 0043  
                _SEQmain 0048               ??_GkeyLoop 0074               ??_FlushCon 0072  
        __size_of_FCTkey 001D                  _Fflush1 0046                  _Int_ALL 03DD  
                _Init_IC 0479                  _ScanKey 0202           _CNTbreath_Led1 003C  
         _CNTbreath_Led2 003A           _CNTbreath_Led3 0038              _SensorJudge 028E  
   __end_of_INT_LED_SHOW 0419                  __ptext0 0000                  __ptext1 0498  
                __ptext2 048B                  __ptext3 0479                  __ptext4 0464  
                __ptext5 0230                  __ptext6 023B                  __ptext7 023A  
                __ptext8 028E                  __ptext9 0273                _AD_Result 0034  
                clrloop0 04A4                _LED_Judge 045C     end_of_initialization 0018  
    __size_of_SensorTime 0038                _CNTbody_h 0030                _CNTbody_l 002E  
         Delay_nms@gtemp 0078             ??_GflushLoop 0077               ?_LED_Judge 0070  
           ??_KeyControl 0072           __end_of_FCTkey 03DD             ?_Init_TIMER1 0070  
           ?_Init_TIMER2 0070             ??_FlushJudge 0076                _BufCntAdd 002C  
              _Delay_nms 0419        __size_of_LED_Time 0003        __size_of_FCTjudge 0013  
 __size_of_SensorControl 001B       __end_of_GflushLoop 0023             ?_GsensorLoop 0070  
     __end_of_KeyControl 0202      start_initialization 000F                _Init_GPIO 0464  
              _FlushTime 0023                _CurrentIO 0040       __end_of_FlushJudge 011B  
               ??_FCTkey 0072        __size_of_GledLoop 000A        __size_of_GkeyLoop 006A  
      __size_of_FlushCon 00C8               ?_Delay_nms 0074                _SensorKey 023A  
  __size_of_INT_LED_SHOW 0019             ??_SensorTime 0072                 ?_LED_Con 0070  
               ?_LED_Key 0070                 ?_FCTloop 0070              __pbssCOMMON 0079  
             ?_Init_GPIO 0070                ___latbits 0002            __pcstackBANK0 0058  
             ?_FlushTime 0070            _SensorControl 0273              ??_LED_Judge 0072  
     __end_of_SensorTime 0273          _KeyControl$3137 0058          _KeyControl$3138 005A  
        _KeyControl$3139 005C             _INT_LED_SHOW 0400                 ?_Int_ALL 0070  
               ?_Init_IC 0070                 ?_ScanKey 0070               ?_SensorKey 0070  
           ?_SensorJudge 0070           __size_of_G_KEY 0005           __size_of_R_KEY 0005  
         __size_of_Delay 000C           ?_SensorControl 0070        interrupt_function 0004  
               _LED_Time 044F                 _FCTjudge 0399                clear_ram0 04A3  
               _CNTflush 0032              ??_Delay_nms 0076     __size_of_Init_TIMER1 000D  
   __size_of_Init_TIMER2 000B                 _SEQflsuh 0045     __size_of_GsensorLoop 000A  
            ??_Init_GPIO 0072         __size_of_LED_Con 000A         __size_of_LED_Key 0001  
            ??_FlushTime 0072         __size_of_FCTloop 0004                 _GledLoop 0444  
               _GkeyLoop 011B                 _KeyLines 0050                 _FlushCon 0024  
       __size_of_Int_ALL 0023         __size_of_Init_IC 0012          _CNTbodyExitTime 0028  
       __size_of_ScanKey 0013              _CNTfctStart 0026              ??_SensorKey 0072  
        ??_SensorControl 0072                 __ptext10 0444                 __ptext11 044F  
               __ptext20 0185                 __ptext12 044E                 __ptext21 0024  
               __ptext13 045C                 __ptext30 0438                 __ptext22 0395  
               __ptext14 0452                 __ptext31 03DD                 __ptext23 03C0  
               __ptext15 001C                 __ptext32 0400                 __ptext24 0399  
               __ptext16 0023                 __ptext25 03BB                 __ptext17 00EC  
               __ptext26 03B6                 __ptext18 011B                 __ptext27 03B1  
               __ptext19 0202                 __ptext28 03AC                 __ptext29 0419  
          __size_of_key1 0005            __size_of_key2 0005            __size_of_main 006F  
        _u8stsBodySensor 0044            _MainTime_1min 0047               Delay@dtemp 0072  
   __size_of_SensorJudge 008F               Delay_nms@i 0076                 intlevel1 0000  
             _OPTION_REG 0081  
