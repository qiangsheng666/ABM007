

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Apr 25 15:32:00 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	79F133
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text10,local,class=CODE,merge=1,delta=2
    18                           	psect	text15,local,class=CODE,merge=1,delta=2
    19                           	psect	text22,local,class=CODE,merge=1,delta=2
    20                           	psect	text25,local,class=CODE,merge=1,delta=2
    21                           	psect	text27,local,class=CODE,merge=1,delta=2
    22                           	psect	intentry,global,class=CODE,delta=2
    23                           	psect	pa_nodes0,global,class=CODE,delta=2
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F887 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	text0
    62  0000                     __ptext0:	
    63  000E                     _TMR1	set	14
    64  0012                     _T2CON	set	18
    65  0010                     _T1CON	set	16
    66  000D                     _PIR2	set	13
    67  000C                     _PIR1	set	12
    68  000B                     _INTCON	set	11
    69  0007                     _PORTC	set	7
    70  0006                     _PORTB	set	6
    71  0005                     _PORTA	set	5
    72  0060                     _TMR1IF	set	96
    73  0061                     _TMR2IF	set	97
    74  005F                     _GIE	set	95
    75  0030                     _RB0	set	48
    76  0031                     _RB1	set	49
    77  0032                     _RB2	set	50
    78  0029                     _RA1	set	41
    79  002A                     _RA2	set	42
    80  002C                     _RA4	set	44
    81  002D                     _RA5	set	45
    82  002E                     _RA6	set	46
    83  0095                     _WPUB	set	149
    84  0092                     _PR2	set	146
    85  008F                     _OSCCON	set	143
    86  008D                     _PIE2	set	141
    87  008C                     _PIE1	set	140
    88  0087                     _TRISC	set	135
    89  0086                     _TRISB	set	134
    90  0085                     _TRISA	set	133
    91  0081                     _OPTION_REG	set	129
    92  0460                     _TMR1IE	set	1120
    93  0461                     _TMR2IE	set	1121
    94  0105                     _WDTCON	set	261
    95  018F                     _WPUC	set	399
    96  018E                     _WPUA	set	398
    97                           
    98                           	psect	cinit
    99  000F                     start_initialization:	
   100                           ; #config settings
   101                           
   102  000F                     __initialization:	
   103  000F  3020               	movlw	low __pbssBANK0
   104                           
   105                           ; Clear objects allocated to COMMON
   106  0010  01F9               	clrf	__pbssCOMMON& (0+127)
   107  0011  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   108                           
   109                           ; Clear objects allocated to BANK0
   110  0012  1383               	bcf	3,7	;select IRP bank0
   111  0013  0084               	movwf	4
   112  0014  3053               	movlw	low (__pbssBANK0+51)
   113  0015  120A  118A  256C   	fcall	clear_ram0
   114  0018                     end_of_initialization:	
   115                           ;End of C runtime variable initialization code
   116                           
   117  0018                     __end_of__initialization:	
   118  0018  0183               	clrf	3
   119  0019  120A  118A  2BF4   	ljmp	_main	;jump to C main() function
   120                           
   121                           	psect	bssCOMMON
   122  0079                     __pbssCOMMON:	
   123  0079                     _SeletedLine:	
   124  0079                     	ds	1
   125  007A                     _Fbodysensor:	
   126  007A                     	ds	1
   127                           
   128                           	psect	bssBANK0
   129  0020                     __pbssBANK0:	
   130  0020                     _CNTfct:	
   131  0020                     	ds	2
   132  0022                     _CNTbodyExitTime:	
   133  0022                     	ds	2
   134  0024                     _CNTbodyInTime:	
   135  0024                     	ds	2
   136  0026                     _BufCntAdd:	
   137  0026                     	ds	2
   138  0028                     _CNTbody_l:	
   139  0028                     	ds	2
   140  002A                     _CNTbody_h:	
   141  002A                     	ds	2
   142  002C                     _CNTflush:	
   143  002C                     	ds	2
   144  002E                     _AD_Result:	
   145  002E                     	ds	2
   146  0030                     _MainTime_1s:	
   147  0030                     	ds	2
   148  0032                     _CNTbreath_Led3:	
   149  0032                     	ds	2
   150  0034                     _CNTbreath_Led2:	
   151  0034                     	ds	2
   152  0036                     _CNTbreath_Led1:	
   153  0036                     	ds	2
   154  0038                     _CNTbreath_Led:	
   155  0038                     	ds	2
   156  003A                     _CurrentIO:	
   157  003A                     	ds	1
   158  003B                     _CNTfctFlashLed:	
   159  003B                     	ds	1
   160  003C                     _CNTfctSensior:	
   161  003C                     	ds	1
   162  003D                     _CNTfctStart:	
   163  003D                     	ds	1
   164  003E                     _SEQbody:	
   165  003E                     	ds	1
   166  003F                     _u8stsBodySensor:	
   167  003F                     	ds	1
   168  0040                     _SEQflsuh:	
   169  0040                     	ds	1
   170  0041                     _Fflush1:	
   171  0041                     	ds	1
   172  0042                     _MainTime_1min:	
   173  0042                     	ds	1
   174  0043                     _SEQmain:	
   175  0043                     	ds	1
   176  0044                     _templ:	
   177  0044                     	ds	1
   178  0045                     _RX_Buf:	
   179  0045                     	ds	1
   180  0046                     _fctBits001:	
   181  0046                     	ds	1
   182  0047                     _FledBits01:	
   183  0047                     	ds	1
   184  0048                     _Fsys1m:	
   185  0048                     	ds	1
   186  0049                     _Fsys1s:	
   187  0049                     	ds	1
   188  004A                     _Fsys1:	
   189  004A                     	ds	1
   190  004B                     _KeyLines:	
   191  004B                     	ds	8
   192                           
   193                           	psect	clrtext
   194  056C                     clear_ram0:	
   195                           ;	Called with FSR containing the base address, and
   196                           ;	W with the last address+1
   197                           
   198  056C  0064               	clrwdt	;clear the watchdog before getting into this loop
   199  056D                     clrloop0:	
   200  056D  0180               	clrf	0	;clear RAM location pointed to by FSR
   201  056E  0A84               	incf	4,f	;increment pointer
   202  056F  0604               	xorwf	4,w	;XOR with final address
   203  0570  1903               	btfsc	3,2	;have we reached the end yet?
   204  0571  3400               	retlw	0	;all done for this memory range, return
   205  0572  0604               	xorwf	4,w	;XOR again to restore value
   206  0573  2D6D               	goto	clrloop0	;do the next byte
   207                           
   208                           	psect	cstackCOMMON
   209  0070                     __pcstackCOMMON:	
   210  0070                     ?_LED_Time:	
   211  0070                     ?_LED_Key:	
   212                           ; 1 bytes @ 0x0
   213                           
   214  0070                     ?_LED_Judge:	
   215                           ; 1 bytes @ 0x0
   216                           
   217  0070                     ?_LED_Con:	
   218                           ; 1 bytes @ 0x0
   219                           
   220  0070                     ?_FCTloop:	
   221                           ; 1 bytes @ 0x0
   222                           
   223  0070                     ?_GsensorLoop:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0070                     ?_GflushLoop:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ?_FlushTime:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     ?_FlushJudge:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ?_FlushCon:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0070                     ?_GkeyLoop:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ?_SensorKey:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_SensorTime:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_SensorJudge:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_SensorControl:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_FCTkey:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?_FCTjudge:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_ScanKey:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ?_KeyControl:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ?_GledLoop:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_INT_LED_SHOW:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ??_INT_LED_SHOW:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ?_Init_GPIO:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_Init_IC:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_Init_TIMER1:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ?_Init_TIMER2:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ?_main:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ?_Int_ALL:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ??_Int_ALL:	
   293                           ; 1 bytes @ 0x0
   294                           
   295                           
   296                           ; 1 bytes @ 0x0
   297  0070                     	ds	2
   298  0072                     ??_LED_Time:	
   299  0072                     ??_LED_Key:	
   300                           ; 1 bytes @ 0x2
   301                           
   302  0072                     ??_LED_Judge:	
   303                           ; 1 bytes @ 0x2
   304                           
   305  0072                     ??_LED_Con:	
   306                           ; 1 bytes @ 0x2
   307                           
   308  0072                     ??_FCTloop:	
   309                           ; 1 bytes @ 0x2
   310                           
   311  0072                     ??_FlushTime:	
   312                           ; 1 bytes @ 0x2
   313                           
   314  0072                     ??_FlushCon:	
   315                           ; 1 bytes @ 0x2
   316                           
   317  0072                     ??_SensorKey:	
   318                           ; 1 bytes @ 0x2
   319                           
   320  0072                     ??_SensorTime:	
   321                           ; 1 bytes @ 0x2
   322                           
   323  0072                     ??_SensorJudge:	
   324                           ; 1 bytes @ 0x2
   325                           
   326  0072                     ??_SensorControl:	
   327                           ; 1 bytes @ 0x2
   328                           
   329  0072                     ??_FCTkey:	
   330                           ; 1 bytes @ 0x2
   331                           
   332  0072                     ??_FCTjudge:	
   333                           ; 1 bytes @ 0x2
   334                           
   335  0072                     ??_ScanKey:	
   336                           ; 1 bytes @ 0x2
   337                           
   338  0072                     ??_KeyControl:	
   339                           ; 1 bytes @ 0x2
   340                           
   341  0072                     ??_GledLoop:	
   342                           ; 1 bytes @ 0x2
   343                           
   344  0072                     ?_Delay:	
   345                           ; 1 bytes @ 0x2
   346                           
   347  0072                     ??_Init_GPIO:	
   348                           ; 1 bytes @ 0x2
   349                           
   350  0072                     ??_Init_IC:	
   351                           ; 1 bytes @ 0x2
   352                           
   353  0072                     ??_Init_TIMER1:	
   354                           ; 1 bytes @ 0x2
   355                           
   356  0072                     ??_Init_TIMER2:	
   357                           ; 1 bytes @ 0x2
   358                           
   359  0072                     ScanKey@line_num:	
   360                           ; 1 bytes @ 0x2
   361                           
   362  0072                     Delay@dtemp:	
   363                           ; 1 bytes @ 0x2
   364                           
   365                           
   366                           ; 2 bytes @ 0x2
   367  0072                     	ds	1
   368  0073                     ??_GsensorLoop:	
   369                           
   370                           ; 1 bytes @ 0x3
   371  0073                     	ds	1
   372  0074                     ??_GkeyLoop:	
   373  0074                     ??_Delay:	
   374                           ; 1 bytes @ 0x4
   375                           
   376  0074                     ?_Delay_nms:	
   377                           ; 1 bytes @ 0x4
   378                           
   379  0074                     Delay_nms@inittempl:	
   380                           ; 1 bytes @ 0x4
   381                           
   382                           
   383                           ; 2 bytes @ 0x4
   384  0074                     	ds	2
   385  0076                     ??_FlushJudge:	
   386  0076                     ??_Delay_nms:	
   387                           ; 1 bytes @ 0x6
   388                           
   389  0076                     FlushJudge@Key_Step:	
   390                           ; 1 bytes @ 0x6
   391                           
   392  0076                     Delay_nms@i:	
   393                           ; 1 bytes @ 0x6
   394                           
   395                           
   396                           ; 2 bytes @ 0x6
   397  0076                     	ds	1
   398  0077                     ??_GflushLoop:	
   399                           
   400                           ; 1 bytes @ 0x7
   401  0077                     	ds	1
   402  0078                     Delay_nms@gtemp:	
   403                           
   404                           ; 1 bytes @ 0x8
   405  0078                     	ds	1
   406  0079                     ??_main:	
   407                           
   408                           	psect	cstackBANK0
   409  0053                     __pcstackBANK0:	
   410                           ; 1 bytes @ 0x9
   411                           
   412  0053                     _KeyControl$3126:	
   413                           
   414                           ; 2 bytes @ 0x0
   415  0053                     	ds	2
   416  0055                     _KeyControl$3127:	
   417                           
   418                           ; 2 bytes @ 0x2
   419  0055                     	ds	2
   420  0057                     _KeyControl$3128:	
   421                           
   422                           ; 2 bytes @ 0x4
   423  0057                     	ds	2
   424  0059                     KeyControl@this:	
   425                           
   426                           ; 1 bytes @ 0x6
   427  0059                     	ds	1
   428                           
   429                           	psect	maintext
   430  03F4                     __pmaintext:	
   431 ;;
   432 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   433 ;;
   434 ;; *************** function _main *****************
   435 ;; Defined at:
   436 ;;		line 473 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\main.c"
   437 ;; Parameters:    Size  Location     Type
   438 ;;		None
   439 ;; Auto vars:     Size  Location     Type
   440 ;;		None
   441 ;; Return value:  Size  Location     Type
   442 ;;                  1    wreg      void 
   443 ;; Registers used:
   444 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   445 ;; Tracked objects:
   446 ;;		On entry : B00/0
   447 ;;		On exit  : 300/0
   448 ;;		Unchanged: 0/0
   449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   450 ;;      Params:         0       0       0       0       0
   451 ;;      Locals:         0       0       0       0       0
   452 ;;      Temps:          0       0       0       0       0
   453 ;;      Totals:         0       0       0       0       0
   454 ;;Total ram usage:        0 bytes
   455 ;; Hardware stack levels required when called:    6
   456 ;; This function calls:
   457 ;;		_Delay_nms
   458 ;;		_FCTloop
   459 ;;		_GflushLoop
   460 ;;		_GledLoop
   461 ;;		_GsensorLoop
   462 ;;		_Init_GPIO
   463 ;;		_Init_IC
   464 ;;		_Init_TIMER1
   465 ;;		_Init_TIMER2
   466 ;; This function is called by:
   467 ;;		Startup code after reset
   468 ;; This function uses a non-reentrant model
   469 ;;
   470                           
   471                           
   472                           ;psect for function _main
   473  03F4                     _main:	
   474                           
   475                           ;incstack = 0
   476                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   477  03F4  0000               	nop	;# 
   478  03F5  0064               	clrwdt	;# 
   479                           
   480                           ;main.c: 478: INTCON = 0;
   481  03F6  018B               	clrf	11	;volatile
   482                           
   483                           ;main.c: 480: Init_GPIO();
   484  03F7  120A  118A  252D  120A  118A  	fcall	_Init_GPIO
   485                           
   486                           ;main.c: 481: Init_IC();
   487  03FC  120A  118A  2542  120A  118A  	fcall	_Init_IC
   488                           
   489                           ;main.c: 482: Delay_nms(200);
   490  0401  30C8               	movlw	200
   491  0402  00F4               	movwf	Delay_nms@inittempl
   492  0403  01F5               	clrf	Delay_nms@inittempl+1
   493  0404  120A  118A  2502  120A  118A  	fcall	_Delay_nms
   494                           
   495                           ;main.c: 483: Init_TIMER1();
   496  0409  120A  118A  2554  120A  118A  	fcall	_Init_TIMER1
   497                           
   498                           ;main.c: 484: Init_TIMER2();
   499  040E  120A  118A  2561  120A  118A  	fcall	_Init_TIMER2
   500                           
   501                           ;main.c: 495: INTCON = 0XC0;
   502  0413  30C0               	movlw	192
   503  0414  008B               	movwf	11	;volatile
   504  0415                     l7532:	
   505                           
   506                           ;main.c: 499: {
   507                           ;main.c: 501: if (Fsys1.bits.bit_1 == 1)
   508  0415  1CCA               	btfss	_Fsys1,1	;volatile
   509  0416  2C15               	goto	l7532
   510  0417  0064               	clrwdt	;# 
   511                           
   512                           ;main.c: 505: Fsys1.bits.bit_1 = 0;
   513  0418  1283               	bcf	3,5	;RP0=0, select bank0
   514  0419  1303               	bcf	3,6	;RP1=0, select bank0
   515  041A  10CA               	bcf	_Fsys1,1	;volatile
   516                           
   517                           ;main.c: 506: switch (SEQmain)
   518  041B  2C3A               	goto	l7546
   519  041C                     l7536:	
   520                           
   521                           ;main.c: 509: FCTloop();
   522  041C  120A  118A  2463  120A  118A  	fcall	_FCTloop
   523                           
   524                           ;main.c: 510: break;
   525  0421  2C5A               	goto	l7548
   526  0422                     l1954:	
   527                           ;main.c: 511: case 1:
   528                           
   529                           
   530                           ;main.c: 512: if(fctBits001.bits.bit_0 == 0)
   531  0422  1846               	btfsc	_fctBits001,0	;volatile
   532  0423  2C5A               	goto	l7548
   533                           
   534                           ;main.c: 513: {
   535                           ;main.c: 514: GsensorLoop();
   536  0424  120A  118A  2230  120A  118A  	fcall	_GsensorLoop
   537  0429  2C5A               	goto	l7548
   538  042A                     l1958:	
   539                           ;main.c: 523: case 4:
   540                           
   541                           
   542                           ;main.c: 524: if(fctBits001.bits.bit_0 == 0)
   543  042A  1846               	btfsc	_fctBits001,0	;volatile
   544  042B  2C5A               	goto	l7548
   545                           
   546                           ;main.c: 525: {
   547                           ;main.c: 526: GflushLoop();
   548  042C  120A  118A  201C  120A  118A  	fcall	_GflushLoop
   549  0431  2C5A               	goto	l7548
   550  0432                     l1963:	
   551                           ;main.c: 538: case 8:
   552                           
   553                           
   554                           ;main.c: 539: if(fctBits001.bits.bit_0 == 0)
   555  0432  1846               	btfsc	_fctBits001,0	;volatile
   556  0433  2C5A               	goto	l7548
   557                           
   558                           ;main.c: 540: {
   559                           ;main.c: 541: GledLoop();
   560  0434  120A  118A  2326  120A  118A  	fcall	_GledLoop
   561  0439  2C5A               	goto	l7548
   562  043A                     l7546:	
   563  043A  0843               	movf	_SEQmain,w	;volatile
   564                           
   565                           ; Switch size 1, requested type "space"
   566                           ; Number of cases is 10, Range of values is 0 to 9
   567                           ; switch strategies available:
   568                           ; Name         Instructions Cycles
   569                           ; simple_byte           31    16 (average)
   570                           ; direct_byte           38     8 (fixed)
   571                           ; jumptable            260     6 (fixed)
   572                           ;	Chosen strategy is simple_byte
   573  043B  3A00               	xorlw	0	; case 0
   574  043C  1903               	skipnz
   575  043D  2C1C               	goto	l7536
   576  043E  3A01               	xorlw	1	; case 1
   577  043F  1903               	skipnz
   578  0440  2C22               	goto	l1954
   579  0441  3A03               	xorlw	3	; case 2
   580  0442  1903               	skipnz
   581  0443  2C5A               	goto	l7548
   582  0444  3A01               	xorlw	1	; case 3
   583  0445  1903               	skipnz
   584  0446  2C5A               	goto	l7548
   585  0447  3A07               	xorlw	7	; case 4
   586  0448  1903               	skipnz
   587  0449  2C2A               	goto	l1958
   588  044A  3A01               	xorlw	1	; case 5
   589  044B  1903               	skipnz
   590  044C  2C5A               	goto	l7548
   591  044D  3A03               	xorlw	3	; case 6
   592  044E  1903               	skipnz
   593  044F  2C5A               	goto	l7548
   594  0450  3A01               	xorlw	1	; case 7
   595  0451  1903               	skipnz
   596  0452  2C5A               	goto	l7548
   597  0453  3A0F               	xorlw	15	; case 8
   598  0454  1903               	skipnz
   599  0455  2C32               	goto	l1963
   600  0456  3A01               	xorlw	1	; case 9
   601  0457  1903               	skipnz
   602  0458  2C5A               	goto	l7548
   603  0459  2C5A               	goto	l7548
   604  045A                     l7548:	
   605                           
   606                           ;main.c: 551: if (++SEQmain >= 10)
   607  045A  300A               	movlw	10
   608  045B  1283               	bcf	3,5	;RP0=0, select bank0
   609  045C  1303               	bcf	3,6	;RP1=0, select bank0
   610  045D  0AC3               	incf	_SEQmain,f	;volatile
   611  045E  0243               	subwf	_SEQmain,w	;volatile
   612  045F  1C03               	skipc
   613  0460  2C15               	goto	l7532
   614                           
   615                           ;main.c: 552: {
   616                           ;main.c: 553: SEQmain = 0;
   617  0461  01C3               	clrf	_SEQmain	;volatile
   618  0462  2C15               	goto	l7532
   619  0463                     __end_of_main:	
   620                           
   621                           	psect	text1
   622  0561                     __ptext1:	
   623 ;; *************** function _Init_TIMER2 *****************
   624 ;; Defined at:
   625 ;;		line 174 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\main.c"
   626 ;; Parameters:    Size  Location     Type
   627 ;;		None
   628 ;; Auto vars:     Size  Location     Type
   629 ;;		None
   630 ;; Return value:  Size  Location     Type
   631 ;;                  1    wreg      void 
   632 ;; Registers used:
   633 ;;		wreg
   634 ;; Tracked objects:
   635 ;;		On entry : 300/0
   636 ;;		On exit  : 300/0
   637 ;;		Unchanged: 0/0
   638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   639 ;;      Params:         0       0       0       0       0
   640 ;;      Locals:         0       0       0       0       0
   641 ;;      Temps:          0       0       0       0       0
   642 ;;      Totals:         0       0       0       0       0
   643 ;;Total ram usage:        0 bytes
   644 ;; Hardware stack levels used:    1
   645 ;; Hardware stack levels required when called:    2
   646 ;; This function calls:
   647 ;;		Nothing
   648 ;; This function is called by:
   649 ;;		_main
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653                           
   654                           ;psect for function _Init_TIMER2
   655  0561                     _Init_TIMER2:	
   656                           
   657                           ;main.c: 176: PR2 = 24;
   658                           
   659                           ;incstack = 0
   660                           ; Regs used in _Init_TIMER2: [wreg]
   661  0561  3018               	movlw	24
   662  0562  1683               	bsf	3,5	;RP0=1, select bank1
   663  0563  0092               	movwf	18	;volatile
   664                           
   665                           ;main.c: 177: TMR2IF = 0;
   666  0564  1283               	bcf	3,5	;RP0=0, select bank0
   667  0565  108C               	bcf	12,1	;volatile
   668                           
   669                           ;main.c: 178: TMR2IE = 1;
   670  0566  1683               	bsf	3,5	;RP0=1, select bank1
   671  0567  148C               	bsf	12,1	;volatile
   672                           
   673                           ;main.c: 179: T2CON = 5;
   674  0568  3005               	movlw	5
   675  0569  1283               	bcf	3,5	;RP0=0, select bank0
   676  056A  0092               	movwf	18	;volatile
   677  056B  0008               	return
   678  056C                     __end_of_Init_TIMER2:	
   679                           
   680                           	psect	text2
   681  0554                     __ptext2:	
   682 ;; *************** function _Init_TIMER1 *****************
   683 ;; Defined at:
   684 ;;		line 152 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\main.c"
   685 ;; Parameters:    Size  Location     Type
   686 ;;		None
   687 ;; Auto vars:     Size  Location     Type
   688 ;;		None
   689 ;; Return value:  Size  Location     Type
   690 ;;                  1    wreg      void 
   691 ;; Registers used:
   692 ;;		wreg
   693 ;; Tracked objects:
   694 ;;		On entry : 0/100
   695 ;;		On exit  : 300/0
   696 ;;		Unchanged: 0/0
   697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   698 ;;      Params:         0       0       0       0       0
   699 ;;      Locals:         0       0       0       0       0
   700 ;;      Temps:          0       0       0       0       0
   701 ;;      Totals:         0       0       0       0       0
   702 ;;Total ram usage:        0 bytes
   703 ;; Hardware stack levels used:    1
   704 ;; Hardware stack levels required when called:    2
   705 ;; This function calls:
   706 ;;		Nothing
   707 ;; This function is called by:
   708 ;;		_main
   709 ;; This function uses a non-reentrant model
   710 ;;
   711                           
   712                           
   713                           ;psect for function _Init_TIMER1
   714  0554                     _Init_TIMER1:	
   715                           
   716                           ;main.c: 156: TMR1 = 0xE0C0;
   717                           
   718                           ;incstack = 0
   719                           ; Regs used in _Init_TIMER1: [wreg]
   720  0554  30E0               	movlw	224
   721  0555  1283               	bcf	3,5	;RP0=0, select bank0
   722  0556  1303               	bcf	3,6	;RP1=0, select bank0
   723  0557  008F               	movwf	15	;volatile
   724  0558  30C0               	movlw	192
   725  0559  008E               	movwf	14	;volatile
   726                           
   727                           ;main.c: 157: TMR1IF = 0;
   728  055A  100C               	bcf	12,0	;volatile
   729                           
   730                           ;main.c: 158: TMR1IE = 1;
   731  055B  1683               	bsf	3,5	;RP0=1, select bank1
   732  055C  140C               	bsf	12,0	;volatile
   733                           
   734                           ;main.c: 159: T1CON = 0x01;
   735  055D  3001               	movlw	1
   736  055E  1283               	bcf	3,5	;RP0=0, select bank0
   737  055F  0090               	movwf	16	;volatile
   738  0560  0008               	return
   739  0561                     __end_of_Init_TIMER1:	
   740                           
   741                           	psect	text3
   742  0542                     __ptext3:	
   743 ;; *************** function _Init_IC *****************
   744 ;; Defined at:
   745 ;;		line 96 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\main.c"
   746 ;; Parameters:    Size  Location     Type
   747 ;;		None
   748 ;; Auto vars:     Size  Location     Type
   749 ;;		None
   750 ;; Return value:  Size  Location     Type
   751 ;;                  1    wreg      void 
   752 ;; Registers used:
   753 ;;		wreg, status,2
   754 ;; Tracked objects:
   755 ;;		On entry : 300/300
   756 ;;		On exit  : 300/100
   757 ;;		Unchanged: 0/0
   758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   759 ;;      Params:         0       0       0       0       0
   760 ;;      Locals:         0       0       0       0       0
   761 ;;      Temps:          0       0       0       0       0
   762 ;;      Totals:         0       0       0       0       0
   763 ;;Total ram usage:        0 bytes
   764 ;; Hardware stack levels used:    1
   765 ;; Hardware stack levels required when called:    2
   766 ;; This function calls:
   767 ;;		Nothing
   768 ;; This function is called by:
   769 ;;		_main
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773                           
   774                           ;psect for function _Init_IC
   775  0542                     _Init_IC:	
   776                           
   777                           ;incstack = 0
   778                           ; Regs used in _Init_IC: [wreg+status,2]
   779  0542  0064               	clrwdt	;# 
   780                           
   781                           ;main.c: 103: INTCON = 0x00;
   782  0543  018B               	clrf	11	;volatile
   783                           
   784                           ;main.c: 108: PIR1 = 0;
   785  0544  1283               	bcf	3,5	;RP0=0, select bank0
   786  0545  1303               	bcf	3,6	;RP1=0, select bank0
   787  0546  018C               	clrf	12	;volatile
   788                           
   789                           ;main.c: 113: PIR2 = 0;
   790  0547  018D               	clrf	13	;volatile
   791                           
   792                           ;main.c: 118: WDTCON = 0x01;
   793  0548  3001               	movlw	1
   794  0549  1703               	bsf	3,6	;RP1=1, select bank2
   795  054A  0085               	movwf	5	;volatile
   796                           
   797                           ;main.c: 123: OPTION_REG = 0b00001110;
   798  054B  300E               	movlw	14
   799  054C  1683               	bsf	3,5	;RP0=1, select bank1
   800  054D  1303               	bcf	3,6	;RP1=0, select bank1
   801  054E  0081               	movwf	1	;volatile
   802                           
   803                           ;main.c: 128: OSCCON = 0x71;
   804  054F  3071               	movlw	113
   805  0550  008F               	movwf	15	;volatile
   806                           
   807                           ;main.c: 133: PIE1 = 0;
   808  0551  018C               	clrf	12	;volatile
   809                           
   810                           ;main.c: 138: PIE2 = 0;
   811  0552  018D               	clrf	13	;volatile
   812  0553  0008               	return
   813  0554                     __end_of_Init_IC:	
   814                           
   815                           	psect	text4
   816  052D                     __ptext4:	
   817 ;; *************** function _Init_GPIO *****************
   818 ;; Defined at:
   819 ;;		line 62 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\main.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;		None
   822 ;; Auto vars:     Size  Location     Type
   823 ;;		None
   824 ;; Return value:  Size  Location     Type
   825 ;;                  1    wreg      void 
   826 ;; Registers used:
   827 ;;		wreg, status,2
   828 ;; Tracked objects:
   829 ;;		On entry : 0/0
   830 ;;		On exit  : 300/300
   831 ;;		Unchanged: 0/0
   832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   833 ;;      Params:         0       0       0       0       0
   834 ;;      Locals:         0       0       0       0       0
   835 ;;      Temps:          0       0       0       0       0
   836 ;;      Totals:         0       0       0       0       0
   837 ;;Total ram usage:        0 bytes
   838 ;; Hardware stack levels used:    1
   839 ;; Hardware stack levels required when called:    2
   840 ;; This function calls:
   841 ;;		Nothing
   842 ;; This function is called by:
   843 ;;		_main
   844 ;; This function uses a non-reentrant model
   845 ;;
   846                           
   847                           
   848                           ;psect for function _Init_GPIO
   849  052D                     _Init_GPIO:	
   850                           
   851                           ;main.c: 66: PORTA = 0B01000000;
   852                           
   853                           ;incstack = 0
   854                           ; Regs used in _Init_GPIO: [wreg+status,2]
   855  052D  3040               	movlw	64
   856  052E  1283               	bcf	3,5	;RP0=0, select bank0
   857  052F  1303               	bcf	3,6	;RP1=0, select bank0
   858  0530  0085               	movwf	5	;volatile
   859                           
   860                           ;main.c: 67: PORTB = 0B00000001;
   861  0531  3001               	movlw	1
   862  0532  0086               	movwf	6	;volatile
   863                           
   864                           ;main.c: 68: PORTC = 0B00000000;
   865  0533  0187               	clrf	7	;volatile
   866                           
   867                           ;main.c: 71: TRISA = 0B01000000;
   868  0534  3040               	movlw	64
   869  0535  1683               	bsf	3,5	;RP0=1, select bank1
   870  0536  0085               	movwf	5	;volatile
   871                           
   872                           ;main.c: 72: TRISB = 0B00000111;
   873  0537  3007               	movlw	7
   874  0538  0086               	movwf	6	;volatile
   875                           
   876                           ;main.c: 73: TRISC = 0B00000000;
   877  0539  0187               	clrf	7	;volatile
   878                           
   879                           ;main.c: 76: WPUA = 0B00000000;
   880  053A  1703               	bsf	3,6	;RP1=1, select bank3
   881  053B  018E               	clrf	14	;volatile
   882                           
   883                           ;main.c: 77: WPUB = 0B00000010;
   884  053C  3002               	movlw	2
   885  053D  1303               	bcf	3,6	;RP1=0, select bank1
   886  053E  0095               	movwf	21	;volatile
   887                           
   888                           ;main.c: 78: WPUC = 0B00000000;
   889  053F  1703               	bsf	3,6	;RP1=1, select bank3
   890  0540  018F               	clrf	15	;volatile
   891  0541  0008               	return
   892  0542                     __end_of_Init_GPIO:	
   893                           
   894                           	psect	text5
   895  0230                     __ptext5:	
   896 ;; *************** function _GsensorLoop *****************
   897 ;; Defined at:
   898 ;;		line 19 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\sensor.c"
   899 ;; Parameters:    Size  Location     Type
   900 ;;		None
   901 ;; Auto vars:     Size  Location     Type
   902 ;;		None
   903 ;; Return value:  Size  Location     Type
   904 ;;                  1    wreg      void 
   905 ;; Registers used:
   906 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   907 ;; Tracked objects:
   908 ;;		On entry : 300/0
   909 ;;		On exit  : 0/0
   910 ;;		Unchanged: 0/0
   911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   912 ;;      Params:         0       0       0       0       0
   913 ;;      Locals:         0       0       0       0       0
   914 ;;      Temps:          0       0       0       0       0
   915 ;;      Totals:         0       0       0       0       0
   916 ;;Total ram usage:        0 bytes
   917 ;; Hardware stack levels used:    1
   918 ;; Hardware stack levels required when called:    3
   919 ;; This function calls:
   920 ;;		_SensorControl
   921 ;;		_SensorJudge
   922 ;;		_SensorKey
   923 ;;		_SensorTime
   924 ;; This function is called by:
   925 ;;		_main
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           
   930                           ;psect for function _GsensorLoop
   931  0230                     _GsensorLoop:	
   932                           
   933                           ;sensor.c: 21: SensorKey();
   934                           
   935                           ;incstack = 0
   936                           ; Regs used in _GsensorLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   937  0230  223A  120A  118A   	fcall	_SensorKey
   938                           
   939                           ;sensor.c: 22: SensorTime();
   940  0233  223B  120A  118A   	fcall	_SensorTime
   941                           
   942                           ;sensor.c: 23: SensorJudge();
   943  0236  228E  120A  118A   	fcall	_SensorJudge
   944                           
   945                           ;sensor.c: 24: SensorControl();
   946  0239  2A73               	ljmp	l7184
   947  023A                     __end_of_GsensorLoop:	
   948  023A                     __ptext7:	
   949 ;; *************** function _SensorKey *****************
   950 ;; Defined at:
   951 ;;		line 27 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\sensor.c"
   952 ;; Parameters:    Size  Location     Type
   953 ;;		None
   954 ;; Auto vars:     Size  Location     Type
   955 ;;		None
   956 ;; Return value:  Size  Location     Type
   957 ;;                  1    wreg      void 
   958 ;; Registers used:
   959 ;;		None
   960 ;; Tracked objects:
   961 ;;		On entry : 300/0
   962 ;;		On exit  : 300/0
   963 ;;		Unchanged: 300/0
   964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   965 ;;      Params:         0       0       0       0       0
   966 ;;      Locals:         0       0       0       0       0
   967 ;;      Temps:          0       0       0       0       0
   968 ;;      Totals:         0       0       0       0       0
   969 ;;Total ram usage:        0 bytes
   970 ;; Hardware stack levels used:    1
   971 ;; Hardware stack levels required when called:    2
   972 ;; This function calls:
   973 ;;		Nothing
   974 ;; This function is called by:
   975 ;;		_GsensorLoop
   976 ;; This function uses a non-reentrant model
   977 ;;
   978                           
   979                           
   980                           ;psect for function _SensorKey
   981  023A                     _SensorKey:	
   982                           
   983                           ;incstack = 0
   984                           ; Regs used in _SensorKey: []
   985  023A  0008               	return
   986  023B                     __end_of_SensorKey:	
   987  023B                     __ptext6:	
   988 ;; *************** function _SensorTime *****************
   989 ;; Defined at:
   990 ;;		line 33 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\sensor.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;		None
   993 ;; Auto vars:     Size  Location     Type
   994 ;;		None
   995 ;; Return value:  Size  Location     Type
   996 ;;                  1    wreg      void 
   997 ;; Registers used:
   998 ;;		wreg, status,2, status,0
   999 ;; Tracked objects:
  1000 ;;		On entry : 300/0
  1001 ;;		On exit  : 300/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1004 ;;      Params:         0       0       0       0       0
  1005 ;;      Locals:         0       0       0       0       0
  1006 ;;      Temps:          0       0       0       0       0
  1007 ;;      Totals:         0       0       0       0       0
  1008 ;;Total ram usage:        0 bytes
  1009 ;; Hardware stack levels used:    1
  1010 ;; Hardware stack levels required when called:    2
  1011 ;; This function calls:
  1012 ;;		Nothing
  1013 ;; This function is called by:
  1014 ;;		_GsensorLoop
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           
  1019                           ;psect for function _SensorTime
  1020  023B                     _SensorTime:	
  1021                           
  1022                           ;sensor.c: 35: if(Fbodysensor.bits.bit_0 == 1)
  1023                           
  1024                           ;incstack = 0
  1025                           ; Regs used in _SensorTime: [wreg+status,2+status,0]
  1026  023B  1C7A               	btfss	_Fbodysensor,0	;volatile
  1027  023C  2A5F               	goto	l7118
  1028                           
  1029                           ;sensor.c: 36: {
  1030                           ;sensor.c: 37: Fbodysensor.bits.bit_5 = 0;
  1031  023D  12FA               	bcf	_Fbodysensor,5	;volatile
  1032                           
  1033                           ;sensor.c: 38: CNTbodyExitTime = 0;
  1034  023E  01A2               	clrf	_CNTbodyExitTime	;volatile
  1035  023F  01A3               	clrf	_CNTbodyExitTime+1	;volatile
  1036                           
  1037                           ;sensor.c: 39: if(FledBits01.bits.bit_2 == 0)
  1038  0240  1947               	btfsc	_FledBits01,2	;volatile
  1039  0241  2A5A               	goto	l3861
  1040                           
  1041                           ;sensor.c: 40: {
  1042                           ;sensor.c: 41: if(++CNTbodyInTime >= 6000)
  1043  0242  0AA4               	incf	_CNTbodyInTime,f	;volatile
  1044  0243  1903               	skipnz
  1045  0244  0AA5               	incf	_CNTbodyInTime+1,f	;volatile
  1046  0245  3017               	movlw	23
  1047  0246  0225               	subwf	_CNTbodyInTime+1,w	;volatile
  1048  0247  3070               	movlw	112
  1049  0248  1903               	skipnz
  1050  0249  0224               	subwf	_CNTbodyInTime,w	;volatile
  1051  024A  1C03               	skipc
  1052  024B  2A52               	goto	l7112
  1053                           
  1054                           ;sensor.c: 42: {
  1055                           ;sensor.c: 43: CNTbodyInTime = 6000;
  1056  024C  3070               	movlw	112
  1057  024D  00A4               	movwf	_CNTbodyInTime	;volatile
  1058  024E  3017               	movlw	23
  1059  024F  00A5               	movwf	_CNTbodyInTime+1	;volatile
  1060                           
  1061                           ;sensor.c: 44: Fbodysensor.bits.bit_3 = 1;
  1062  0250  15FA               	bsf	_Fbodysensor,3	;volatile
  1063                           
  1064                           ;sensor.c: 45: }
  1065  0251  0008               	return
  1066  0252                     l7112:	
  1067                           
  1068                           ;sensor.c: 46: else if(CNTbodyInTime >= 500)
  1069  0252  3001               	movlw	1
  1070  0253  0225               	subwf	_CNTbodyInTime+1,w	;volatile
  1071  0254  30F4               	movlw	244
  1072  0255  1903               	skipnz
  1073  0256  0224               	subwf	_CNTbodyInTime,w	;volatile
  1074  0257  1803               	btfsc	3,0
  1075                           
  1076                           ;sensor.c: 47: {
  1077                           ;sensor.c: 48: Fbodysensor.bits.bit_4 = 1;
  1078  0258  167A               	bsf	_Fbodysensor,4	;volatile
  1079  0259  0008               	return
  1080  025A                     l3861:	
  1081                           
  1082                           ;sensor.c: 51: else
  1083                           ;sensor.c: 52: {
  1084                           ;sensor.c: 53: if(Fbodysensor.bits.bit_4 == 0)
  1085  025A  1A7A               	btfsc	_Fbodysensor,4	;volatile
  1086  025B  0008               	return
  1087                           
  1088                           ;sensor.c: 54: {
  1089                           ;sensor.c: 55: CNTbodyInTime = 0;
  1090  025C  01A4               	clrf	_CNTbodyInTime	;volatile
  1091  025D  01A5               	clrf	_CNTbodyInTime+1	;volatile
  1092                           
  1093                           ;sensor.c: 56: }
  1094                           ;sensor.c: 57: }
  1095                           ;sensor.c: 58: }
  1096  025E  0008               	return
  1097  025F                     l7118:	
  1098                           
  1099                           ;sensor.c: 59: else
  1100                           ;sensor.c: 60: {
  1101                           ;sensor.c: 61: CNTbodyInTime = 0;
  1102  025F  01A4               	clrf	_CNTbodyInTime	;volatile
  1103  0260  01A5               	clrf	_CNTbodyInTime+1	;volatile
  1104                           
  1105                           ;sensor.c: 62: Fbodysensor.bits.bit_4 = 0;
  1106  0261  127A               	bcf	_Fbodysensor,4	;volatile
  1107                           
  1108                           ;sensor.c: 63: Fbodysensor.bits.bit_3 = 0;
  1109  0262  11FA               	bcf	_Fbodysensor,3	;volatile
  1110                           
  1111                           ;sensor.c: 64: if(++CNTbodyExitTime >= 500)
  1112  0263  0AA2               	incf	_CNTbodyExitTime,f	;volatile
  1113  0264  1903               	skipnz
  1114  0265  0AA3               	incf	_CNTbodyExitTime+1,f	;volatile
  1115  0266  3001               	movlw	1
  1116  0267  0223               	subwf	_CNTbodyExitTime+1,w	;volatile
  1117  0268  30F4               	movlw	244
  1118  0269  1903               	skipnz
  1119  026A  0222               	subwf	_CNTbodyExitTime,w	;volatile
  1120  026B  1C03               	skipc
  1121  026C  0008               	return
  1122                           
  1123                           ;sensor.c: 65: {
  1124                           ;sensor.c: 66: CNTbodyExitTime = 500;
  1125  026D  30F4               	movlw	244
  1126  026E  00A2               	movwf	_CNTbodyExitTime	;volatile
  1127  026F  3001               	movlw	1
  1128  0270  00A3               	movwf	_CNTbodyExitTime+1	;volatile
  1129                           
  1130                           ;sensor.c: 67: Fbodysensor.bits.bit_5 = 1;
  1131  0271  16FA               	bsf	_Fbodysensor,5	;volatile
  1132  0272  0008               	return
  1133  0273                     __end_of_SensorTime:	
  1134  0273                     __ptext9:	
  1135 ;; *************** function _SensorControl *****************
  1136 ;; Defined at:
  1137 ;;		line 179 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\sensor.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;		None
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;		None
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  1    wreg      void 
  1144 ;; Registers used:
  1145 ;;		wreg
  1146 ;; Tracked objects:
  1147 ;;		On entry : 300/0
  1148 ;;		On exit  : 0/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1151 ;;      Params:         0       0       0       0       0
  1152 ;;      Locals:         0       0       0       0       0
  1153 ;;      Temps:          1       0       0       0       0
  1154 ;;      Totals:         1       0       0       0       0
  1155 ;;Total ram usage:        1 bytes
  1156 ;; Hardware stack levels used:    1
  1157 ;; Hardware stack levels required when called:    2
  1158 ;; This function calls:
  1159 ;;		Nothing
  1160 ;; This function is called by:
  1161 ;;		_GsensorLoop
  1162 ;; This function uses a non-reentrant model
  1163 ;;
  1164                           
  1165                           
  1166                           ;psect for function _SensorControl
  1167  0273                     _SensorControl:	
  1168  0273                     l7184:	
  1169                           ;incstack = 0
  1170                           ; Regs used in _SensorControl: [wreg]
  1171                           
  1172                           
  1173                           ;sensor.c: 181: Fbodysensor.bits.bit_1 = 0;
  1174  0273  10FA               	bcf	_Fbodysensor,1	;volatile
  1175                           
  1176                           ;sensor.c: 182: Fbodysensor.bits.bit_2 = 0;
  1177  0274  117A               	bcf	_Fbodysensor,2	;volatile
  1178                           
  1179                           ;sensor.c: 183: if(Fbodysensor.bits.bit_6 != Fbodysensor.bits.bit_0)
  1180  0275  1C7A               	btfss	_Fbodysensor,0	;volatile
  1181  0276  2A79               	goto	u1980
  1182  0277  3001               	movlw	1
  1183  0278  2A7A               	goto	u1982
  1184  0279                     u1980:	
  1185  0279  3000               	movlw	0
  1186  027A                     u1982:	
  1187  027A  00F2               	movwf	??_SensorControl
  1188  027B  1F7A               	btfss	_Fbodysensor,6	;volatile
  1189  027C  2A7F               	goto	u1990
  1190  027D  3001               	movlw	1
  1191  027E  2A80               	goto	u1992
  1192  027F                     u1990:	
  1193  027F  3000               	movlw	0
  1194  0280                     u1992:	
  1195  0280  0672               	xorwf	??_SensorControl,w
  1196  0281  1903               	skipnz
  1197  0282  0008               	return
  1198                           
  1199                           ;sensor.c: 184: {
  1200                           ;sensor.c: 185: if(Fbodysensor.bits.bit_0 == 1)
  1201  0283  1C7A               	btfss	_Fbodysensor,0	;volatile
  1202  0284  2A87               	goto	l3898
  1203                           
  1204                           ;sensor.c: 186: {
  1205                           ;sensor.c: 187: Fbodysensor.bits.bit_1 = 1;
  1206  0285  14FA               	bsf	_Fbodysensor,1	;volatile
  1207                           
  1208                           ;sensor.c: 188: }
  1209  0286  2A88               	goto	l3899
  1210  0287                     l3898:	
  1211                           
  1212                           ;sensor.c: 189: else
  1213                           ;sensor.c: 190: {
  1214                           ;sensor.c: 191: Fbodysensor.bits.bit_2 = 1;
  1215  0287  157A               	bsf	_Fbodysensor,2	;volatile
  1216  0288                     l3899:	
  1217                           
  1218                           ;sensor.c: 192: }
  1219                           ;sensor.c: 193: Fbodysensor.bits.bit_6 = Fbodysensor.bits.bit_0;
  1220  0288  1C7A               	btfss	_Fbodysensor,0	;volatile
  1221  0289  2A8C               	goto	u2020
  1222  028A  177A               	bsf	_Fbodysensor,6	;volatile
  1223  028B  0008               	return
  1224  028C                     u2020:	
  1225  028C  137A               	bcf	_Fbodysensor,6	;volatile
  1226  028D  0008               	return
  1227  028E                     __end_of_SensorControl:	
  1228  028E                     __ptext8:	
  1229 ;; *************** function _SensorJudge *****************
  1230 ;; Defined at:
  1231 ;;		line 73 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\sensor.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;		None
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;		None
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  1    wreg      void 
  1238 ;; Registers used:
  1239 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1240 ;; Tracked objects:
  1241 ;;		On entry : 300/0
  1242 ;;		On exit  : 300/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1245 ;;      Params:         0       0       0       0       0
  1246 ;;      Locals:         0       0       0       0       0
  1247 ;;      Temps:          0       0       0       0       0
  1248 ;;      Totals:         0       0       0       0       0
  1249 ;;Total ram usage:        0 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; Hardware stack levels required when called:    2
  1252 ;; This function calls:
  1253 ;;		Nothing
  1254 ;; This function is called by:
  1255 ;;		_GsensorLoop
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259                           
  1260                           ;psect for function _SensorJudge
  1261  028E                     _SensorJudge:	
  1262                           
  1263                           ;sensor.c: 75: switch (SEQbody)
  1264                           
  1265                           ;incstack = 0
  1266                           ; Regs used in _SensorJudge: [wreg-fsr0h+status,2+status,0]
  1267  028E  2B0B               	goto	l7182
  1268  028F                     l3873:	
  1269                           ;sensor.c: 76: {
  1270                           ;sensor.c: 77: case 0:
  1271                           
  1272                           
  1273                           ;sensor.c: 78: Fbodysensor.bits.bit_0 = 0;
  1274  028F  107A               	bcf	_Fbodysensor,0	;volatile
  1275                           
  1276                           ;sensor.c: 79: FledBits01.bits.bit_2 = 0;
  1277  0290  1147               	bcf	_FledBits01,2	;volatile
  1278                           
  1279                           ;sensor.c: 110: }
  1280  0291  2AA0               	goto	l7132
  1281  0292                     l7144:	
  1282                           
  1283                           ;sensor.c: 111: else
  1284                           ;sensor.c: 112: {
  1285                           ;sensor.c: 113: if(++CNTbody_l >= 6)
  1286  0292  0AA8               	incf	_CNTbody_l,f	;volatile
  1287  0293  1903               	skipnz
  1288  0294  0AA9               	incf	_CNTbody_l+1,f	;volatile
  1289  0295  3000               	movlw	0
  1290  0296  0229               	subwf	_CNTbody_l+1,w	;volatile
  1291  0297  3006               	movlw	6
  1292  0298  1903               	skipnz
  1293  0299  0228               	subwf	_CNTbody_l,w	;volatile
  1294  029A  1C03               	skipc
  1295  029B  2AC2               	goto	l7150
  1296                           
  1297                           ;sensor.c: 114: {
  1298                           ;sensor.c: 115: CNTbody_h = 0;
  1299  029C  01AA               	clrf	_CNTbody_h	;volatile
  1300  029D  01AB               	clrf	_CNTbody_h+1	;volatile
  1301                           
  1302                           ;sensor.c: 116: CNTbody_l = 0;
  1303  029E  01A8               	clrf	_CNTbody_l	;volatile
  1304  029F  01A9               	clrf	_CNTbody_l+1	;volatile
  1305  02A0                     l7132:	
  1306                           
  1307                           ;sensor.c: 80: SEQbody = 1;
  1308  02A0  3001               	movlw	1
  1309  02A1  00BE               	movwf	_SEQbody	;volatile
  1310                           
  1311                           ;sensor.c: 81: break;
  1312  02A2  0008               	return
  1313  02A3                     l3875:	
  1314                           ;sensor.c: 84: case 1:
  1315                           
  1316                           
  1317                           ;sensor.c: 85: Fbodysensor.bits.bit_0 = 0;
  1318  02A3  107A               	bcf	_Fbodysensor,0	;volatile
  1319                           
  1320                           ;sensor.c: 86: FledBits01.bits.bit_2 = 0;
  1321  02A4  1147               	bcf	_FledBits01,2	;volatile
  1322                           
  1323                           ;sensor.c: 87: if(RB1 == 0)
  1324  02A5  1886               	btfsc	6,1	;volatile
  1325  02A6  2AB8               	goto	l7140
  1326                           
  1327                           ;sensor.c: 88: {
  1328                           ;sensor.c: 89: if(++CNTbody_h >= 3)
  1329  02A7  0AAA               	incf	_CNTbody_h,f	;volatile
  1330  02A8  1903               	skipnz
  1331  02A9  0AAB               	incf	_CNTbody_h+1,f	;volatile
  1332  02AA  3000               	movlw	0
  1333  02AB  022B               	subwf	_CNTbody_h+1,w	;volatile
  1334  02AC  3003               	movlw	3
  1335  02AD  1903               	skipnz
  1336  02AE  022A               	subwf	_CNTbody_h,w	;volatile
  1337  02AF  1C03               	skipc
  1338  02B0  0008               	return
  1339                           
  1340                           ;sensor.c: 90: {
  1341                           ;sensor.c: 91: CNTbody_h = 0;
  1342  02B1  01AA               	clrf	_CNTbody_h	;volatile
  1343  02B2  01AB               	clrf	_CNTbody_h+1	;volatile
  1344                           
  1345                           ;sensor.c: 92: CNTbody_l = 0;
  1346  02B3  01A8               	clrf	_CNTbody_l	;volatile
  1347  02B4  01A9               	clrf	_CNTbody_l+1	;volatile
  1348                           
  1349                           ;sensor.c: 93: SEQbody = 2;
  1350  02B5  3002               	movlw	2
  1351  02B6  00BE               	movwf	_SEQbody	;volatile
  1352                           
  1353                           ;sensor.c: 94: break;
  1354  02B7  0008               	return
  1355  02B8                     l7140:	
  1356                           
  1357                           ;sensor.c: 97: else
  1358                           ;sensor.c: 98: {
  1359                           ;sensor.c: 99: CNTbody_h = 0;
  1360  02B8  01AA               	clrf	_CNTbody_h	;volatile
  1361  02B9  01AB               	clrf	_CNTbody_h+1	;volatile
  1362  02BA  0008               	return
  1363  02BB                     l3879:	
  1364                           ;sensor.c: 104: case 2:
  1365                           
  1366                           
  1367                           ;sensor.c: 105: Fbodysensor.bits.bit_0 = 0;
  1368  02BB  107A               	bcf	_Fbodysensor,0	;volatile
  1369                           
  1370                           ;sensor.c: 106: FledBits01.bits.bit_2 = 0;
  1371  02BC  1147               	bcf	_FledBits01,2	;volatile
  1372                           
  1373                           ;sensor.c: 107: if(RB1 == 0)
  1374  02BD  1886               	btfsc	6,1	;volatile
  1375  02BE  2A92               	goto	l7144
  1376                           
  1377                           ;sensor.c: 108: {
  1378                           ;sensor.c: 109: ++CNTbody_h;
  1379  02BF  0AAA               	incf	_CNTbody_h,f	;volatile
  1380  02C0  1903               	skipnz
  1381  02C1  0AAB               	incf	_CNTbody_h+1,f	;volatile
  1382  02C2                     l7150:	
  1383                           
  1384                           ;sensor.c: 119: }
  1385                           ;sensor.c: 120: }
  1386                           ;sensor.c: 121: BufCntAdd = CNTbody_h +CNTbody_l;
  1387  02C2  231D  120A  118A   	fcall	PL8	;call to abstracted procedure
  1388                           
  1389                           ;sensor.c: 122: if(BufCntAdd >= 30)
  1390  02C5  3000               	movlw	0
  1391  02C6  0227               	subwf	_BufCntAdd+1,w	;volatile
  1392  02C7  301E               	movlw	30
  1393  02C8  1903               	skipnz
  1394  02C9  0226               	subwf	_BufCntAdd,w	;volatile
  1395  02CA  1C03               	skipc
  1396  02CB  0008               	return
  1397  02CC                     l7154:	
  1398                           
  1399                           ;sensor.c: 123: {
  1400                           ;sensor.c: 124: SEQbody = 3;
  1401  02CC  3003               	movlw	3
  1402  02CD  00BE               	movwf	_SEQbody	;volatile
  1403                           
  1404                           ;sensor.c: 125: break;
  1405  02CE  0008               	return
  1406  02CF                     l3884:	
  1407                           ;sensor.c: 129: case 3:
  1408                           
  1409                           
  1410                           ;sensor.c: 130: Fbodysensor.bits.bit_0 = 1;
  1411  02CF  147A               	bsf	_Fbodysensor,0	;volatile
  1412                           
  1413                           ;sensor.c: 131: FledBits01.bits.bit_2 = 0;
  1414  02D0  1147               	bcf	_FledBits01,2	;volatile
  1415                           
  1416                           ;sensor.c: 132: if(RB1 == 1)
  1417  02D1  1C86               	btfss	6,1	;volatile
  1418  02D2  2AE4               	goto	l7162
  1419                           
  1420                           ;sensor.c: 133: {
  1421                           ;sensor.c: 134: if(++CNTbody_l >= 3)
  1422  02D3  0AA8               	incf	_CNTbody_l,f	;volatile
  1423  02D4  1903               	skipnz
  1424  02D5  0AA9               	incf	_CNTbody_l+1,f	;volatile
  1425  02D6  3000               	movlw	0
  1426  02D7  0229               	subwf	_CNTbody_l+1,w	;volatile
  1427  02D8  3003               	movlw	3
  1428  02D9  1903               	skipnz
  1429  02DA  0228               	subwf	_CNTbody_l,w	;volatile
  1430  02DB  1C03               	skipc
  1431  02DC  0008               	return
  1432                           
  1433                           ;sensor.c: 135: {
  1434                           ;sensor.c: 136: CNTbody_h = 0;
  1435  02DD  01AA               	clrf	_CNTbody_h	;volatile
  1436  02DE  01AB               	clrf	_CNTbody_h+1	;volatile
  1437                           
  1438                           ;sensor.c: 137: CNTbody_l = 0;
  1439  02DF  01A8               	clrf	_CNTbody_l	;volatile
  1440  02E0  01A9               	clrf	_CNTbody_l+1	;volatile
  1441                           
  1442                           ;sensor.c: 138: SEQbody = 4;
  1443  02E1  3004               	movlw	4
  1444  02E2  00BE               	movwf	_SEQbody	;volatile
  1445                           
  1446                           ;sensor.c: 139: break;
  1447  02E3  0008               	return
  1448  02E4                     l7162:	
  1449                           
  1450                           ;sensor.c: 142: else
  1451                           ;sensor.c: 143: {
  1452                           ;sensor.c: 144: CNTbody_l = 0;
  1453  02E4  01A8               	clrf	_CNTbody_l	;volatile
  1454  02E5  01A9               	clrf	_CNTbody_l+1	;volatile
  1455  02E6  0008               	return
  1456  02E7                     l3888:	
  1457                           ;sensor.c: 148: case 4:
  1458                           
  1459                           
  1460                           ;sensor.c: 149: Fbodysensor.bits.bit_0 = 1;
  1461  02E7  147A               	bsf	_Fbodysensor,0	;volatile
  1462                           
  1463                           ;sensor.c: 150: FledBits01.bits.bit_2 = 1;
  1464  02E8  1547               	bsf	_FledBits01,2	;volatile
  1465                           
  1466                           ;sensor.c: 151: if(RB1 == 0)
  1467  02E9  1886               	btfsc	6,1	;volatile
  1468  02EA  2AFA               	goto	l7170
  1469                           
  1470                           ;sensor.c: 152: {
  1471                           ;sensor.c: 153: if(++CNTbody_h >= 6)
  1472  02EB  0AAA               	incf	_CNTbody_h,f	;volatile
  1473  02EC  1903               	skipnz
  1474  02ED  0AAB               	incf	_CNTbody_h+1,f	;volatile
  1475  02EE  3000               	movlw	0
  1476  02EF  022B               	subwf	_CNTbody_h+1,w	;volatile
  1477  02F0  3006               	movlw	6
  1478  02F1  1903               	skipnz
  1479  02F2  022A               	subwf	_CNTbody_h,w	;volatile
  1480  02F3  1C03               	skipc
  1481  02F4  2AFD               	goto	l7172
  1482                           
  1483                           ;sensor.c: 154: {
  1484                           ;sensor.c: 155: CNTbody_h = 0;
  1485  02F5  01AA               	clrf	_CNTbody_h	;volatile
  1486  02F6  01AB               	clrf	_CNTbody_h+1	;volatile
  1487                           
  1488                           ;sensor.c: 156: CNTbody_l = 0;
  1489  02F7  01A8               	clrf	_CNTbody_l	;volatile
  1490  02F8  01A9               	clrf	_CNTbody_l+1	;volatile
  1491  02F9  2ACC               	goto	l7154
  1492  02FA                     l7170:	
  1493                           
  1494                           ;sensor.c: 161: else
  1495                           ;sensor.c: 162: {
  1496                           ;sensor.c: 163: ++CNTbody_l;
  1497  02FA  0AA8               	incf	_CNTbody_l,f	;volatile
  1498  02FB  1903               	skipnz
  1499  02FC  0AA9               	incf	_CNTbody_l+1,f	;volatile
  1500  02FD                     l7172:	
  1501                           
  1502                           ;sensor.c: 164: }
  1503                           ;sensor.c: 165: BufCntAdd = CNTbody_h +CNTbody_l;
  1504  02FD  231D  120A  118A   	fcall	PL8	;call to abstracted procedure
  1505                           
  1506                           ;sensor.c: 166: if(BufCntAdd >= 500)
  1507  0300  3001               	movlw	1
  1508  0301  0227               	subwf	_BufCntAdd+1,w	;volatile
  1509  0302  30F4               	movlw	244
  1510  0303  1903               	skipnz
  1511  0304  0226               	subwf	_BufCntAdd,w	;volatile
  1512  0305  1C03               	skipc
  1513  0306  0008               	return
  1514  0307  2AA0               	goto	l7132
  1515  0308                     l7176:	
  1516                           
  1517                           ;sensor.c: 173: SEQbody = 0;
  1518  0308  01BE               	clrf	_SEQbody	;volatile
  1519                           
  1520                           ;sensor.c: 174: FledBits01.bits.bit_2 = 0;
  1521  0309  1147               	bcf	_FledBits01,2	;volatile
  1522                           
  1523                           ;sensor.c: 175: break;
  1524  030A  0008               	return
  1525  030B                     l7182:	
  1526  030B  083E               	movf	_SEQbody,w	;volatile
  1527                           
  1528                           ; Switch size 1, requested type "space"
  1529                           ; Number of cases is 5, Range of values is 0 to 4
  1530                           ; switch strategies available:
  1531                           ; Name         Instructions Cycles
  1532                           ; simple_byte           16     9 (average)
  1533                           ; direct_byte           23     8 (fixed)
  1534                           ; jumptable            260     6 (fixed)
  1535                           ;	Chosen strategy is simple_byte
  1536  030C  3A00               	xorlw	0	; case 0
  1537  030D  1903               	skipnz
  1538  030E  2A8F               	goto	l3873
  1539  030F  3A01               	xorlw	1	; case 1
  1540  0310  1903               	skipnz
  1541  0311  2AA3               	goto	l3875
  1542  0312  3A03               	xorlw	3	; case 2
  1543  0313  1903               	skipnz
  1544  0314  2ABB               	goto	l3879
  1545  0315  3A01               	xorlw	1	; case 3
  1546  0316  1903               	skipnz
  1547  0317  2ACF               	goto	l3884
  1548  0318  3A07               	xorlw	7	; case 4
  1549  0319  1903               	skipnz
  1550  031A  2AE7               	goto	l3888
  1551  031B  2B08               	goto	l7176
  1552  031C  0008               	return
  1553  031D                     __end_of_SensorJudge:	
  1554  031D                     PL8:	
  1555  031D  0828               	movf	_CNTbody_l,w	;volatile
  1556  031E  072A               	addwf	_CNTbody_h,w	;volatile
  1557  031F  00A6               	movwf	_BufCntAdd	;volatile
  1558  0320  0829               	movf	_CNTbody_l+1,w	;volatile
  1559  0321  1803               	skipnc
  1560  0322  0A29               	incf	_CNTbody_l+1,w	;volatile
  1561  0323  072B               	addwf	_CNTbody_h+1,w	;volatile
  1562  0324  00A7               	movwf	_BufCntAdd+1	;volatile
  1563  0325  0008               	return
  1564  0326                     __end_ofPL8:	
  1565                           
  1566                           	psect	text10
  1567  0326                     __ptext10:	
  1568 ;; *************** function _GledLoop *****************
  1569 ;; Defined at:
  1570 ;;		line 16 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\light.c"
  1571 ;; Parameters:    Size  Location     Type
  1572 ;;		None
  1573 ;; Auto vars:     Size  Location     Type
  1574 ;;		None
  1575 ;; Return value:  Size  Location     Type
  1576 ;;                  1    wreg      void 
  1577 ;; Registers used:
  1578 ;;		wreg, status,2, status,0, pclath, cstack
  1579 ;; Tracked objects:
  1580 ;;		On entry : 300/0
  1581 ;;		On exit  : 300/0
  1582 ;;		Unchanged: 0/0
  1583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1584 ;;      Params:         0       0       0       0       0
  1585 ;;      Locals:         0       0       0       0       0
  1586 ;;      Temps:          0       0       0       0       0
  1587 ;;      Totals:         0       0       0       0       0
  1588 ;;Total ram usage:        0 bytes
  1589 ;; Hardware stack levels used:    1
  1590 ;; Hardware stack levels required when called:    3
  1591 ;; This function calls:
  1592 ;;		_LED_Con
  1593 ;;		_LED_Judge
  1594 ;;		_LED_Key
  1595 ;;		_LED_Time
  1596 ;; This function is called by:
  1597 ;;		_main
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           
  1602                           ;psect for function _GledLoop
  1603  0326                     _GledLoop:	
  1604                           
  1605                           ;light.c: 18: LED_Time();
  1606                           
  1607                           ;incstack = 0
  1608                           ; Regs used in _GledLoop: [wreg+status,2+status,0+pclath+cstack]
  1609  0326  2331  120A  118A   	fcall	_LED_Time
  1610                           
  1611                           ;light.c: 19: LED_Key();
  1612  0329  2330  120A  118A   	fcall	_LED_Key
  1613                           
  1614                           ;light.c: 20: LED_Judge();
  1615  032C  23E0  120A  118A   	fcall	_LED_Judge
  1616                           
  1617                           ;light.c: 21: LED_Con();
  1618  032F  2B34               	ljmp	l6888
  1619  0330                     __end_of_GledLoop:	
  1620  0330                     __ptext12:	
  1621 ;; *************** function _LED_Key *****************
  1622 ;; Defined at:
  1623 ;;		line 24 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\light.c"
  1624 ;; Parameters:    Size  Location     Type
  1625 ;;		None
  1626 ;; Auto vars:     Size  Location     Type
  1627 ;;		None
  1628 ;; Return value:  Size  Location     Type
  1629 ;;                  1    wreg      void 
  1630 ;; Registers used:
  1631 ;;		None
  1632 ;; Tracked objects:
  1633 ;;		On entry : 300/0
  1634 ;;		On exit  : 300/0
  1635 ;;		Unchanged: 300/0
  1636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1637 ;;      Params:         0       0       0       0       0
  1638 ;;      Locals:         0       0       0       0       0
  1639 ;;      Temps:          0       0       0       0       0
  1640 ;;      Totals:         0       0       0       0       0
  1641 ;;Total ram usage:        0 bytes
  1642 ;; Hardware stack levels used:    1
  1643 ;; Hardware stack levels required when called:    2
  1644 ;; This function calls:
  1645 ;;		Nothing
  1646 ;; This function is called by:
  1647 ;;		_GledLoop
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           
  1652                           ;psect for function _LED_Key
  1653  0330                     _LED_Key:	
  1654                           
  1655                           ;incstack = 0
  1656                           ; Regs used in _LED_Key: []
  1657  0330  0008               	return
  1658  0331                     __end_of_LED_Key:	
  1659  0331                     __ptext11:	
  1660 ;; *************** function _LED_Time *****************
  1661 ;; Defined at:
  1662 ;;		line 45 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\light.c"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;		None
  1665 ;; Auto vars:     Size  Location     Type
  1666 ;;		None
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  1    wreg      void 
  1669 ;; Registers used:
  1670 ;;		None
  1671 ;; Tracked objects:
  1672 ;;		On entry : 300/0
  1673 ;;		On exit  : 300/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1676 ;;      Params:         0       0       0       0       0
  1677 ;;      Locals:         0       0       0       0       0
  1678 ;;      Temps:          0       0       0       0       0
  1679 ;;      Totals:         0       0       0       0       0
  1680 ;;Total ram usage:        0 bytes
  1681 ;; Hardware stack levels used:    1
  1682 ;; Hardware stack levels required when called:    2
  1683 ;; This function calls:
  1684 ;;		Nothing
  1685 ;; This function is called by:
  1686 ;;		_GledLoop
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           
  1691                           ;psect for function _LED_Time
  1692  0331                     _LED_Time:	
  1693                           
  1694                           ;light.c: 47: if(Fsys1m.bits.bit_0 == 1)
  1695                           
  1696                           ;incstack = 0
  1697                           ; Regs used in _LED_Time: []
  1698  0331  1848               	btfsc	_Fsys1m,0	;volatile
  1699                           
  1700                           ;light.c: 48: {
  1701                           ;light.c: 49: Fsys1m.bits.bit_0 = 0;
  1702  0332  1048               	bcf	_Fsys1m,0	;volatile
  1703  0333  0008               	return
  1704  0334                     __end_of_LED_Time:	
  1705  0334                     __ptext14:	
  1706 ;; *************** function _LED_Con *****************
  1707 ;; Defined at:
  1708 ;;		line 84 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\light.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;		None
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;		None
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      void 
  1715 ;; Registers used:
  1716 ;;		wreg, status,2, status,0
  1717 ;; Tracked objects:
  1718 ;;		On entry : 300/0
  1719 ;;		On exit  : 300/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1722 ;;      Params:         0       0       0       0       0
  1723 ;;      Locals:         0       0       0       0       0
  1724 ;;      Temps:          0       0       0       0       0
  1725 ;;      Totals:         0       0       0       0       0
  1726 ;;Total ram usage:        0 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    2
  1729 ;; This function calls:
  1730 ;;		Nothing
  1731 ;; This function is called by:
  1732 ;;		_GledLoop
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           
  1737                           ;psect for function _LED_Con
  1738  0334                     _LED_Con:	
  1739  0334                     l6888:	
  1740                           ;incstack = 0
  1741                           ; Regs used in _LED_Con: [wreg+status,2+status,0]
  1742                           
  1743                           
  1744                           ;light.c: 86: RA5 = FledBits01.bits.bit_0;
  1745  0334  1C47               	btfss	_FledBits01,0	;volatile
  1746  0335  2B3A               	goto	u1350
  1747  0336  1283               	bcf	3,5	;RP0=0, select bank0
  1748  0337  1303               	bcf	3,6	;RP1=0, select bank0
  1749  0338  1685               	bsf	5,5	;volatile
  1750  0339  2B3D               	goto	u1364
  1751  033A                     u1350:	
  1752  033A  1283               	bcf	3,5	;RP0=0, select bank0
  1753  033B  1303               	bcf	3,6	;RP1=0, select bank0
  1754  033C  1285               	bcf	5,5	;volatile
  1755  033D                     u1364:	
  1756                           
  1757                           ;light.c: 88: if (FledBits01.bits.bit_0 == 1)
  1758  033D  1C47               	btfss	_FledBits01,0	;volatile
  1759  033E  2BD7               	goto	l6976
  1760                           
  1761                           ;light.c: 89: {
  1762                           ;light.c: 90: if (FledBits01.bits.bit_3 == 0)
  1763  033F  19C7               	btfsc	_FledBits01,3	;volatile
  1764  0340  2B8D               	goto	l6932
  1765                           
  1766                           ;light.c: 91: {
  1767                           ;light.c: 92: if (CNTbreath_Led2 >= 80)
  1768  0341  3000               	movlw	0
  1769  0342  0235               	subwf	_CNTbreath_Led2+1,w	;volatile
  1770  0343  3050               	movlw	80
  1771  0344  1903               	skipnz
  1772  0345  0234               	subwf	_CNTbreath_Led2,w	;volatile
  1773  0346  1C03               	skipc
  1774  0347  2B59               	goto	l6902
  1775                           
  1776                           ;light.c: 93: {
  1777                           ;light.c: 94: CNTbreath_Led2 = 80;
  1778  0348  3050               	movlw	80
  1779  0349  00B4               	movwf	_CNTbreath_Led2	;volatile
  1780  034A  01B5               	clrf	_CNTbreath_Led2+1	;volatile
  1781                           
  1782                           ;light.c: 95: if (++CNTbreath_Led3 > 10)
  1783  034B  0AB2               	incf	_CNTbreath_Led3,f	;volatile
  1784  034C  1903               	skipnz
  1785  034D  0AB3               	incf	_CNTbreath_Led3+1,f	;volatile
  1786  034E  3000               	movlw	0
  1787  034F  0233               	subwf	_CNTbreath_Led3+1,w	;volatile
  1788  0350  300B               	movlw	11
  1789  0351  1903               	skipnz
  1790  0352  0232               	subwf	_CNTbreath_Led3,w	;volatile
  1791  0353  1C03               	skipc
  1792  0354  0008               	return
  1793                           
  1794                           ;light.c: 96: {
  1795                           ;light.c: 97: FledBits01.bits.bit_3 = 1;
  1796  0355  15C7               	bsf	_FledBits01,3	;volatile
  1797                           
  1798                           ;light.c: 98: CNTbreath_Led3 = 0;
  1799  0356  01B2               	clrf	_CNTbreath_Led3	;volatile
  1800  0357  01B3               	clrf	_CNTbreath_Led3+1	;volatile
  1801  0358  0008               	return
  1802  0359                     l6902:	
  1803                           
  1804                           ;light.c: 101: else if (CNTbreath_Led2 > 45)
  1805  0359  3000               	movlw	0
  1806  035A  0235               	subwf	_CNTbreath_Led2+1,w	;volatile
  1807  035B  302E               	movlw	46
  1808  035C  1903               	skipnz
  1809  035D  0234               	subwf	_CNTbreath_Led2,w	;volatile
  1810  035E  1C03               	skipc
  1811  035F  2B78               	goto	l6910
  1812                           
  1813                           ;light.c: 102: {
  1814                           ;light.c: 103: if (++CNTbreath_Led1 >= 3)
  1815  0360  23E8  120A  118A   	fcall	PL10	;call to abstracted procedure
  1816  0363  2B6E               	goto	L3
  1817  0364                     l6912:	
  1818                           
  1819                           ;light.c: 110: {
  1820                           ;light.c: 111: if (++CNTbreath_Led1 >= 8)
  1821  0364  23EE  120A  118A   	fcall	PL12	;call to abstracted procedure
  1822  0367  2B6E               	goto	L3
  1823  0368                     l6920:	
  1824                           
  1825                           ;light.c: 118: {
  1826                           ;light.c: 119: if (++CNTbreath_Led1 >= 5)
  1827  0368  0AB6               	incf	_CNTbreath_Led1,f	;volatile
  1828  0369  1903               	skipnz
  1829  036A  0AB7               	incf	_CNTbreath_Led1+1,f	;volatile
  1830  036B  3000               	movlw	0
  1831  036C  0237               	subwf	_CNTbreath_Led1+1,w	;volatile
  1832  036D  3005               	movlw	5
  1833  036E                     L3:	
  1834  036E  1903               	skipnz
  1835  036F  0236               	subwf	_CNTbreath_Led1,w	;volatile
  1836  0370  1C03               	skipc
  1837  0371  0008               	return
  1838                           
  1839                           ;light.c: 104: {
  1840                           ;light.c: 105: CNTbreath_Led1 = 0;
  1841  0372  01B6               	clrf	_CNTbreath_Led1	;volatile
  1842  0373  01B7               	clrf	_CNTbreath_Led1+1	;volatile
  1843                           
  1844                           ;light.c: 106: CNTbreath_Led2++;
  1845  0374  0AB4               	incf	_CNTbreath_Led2,f	;volatile
  1846  0375  1903               	skipnz
  1847  0376  0AB5               	incf	_CNTbreath_Led2+1,f	;volatile
  1848  0377  0008               	return
  1849  0378                     l6910:	
  1850                           
  1851                           ;light.c: 109: else if (CNTbreath_Led2 > 30)
  1852  0378  3000               	movlw	0
  1853  0379  0235               	subwf	_CNTbreath_Led2+1,w	;volatile
  1854  037A  301F               	movlw	31
  1855  037B  1903               	skipnz
  1856  037C  0234               	subwf	_CNTbreath_Led2,w	;volatile
  1857  037D  1803               	btfsc	3,0
  1858  037E  2B64               	goto	l6912
  1859                           
  1860                           ;light.c: 117: else if (CNTbreath_Led2 > 10)
  1861  037F  3000               	movlw	0
  1862  0380  0235               	subwf	_CNTbreath_Led2+1,w	;volatile
  1863  0381  300B               	movlw	11
  1864  0382  1903               	skipnz
  1865  0383  0234               	subwf	_CNTbreath_Led2,w	;volatile
  1866  0384  1803               	btfsc	3,0
  1867  0385  2B68               	goto	l6920
  1868                           
  1869                           ;light.c: 125: else
  1870                           ;light.c: 126: {
  1871                           ;light.c: 127: if (++CNTbreath_Led1 >= 11)
  1872  0386  0AB6               	incf	_CNTbreath_Led1,f	;volatile
  1873  0387  1903               	skipnz
  1874  0388  0AB7               	incf	_CNTbreath_Led1+1,f	;volatile
  1875  0389  3000               	movlw	0
  1876  038A  0237               	subwf	_CNTbreath_Led1+1,w	;volatile
  1877  038B  300B               	movlw	11
  1878  038C  2B6E               	goto	L3
  1879  038D                     l6932:	
  1880                           ;light.c: 131: }
  1881                           ;light.c: 132: }
  1882                           ;light.c: 133: }
  1883                           
  1884                           
  1885                           ;light.c: 134: else
  1886                           ;light.c: 135: {
  1887                           ;light.c: 136: if (CNTbreath_Led2 < 5)
  1888  038D  3000               	movlw	0
  1889  038E  0235               	subwf	_CNTbreath_Led2+1,w	;volatile
  1890  038F  3005               	movlw	5
  1891  0390  1903               	skipnz
  1892  0391  0234               	subwf	_CNTbreath_Led2,w	;volatile
  1893  0392  1803               	skipnc
  1894  0393  2B99               	goto	l6938
  1895                           
  1896                           ;light.c: 137: {
  1897                           ;light.c: 138: CNTbreath_Led2 = 5;
  1898  0394  3005               	movlw	5
  1899  0395  00B4               	movwf	_CNTbreath_Led2	;volatile
  1900  0396  01B5               	clrf	_CNTbreath_Led2+1	;volatile
  1901                           
  1902                           ;light.c: 139: FledBits01.bits.bit_3 = 0;
  1903  0397  11C7               	bcf	_FledBits01,3	;volatile
  1904                           
  1905                           ;light.c: 140: }
  1906  0398  0008               	return
  1907  0399                     l6938:	
  1908                           
  1909                           ;light.c: 141: else if (CNTbreath_Led2 < 10)
  1910  0399  3000               	movlw	0
  1911  039A  0235               	subwf	_CNTbreath_Led2+1,w	;volatile
  1912  039B  300A               	movlw	10
  1913  039C  1903               	skipnz
  1914  039D  0234               	subwf	_CNTbreath_Led2,w	;volatile
  1915  039E  1803               	skipnc
  1916  039F  2BBE               	goto	l6946
  1917  03A0                     l6948:	
  1918                           ;light.c: 142: {
  1919                           ;light.c: 143: if (++CNTbreath_Led1 >= 6)
  1920                           
  1921                           
  1922                           ;light.c: 150: {
  1923                           ;light.c: 151: if (++CNTbreath_Led1 >= 6)
  1924  03A0  0AB6               	incf	_CNTbreath_Led1,f	;volatile
  1925  03A1  1903               	skipnz
  1926  03A2  0AB7               	incf	_CNTbreath_Led1+1,f	;volatile
  1927  03A3  3000               	movlw	0
  1928  03A4  0237               	subwf	_CNTbreath_Led1+1,w	;volatile
  1929  03A5  3006               	movlw	6
  1930  03A6  2BB1               	goto	L1
  1931  03A7                     l6956:	
  1932                           
  1933                           ;light.c: 158: {
  1934                           ;light.c: 159: if (++CNTbreath_Led1 >= 8)
  1935  03A7  23EE  120A  118A   	fcall	PL12	;call to abstracted procedure
  1936  03AA  2BB1               	goto	L1
  1937  03AB                     l6964:	
  1938                           
  1939                           ;light.c: 166: {
  1940                           ;light.c: 167: if (++CNTbreath_Led1 >= 4)
  1941  03AB  0AB6               	incf	_CNTbreath_Led1,f	;volatile
  1942  03AC  1903               	skipnz
  1943  03AD  0AB7               	incf	_CNTbreath_Led1+1,f	;volatile
  1944  03AE  3000               	movlw	0
  1945  03AF  0237               	subwf	_CNTbreath_Led1+1,w	;volatile
  1946  03B0  3004               	movlw	4
  1947  03B1                     L1:	
  1948  03B1  1903               	skipnz
  1949  03B2  0236               	subwf	_CNTbreath_Led1,w	;volatile
  1950  03B3  1C03               	skipc
  1951  03B4  0008               	return
  1952                           
  1953                           ;light.c: 144: {
  1954                           ;light.c: 145: CNTbreath_Led1 = 0;
  1955  03B5  01B6               	clrf	_CNTbreath_Led1	;volatile
  1956  03B6  01B7               	clrf	_CNTbreath_Led1+1	;volatile
  1957                           
  1958                           ;light.c: 146: CNTbreath_Led2--;
  1959  03B7  3001               	movlw	1
  1960  03B8  02B4               	subwf	_CNTbreath_Led2,f	;volatile
  1961  03B9  3000               	movlw	0
  1962  03BA  1C03               	skipc
  1963  03BB  03B5               	decf	_CNTbreath_Led2+1,f	;volatile
  1964  03BC  02B5               	subwf	_CNTbreath_Led2+1,f	;volatile
  1965  03BD  0008               	return
  1966  03BE                     l6946:	
  1967                           
  1968                           ;light.c: 149: else if (CNTbreath_Led2 < 30)
  1969  03BE  3000               	movlw	0
  1970  03BF  0235               	subwf	_CNTbreath_Led2+1,w	;volatile
  1971  03C0  301E               	movlw	30
  1972  03C1  1903               	skipnz
  1973  03C2  0234               	subwf	_CNTbreath_Led2,w	;volatile
  1974  03C3  1C03               	btfss	3,0
  1975  03C4  2BA0               	goto	l6948
  1976                           
  1977                           ;light.c: 157: else if (CNTbreath_Led2 < 40)
  1978  03C5  3000               	movlw	0
  1979  03C6  0235               	subwf	_CNTbreath_Led2+1,w	;volatile
  1980  03C7  3028               	movlw	40
  1981  03C8  1903               	skipnz
  1982  03C9  0234               	subwf	_CNTbreath_Led2,w	;volatile
  1983  03CA  1C03               	btfss	3,0
  1984  03CB  2BA7               	goto	l6956
  1985                           
  1986                           ;light.c: 165: else if (CNTbreath_Led2 < 60)
  1987  03CC  3000               	movlw	0
  1988  03CD  0235               	subwf	_CNTbreath_Led2+1,w	;volatile
  1989  03CE  303C               	movlw	60
  1990  03CF  1903               	skipnz
  1991  03D0  0234               	subwf	_CNTbreath_Led2,w	;volatile
  1992  03D1  1C03               	btfss	3,0
  1993  03D2  2BAB               	goto	l6964
  1994                           
  1995                           ;light.c: 173: else
  1996                           ;light.c: 174: {
  1997                           ;light.c: 175: if (++CNTbreath_Led1 >= 3)
  1998  03D3  23E8  120A  118A   	fcall	PL10	;call to abstracted procedure
  1999  03D6  2BB1               	goto	L1
  2000  03D7                     l6976:	
  2001                           
  2002                           ;light.c: 183: else
  2003                           ;light.c: 184: {
  2004                           ;light.c: 185: CNTbreath_Led1 = 0;
  2005  03D7  01B6               	clrf	_CNTbreath_Led1	;volatile
  2006  03D8  01B7               	clrf	_CNTbreath_Led1+1	;volatile
  2007                           
  2008                           ;light.c: 186: CNTbreath_Led2 = 0;
  2009  03D9  01B4               	clrf	_CNTbreath_Led2	;volatile
  2010  03DA  01B5               	clrf	_CNTbreath_Led2+1	;volatile
  2011                           
  2012                           ;light.c: 187: CNTbreath_Led3 = 0;
  2013  03DB  01B2               	clrf	_CNTbreath_Led3	;volatile
  2014  03DC  01B3               	clrf	_CNTbreath_Led3+1	;volatile
  2015                           
  2016                           ;light.c: 188: FledBits01.bits.bit_3 = 0;
  2017  03DD  11C7               	bcf	_FledBits01,3	;volatile
  2018                           
  2019                           ;light.c: 189: RA5 = 0;
  2020  03DE  1285               	bcf	5,5	;volatile
  2021  03DF  0008               	return
  2022  03E0                     __end_of_LED_Con:	
  2023  03E0                     __ptext13:	
  2024 ;; *************** function _LED_Judge *****************
  2025 ;; Defined at:
  2026 ;;		line 53 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\light.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;		None
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;		None
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		None
  2035 ;; Tracked objects:
  2036 ;;		On entry : 300/0
  2037 ;;		On exit  : 300/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2040 ;;      Params:         0       0       0       0       0
  2041 ;;      Locals:         0       0       0       0       0
  2042 ;;      Temps:          0       0       0       0       0
  2043 ;;      Totals:         0       0       0       0       0
  2044 ;;Total ram usage:        0 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    2
  2047 ;; This function calls:
  2048 ;;		Nothing
  2049 ;; This function is called by:
  2050 ;;		_GledLoop
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           
  2055                           ;psect for function _LED_Judge
  2056  03E0                     _LED_Judge:	
  2057                           
  2058                           ;light.c: 55: if(Fbodysensor.bits.bit_0 == 1)
  2059                           
  2060                           ;incstack = 0
  2061                           ; Regs used in _LED_Judge: []
  2062  03E0  1C7A               	btfss	_Fbodysensor,0	;volatile
  2063  03E1  2BE6               	goto	l6886
  2064                           
  2065                           ;light.c: 56: {
  2066                           ;light.c: 57: FledBits01.bits.bit_0 = 1;
  2067  03E2  1447               	bsf	_FledBits01,0	;volatile
  2068                           
  2069                           ;light.c: 58: if(Fbodysensor.bits.bit_4 == 0)
  2070  03E3  1E7A               	btfss	_Fbodysensor,4	;volatile
  2071                           
  2072                           ;light.c: 59: {
  2073                           ;light.c: 60: if(FledBits01.bits.bit_2 == 1)
  2074  03E4  1D47               	btfss	_FledBits01,2	;volatile
  2075  03E5  0008               	return
  2076  03E6                     l6886:	
  2077                           
  2078                           ;light.c: 61: {
  2079                           ;light.c: 62: FledBits01.bits.bit_0 = 0;
  2080  03E6  1047               	bcf	_FledBits01,0	;volatile
  2081  03E7  0008               	return
  2082  03E8                     __end_of_LED_Judge:	
  2083  03E8                     PL10:	
  2084  03E8  0AB6               	incf	_CNTbreath_Led1,f	;volatile
  2085  03E9  1903               	skipnz
  2086  03EA  0AB7               	incf	_CNTbreath_Led1+1,f	;volatile
  2087  03EB  3000               	movlw	0
  2088  03EC  0237               	subwf	_CNTbreath_Led1+1,w	;volatile
  2089  03ED  3403               	retlw	3
  2090  03EE                     __end_ofPL10:	
  2091  03EE                     PL12:	
  2092  03EE  0AB6               	incf	_CNTbreath_Led1,f	;volatile
  2093  03EF  1903               	skipnz
  2094  03F0  0AB7               	incf	_CNTbreath_Led1+1,f	;volatile
  2095  03F1  3000               	movlw	0
  2096  03F2  0237               	subwf	_CNTbreath_Led1+1,w	;volatile
  2097  03F3  3408               	retlw	8
  2098  03F4                     __end_ofPL12:	
  2099                           
  2100                           	psect	text15
  2101  001C                     __ptext15:	
  2102 ;; *************** function _GflushLoop *****************
  2103 ;; Defined at:
  2104 ;;		line 15 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\flush.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;		None
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;		None
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2113 ;; Tracked objects:
  2114 ;;		On entry : 300/0
  2115 ;;		On exit  : 300/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2118 ;;      Params:         0       0       0       0       0
  2119 ;;      Locals:         0       0       0       0       0
  2120 ;;      Temps:          0       0       0       0       0
  2121 ;;      Totals:         0       0       0       0       0
  2122 ;;Total ram usage:        0 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; Hardware stack levels required when called:    5
  2125 ;; This function calls:
  2126 ;;		_FlushCon
  2127 ;;		_FlushJudge
  2128 ;;		_FlushTime
  2129 ;; This function is called by:
  2130 ;;		_main
  2131 ;; This function uses a non-reentrant model
  2132 ;;
  2133                           
  2134                           
  2135                           ;psect for function _GflushLoop
  2136  001C                     _GflushLoop:	
  2137                           
  2138                           ;flush.c: 17: FlushTime();
  2139                           
  2140                           ;incstack = 0
  2141                           ; Regs used in _GflushLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2142  001C  2023  120A  118A   	fcall	_FlushTime
  2143                           
  2144                           ;flush.c: 18: FlushJudge();
  2145  001F  20EC  120A  118A   	fcall	_FlushJudge
  2146                           
  2147                           ;flush.c: 19: FlushCon();
  2148  0022  2824               	ljmp	l7018
  2149  0023                     __end_of_GflushLoop:	
  2150  0023                     __ptext16:	
  2151 ;; *************** function _FlushTime *****************
  2152 ;; Defined at:
  2153 ;;		line 22 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\flush.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;		None
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;		None
  2158 ;; Return value:  Size  Location     Type
  2159 ;;                  1    wreg      void 
  2160 ;; Registers used:
  2161 ;;		None
  2162 ;; Tracked objects:
  2163 ;;		On entry : 300/0
  2164 ;;		On exit  : 300/0
  2165 ;;		Unchanged: 300/0
  2166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2167 ;;      Params:         0       0       0       0       0
  2168 ;;      Locals:         0       0       0       0       0
  2169 ;;      Temps:          0       0       0       0       0
  2170 ;;      Totals:         0       0       0       0       0
  2171 ;;Total ram usage:        0 bytes
  2172 ;; Hardware stack levels used:    1
  2173 ;; Hardware stack levels required when called:    2
  2174 ;; This function calls:
  2175 ;;		Nothing
  2176 ;; This function is called by:
  2177 ;;		_GflushLoop
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           
  2182                           ;psect for function _FlushTime
  2183  0023                     _FlushTime:	
  2184                           
  2185                           ;incstack = 0
  2186                           ; Regs used in _FlushTime: []
  2187  0023  0008               	return
  2188  0024                     __end_of_FlushTime:	
  2189  0024                     __ptext21:	
  2190 ;; *************** function _FlushCon *****************
  2191 ;; Defined at:
  2192 ;;		line 107 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\flush.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;		None
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;		None
  2197 ;; Return value:  Size  Location     Type
  2198 ;;                  1    wreg      void 
  2199 ;; Registers used:
  2200 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2201 ;; Tracked objects:
  2202 ;;		On entry : 300/0
  2203 ;;		On exit  : 300/0
  2204 ;;		Unchanged: 0/0
  2205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2206 ;;      Params:         0       0       0       0       0
  2207 ;;      Locals:         0       0       0       0       0
  2208 ;;      Temps:          0       0       0       0       0
  2209 ;;      Totals:         0       0       0       0       0
  2210 ;;Total ram usage:        0 bytes
  2211 ;; Hardware stack levels used:    1
  2212 ;; Hardware stack levels required when called:    2
  2213 ;; This function calls:
  2214 ;;		Nothing
  2215 ;; This function is called by:
  2216 ;;		_GflushLoop
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           
  2221                           ;psect for function _FlushCon
  2222  0024                     _FlushCon:	
  2223  0024                     l7018:	
  2224                           ;incstack = 0
  2225                           ; Regs used in _FlushCon: [wreg-fsr0h+status,2+status,0]
  2226                           
  2227                           
  2228                           ;flush.c: 109: switch (SEQflsuh)
  2229  0024  28C8               	goto	l7096
  2230  0025                     l2908:	
  2231                           ;flush.c: 110: {
  2232                           ;flush.c: 111: case FLUSH_INIT_0:
  2233                           
  2234                           
  2235                           ;flush.c: 112: Fflush1.bits.bit_6 = 0;
  2236  0025  1341               	bcf	_Fflush1,6	;volatile
  2237                           
  2238                           ;flush.c: 113: RA2 = 0;
  2239  0026  1105               	bcf	5,2	;volatile
  2240                           
  2241                           ;flush.c: 114: RA4 = 0;
  2242  0027  1205               	bcf	5,4	;volatile
  2243                           
  2244                           ;flush.c: 115: RA1 = 0;
  2245  0028  1085               	bcf	5,1	;volatile
  2246                           
  2247                           ;flush.c: 116: if((Fflush1.bits.bit_1 == 1) || (Fflush1.bits.bit_3 == 1))
  2248  0029  18C1               	btfsc	_Fflush1,1	;volatile
  2249  002A  282D               	goto	l7022
  2250  002B  1DC1               	btfss	_Fflush1,3	;volatile
  2251  002C  0008               	return
  2252  002D                     l7022:	
  2253                           
  2254                           ;flush.c: 117: {
  2255                           ;flush.c: 118: SEQflsuh = FLUSH_INIT_1;
  2256  002D  3001               	movlw	1
  2257  002E  2830               	goto	L18
  2258  002F                     l7026:	
  2259                           
  2260                           ;flush.c: 128: {
  2261                           ;flush.c: 129: SEQflsuh = FLUSH_END_0;
  2262  002F  3009               	movlw	9
  2263  0030                     L18:	
  2264  0030  00C0               	movwf	_SEQflsuh	;volatile
  2265                           
  2266                           ;flush.c: 119: CNTflush = 0;
  2267  0031  01AC               	clrf	_CNTflush	;volatile
  2268  0032  01AD               	clrf	_CNTflush+1	;volatile
  2269  0033  0008               	return
  2270  0034                     l2913:	
  2271                           ;flush.c: 122: case FLUSH_INIT_1:
  2272                           
  2273                           
  2274                           ;flush.c: 123: Fflush1.bits.bit_6 = 1;
  2275  0034  1741               	bsf	_Fflush1,6	;volatile
  2276                           
  2277                           ;flush.c: 124: RA2 = 0;
  2278  0035  1105               	bcf	5,2	;volatile
  2279                           
  2280                           ;flush.c: 125: RA4 = 0;
  2281  0036  1205               	bcf	5,4	;volatile
  2282                           
  2283                           ;flush.c: 126: RA1 = 0;
  2284  0037  1085               	bcf	5,1	;volatile
  2285                           
  2286                           ;flush.c: 127: if(Fbodysensor.bits.bit_0 == 1)
  2287  0038  187A               	btfsc	_Fbodysensor,0	;volatile
  2288  0039  282F               	goto	l7026
  2289                           
  2290                           ;flush.c: 132: }
  2291                           ;flush.c: 133: if(++CNTflush >= 5)
  2292  003A  0AAC               	incf	_CNTflush,f	;volatile
  2293  003B  1903               	skipnz
  2294  003C  0AAD               	incf	_CNTflush+1,f	;volatile
  2295  003D  3000               	movlw	0
  2296  003E  022D               	subwf	_CNTflush+1,w	;volatile
  2297  003F  3005               	movlw	5
  2298  0040  1903               	skipnz
  2299  0041  022C               	subwf	_CNTflush,w	;volatile
  2300  0042  1C03               	skipc
  2301  0043  0008               	return
  2302                           
  2303                           ;flush.c: 134: {
  2304                           ;flush.c: 135: CNTflush = 0;
  2305  0044  01AC               	clrf	_CNTflush	;volatile
  2306  0045  01AD               	clrf	_CNTflush+1	;volatile
  2307                           
  2308                           ;flush.c: 136: SEQflsuh = FLUSH_INIT_2;
  2309  0046  3002               	movlw	2
  2310  0047  00C0               	movwf	_SEQflsuh	;volatile
  2311  0048  0008               	return
  2312  0049                     l2916:	
  2313                           ;flush.c: 139: case FLUSH_INIT_2:
  2314                           
  2315                           
  2316                           ;flush.c: 140: Fflush1.bits.bit_6 = 1;
  2317  0049  1741               	bsf	_Fflush1,6	;volatile
  2318                           
  2319                           ;flush.c: 141: RA2 = 0;
  2320  004A  1105               	bcf	5,2	;volatile
  2321                           
  2322                           ;flush.c: 142: RA4 = 0;
  2323  004B  1205               	bcf	5,4	;volatile
  2324                           
  2325                           ;flush.c: 143: RA1 = 0;
  2326  004C  1085               	bcf	5,1	;volatile
  2327                           
  2328                           ;flush.c: 144: if(Fbodysensor.bits.bit_0 == 1)
  2329  004D  187A               	btfsc	_Fbodysensor,0	;volatile
  2330  004E  282F               	goto	l7026
  2331                           
  2332                           ;flush.c: 149: }
  2333                           ;flush.c: 151: if(Fflush1.bits.bit_1 == 1)
  2334  004F  1CC1               	btfss	_Fflush1,1	;volatile
  2335  0050  2854               	goto	l2918
  2336                           
  2337                           ;flush.c: 152: {
  2338                           ;flush.c: 153: SEQflsuh = FLUSH_BIG_0;
  2339  0051  3003               	movlw	3
  2340  0052  00C0               	movwf	_SEQflsuh	;volatile
  2341                           
  2342                           ;flush.c: 154: }
  2343  0053  0008               	return
  2344  0054                     l2918:	
  2345                           
  2346                           ;flush.c: 155: else if(Fflush1.bits.bit_3 == 1)
  2347  0054  1DC1               	btfss	_Fflush1,3	;volatile
  2348  0055  0008               	return
  2349                           
  2350                           ;flush.c: 156: {
  2351                           ;flush.c: 157: SEQflsuh = FLUSH_SML_0;
  2352  0056  3006               	movlw	6
  2353  0057  00C0               	movwf	_SEQflsuh	;volatile
  2354  0058  0008               	return
  2355  0059                     l2921:	
  2356                           ;flush.c: 160: case FLUSH_BIG_0:
  2357                           
  2358                           
  2359                           ;flush.c: 161: Fflush1.bits.bit_6 = 1;
  2360                           
  2361                           ;flush.c: 162: RA2 = 0;
  2362                           
  2363                           ;flush.c: 163: RA4 = 1;
  2364                           
  2365                           ;flush.c: 164: RA1 = 1;
  2366                           
  2367                           ;flush.c: 165: if(++CNTflush >= 10)
  2368  0059  221F  120A  118A   	fcall	PL4	;call to abstracted procedure
  2369  005C  1903               	skipnz
  2370  005D  022C               	subwf	_CNTflush,w	;volatile
  2371  005E  1C03               	skipc
  2372  005F  0008               	return
  2373                           
  2374                           ;flush.c: 166: {
  2375                           ;flush.c: 167: CNTflush = 0;
  2376  0060  01AC               	clrf	_CNTflush	;volatile
  2377  0061  01AD               	clrf	_CNTflush+1	;volatile
  2378                           
  2379                           ;flush.c: 168: SEQflsuh = FLUSH_BIG_1;
  2380  0062  3004               	movlw	4
  2381  0063  00C0               	movwf	_SEQflsuh	;volatile
  2382  0064  0008               	return
  2383  0065                     l2923:	
  2384                           ;flush.c: 171: case FLUSH_BIG_1:
  2385                           
  2386                           
  2387                           ;flush.c: 172: Fflush1.bits.bit_6 = 1;
  2388  0065  1741               	bsf	_Fflush1,6	;volatile
  2389                           
  2390                           ;flush.c: 173: RA2 = 1;
  2391  0066  1505               	bsf	5,2	;volatile
  2392                           
  2393                           ;flush.c: 174: RA4 = 1;
  2394  0067  1605               	bsf	5,4	;volatile
  2395                           
  2396                           ;flush.c: 175: RA1 = 1;
  2397  0068  1485               	bsf	5,1	;volatile
  2398                           
  2399                           ;flush.c: 177: if(++CNTflush >= 100)
  2400  0069  0AAC               	incf	_CNTflush,f	;volatile
  2401  006A  1903               	skipnz
  2402  006B  0AAD               	incf	_CNTflush+1,f	;volatile
  2403  006C  3000               	movlw	0
  2404  006D  022D               	subwf	_CNTflush+1,w	;volatile
  2405  006E  3064               	movlw	100
  2406  006F  1903               	skipnz
  2407  0070  022C               	subwf	_CNTflush,w	;volatile
  2408  0071  1C03               	skipc
  2409  0072  0008               	return
  2410                           
  2411                           ;flush.c: 178: {
  2412                           ;flush.c: 179: CNTflush = 0;
  2413  0073  01AC               	clrf	_CNTflush	;volatile
  2414  0074  01AD               	clrf	_CNTflush+1	;volatile
  2415                           
  2416                           ;flush.c: 180: SEQflsuh = FLUSH_BIG_2;
  2417  0075  3005               	movlw	5
  2418  0076  00C0               	movwf	_SEQflsuh	;volatile
  2419  0077  0008               	return
  2420  0078                     l2925:	
  2421                           ;flush.c: 191: case FLUSH_BIG_2:
  2422                           
  2423                           
  2424                           ;flush.c: 192: Fflush1.bits.bit_6 = 1;
  2425                           
  2426                           ;flush.c: 193: RA2 = 0;
  2427                           
  2428                           ;flush.c: 194: RA4 = 1;
  2429                           
  2430                           ;flush.c: 195: RA1 = 1;
  2431                           
  2432                           ;flush.c: 196: if(++CNTflush >= 10)
  2433  0078  221F  120A  118A   	fcall	PL4	;call to abstracted procedure
  2434  007B                     L17:	
  2435  007B  1903               	skipnz
  2436  007C  022C               	subwf	_CNTflush,w	;volatile
  2437  007D  1C03               	skipc
  2438  007E  0008               	return
  2439                           
  2440                           ;flush.c: 197: {
  2441                           ;flush.c: 198: CNTflush = 0;
  2442  007F  01AC               	clrf	_CNTflush	;volatile
  2443  0080  01AD               	clrf	_CNTflush+1	;volatile
  2444                           
  2445                           ;flush.c: 199: SEQflsuh = FLUSH_END_0;
  2446  0081  3009               	movlw	9
  2447  0082  00C0               	movwf	_SEQflsuh	;volatile
  2448  0083  0008               	return
  2449  0084                     l2927:	
  2450                           ;flush.c: 203: case FLUSH_SML_0:
  2451                           
  2452                           
  2453                           ;flush.c: 204: Fflush1.bits.bit_6 = 1;
  2454                           
  2455                           ;flush.c: 205: RA2 = 0;
  2456                           
  2457                           ;flush.c: 206: RA4 = 1;
  2458                           
  2459                           ;flush.c: 207: RA1 = 0;
  2460                           
  2461                           ;flush.c: 208: if(++CNTflush >= 5)
  2462  0084  2215  120A  118A   	fcall	PL2	;call to abstracted procedure
  2463  0087  1903               	skipnz
  2464  0088  022C               	subwf	_CNTflush,w	;volatile
  2465  0089  1C03               	skipc
  2466  008A  0008               	return
  2467                           
  2468                           ;flush.c: 209: {
  2469                           ;flush.c: 210: CNTflush = 0;
  2470  008B  01AC               	clrf	_CNTflush	;volatile
  2471  008C  01AD               	clrf	_CNTflush+1	;volatile
  2472                           
  2473                           ;flush.c: 211: SEQflsuh = FLUSH_SML_1;
  2474  008D  3007               	movlw	7
  2475  008E  00C0               	movwf	_SEQflsuh	;volatile
  2476  008F  0008               	return
  2477  0090                     l2929:	
  2478                           ;flush.c: 214: case FLUSH_SML_1:
  2479                           
  2480                           
  2481                           ;flush.c: 215: Fflush1.bits.bit_6 = 1;
  2482  0090  1741               	bsf	_Fflush1,6	;volatile
  2483                           
  2484                           ;flush.c: 216: RA2 = 1;
  2485  0091  1505               	bsf	5,2	;volatile
  2486                           
  2487                           ;flush.c: 217: RA4 = 1;
  2488  0092  1605               	bsf	5,4	;volatile
  2489                           
  2490                           ;flush.c: 218: RA1 = 0;
  2491                           
  2492                           ;flush.c: 220: if(++CNTflush >= 100)
  2493  0093  2229  120A  118A   	fcall	PL6	;call to abstracted procedure
  2494  0096  3064               	movlw	100
  2495  0097  1903               	skipnz
  2496  0098  022C               	subwf	_CNTflush,w	;volatile
  2497  0099  1C03               	skipc
  2498  009A  0008               	return
  2499                           
  2500                           ;flush.c: 221: {
  2501                           ;flush.c: 222: CNTflush = 0;
  2502  009B  01AC               	clrf	_CNTflush	;volatile
  2503  009C  01AD               	clrf	_CNTflush+1	;volatile
  2504                           
  2505                           ;flush.c: 223: SEQflsuh = FLUSH_SML_2;
  2506  009D  3008               	movlw	8
  2507  009E  00C0               	movwf	_SEQflsuh	;volatile
  2508  009F  0008               	return
  2509  00A0                     l2931:	
  2510                           ;flush.c: 226: case FLUSH_SML_2:
  2511                           
  2512                           
  2513                           ;flush.c: 227: Fflush1.bits.bit_6 = 1;
  2514                           
  2515                           ;flush.c: 228: RA2 = 0;
  2516                           
  2517                           ;flush.c: 229: RA4 = 1;
  2518                           
  2519                           ;flush.c: 230: RA1 = 0;
  2520                           
  2521                           ;flush.c: 231: if(++CNTflush >= 5)
  2522  00A0  2215  120A  118A   	fcall	PL2	;call to abstracted procedure
  2523  00A3  287B               	goto	L17
  2524  00A4                     l2933:	
  2525                           ;flush.c: 238: case FLUSH_END_0:
  2526                           
  2527                           
  2528                           ;flush.c: 239: Fflush1.bits.bit_6 = 1;
  2529  00A4  1741               	bsf	_Fflush1,6	;volatile
  2530                           
  2531                           ;flush.c: 240: RA2 = 0;
  2532  00A5  1105               	bcf	5,2	;volatile
  2533                           
  2534                           ;flush.c: 241: RA4 = 0;
  2535  00A6  1205               	bcf	5,4	;volatile
  2536                           
  2537                           ;flush.c: 242: RA1 = 0;
  2538                           
  2539                           ;flush.c: 243: if(++CNTflush >= 5)
  2540  00A7  2229  120A  118A   	fcall	PL6	;call to abstracted procedure
  2541  00AA  3005               	movlw	5
  2542  00AB  1903               	skipnz
  2543  00AC  022C               	subwf	_CNTflush,w	;volatile
  2544  00AD  1C03               	skipc
  2545  00AE  0008               	return
  2546                           
  2547                           ;flush.c: 244: {
  2548                           ;flush.c: 245: CNTflush = 0;
  2549  00AF  01AC               	clrf	_CNTflush	;volatile
  2550  00B0  01AD               	clrf	_CNTflush+1	;volatile
  2551                           
  2552                           ;flush.c: 246: SEQflsuh = FLUSH_END_1;
  2553  00B1  300A               	movlw	10
  2554  00B2  00C0               	movwf	_SEQflsuh	;volatile
  2555  00B3  0008               	return
  2556  00B4                     l2935:	
  2557                           ;flush.c: 249: case FLUSH_END_1:
  2558                           
  2559                           
  2560                           ;flush.c: 250: Fflush1.bits.bit_6 = 0;
  2561  00B4  1341               	bcf	_Fflush1,6	;volatile
  2562                           
  2563                           ;flush.c: 251: RA2 = 0;
  2564  00B5  1105               	bcf	5,2	;volatile
  2565                           
  2566                           ;flush.c: 252: RA4 = 0;
  2567  00B6  1205               	bcf	5,4	;volatile
  2568                           
  2569                           ;flush.c: 253: RA1 = 0;
  2570  00B7  1085               	bcf	5,1	;volatile
  2571                           
  2572                           ;flush.c: 254: SEQflsuh = FLUSH_INIT_0;
  2573  00B8  01C0               	clrf	_SEQflsuh	;volatile
  2574                           
  2575                           ;flush.c: 255: CNTflush = 0;
  2576  00B9  01AC               	clrf	_CNTflush	;volatile
  2577  00BA  01AD               	clrf	_CNTflush+1	;volatile
  2578                           
  2579                           ;flush.c: 256: Fflush1.bits.bit_1 = 0;
  2580  00BB  10C1               	bcf	_Fflush1,1	;volatile
  2581                           
  2582                           ;flush.c: 257: Fflush1.bits.bit_3 = 0;
  2583  00BC  11C1               	bcf	_Fflush1,3	;volatile
  2584                           
  2585                           ;flush.c: 258: break;
  2586  00BD  0008               	return
  2587  00BE                     l2936:	
  2588                           ;flush.c: 259: default:
  2589                           
  2590                           
  2591                           ;flush.c: 260: Fflush1.bits.bit_6 = 0;
  2592  00BE  1341               	bcf	_Fflush1,6	;volatile
  2593                           
  2594                           ;flush.c: 261: RA2 = 0;
  2595  00BF  1105               	bcf	5,2	;volatile
  2596                           
  2597                           ;flush.c: 262: RA4 = 0;
  2598  00C0  1205               	bcf	5,4	;volatile
  2599                           
  2600                           ;flush.c: 263: RA1 = 0;
  2601  00C1  1085               	bcf	5,1	;volatile
  2602                           
  2603                           ;flush.c: 264: Fflush1.bits.bit_1 = 0;
  2604  00C2  10C1               	bcf	_Fflush1,1	;volatile
  2605                           
  2606                           ;flush.c: 265: Fflush1.bits.bit_3 = 0;
  2607  00C3  11C1               	bcf	_Fflush1,3	;volatile
  2608                           
  2609                           ;flush.c: 266: SEQflsuh = FLUSH_INIT_0;
  2610  00C4  01C0               	clrf	_SEQflsuh	;volatile
  2611                           
  2612                           ;flush.c: 267: CNTflush = 0;
  2613  00C5  01AC               	clrf	_CNTflush	;volatile
  2614  00C6  01AD               	clrf	_CNTflush+1	;volatile
  2615                           
  2616                           ;flush.c: 268: break;
  2617  00C7  0008               	return
  2618  00C8                     l7096:	
  2619  00C8  0840               	movf	_SEQflsuh,w	;volatile
  2620                           
  2621                           ; Switch size 1, requested type "space"
  2622                           ; Number of cases is 11, Range of values is 0 to 10
  2623                           ; switch strategies available:
  2624                           ; Name         Instructions Cycles
  2625                           ; simple_byte           34    18 (average)
  2626                           ; direct_byte           41     8 (fixed)
  2627                           ; jumptable            260     6 (fixed)
  2628                           ;	Chosen strategy is simple_byte
  2629  00C9  3A00               	xorlw	0	; case 0
  2630  00CA  1903               	skipnz
  2631  00CB  2825               	goto	l2908
  2632  00CC  3A01               	xorlw	1	; case 1
  2633  00CD  1903               	skipnz
  2634  00CE  2834               	goto	l2913
  2635  00CF  3A03               	xorlw	3	; case 2
  2636  00D0  1903               	skipnz
  2637  00D1  2849               	goto	l2916
  2638  00D2  3A01               	xorlw	1	; case 3
  2639  00D3  1903               	skipnz
  2640  00D4  2859               	goto	l2921
  2641  00D5  3A07               	xorlw	7	; case 4
  2642  00D6  1903               	skipnz
  2643  00D7  2865               	goto	l2923
  2644  00D8  3A01               	xorlw	1	; case 5
  2645  00D9  1903               	skipnz
  2646  00DA  2878               	goto	l2925
  2647  00DB  3A03               	xorlw	3	; case 6
  2648  00DC  1903               	skipnz
  2649  00DD  2884               	goto	l2927
  2650  00DE  3A01               	xorlw	1	; case 7
  2651  00DF  1903               	skipnz
  2652  00E0  2890               	goto	l2929
  2653  00E1  3A0F               	xorlw	15	; case 8
  2654  00E2  1903               	skipnz
  2655  00E3  28A0               	goto	l2931
  2656  00E4  3A01               	xorlw	1	; case 9
  2657  00E5  1903               	skipnz
  2658  00E6  28A4               	goto	l2933
  2659  00E7  3A03               	xorlw	3	; case 10
  2660  00E8  1903               	skipnz
  2661  00E9  28B4               	goto	l2935
  2662  00EA  28BE               	goto	l2936
  2663  00EB  0008               	return
  2664  00EC                     __end_of_FlushCon:	
  2665  00EC                     __ptext17:	
  2666 ;; *************** function _FlushJudge *****************
  2667 ;; Defined at:
  2668 ;;		line 26 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\flush.c"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;		None
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;  Key_Step        1    6[COMMON] unsigned char 
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  1    wreg      void 
  2675 ;; Registers used:
  2676 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2677 ;; Tracked objects:
  2678 ;;		On entry : 300/0
  2679 ;;		On exit  : 300/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2682 ;;      Params:         0       0       0       0       0
  2683 ;;      Locals:         1       0       0       0       0
  2684 ;;      Temps:          0       0       0       0       0
  2685 ;;      Totals:         1       0       0       0       0
  2686 ;;Total ram usage:        1 bytes
  2687 ;; Hardware stack levels used:    1
  2688 ;; Hardware stack levels required when called:    4
  2689 ;; This function calls:
  2690 ;;		_GkeyLoop
  2691 ;; This function is called by:
  2692 ;;		_GflushLoop
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           
  2697                           ;psect for function _FlushJudge
  2698  00EC                     _FlushJudge:	
  2699                           
  2700                           ;flush.c: 31: if(Fbodysensor.bits.bit_3 == 1)
  2701                           
  2702                           ;incstack = 0
  2703                           ; Regs used in _FlushJudge: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2704  00EC  1DFA               	btfss	_Fbodysensor,3	;volatile
  2705  00ED  28F1               	goto	l2891
  2706                           
  2707                           ;flush.c: 32: {
  2708                           ;flush.c: 33: Fflush1.bits.bit_0 = 1;
  2709  00EE  1441               	bsf	_Fflush1,0	;volatile
  2710                           
  2711                           ;flush.c: 34: Fflush1.bits.bit_2 = 0;
  2712  00EF  1141               	bcf	_Fflush1,2	;volatile
  2713                           
  2714                           ;flush.c: 35: }
  2715  00F0  2907               	goto	l2892
  2716  00F1                     l2891:	
  2717                           
  2718                           ;flush.c: 36: else if(Fbodysensor.bits.bit_4 == 1)
  2719  00F1  1E7A               	btfss	_Fbodysensor,4	;volatile
  2720  00F2  28F5               	goto	l7486
  2721                           
  2722                           ;flush.c: 37: {
  2723                           ;flush.c: 38: Fflush1.bits.bit_2 = 1;
  2724  00F3  1541               	bsf	_Fflush1,2	;volatile
  2725  00F4  28F9               	goto	L4
  2726  00F5                     l7486:	
  2727                           ;flush.c: 40: }
  2728                           
  2729                           ;flush.c: 39: Fflush1.bits.bit_0 = 0;
  2730                           
  2731                           
  2732                           ;flush.c: 41: else if (SEQflsuh)
  2733  00F5  0840               	movf	_SEQflsuh,w	;volatile
  2734  00F6  1903               	btfsc	3,2
  2735  00F7  28FB               	goto	l7490
  2736  00F8                     l7488:	
  2737                           
  2738                           ;flush.c: 42: {
  2739                           ;flush.c: 43: Fflush1.bits.bit_2 = 0;
  2740  00F8  1141               	bcf	_Fflush1,2	;volatile
  2741  00F9                     L4:	
  2742                           
  2743                           ;flush.c: 44: Fflush1.bits.bit_0 = 0;
  2744  00F9  1041               	bcf	_Fflush1,0	;volatile
  2745                           
  2746                           ;flush.c: 45: }
  2747  00FA  2907               	goto	l2892
  2748  00FB                     l7490:	
  2749                           
  2750                           ;flush.c: 46: else
  2751                           ;flush.c: 47: {
  2752                           ;flush.c: 48: Key_Step = GkeyLoop();
  2753  00FB  211B  120A  118A   	fcall	_GkeyLoop
  2754  00FE  00F6               	movwf	FlushJudge@Key_Step
  2755                           
  2756                           ;flush.c: 49: if (Key_Step)
  2757  00FF  0876               	movf	FlushJudge@Key_Step,w
  2758  0100  1903               	btfsc	3,2
  2759  0101  28F8               	goto	l7488
  2760                           
  2761                           ;flush.c: 50: {
  2762                           ;flush.c: 51: SEQflsuh = Key_Step;
  2763  0102  0876               	movf	FlushJudge@Key_Step,w
  2764  0103  00C0               	movwf	_SEQflsuh	;volatile
  2765                           
  2766                           ;flush.c: 52: CNTflush = 0;
  2767  0104  01AC               	clrf	_CNTflush	;volatile
  2768  0105  01AD               	clrf	_CNTflush+1	;volatile
  2769                           
  2770                           ;flush.c: 53: Fflush1.bits.bit_7 = 1;
  2771  0106  17C1               	bsf	_Fflush1,7	;volatile
  2772  0107                     l2892:	
  2773                           ;flush.c: 54: }else
  2774                           
  2775                           
  2776                           ;flush.c: 58: }
  2777                           ;flush.c: 59: }
  2778                           ;flush.c: 76: if (Fbodysensor.bits.bit_2 == 1)
  2779  0107  197A               	btfsc	_Fbodysensor,2	;volatile
  2780                           
  2781                           ;flush.c: 77: {
  2782                           ;flush.c: 78: Fflush1.bits.bit_7 = 1;
  2783  0108  17C1               	bsf	_Fflush1,7	;volatile
  2784                           
  2785                           ;flush.c: 79: }
  2786                           ;flush.c: 80: if (Fflush1.bits.bit_7 == 1)
  2787  0109  1FC1               	btfss	_Fflush1,7	;volatile
  2788  010A  0008               	return
  2789                           
  2790                           ;flush.c: 81: {
  2791                           ;flush.c: 82: if (Fflush1.bits.bit_6 == 1)
  2792  010B  1F41               	btfss	_Fflush1,6	;volatile
  2793  010C  2910               	goto	l2901
  2794                           
  2795                           ;flush.c: 83: {
  2796                           ;flush.c: 84: Fflush1.bits.bit_2 = 0;
  2797  010D  1141               	bcf	_Fflush1,2	;volatile
  2798                           
  2799                           ;flush.c: 85: Fflush1.bits.bit_0 = 0;
  2800  010E  1041               	bcf	_Fflush1,0	;volatile
  2801                           
  2802                           ;flush.c: 86: return;
  2803  010F  0008               	return
  2804  0110                     l2901:	
  2805                           
  2806                           ;flush.c: 87: }
  2807                           ;flush.c: 88: Fflush1.bits.bit_7 = 0;
  2808  0110  13C1               	bcf	_Fflush1,7	;volatile
  2809                           
  2810                           ;flush.c: 89: if(Fflush1.bits.bit_0 == 1)
  2811  0111  1C41               	btfss	_Fflush1,0	;volatile
  2812  0112  2916               	goto	l2903
  2813                           
  2814                           ;flush.c: 90: {
  2815                           ;flush.c: 91: Fflush1.bits.bit_0 = 0;
  2816  0113  1041               	bcf	_Fflush1,0	;volatile
  2817                           
  2818                           ;flush.c: 92: Fflush1.bits.bit_1 = 1;
  2819  0114  14C1               	bsf	_Fflush1,1	;volatile
  2820                           
  2821                           ;flush.c: 93: return;
  2822  0115  0008               	return
  2823  0116                     l2903:	
  2824                           
  2825                           ;flush.c: 94: }
  2826                           ;flush.c: 95: if(Fflush1.bits.bit_2 == 1)
  2827  0116  1D41               	btfss	_Fflush1,2	;volatile
  2828  0117  0008               	return
  2829                           
  2830                           ;flush.c: 96: {
  2831                           ;flush.c: 97: Fflush1.bits.bit_2 = 0;
  2832  0118  1141               	bcf	_Fflush1,2	;volatile
  2833                           
  2834                           ;flush.c: 98: Fflush1.bits.bit_3 = 1;
  2835  0119  15C1               	bsf	_Fflush1,3	;volatile
  2836  011A  0008               	return
  2837  011B                     __end_of_FlushJudge:	
  2838  011B                     __ptext18:	
  2839 ;; *************** function _GkeyLoop *****************
  2840 ;; Defined at:
  2841 ;;		line 7 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\key.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;		None
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;		None
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  1    wreg      unsigned char 
  2848 ;; Registers used:
  2849 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2850 ;; Tracked objects:
  2851 ;;		On entry : 300/0
  2852 ;;		On exit  : 300/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2855 ;;      Params:         0       0       0       0       0
  2856 ;;      Locals:         0       0       0       0       0
  2857 ;;      Temps:          2       0       0       0       0
  2858 ;;      Totals:         2       0       0       0       0
  2859 ;;Total ram usage:        2 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    3
  2862 ;; This function calls:
  2863 ;;		_KeyControl
  2864 ;;		_ScanKey
  2865 ;; This function is called by:
  2866 ;;		_FlushJudge
  2867 ;; This function uses a non-reentrant model
  2868 ;;
  2869                           
  2870                           
  2871                           ;psect for function _GkeyLoop
  2872  011B                     _GkeyLoop:	
  2873                           
  2874                           ;key.c: 9: for ( SeletedLine = 0; SeletedLine < 2; SeletedLine++)
  2875                           
  2876                           ;incstack = 0
  2877                           ; Regs used in _GkeyLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2878  011B  01F9               	clrf	_SeletedLine	;volatile
  2879  011C                     L10:	
  2880  011C  3002               	movlw	2
  2881  011D  0279               	subwf	_SeletedLine,w	;volatile
  2882  011E  1803               	btfsc	3,0
  2883  011F  3400               	retlw	0
  2884                           
  2885                           ;key.c: 10: {
  2886                           ;key.c: 11: KeyLines[SeletedLine].flags.level =ScanKey(SeletedLine);
  2887  0120  0879               	movf	_SeletedLine,w	;volatile
  2888  0121  2202  120A  118A   	fcall	_ScanKey
  2889  0124  00F4               	movwf	??_GkeyLoop
  2890  0125  0879               	movf	_SeletedLine,w	;volatile
  2891  0126  00F5               	movwf	??_GkeyLoop+1
  2892  0127  3001               	movlw	1
  2893  0128  1003               	clrc
  2894  0129                     L5:	
  2895  0129  0DF5               	rlf	??_GkeyLoop+1,f
  2896  012A  3EFF               	addlw	-1
  2897  012B  1003               	clrc
  2898  012C  1D03               	skipz
  2899  012D  2929               	goto	L5
  2900  012E  0D75               	rlf	??_GkeyLoop+1,w
  2901  012F  3E4B               	addlw	(low (_KeyLines| 0))& (0+255)
  2902  0130  0084               	movwf	4
  2903  0131  0DF4               	rlf	??_GkeyLoop,f
  2904  0132  0DF4               	rlf	??_GkeyLoop,f
  2905  0133  1383               	bcf	3,7	;select IRP bank0
  2906  0134  0800               	movf	0,w
  2907  0135  0674               	xorwf	??_GkeyLoop,w
  2908  0136  39FB               	andlw	-5
  2909  0137  0674               	xorwf	??_GkeyLoop,w
  2910  0138  0080               	movwf	0
  2911                           
  2912                           ;key.c: 13: if(KeyLines[SeletedLine].flags.is_forbidden)
  2913  0139  0879               	movf	_SeletedLine,w	;volatile
  2914  013A  00F4               	movwf	??_GkeyLoop
  2915  013B  3001               	movlw	1
  2916  013C  1003               	clrc
  2917  013D                     L6:	
  2918  013D  0DF4               	rlf	??_GkeyLoop,f
  2919  013E  3EFF               	addlw	-1
  2920  013F  1003               	clrc
  2921  0140  1D03               	skipz
  2922  0141  293D               	goto	L6
  2923  0142  0D74               	rlf	??_GkeyLoop,w
  2924  0143  3E4B               	addlw	(low (_KeyLines| 0))& (0+255)
  2925  0144  0084               	movwf	4
  2926  0145  1C00               	btfss	0,0
  2927  0146  2963               	goto	l7454
  2928                           
  2929                           ;key.c: 14: {
  2930                           ;key.c: 15: if (KeyLines[SeletedLine].flags.level)
  2931  0147  0879               	movf	_SeletedLine,w	;volatile
  2932  0148  00F4               	movwf	??_GkeyLoop
  2933  0149  3001               	movlw	1
  2934  014A  1003               	clrc
  2935  014B                     L7:	
  2936  014B  0DF4               	rlf	??_GkeyLoop,f
  2937  014C  3EFF               	addlw	-1
  2938  014D  1003               	clrc
  2939  014E  1D03               	skipz
  2940  014F  294B               	goto	L7
  2941  0150  0D74               	rlf	??_GkeyLoop,w
  2942  0151  3E4B               	addlw	(low (_KeyLines| 0))& (0+255)
  2943  0152  0084               	movwf	4
  2944  0153  1D00               	btfss	0,2
  2945  0154  2983               	goto	l7470
  2946                           
  2947                           ;key.c: 16: {
  2948                           ;key.c: 17: KeyLines[SeletedLine].flags.is_forbidden = 0;
  2949  0155  0879               	movf	_SeletedLine,w	;volatile
  2950  0156  00F4               	movwf	??_GkeyLoop
  2951  0157  3001               	movlw	1
  2952  0158  1003               	clrc
  2953  0159                     L8:	
  2954  0159  0DF4               	rlf	??_GkeyLoop,f
  2955  015A  3EFF               	addlw	-1
  2956  015B  1003               	clrc
  2957  015C  1D03               	skipz
  2958  015D  2959               	goto	L8
  2959  015E  0D74               	rlf	??_GkeyLoop,w
  2960  015F  3E4B               	addlw	(low (_KeyLines| 0))& (0+255)
  2961  0160  0084               	movwf	4
  2962  0161  1000               	bcf	0,0
  2963  0162  2983               	goto	l7470
  2964  0163                     l7454:	
  2965                           
  2966                           ;key.c: 20: }
  2967                           ;key.c: 21: if (KeyControl(&KeyLines[SeletedLine]))
  2968  0163  0879               	movf	_SeletedLine,w	;volatile
  2969  0164  00F4               	movwf	??_GkeyLoop
  2970  0165  3001               	movlw	1
  2971  0166  1003               	clrc
  2972  0167                     L9:	
  2973  0167  0DF4               	rlf	??_GkeyLoop,f
  2974  0168  3EFF               	addlw	-1
  2975  0169  1003               	clrc
  2976  016A  1D03               	skipz
  2977  016B  2967               	goto	L9
  2978  016C  0D74               	rlf	??_GkeyLoop,w
  2979  016D  3E4B               	addlw	(low (_KeyLines| 0))& (0+255)
  2980  016E  2185  120A  118A   	fcall	_KeyControl
  2981  0171  3A00               	xorlw	0
  2982  0172  1D03               	btfss	3,2
  2983  0173  297B               	goto	l7468
  2984  0174  2983               	goto	l7470
  2985  0175                     l5741:	
  2986                           ;key.c: 24: {
  2987                           ;key.c: 25: case PortA:
  2988                           
  2989                           
  2990                           ;key.c: 26: Fflush1.bits.bit_0 = 1;
  2991  0175  1441               	bsf	_Fflush1,0	;volatile
  2992                           
  2993                           ;key.c: 27: KeyLines[PortB].flags.is_forbidden = 1;
  2994  0176  144F               	bsf	_KeyLines+4,0	;volatile
  2995                           
  2996                           ;key.c: 28: return FLUSH_BIG_0;
  2997  0177  3403               	retlw	3
  2998  0178                     l5743:	
  2999                           ;key.c: 29: case PortB:
  3000                           
  3001                           
  3002                           ;key.c: 30: Fflush1.bits.bit_2 = 1;
  3003  0178  1541               	bsf	_Fflush1,2	;volatile
  3004                           
  3005                           ;key.c: 31: KeyLines[PortA].flags.is_forbidden = 1;
  3006  0179  144B               	bsf	_KeyLines,0	;volatile
  3007                           
  3008                           ;key.c: 32: return FLUSH_SML_0;
  3009  017A  3406               	retlw	6
  3010  017B                     l7468:	
  3011  017B  0879               	movf	_SeletedLine,w	;volatile
  3012                           
  3013                           ; Switch size 1, requested type "space"
  3014                           ; Number of cases is 2, Range of values is 0 to 1
  3015                           ; switch strategies available:
  3016                           ; Name         Instructions Cycles
  3017                           ; simple_byte            7     4 (average)
  3018                           ; direct_byte           14     8 (fixed)
  3019                           ; jumptable            260     6 (fixed)
  3020                           ;	Chosen strategy is simple_byte
  3021  017C  3A00               	xorlw	0	; case 0
  3022  017D  1903               	skipnz
  3023  017E  2975               	goto	l5741
  3024  017F  3A01               	xorlw	1	; case 1
  3025  0180  1903               	skipnz
  3026  0181  2978               	goto	l5743
  3027  0182  2983               	goto	l7470
  3028  0183                     l7470:	
  3029  0183  0AF9               	incf	_SeletedLine,f	;volatile
  3030  0184  291C               	goto	L10
  3031  0185                     __end_of_GkeyLoop:	
  3032                           ;key.c: 38: }
  3033                           ;key.c: 39: }
  3034                           ;key.c: 40: return 0;
  3035                           
  3036  0185                     __ptext20:	
  3037 ;; *************** function _KeyControl *****************
  3038 ;; Defined at:
  3039 ;;		line 58 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\key.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;  this            1    wreg     PTR struct _KEY_PRIVATE
  3042 ;;		 -> KeyLines(8), 
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;  this            1    6[BANK0 ] PTR struct _KEY_PRIVATE
  3045 ;;		 -> KeyLines(8), 
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      unsigned char 
  3048 ;; Registers used:
  3049 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3050 ;; Tracked objects:
  3051 ;;		On entry : B00/0
  3052 ;;		On exit  : B00/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3055 ;;      Params:         0       0       0       0       0
  3056 ;;      Locals:         0       7       0       0       0
  3057 ;;      Temps:          2       0       0       0       0
  3058 ;;      Totals:         2       7       0       0       0
  3059 ;;Total ram usage:        9 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    2
  3062 ;; This function calls:
  3063 ;;		Nothing
  3064 ;; This function is called by:
  3065 ;;		_GkeyLoop
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           
  3070                           ;psect for function _KeyControl
  3071  0185                     _KeyControl:	
  3072                           
  3073                           ;incstack = 0
  3074                           ; Regs used in _KeyControl: [wreg-fsr0h+status,2+status,0]
  3075                           ;KeyControl@this stored from wreg
  3076  0185  00D9               	movwf	KeyControl@this
  3077                           
  3078                           ;key.c: 60: if(!(this->flags.level))
  3079  0186  0084               	movwf	4
  3080                           
  3081                           ;key.c: 61: {
  3082                           ;key.c: 62: if (this->flags.is_pressing)
  3083  0187  0859               	movf	KeyControl@this,w
  3084  0188  1900               	btfsc	0,2
  3085  0189  29DB               	goto	L14
  3086  018A  0084               	movwf	4
  3087                           
  3088                           ;key.c: 63: {
  3089                           ;key.c: 64: this->cnt = 0;
  3090  018B  0A59               	incf	KeyControl@this,w
  3091  018C  1C80               	btfss	0,1
  3092  018D  29C0               	goto	L15
  3093  018E  0084               	movwf	4
  3094  018F  0180               	clrf	0
  3095                           
  3096                           ;key.c: 66: if (((++(this->cnt_timeout)) > (600)?(0 == ((this->cnt_timeout) = 0)):0))
  3097  0190  0859               	movf	KeyControl@this,w
  3098  0191  3E02               	addlw	2
  3099  0192  0084               	movwf	4
  3100  0193  3001               	movlw	1
  3101  0194  0780               	addwf	0,f
  3102  0195  0A84               	incf	4,f
  3103  0196  1803               	skipnc
  3104  0197  0A80               	incf	0,f
  3105  0198  0384               	decf	4,f
  3106  0199  0800               	movf	0,w
  3107  019A  00F2               	movwf	??_KeyControl
  3108  019B  0A84               	incf	4,f
  3109  019C  0800               	movf	0,w
  3110  019D  00F3               	movwf	??_KeyControl+1
  3111  019E  3002               	movlw	2
  3112  019F  0273               	subwf	??_KeyControl+1,w
  3113  01A0  3059               	movlw	89
  3114  01A1  1903               	skipnz
  3115  01A2  0272               	subwf	??_KeyControl,w
  3116  01A3  1803               	skipnc
  3117  01A4  29A7               	goto	l7400
  3118  01A5  01D3               	clrf	_KeyControl$3126
  3119  01A6  29B7               	goto	L11
  3120  01A7                     l7400:	
  3121  01A7  0859               	movf	KeyControl@this,w
  3122  01A8  3E02               	addlw	2
  3123  01A9  0084               	movwf	4
  3124  01AA  0180               	clrf	0
  3125  01AB  0A84               	incf	4,f
  3126  01AC  0180               	clrf	0
  3127  01AD  01F2               	clrf	??_KeyControl
  3128  01AE  01F3               	clrf	??_KeyControl+1
  3129  01AF  0872               	movf	??_KeyControl,w
  3130  01B0  0473               	iorwf	??_KeyControl+1,w
  3131  01B1  1D03               	btfss	3,2
  3132  01B2  29B5               	goto	u2330
  3133  01B3  3001               	movlw	1
  3134  01B4  29B6               	goto	u2340
  3135  01B5                     u2330:	
  3136  01B5  3000               	movlw	0
  3137  01B6                     u2340:	
  3138  01B6  00D3               	movwf	_KeyControl$3126
  3139  01B7                     L11:	
  3140  01B7  01D4               	clrf	_KeyControl$3126+1
  3141  01B8  0853               	movf	_KeyControl$3126,w
  3142  01B9  0454               	iorwf	_KeyControl$3126+1,w
  3143  01BA  1903               	btfsc	3,2
  3144  01BB  3400               	retlw	0
  3145                           
  3146                           ;key.c: 67: {
  3147                           ;key.c: 68: this->flags.is_forbidden = 1;
  3148  01BC  0859               	movf	KeyControl@this,w
  3149  01BD  0084               	movwf	4
  3150  01BE  1400               	bsf	0,0
  3151  01BF  3400               	retlw	0
  3152  01C0                     L15:	
  3153                           ;key.c: 72: {
  3154                           ;key.c: 73: if (((++(this->cnt)) > (10)?(0 == ((this->cnt) = 0)):0))
  3155                           
  3156  01C0  0084               	movwf	4
  3157  01C1  300B               	movlw	11
  3158  01C2  0A80               	incf	0,f
  3159  01C3  0200               	subwf	0,w
  3160  01C4  1803               	skipnc
  3161  01C5  29C8               	goto	l7410
  3162  01C6  01D5               	clrf	_KeyControl$3127
  3163  01C7  29D1               	goto	L12
  3164  01C8                     l7410:	
  3165  01C8  0A59               	incf	KeyControl@this,w
  3166  01C9  0084               	movwf	4
  3167  01CA  0180               	clrf	0
  3168  01CB  1D03               	btfss	3,2
  3169  01CC  29CF               	goto	u2370
  3170  01CD  3001               	movlw	1
  3171  01CE  29D0               	goto	u2380
  3172  01CF                     u2370:	
  3173  01CF  3000               	movlw	0
  3174  01D0                     u2380:	
  3175  01D0  00D5               	movwf	_KeyControl$3127
  3176  01D1                     L12:	
  3177  01D1  01D6               	clrf	_KeyControl$3127+1
  3178  01D2  0855               	movf	_KeyControl$3127,w
  3179  01D3  0456               	iorwf	_KeyControl$3127+1,w
  3180  01D4  1903               	btfsc	3,2
  3181  01D5  3400               	retlw	0
  3182                           
  3183                           ;key.c: 74: {
  3184                           ;key.c: 75: this->flags.is_pressing = 1;
  3185  01D6  0859               	movf	KeyControl@this,w
  3186  01D7  0084               	movwf	4
  3187  01D8  3001               	movlw	1
  3188  01D9  1480               	bsf	0,1
  3189                           
  3190                           ;key.c: 76: return 1;
  3191  01DA  0008               	return
  3192  01DB                     L14:	
  3193                           ;key.c: 81: else
  3194                           ;key.c: 82: {
  3195                           ;key.c: 83: if (this->flags.is_pressing)
  3196                           
  3197  01DB  0084               	movwf	4
  3198                           
  3199                           ;key.c: 84: {
  3200                           ;key.c: 85: if (((++(this->cnt)) > (10)?(0 == ((this->cnt) = 0)):0))
  3201  01DC  0A59               	incf	KeyControl@this,w
  3202  01DD  1C80               	btfss	0,1
  3203  01DE  29F9               	goto	L16
  3204  01DF  0084               	movwf	4
  3205  01E0  300B               	movlw	11
  3206  01E1  0A80               	incf	0,f
  3207  01E2  0200               	subwf	0,w
  3208  01E3  1803               	skipnc
  3209  01E4  29E7               	goto	l7426
  3210  01E5  01D7               	clrf	_KeyControl$3128
  3211  01E6  29F0               	goto	L13
  3212  01E7                     l7426:	
  3213  01E7  0A59               	incf	KeyControl@this,w
  3214  01E8  0084               	movwf	4
  3215  01E9  0180               	clrf	0
  3216  01EA  1D03               	btfss	3,2
  3217  01EB  29EE               	goto	u2420
  3218  01EC  3001               	movlw	1
  3219  01ED  29EF               	goto	u2430
  3220  01EE                     u2420:	
  3221  01EE  3000               	movlw	0
  3222  01EF                     u2430:	
  3223  01EF  00D7               	movwf	_KeyControl$3128
  3224  01F0                     L13:	
  3225  01F0  01D8               	clrf	_KeyControl$3128+1
  3226  01F1  0857               	movf	_KeyControl$3128,w
  3227  01F2  0458               	iorwf	_KeyControl$3128+1,w
  3228  01F3  1903               	btfsc	3,2
  3229  01F4  3400               	retlw	0
  3230                           
  3231                           ;key.c: 86: {
  3232                           ;key.c: 87: this->flags.is_pressing = 0;
  3233  01F5  0859               	movf	KeyControl@this,w
  3234  01F6  0084               	movwf	4
  3235  01F7  1080               	bcf	0,1
  3236  01F8  3400               	retlw	0
  3237  01F9                     L16:	
  3238                           ;key.c: 90: {
  3239                           ;key.c: 91: this->cnt = 0;
  3240                           
  3241  01F9  0084               	movwf	4
  3242  01FA  0180               	clrf	0
  3243                           
  3244                           ;key.c: 92: this->cnt_timeout = 0;
  3245  01FB  0859               	movf	KeyControl@this,w
  3246  01FC  3E02               	addlw	2
  3247  01FD  0084               	movwf	4
  3248  01FE  0180               	clrf	0
  3249  01FF  0A84               	incf	4,f
  3250  0200  0180               	clrf	0
  3251                           
  3252                           ;key.c: 93: }
  3253                           ;key.c: 95: }
  3254                           ;key.c: 96: return 0;
  3255  0201  3400               	retlw	0
  3256  0202                     __end_of_KeyControl:	
  3257  0202                     __ptext19:	
  3258 ;; *************** function _ScanKey *****************
  3259 ;; Defined at:
  3260 ;;		line 45 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\key.c"
  3261 ;; Parameters:    Size  Location     Type
  3262 ;;  line_num        1    wreg     enum E872
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;  line_num        1    2[COMMON] enum E872
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  1    wreg      unsigned char 
  3267 ;; Registers used:
  3268 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3269 ;; Tracked objects:
  3270 ;;		On entry : 300/0
  3271 ;;		On exit  : 300/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3274 ;;      Params:         0       0       0       0       0
  3275 ;;      Locals:         1       0       0       0       0
  3276 ;;      Temps:          0       0       0       0       0
  3277 ;;      Totals:         1       0       0       0       0
  3278 ;;Total ram usage:        1 bytes
  3279 ;; Hardware stack levels used:    1
  3280 ;; Hardware stack levels required when called:    2
  3281 ;; This function calls:
  3282 ;;		Nothing
  3283 ;; This function is called by:
  3284 ;;		_GkeyLoop
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           
  3289                           ;psect for function _ScanKey
  3290  0202                     _ScanKey:	
  3291                           
  3292                           ;incstack = 0
  3293                           ; Regs used in _ScanKey: [wreg-fsr0h+status,2+status,0]
  3294                           ;ScanKey@line_num stored from wreg
  3295  0202  00F2               	movwf	ScanKey@line_num
  3296                           
  3297                           ;key.c: 47: switch (line_num)
  3298  0203  2A0C               	goto	l6786
  3299  0204                     l6776:	
  3300                           
  3301                           ;key.c: 50: return RA6;
  3302  0204  3000               	movlw	0
  3303  0205  1B05               	btfsc	5,6	;volatile
  3304  0206  3001               	movlw	1
  3305  0207  0008               	return
  3306  0208                     l6780:	
  3307                           
  3308                           ;key.c: 52: return RB0;
  3309  0208  3000               	movlw	0
  3310  0209  1806               	btfsc	6,0	;volatile
  3311  020A  3001               	movlw	1
  3312  020B  0008               	return
  3313  020C                     l6786:	
  3314  020C  0872               	movf	ScanKey@line_num,w
  3315                           
  3316                           ; Switch size 1, requested type "space"
  3317                           ; Number of cases is 2, Range of values is 0 to 1
  3318                           ; switch strategies available:
  3319                           ; Name         Instructions Cycles
  3320                           ; simple_byte            7     4 (average)
  3321                           ; direct_byte           14     8 (fixed)
  3322                           ; jumptable            260     6 (fixed)
  3323                           ;	Chosen strategy is simple_byte
  3324  020D  3A00               	xorlw	0	; case 0
  3325  020E  1903               	skipnz
  3326  020F  2A04               	goto	l6776
  3327  0210  3A01               	xorlw	1	; case 1
  3328  0211  1903               	skipnz
  3329  0212  2A08               	goto	l6780
  3330  0213  2A14               	goto	l5750
  3331  0214                     l5750:	
  3332  0214  0008               	return
  3333  0215                     __end_of_ScanKey:	
  3334  0215                     PL2:	
  3335  0215  1741               	bsf	_Fflush1,6	;volatile
  3336  0216  1105               	bcf	5,2	;volatile
  3337  0217  1605               	bsf	5,4	;volatile
  3338  0218  1085               	bcf	5,1	;volatile
  3339  0219  0AAC               	incf	_CNTflush,f	;volatile
  3340  021A  1903               	skipnz
  3341  021B  0AAD               	incf	_CNTflush+1,f	;volatile
  3342  021C  3000               	movlw	0
  3343  021D  022D               	subwf	_CNTflush+1,w	;volatile
  3344  021E  3405               	retlw	5
  3345  021F                     __end_ofPL2:	
  3346  021F                     PL4:	
  3347  021F  1741               	bsf	_Fflush1,6	;volatile
  3348  0220  1105               	bcf	5,2	;volatile
  3349  0221  1605               	bsf	5,4	;volatile
  3350  0222  1485               	bsf	5,1	;volatile
  3351  0223  0AAC               	incf	_CNTflush,f	;volatile
  3352  0224  1903               	skipnz
  3353  0225  0AAD               	incf	_CNTflush+1,f	;volatile
  3354  0226  3000               	movlw	0
  3355  0227  022D               	subwf	_CNTflush+1,w	;volatile
  3356  0228  340A               	retlw	10
  3357  0229                     __end_ofPL4:	
  3358  0229                     PL6:	
  3359  0229  1085               	bcf	5,1	;volatile
  3360  022A  0AAC               	incf	_CNTflush,f	;volatile
  3361  022B  1903               	skipnz
  3362  022C  0AAD               	incf	_CNTflush+1,f	;volatile
  3363  022D  3000               	movlw	0
  3364  022E  022D               	subwf	_CNTflush+1,w	;volatile
  3365  022F  0008               	return
  3366  0230                     __end_ofPL6:	
  3367                           
  3368                           	psect	text22
  3369  0463                     __ptext22:	
  3370 ;; *************** function _FCTloop *****************
  3371 ;; Defined at:
  3372 ;;		line 16 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\fct.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;		None
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;		None
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  1    wreg      void 
  3379 ;; Registers used:
  3380 ;;		wreg, status,2, status,0, pclath, cstack
  3381 ;; Tracked objects:
  3382 ;;		On entry : 300/0
  3383 ;;		On exit  : 300/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3386 ;;      Params:         0       0       0       0       0
  3387 ;;      Locals:         0       0       0       0       0
  3388 ;;      Temps:          0       0       0       0       0
  3389 ;;      Totals:         0       0       0       0       0
  3390 ;;Total ram usage:        0 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; Hardware stack levels required when called:    3
  3393 ;; This function calls:
  3394 ;;		_FCTjudge
  3395 ;;		_FCTkey
  3396 ;; This function is called by:
  3397 ;;		_main
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           
  3402                           ;psect for function _FCTloop
  3403  0463                     _FCTloop:	
  3404                           
  3405                           ;fct.c: 18: FCTkey();
  3406                           
  3407                           ;incstack = 0
  3408                           ; Regs used in _FCTloop: [wreg+status,2+status,0+pclath+cstack]
  3409  0463  24B8  120A  118A   	fcall	_FCTkey
  3410                           
  3411                           ;fct.c: 19: FCTjudge();
  3412  0466  2C67               	ljmp	l7202
  3413  0467                     __end_of_FCTloop:	
  3414  0467                     __ptext24:	
  3415 ;; *************** function _FCTjudge *****************
  3416 ;; Defined at:
  3417 ;;		line 39 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\fct.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;		None
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;		None
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  1    wreg      void 
  3424 ;; Registers used:
  3425 ;;		wreg, status,2, status,0
  3426 ;; Tracked objects:
  3427 ;;		On entry : 300/0
  3428 ;;		On exit  : 300/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3431 ;;      Params:         0       0       0       0       0
  3432 ;;      Locals:         0       0       0       0       0
  3433 ;;      Temps:          0       0       0       0       0
  3434 ;;      Totals:         0       0       0       0       0
  3435 ;;Total ram usage:        0 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    2
  3438 ;; This function calls:
  3439 ;;		Nothing
  3440 ;; This function is called by:
  3441 ;;		_FCTloop
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           
  3446                           ;psect for function _FCTjudge
  3447  0467                     _FCTjudge:	
  3448  0467                     l7202:	
  3449                           ;incstack = 0
  3450                           ; Regs used in _FCTjudge: [wreg+status,2+status,0]
  3451                           
  3452                           
  3453                           ;fct.c: 41: if(fctBits001.bits.bit_0 == 1)
  3454  0467  1C46               	btfss	_fctBits001,0	;volatile
  3455  0468  2CB4               	goto	l7248
  3456                           
  3457                           ;fct.c: 42: {
  3458                           ;fct.c: 43: if(RB1 == 0)
  3459  0469  1886               	btfsc	6,1	;volatile
  3460  046A  2C88               	goto	l7224
  3461                           
  3462                           ;fct.c: 44: {
  3463                           ;fct.c: 45: if(++CNTfctSensior >= 50)
  3464  046B  3032               	movlw	50
  3465  046C  0ABC               	incf	_CNTfctSensior,f	;volatile
  3466  046D  023C               	subwf	_CNTfctSensior,w	;volatile
  3467  046E  1C03               	skipc
  3468  046F  0008               	return
  3469                           
  3470                           ;fct.c: 46: {
  3471                           ;fct.c: 47: CNTfct = 0;
  3472  0470  01A0               	clrf	_CNTfct	;volatile
  3473  0471  01A1               	clrf	_CNTfct+1	;volatile
  3474                           
  3475                           ;fct.c: 48: CNTfctSensior = 50;
  3476  0472  3032               	movlw	50
  3477  0473  00BC               	movwf	_CNTfctSensior	;volatile
  3478                           
  3479                           ;fct.c: 49: if(++CNTfctFlashLed >= 50)
  3480  0474  0ABB               	incf	_CNTfctFlashLed,f	;volatile
  3481  0475  023B               	subwf	_CNTfctFlashLed,w	;volatile
  3482  0476  1C03               	skipc
  3483  0477  2C7A               	goto	l7216
  3484                           
  3485                           ;fct.c: 50: {
  3486                           ;fct.c: 51: CNTfctFlashLed = 0;
  3487  0478  01BB               	clrf	_CNTfctFlashLed	;volatile
  3488                           
  3489                           ;fct.c: 52: }
  3490  0479  0008               	return
  3491  047A                     l7216:	
  3492                           
  3493                           ;fct.c: 53: else if(CNTfctFlashLed == 25)
  3494  047A  3019               	movlw	25
  3495  047B  063B               	xorwf	_CNTfctFlashLed,w	;volatile
  3496  047C  1D03               	btfss	3,2
  3497  047D  2C82               	goto	l7220
  3498                           
  3499                           ;fct.c: 54: {
  3500                           ;fct.c: 55: RA5 = 1;
  3501  047E  1685               	bsf	5,5	;volatile
  3502                           
  3503                           ;fct.c: 56: RA2 = 1;
  3504  047F  1505               	bsf	5,2	;volatile
  3505                           
  3506                           ;fct.c: 57: RA4 = 1;
  3507  0480  1605               	bsf	5,4	;volatile
  3508                           
  3509                           ;fct.c: 58: }
  3510  0481  0008               	return
  3511  0482                     l7220:	
  3512                           
  3513                           ;fct.c: 59: else if(CNTfctFlashLed == 1)
  3514  0482  0B3B               	decfsz	_CNTfctFlashLed,w	;volatile
  3515  0483  0008               	return
  3516                           
  3517                           ;fct.c: 60: {
  3518                           ;fct.c: 61: RA5 = 0;
  3519  0484  1285               	bcf	5,5	;volatile
  3520                           
  3521                           ;fct.c: 62: RA2 = 0;
  3522  0485  1105               	bcf	5,2	;volatile
  3523                           
  3524                           ;fct.c: 63: RA4 = 0;
  3525  0486  1205               	bcf	5,4	;volatile
  3526                           
  3527                           ;fct.c: 64: }
  3528                           ;fct.c: 65: }
  3529                           ;fct.c: 66: }
  3530  0487  0008               	return
  3531  0488                     l7224:	
  3532                           
  3533                           ;fct.c: 67: else
  3534                           ;fct.c: 68: {
  3535                           ;fct.c: 69: CNTfctSensior = 0;
  3536  0488  01BC               	clrf	_CNTfctSensior	;volatile
  3537                           
  3538                           ;fct.c: 70: if(++CNTfct >= 100)
  3539  0489  0AA0               	incf	_CNTfct,f	;volatile
  3540  048A  1903               	skipnz
  3541  048B  0AA1               	incf	_CNTfct+1,f	;volatile
  3542  048C  3000               	movlw	0
  3543  048D  0221               	subwf	_CNTfct+1,w	;volatile
  3544  048E  3064               	movlw	100
  3545  048F  1903               	skipnz
  3546  0490  0220               	subwf	_CNTfct,w	;volatile
  3547  0491  1C03               	skipc
  3548  0492  2C99               	goto	l7236
  3549                           
  3550                           ;fct.c: 71: {
  3551                           ;fct.c: 72: CNTfct = 0;
  3552  0493  01A0               	clrf	_CNTfct	;volatile
  3553  0494  01A1               	clrf	_CNTfct+1	;volatile
  3554                           
  3555                           ;fct.c: 74: RA5 = 0;
  3556  0495  1285               	bcf	5,5	;volatile
  3557                           
  3558                           ;fct.c: 75: RA2 = 0;
  3559  0496  1105               	bcf	5,2	;volatile
  3560                           
  3561                           ;fct.c: 76: RA4 = 0;
  3562  0497  1205               	bcf	5,4	;volatile
  3563                           
  3564                           ;fct.c: 77: }
  3565  0498  0008               	return
  3566  0499                     l7236:	
  3567                           
  3568                           ;fct.c: 78: else if(CNTfct == 75)
  3569  0499  304B               	movlw	75
  3570  049A  0620               	xorwf	_CNTfct,w	;volatile
  3571  049B  0421               	iorwf	_CNTfct+1,w	;volatile
  3572  049C  1D03               	btfss	3,2
  3573  049D  2CA2               	goto	l7240
  3574                           
  3575                           ;fct.c: 79: {
  3576                           ;fct.c: 80: RA5 = 1;
  3577  049E  1685               	bsf	5,5	;volatile
  3578                           
  3579                           ;fct.c: 81: RA2 = 0;
  3580  049F  1105               	bcf	5,2	;volatile
  3581                           
  3582                           ;fct.c: 82: RA4 = 0;
  3583  04A0  1205               	bcf	5,4	;volatile
  3584                           
  3585                           ;fct.c: 83: }
  3586  04A1  0008               	return
  3587  04A2                     l7240:	
  3588                           
  3589                           ;fct.c: 84: else if(CNTfct == 50)
  3590  04A2  3032               	movlw	50
  3591  04A3  0620               	xorwf	_CNTfct,w	;volatile
  3592  04A4  0421               	iorwf	_CNTfct+1,w	;volatile
  3593  04A5  1D03               	btfss	3,2
  3594  04A6  2CAB               	goto	l7244
  3595                           
  3596                           ;fct.c: 85: {
  3597                           ;fct.c: 86: RA5 = 0;
  3598  04A7  1285               	bcf	5,5	;volatile
  3599                           
  3600                           ;fct.c: 87: RA2 = 1;
  3601  04A8  1505               	bsf	5,2	;volatile
  3602                           
  3603                           ;fct.c: 88: RA4 = 0;
  3604  04A9  1205               	bcf	5,4	;volatile
  3605                           
  3606                           ;fct.c: 89: }
  3607  04AA  0008               	return
  3608  04AB                     l7244:	
  3609                           
  3610                           ;fct.c: 90: else if(CNTfct == 25)
  3611  04AB  3019               	movlw	25
  3612  04AC  0620               	xorwf	_CNTfct,w	;volatile
  3613  04AD  0421               	iorwf	_CNTfct+1,w	;volatile
  3614  04AE  1D03               	btfss	3,2
  3615  04AF  0008               	return
  3616                           
  3617                           ;fct.c: 91: {
  3618                           ;fct.c: 92: RA5 = 0;
  3619  04B0  1285               	bcf	5,5	;volatile
  3620                           
  3621                           ;fct.c: 93: RA2 = 0;
  3622  04B1  1105               	bcf	5,2	;volatile
  3623                           
  3624                           ;fct.c: 94: RA4 = 1;
  3625  04B2  1605               	bsf	5,4	;volatile
  3626  04B3  0008               	return
  3627  04B4                     l7248:	
  3628                           
  3629                           ;fct.c: 98: else
  3630                           ;fct.c: 99: {
  3631                           ;fct.c: 100: CNTfctSensior = 0;
  3632  04B4  01BC               	clrf	_CNTfctSensior	;volatile
  3633                           
  3634                           ;fct.c: 101: CNTfct = 0;
  3635  04B5  01A0               	clrf	_CNTfct	;volatile
  3636  04B6  01A1               	clrf	_CNTfct+1	;volatile
  3637  04B7  0008               	return
  3638  04B8                     __end_of_FCTjudge:	
  3639  04B8                     __ptext23:	
  3640 ;; *************** function _FCTkey *****************
  3641 ;; Defined at:
  3642 ;;		line 22 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\fct.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;		None
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;		None
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  1    wreg      void 
  3649 ;; Registers used:
  3650 ;;		wreg, status,2, status,0
  3651 ;; Tracked objects:
  3652 ;;		On entry : 300/0
  3653 ;;		On exit  : 300/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3656 ;;      Params:         0       0       0       0       0
  3657 ;;      Locals:         0       0       0       0       0
  3658 ;;      Temps:          0       0       0       0       0
  3659 ;;      Totals:         0       0       0       0       0
  3660 ;;Total ram usage:        0 bytes
  3661 ;; Hardware stack levels used:    1
  3662 ;; Hardware stack levels required when called:    2
  3663 ;; This function calls:
  3664 ;;		Nothing
  3665 ;; This function is called by:
  3666 ;;		_FCTloop
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           
  3671                           ;psect for function _FCTkey
  3672  04B8                     _FCTkey:	
  3673                           
  3674                           ;fct.c: 24: if(RB2 == 1)
  3675                           
  3676                           ;incstack = 0
  3677                           ; Regs used in _FCTkey: [wreg+status,2+status,0]
  3678  04B8  1D06               	btfss	6,2	;volatile
  3679  04B9  2CC3               	goto	l4808
  3680                           
  3681                           ;fct.c: 25: {
  3682                           ;fct.c: 26: if(++CNTfctStart >= 50)
  3683  04BA  3032               	movlw	50
  3684  04BB  0ABD               	incf	_CNTfctStart,f	;volatile
  3685  04BC  023D               	subwf	_CNTfctStart,w	;volatile
  3686  04BD  1C03               	skipc
  3687  04BE  0008               	return
  3688                           
  3689                           ;fct.c: 27: {
  3690                           ;fct.c: 28: CNTfctStart = 50;
  3691  04BF  3032               	movlw	50
  3692  04C0  00BD               	movwf	_CNTfctStart	;volatile
  3693                           
  3694                           ;fct.c: 29: fctBits001.bits.bit_0 = 1;
  3695  04C1  1446               	bsf	_fctBits001,0	;volatile
  3696  04C2  0008               	return
  3697  04C3                     l4808:	
  3698                           
  3699                           ;fct.c: 32: else
  3700                           ;fct.c: 33: {
  3701                           ;fct.c: 34: fctBits001.bits.bit_0 = 0;
  3702  04C3  1046               	bcf	_fctBits001,0	;volatile
  3703                           
  3704                           ;fct.c: 35: CNTfctStart = 0;
  3705  04C4  01BD               	clrf	_CNTfctStart	;volatile
  3706  04C5  0008               	return
  3707  04C6                     __end_of_FCTkey:	
  3708                           
  3709                           	psect	text25
  3710  0502                     __ptext25:	
  3711 ;; *************** function _Delay_nms *****************
  3712 ;; Defined at:
  3713 ;;		line 35 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\main.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;  inittempl       2    4[COMMON] unsigned int 
  3716 ;; Auto vars:     Size  Location     Type
  3717 ;;  i               2    6[COMMON] unsigned int 
  3718 ;;  gtemp           1    8[COMMON] unsigned char 
  3719 ;; Return value:  Size  Location     Type
  3720 ;;                  1    wreg      void 
  3721 ;; Registers used:
  3722 ;;		wreg, status,2, status,0, pclath, cstack
  3723 ;; Tracked objects:
  3724 ;;		On entry : 300/100
  3725 ;;		On exit  : 0/0
  3726 ;;		Unchanged: 0/0
  3727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3728 ;;      Params:         2       0       0       0       0
  3729 ;;      Locals:         3       0       0       0       0
  3730 ;;      Temps:          0       0       0       0       0
  3731 ;;      Totals:         5       0       0       0       0
  3732 ;;Total ram usage:        5 bytes
  3733 ;; Hardware stack levels used:    1
  3734 ;; Hardware stack levels required when called:    3
  3735 ;; This function calls:
  3736 ;;		_Delay
  3737 ;; This function is called by:
  3738 ;;		_main
  3739 ;; This function uses a non-reentrant model
  3740 ;;
  3741                           
  3742                           
  3743                           ;psect for function _Delay_nms
  3744  0502                     _Delay_nms:	
  3745                           
  3746                           ;main.c: 37: unsigned int i;
  3747                           ;main.c: 38: unsigned char gtemp;
  3748                           ;main.c: 40: gtemp = 0;
  3749                           
  3750                           ;incstack = 0
  3751                           ; Regs used in _Delay_nms: [wreg+status,2+status,0+pclath+cstack]
  3752  0502  01F8               	clrf	Delay_nms@gtemp
  3753                           
  3754                           ;main.c: 41: if (GIE == 1)
  3755  0503  1F8B               	btfss	11,7	;volatile
  3756  0504  2D08               	goto	l7272
  3757                           
  3758                           ;main.c: 42: {
  3759                           ;main.c: 43: gtemp = 1;
  3760  0505  01F8               	clrf	Delay_nms@gtemp
  3761  0506  0AF8               	incf	Delay_nms@gtemp,f
  3762                           
  3763                           ;main.c: 44: GIE = 0;
  3764  0507  138B               	bcf	11,7	;volatile
  3765  0508                     l7272:	
  3766                           
  3767                           ;main.c: 45: }
  3768                           ;main.c: 46: for (i = 0; i < inittempl; i++)
  3769  0508  01F6               	clrf	Delay_nms@i
  3770  0509  01F7               	clrf	Delay_nms@i+1
  3771  050A                     l7278:	
  3772  050A  0875               	movf	Delay_nms@inittempl+1,w
  3773  050B  0277               	subwf	Delay_nms@i+1,w
  3774  050C  1D03               	skipz
  3775  050D  2D10               	goto	u2205
  3776  050E  0874               	movf	Delay_nms@inittempl,w
  3777  050F  0276               	subwf	Delay_nms@i,w
  3778  0510                     u2205:	
  3779  0510  1803               	btfsc	3,0
  3780  0511  2D1D               	goto	l7280
  3781                           
  3782                           ;main.c: 47: {
  3783                           ;main.c: 48: Delay(154);
  3784  0512  309A               	movlw	154
  3785  0513  00F2               	movwf	Delay@dtemp
  3786  0514  01F3               	clrf	Delay@dtemp+1
  3787  0515  2521  120A  118A   	fcall	_Delay
  3788  0518  0064               	clrwdt	;# 
  3789  0519  0AF6               	incf	Delay_nms@i,f
  3790  051A  1903               	skipnz
  3791  051B  0AF7               	incf	Delay_nms@i+1,f
  3792  051C  2D0A               	goto	l7278
  3793  051D                     l7280:	
  3794                           
  3795                           ;main.c: 50: }
  3796                           ;main.c: 51: if (gtemp == 1)
  3797  051D  0B78               	decfsz	Delay_nms@gtemp,w
  3798  051E  0008               	return
  3799                           
  3800                           ;main.c: 52: GIE = 1;
  3801  051F  178B               	bsf	11,7	;volatile
  3802  0520  0008               	return
  3803  0521                     __end_of_Delay_nms:	
  3804  0521                     __ptext26:	
  3805 ;; *************** function _Delay *****************
  3806 ;; Defined at:
  3807 ;;		line 27 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\main.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  dtemp           2    2[COMMON] unsigned int 
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;		None
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  1    wreg      void 
  3814 ;; Registers used:
  3815 ;;		wreg, status,2, status,0
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/100
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3821 ;;      Params:         2       0       0       0       0
  3822 ;;      Locals:         0       0       0       0       0
  3823 ;;      Temps:          0       0       0       0       0
  3824 ;;      Totals:         2       0       0       0       0
  3825 ;;Total ram usage:        2 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; Hardware stack levels required when called:    2
  3828 ;; This function calls:
  3829 ;;		Nothing
  3830 ;; This function is called by:
  3831 ;;		_Delay_nms
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           
  3836                           ;psect for function _Delay
  3837  0521                     _Delay:	
  3838  0521                     l6984:	
  3839                           ;main.c: 29: while (dtemp--)
  3840                           
  3841                           ;incstack = 0
  3842                           ; Regs used in _Delay: [wreg+status,2+status,0]
  3843                           
  3844  0521  3001               	movlw	1
  3845  0522  02F2               	subwf	Delay@dtemp,f
  3846  0523  3000               	movlw	0
  3847  0524  1C03               	skipc
  3848  0525  03F3               	decf	Delay@dtemp+1,f
  3849  0526  02F3               	subwf	Delay@dtemp+1,f
  3850  0527  0F72               	incfsz	Delay@dtemp,w
  3851  0528  2D21               	goto	l6984
  3852  0529  0A73               	incf	Delay@dtemp+1,w
  3853  052A  1903               	btfsc	3,2
  3854  052B  0008               	return
  3855  052C  2D21               	goto	l6984
  3856  052D                     __end_of_Delay:	
  3857                           
  3858                           	psect	text27
  3859  04C6                     __ptext27:	
  3860 ;; *************** function _Int_ALL *****************
  3861 ;; Defined at:
  3862 ;;		line 563 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\main.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;		None
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;		None
  3867 ;; Return value:  Size  Location     Type
  3868 ;;                  1    wreg      void 
  3869 ;; Registers used:
  3870 ;;		wreg, status,2, status,0, pclath, cstack
  3871 ;; Tracked objects:
  3872 ;;		On entry : 0/0
  3873 ;;		On exit  : 300/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3876 ;;      Params:         0       0       0       0       0
  3877 ;;      Locals:         0       0       0       0       0
  3878 ;;      Temps:          2       0       0       0       0
  3879 ;;      Totals:         2       0       0       0       0
  3880 ;;Total ram usage:        2 bytes
  3881 ;; Hardware stack levels used:    1
  3882 ;; Hardware stack levels required when called:    1
  3883 ;; This function calls:
  3884 ;;		_INT_LED_SHOW
  3885 ;; This function is called by:
  3886 ;;		Interrupt level 1
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           
  3891                           ;psect for function _Int_ALL
  3892  04C6                     _Int_ALL:	
  3893                           
  3894                           ;main.c: 566: if (TMR1IF)
  3895  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  3896  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  3897  04C8  1C0C               	btfss	12,0	;volatile
  3898  04C9  2CDE               	goto	i1l7384
  3899                           
  3900                           ;main.c: 567: {
  3901                           ;main.c: 573: TMR1 = 0xE0C0;
  3902  04CA  30E0               	movlw	224
  3903  04CB  008F               	movwf	15	;volatile
  3904  04CC  30C0               	movlw	192
  3905  04CD  008E               	movwf	14	;volatile
  3906                           
  3907                           ;main.c: 574: TMR1IF = 0;
  3908  04CE  100C               	bcf	12,0	;volatile
  3909                           
  3910                           ;main.c: 577: Fsys1.bits.bit_1 = 1;
  3911  04CF  14CA               	bsf	_Fsys1,1	;volatile
  3912                           
  3913                           ;main.c: 580: if (++MainTime_1s >= 1000)
  3914  04D0  0AB0               	incf	_MainTime_1s,f	;volatile
  3915  04D1  1903               	skipnz
  3916  04D2  0AB1               	incf	_MainTime_1s+1,f	;volatile
  3917  04D3  3003               	movlw	3
  3918  04D4  0231               	subwf	_MainTime_1s+1,w	;volatile
  3919  04D5  30E8               	movlw	232
  3920  04D6  1903               	skipnz
  3921  04D7  0230               	subwf	_MainTime_1s,w	;volatile
  3922  04D8  1C03               	skipc
  3923  04D9  2CDE               	goto	i1l7384
  3924                           
  3925                           ;main.c: 581: {
  3926                           ;main.c: 582: MainTime_1s = 0;
  3927  04DA  01B0               	clrf	_MainTime_1s	;volatile
  3928  04DB  01B1               	clrf	_MainTime_1s+1	;volatile
  3929                           
  3930                           ;main.c: 583: Fsys1s.byte = 0xFF;
  3931  04DC  30FF               	movlw	255
  3932  04DD  00C9               	movwf	_Fsys1s	;volatile
  3933  04DE                     i1l7384:	
  3934                           
  3935                           ;main.c: 591: }
  3936                           ;main.c: 592: }
  3937                           ;main.c: 595: if (TMR2IF)
  3938  04DE  1C8C               	btfss	12,1	;volatile
  3939  04DF  2CE2               	goto	i1l1978
  3940                           
  3941                           ;main.c: 596: {
  3942                           ;main.c: 597: TMR2IF = 0;
  3943  04E0  108C               	bcf	12,1	;volatile
  3944                           
  3945                           ;main.c: 598: INT_LED_SHOW();
  3946  04E1  24E9               	fcall	_INT_LED_SHOW
  3947  04E2                     i1l1978:	
  3948  04E2  0871               	movf	??_Int_ALL+1,w
  3949  04E3  008A               	movwf	10
  3950  04E4  0E70               	swapf	??_Int_ALL^(0+-128),w
  3951  04E5  0083               	movwf	3
  3952  04E6  0EFE               	swapf	126,f
  3953  04E7  0E7E               	swapf	126,w
  3954  04E8  0009               	retfie
  3955  04E9                     __end_of_Int_ALL:	
  3956  04E9                     __ptext28:	
  3957 ;; *************** function _INT_LED_SHOW *****************
  3958 ;; Defined at:
  3959 ;;		line 193 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\light.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;		None
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;		None
  3964 ;; Return value:  Size  Location     Type
  3965 ;;                  1    wreg      void 
  3966 ;; Registers used:
  3967 ;;		wreg, status,2, status,0
  3968 ;; Tracked objects:
  3969 ;;		On entry : 300/0
  3970 ;;		On exit  : 300/0
  3971 ;;		Unchanged: 0/0
  3972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3973 ;;      Params:         0       0       0       0       0
  3974 ;;      Locals:         0       0       0       0       0
  3975 ;;      Temps:          0       0       0       0       0
  3976 ;;      Totals:         0       0       0       0       0
  3977 ;;Total ram usage:        0 bytes
  3978 ;; Hardware stack levels used:    1
  3979 ;; This function calls:
  3980 ;;		Nothing
  3981 ;; This function is called by:
  3982 ;;		_Int_ALL
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           
  3987                           ;psect for function _INT_LED_SHOW
  3988  04E9                     _INT_LED_SHOW:	
  3989                           
  3990                           ;light.c: 196: if(FledBits01.bits.bit_0 == 1)
  3991                           
  3992                           ;incstack = 0
  3993                           ; Regs used in _INT_LED_SHOW: [wreg+status,2+status,0]
  3994  04E9  1C47               	btfss	_FledBits01,0	;volatile
  3995  04EA  0008               	return
  3996                           
  3997                           ;light.c: 197: {
  3998                           ;light.c: 198: if (++CNTbreath_Led == 80)
  3999  04EB  0AB8               	incf	_CNTbreath_Led,f	;volatile
  4000  04EC  1903               	skipnz
  4001  04ED  0AB9               	incf	_CNTbreath_Led+1,f	;volatile
  4002  04EE  3050               	movlw	80
  4003  04EF  0638               	xorwf	_CNTbreath_Led,w	;volatile
  4004  04F0  0439               	iorwf	_CNTbreath_Led+1,w	;volatile
  4005  04F1  1D03               	btfss	3,2
  4006  04F2  2CF6               	goto	i1l7262
  4007                           
  4008                           ;light.c: 199: {
  4009                           ;light.c: 200: CNTbreath_Led = 0;
  4010  04F3  01B8               	clrf	_CNTbreath_Led	;volatile
  4011  04F4  01B9               	clrf	_CNTbreath_Led+1	;volatile
  4012                           
  4013                           ;light.c: 201: RA5 = 0;
  4014  04F5  1285               	bcf	5,5	;volatile
  4015  04F6                     i1l7262:	
  4016                           
  4017                           ;light.c: 202: }
  4018                           ;light.c: 203: if (CNTbreath_Led >= CNTbreath_Led2)
  4019  04F6  0835               	movf	_CNTbreath_Led2+1,w	;volatile
  4020  04F7  0239               	subwf	_CNTbreath_Led+1,w	;volatile
  4021  04F8  1D03               	skipz
  4022  04F9  2CFC               	goto	u218_25
  4023  04FA  0834               	movf	_CNTbreath_Led2,w	;volatile
  4024  04FB  0238               	subwf	_CNTbreath_Led,w	;volatile
  4025  04FC                     u218_25:	
  4026  04FC  1C03               	skipc
  4027  04FD  2D00               	goto	i1l965
  4028                           
  4029                           ;light.c: 204: {
  4030                           ;light.c: 205: RA5 = 1;
  4031  04FE  1685               	bsf	5,5	;volatile
  4032                           
  4033                           ;light.c: 206: }
  4034  04FF  0008               	return
  4035  0500                     i1l965:	
  4036                           
  4037                           ;light.c: 207: else
  4038                           ;light.c: 208: {
  4039                           ;light.c: 209: RA5 = 0;
  4040  0500  1285               	bcf	5,5	;volatile
  4041  0501  0008               	return
  4042  0502                     __end_of_INT_LED_SHOW:	
  4043  007E                     btemp	set	126	;btemp
  4044  007E                     wtemp0	set	126
  4045                           
  4046                           	psect	intentry
  4047  0004                     __pintentry:	
  4048                           ;incstack = 0
  4049                           ; Regs used in _Int_ALL: [wreg+status,2+status,0+pclath+cstack]
  4050                           
  4051  0004                     interrupt_function:	
  4052  007E                     saved_w	set	btemp
  4053  0004  00FE               	movwf	btemp
  4054  0005  0E03               	swapf	3,w
  4055  0006  00F0               	movwf	??_Int_ALL
  4056  0007  080A               	movf	10,w
  4057  0008  00F1               	movwf	??_Int_ALL+1
  4058  0009  120A  118A  2CC6   	ljmp	_Int_ALL


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80      7      58
    BANK1            80      0       0
    BANK3            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    KeyControl@this	PTR struct _KEY_PRIVATE size(1) Largest target is 8
		 -> KeyLines(BANK0[8]), 


Critical Paths under _main in COMMON

    _main->_Delay_nms
    _GsensorLoop->_SensorControl
    _GflushLoop->_FlushJudge
    _FlushJudge->_GkeyLoop
    _GkeyLoop->_KeyControl
    _Delay_nms->_Delay

Critical Paths under _Int_ALL in COMMON

    None.

Critical Paths under _main in BANK0

    _GkeyLoop->_KeyControl

Critical Paths under _Int_ALL in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Int_ALL in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Int_ALL in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Int_ALL in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     919
                          _Delay_nms
                            _FCTloop
                         _GflushLoop
                           _GledLoop
                        _GsensorLoop
                          _Init_GPIO
                            _Init_IC
                        _Init_TIMER1
                        _Init_TIMER2
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_IC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_GPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GsensorLoop                                          0     0      0       0
                      _SensorControl
                        _SensorJudge
                          _SensorKey
                         _SensorTime
 ---------------------------------------------------------------------------------
 (2) _SensorTime                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorKey                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorJudge                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorControl                                        1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GledLoop                                             0     0      0       0
                            _LED_Con
                          _LED_Judge
                            _LED_Key
                           _LED_Time
 ---------------------------------------------------------------------------------
 (2) _LED_Time                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Key                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Judge                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Con                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GflushLoop                                           0     0      0     699
                           _FlushCon
                         _FlushJudge
                          _FlushTime
 ---------------------------------------------------------------------------------
 (2) _FlushTime                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FlushJudge                                           1     1      0     699
                                              6 COMMON     1     1      0
                           _GkeyLoop
 ---------------------------------------------------------------------------------
 (3) _GkeyLoop                                             2     2      0     631
                                              4 COMMON     2     2      0
                         _KeyControl
                            _ScanKey
 ---------------------------------------------------------------------------------
 (4) _ScanKey                                              1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _KeyControl                                           9     9      0     609
                                              2 COMMON     2     2      0
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _FlushCon                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FCTloop                                              0     0      0       0
                           _FCTjudge
                             _FCTkey
 ---------------------------------------------------------------------------------
 (2) _FCTkey                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FCTjudge                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay_nms                                            5     3      2     220
                                              4 COMMON     5     3      2
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _Delay                                                2     0      2      86
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Int_ALL                                              2     2      0       0
                                              0 COMMON     2     2      0
                       _INT_LED_SHOW
 ---------------------------------------------------------------------------------
 (6) _INT_LED_SHOW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_nms
     _Delay
   _FCTloop
     _FCTjudge
     _FCTkey
   _GflushLoop
     _FlushCon
     _FlushJudge
       _GkeyLoop
         _KeyControl
         _ScanKey
     _FlushTime
   _GledLoop
     _LED_Con
     _LED_Judge
     _LED_Key
     _LED_Time
   _GsensorLoop
     _SensorControl
     _SensorJudge
     _SensorKey
     _SensorTime
   _Init_GPIO
   _Init_IC
   _Init_TIMER1
   _Init_TIMER2

 _Int_ALL (ROOT)
   _INT_LED_SHOW

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      7      3A       4       72.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BITBANK3            50      0       0       7        0.0%
BANK3               50      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
ABS                  0      0      45      11        0.0%
DATA                 0      0      45      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Apr 25 15:32:00 2024

                     PL2 0215                       PL4 021F                       PL6 0229  
                     PL8 031D                       fsr 0004                      PL10 03E8  
                    PL12 03EE                      _GIE 005F                      _RA1 0029  
                    _RA2 002A                      _RB0 0030                      _RB1 0031  
                    _RA4 002C                      _RB2 0032                      _RA5 002D  
                    _RA6 002E                      _PR2 0092                      fsr0 0004  
                    indf 0000          __end_of_LED_Con 03E0          __end_of_LED_Key 0331  
        __end_of_FCTloop 0467                     l2901 0110                     l2903 0116  
                   l2921 0059                     l2913 0034                     l1954 0422  
                   l2931 00A0                     l2923 0065                     l1963 0432  
                   l2916 0049                     l2908 0025                     l2933 00A4  
                   l2925 0078                     l2918 0054                     l7022 002D  
                   l1958 042A                     l2935 00B4                     l2927 0084  
                   l2936 00BE                     l7112 0252                     l2929 0090  
                   l7202 0467                     l7026 002F                     l7018 0024  
                   l2891 00F1                     l7220 0482                     l2892 0107  
                   l7140 02B8                     l7132 02A0                     l3861 025A  
                   l7150 02C2                     l7118 025F                     l7240 04A2  
                   l7216 047A                     l7224 0488                     l4808 04C3  
                   l7400 01A7                     l7144 0292                     l3873 028F  
                   l7410 01C8                     l7170 02FA                     l7162 02E4  
                   l7154 02CC                     l3875 02A3                     l7244 04AB  
                   l7236 0499                     l7172 02FD                     l3884 02CF  
                   l5741 0175                     l5750 0214                     l7182 030B  
                   l5743 0178                     l3879 02BB                     l7280 051D  
                   l7272 0508                     l7248 04B4                     l7096 00C8  
                   l7184 0273                     l7176 0308                     l3888 02E7  
                   l7426 01E7                     l3898 0287                     l3899 0288  
                   l7532 0415                     l7278 050A                     l7470 0183  
                   l7454 0163                     l6910 0378                     l6902 0359  
                   l6920 0368                     l6912 0364                     l7536 041C  
                   l7490 00FB                     l7546 043A                     l6780 0208  
                   l7468 017B                     l6932 038D                     l7548 045A  
                   l7486 00F5                     l6776 0204                     l7488 00F8  
                   l6786 020C                     l6946 03BE                     l6938 0399  
                   l6964 03AB                     l6956 03A7                     l6948 03A0  
                   l6886 03E6                     l6984 0521                     l6976 03D7  
                   l6888 0334                     u2020 028C                     u2205 0510  
                   u1350 033A                     u2330 01B5                     u2420 01EE  
                   u2340 01B6                     u1364 033D                     u2430 01EF  
                   u2370 01CF                     u2380 01D0                     _PIE1 008C  
                   _PIE2 008D                     u1980 0279                     u1990 027F  
                   u1982 027A                     u1992 0280                     _PIR1 000C  
                   _PIR2 000D                     _TMR1 000E                     _WPUA 018E  
                   _WPUB 0095                     _WPUC 018F                     _main 03F4  
          ??_Init_TIMER1 0072            ??_Init_TIMER2 0072                     btemp 007E  
                   start 000C       __size_of_LED_Judge 0008               _FledBits01 0047  
        __end_of_Int_ALL 04E9          __end_of_Init_IC 0554          __end_of_ScanKey 0215  
       __end_of_LED_Time 0334         __end_of_FCTjudge 04B8            ??_GsensorLoop 0073  
                  ?_main 0070                    _T1CON 0010                    _T2CON 0012  
                  i1l965 0500                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _Delay 0521                    _Fsys1 004A  
             _GflushLoop 001C                    _templ 0044                    pclath 000A  
             _KeyControl 0185                    status 0003                    wtemp0 007E  
             _FlushJudge 00EC         __end_of_GledLoop 0330          __initialization 000F  
       __end_of_GkeyLoop 0185             __end_of_main 0463      __end_of_Init_TIMER1 0561  
    __end_of_Init_TIMER2 056C       FlushJudge@Key_Step 0076         __end_of_FlushCon 00EC  
     __size_of_Delay_nms 001F                   ??_main 0079              _Fbodysensor 007A  
              ??_LED_Con 0072                ??_LED_Key 0072                ??_FCTloop 0072  
                 ?_Delay 0072        __end_of_LED_Judge 03E8    __end_of_SensorControl 028E  
    __end_of_GsensorLoop 023A                   i1l1978 04E2                   i1l7262 04F6  
                 _FCTkey 04B8                   i1l7384 04DE                   _INTCON 000B  
                 u218_25 04FC                   _CNTfct 0020       __size_of_Init_GPIO 0015  
                 _OSCCON 008F                   _TMR1IE 0460                   _TMR1IF 0060  
                 _TMR2IE 0461                   _TMR2IF 0061       __size_of_FlushTime 0001  
          ?_INT_LED_SHOW 0070                   _WDTCON 0105                ??_Int_ALL 0070  
              ??_Init_IC 0072                   _RX_Buf 0045            _CNTfctSensior 003C  
              ??_ScanKey 0072            _CNTbodyInTime 0024                   _Fsys1m 0048  
                 _Fsys1s 0049            _CNTbreath_Led 0038               _SensorTime 023B  
          ??_SensorJudge 0072           KeyControl@this 0059              _MainTime_1s 0030  
     __size_of_SensorKey 0001                   saved_w 007E       Delay_nms@inittempl 0074  
            ?_GflushLoop 0070              ?_KeyControl 0070           ??_INT_LED_SHOW 0070  
      __end_of_Delay_nms 0521  __end_of__initialization 0018                ?_LED_Time 0070  
              ?_FCTjudge 0070              _Init_TIMER1 0554              _Init_TIMER2 0561  
            ?_FlushJudge 0070            __end_of_Delay 052D           __pcstackCOMMON 0070  
             __end_ofPL2 021F               __end_ofPL4 0229               __end_ofPL6 0230  
             __end_ofPL8 0326        __end_of_Init_GPIO 0542        __end_of_FlushTime 0024  
            _GsensorLoop 0230      __end_of_SensorJudge 031D                  ??_Delay 0074  
              ?_GledLoop 0070                ?_GkeyLoop 0070               __pbssBANK0 0020  
                ?_FCTkey 0070               _fctBits001 0046                ?_FlushCon 0070  
             ??_LED_Time 0072               ??_FCTjudge 0072        __end_of_SensorKey 023B  
             __pmaintext 03F4              ?_SensorTime 0070               __pintentry 0004  
    __size_of_GflushLoop 0007          ScanKey@line_num 0072      __size_of_KeyControl 007D  
         _CNTfctFlashLed 003B                  _LED_Con 0334                  _LED_Key 0330  
                _FCTloop 0463      __size_of_FlushJudge 002F               ??_GledLoop 0072  
            _SeletedLine 0079                  _SEQbody 003E                  _SEQmain 0043  
             ??_GkeyLoop 0074               ??_FlushCon 0072          __size_of_FCTkey 000E  
                _Fflush1 0041                  _Int_ALL 04C6                  _Init_IC 0542  
                _ScanKey 0202           _CNTbreath_Led1 0036           _CNTbreath_Led2 0034  
         _CNTbreath_Led3 0032              _SensorJudge 028E     __end_of_INT_LED_SHOW 0502  
                __ptext0 0000                  __ptext1 0561                  __ptext2 0554  
                __ptext3 0542                  __ptext4 052D                  __ptext5 0230  
                __ptext6 023B                  __ptext7 023A                  __ptext8 028E  
                __ptext9 0273                _AD_Result 002E                  clrloop0 056D  
              _LED_Judge 03E0     end_of_initialization 0018      __size_of_SensorTime 0038  
              _CNTbody_h 002A                _CNTbody_l 0028           Delay_nms@gtemp 0078  
           ??_GflushLoop 0077               ?_LED_Judge 0070             ??_KeyControl 0072  
         __end_of_FCTkey 04C6             ?_Init_TIMER1 0070             ?_Init_TIMER2 0070  
           ??_FlushJudge 0076                _BufCntAdd 0026                _Delay_nms 0502  
      __size_of_LED_Time 0003        __size_of_FCTjudge 0051   __size_of_SensorControl 001B  
     __end_of_GflushLoop 0023             ?_GsensorLoop 0070       __end_of_KeyControl 0202  
            __end_ofPL10 03EE              __end_ofPL12 03F4      start_initialization 000F  
              _Init_GPIO 052D                _FlushTime 0023                _CurrentIO 003A  
     __end_of_FlushJudge 011B                 ??_FCTkey 0072        __size_of_GledLoop 000A  
      __size_of_GkeyLoop 006A        __size_of_FlushCon 00C8               ?_Delay_nms 0074  
              _SensorKey 023A    __size_of_INT_LED_SHOW 0019             ??_SensorTime 0072  
               ?_LED_Con 0070                 ?_LED_Key 0070                 ?_FCTloop 0070  
            __pbssCOMMON 0079               ?_Init_GPIO 0070                ___latbits 0002  
          __pcstackBANK0 0053               ?_FlushTime 0070            _SensorControl 0273  
            ??_LED_Judge 0072       __end_of_SensorTime 0273          _KeyControl$3126 0053  
        _KeyControl$3127 0055          _KeyControl$3128 0057             _INT_LED_SHOW 04E9  
               ?_Int_ALL 0070                 ?_Init_IC 0070                 ?_ScanKey 0070  
             ?_SensorKey 0070             ?_SensorJudge 0070           __size_of_Delay 000C  
         ?_SensorControl 0070        interrupt_function 0004                 _LED_Time 0331  
               _FCTjudge 0467                clear_ram0 056C                 _CNTflush 002C  
            ??_Delay_nms 0076     __size_of_Init_TIMER1 000D     __size_of_Init_TIMER2 000B  
               _SEQflsuh 0040     __size_of_GsensorLoop 000A              ??_Init_GPIO 0072  
       __size_of_LED_Con 00AC         __size_of_LED_Key 0001              ??_FlushTime 0072  
       __size_of_FCTloop 0004                 _GledLoop 0326                 _GkeyLoop 011B  
               _KeyLines 004B                 _FlushCon 0024         __size_of_Int_ALL 0023  
       __size_of_Init_IC 0012          _CNTbodyExitTime 0022         __size_of_ScanKey 0013  
            _CNTfctStart 003D              ??_SensorKey 0072          ??_SensorControl 0072  
               __ptext10 0326                 __ptext11 0331                 __ptext20 0185  
               __ptext12 0330                 __ptext21 0024                 __ptext13 03E0  
               __ptext22 0463                 __ptext14 0334                 __ptext23 04B8  
               __ptext15 001C                 __ptext24 0467                 __ptext16 0023  
               __ptext25 0502                 __ptext17 00EC                 __ptext26 0521  
               __ptext18 011B                 __ptext27 04C6                 __ptext19 0202  
               __ptext28 04E9            __size_of_main 006F          _u8stsBodySensor 003F  
          _MainTime_1min 0042               Delay@dtemp 0072     __size_of_SensorJudge 008F  
             Delay_nms@i 0076                 intlevel1 0000               _OPTION_REG 0081  
