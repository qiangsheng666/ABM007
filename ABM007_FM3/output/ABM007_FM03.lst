

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 24 18:11:31 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	79F133
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text10,local,class=CODE,merge=1,delta=2
    18                           	psect	text15,local,class=CODE,merge=1,delta=2
    19                           	psect	text22,local,class=CODE,merge=1,delta=2
    20                           	psect	text29,local,class=CODE,merge=1,delta=2
    21                           	psect	text31,local,class=CODE,merge=1,delta=2
    22                           	psect	intentry,global,class=CODE,delta=2
    23                           	psect	pa_nodes0,global,class=CODE,delta=2
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F887 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	text0
    62  0000                     __ptext0:	
    63  000E                     _TMR1	set	14
    64  0012                     _T2CON	set	18
    65  0010                     _T1CON	set	16
    66  000D                     _PIR2	set	13
    67  000C                     _PIR1	set	12
    68  000B                     _INTCON	set	11
    69  0007                     _PORTC	set	7
    70  0006                     _PORTB	set	6
    71  0005                     _PORTA	set	5
    72  0060                     _TMR1IF	set	96
    73  0061                     _TMR2IF	set	97
    74  005F                     _GIE	set	95
    75  0030                     _RB0	set	48
    76  0031                     _RB1	set	49
    77  0032                     _RB2	set	50
    78  0029                     _RA1	set	41
    79  002A                     _RA2	set	42
    80  002C                     _RA4	set	44
    81  002D                     _RA5	set	45
    82  002E                     _RA6	set	46
    83  0095                     _WPUB	set	149
    84  0092                     _PR2	set	146
    85  008F                     _OSCCON	set	143
    86  008D                     _PIE2	set	141
    87  008C                     _PIE1	set	140
    88  0087                     _TRISC	set	135
    89  0086                     _TRISB	set	134
    90  0085                     _TRISA	set	133
    91  0081                     _OPTION_REG	set	129
    92  0460                     _TMR1IE	set	1120
    93  0461                     _TMR2IE	set	1121
    94  0105                     _WDTCON	set	261
    95  018F                     _WPUC	set	399
    96  018E                     _WPUA	set	398
    97                           
    98                           	psect	cinit
    99  000F                     start_initialization:	
   100                           ; #config settings
   101                           
   102  000F                     __initialization:	
   103  000F  3020               	movlw	low __pbssBANK0
   104                           
   105                           ; Clear objects allocated to COMMON
   106  0010  01F9               	clrf	__pbssCOMMON& (0+127)
   107  0011  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   108                           
   109                           ; Clear objects allocated to BANK0
   110  0012  1383               	bcf	3,7	;select IRP bank0
   111  0013  0084               	movwf	4
   112  0014  305D               	movlw	low (__pbssBANK0+61)
   113  0015  120A  118A  2595   	fcall	clear_ram0
   114  0018                     end_of_initialization:	
   115                           ;End of C runtime variable initialization code
   116                           
   117  0018                     __end_of__initialization:	
   118  0018  0183               	clrf	3
   119  0019  120A  118A  2C7F   	ljmp	_main	;jump to C main() function
   120                           
   121                           	psect	bssCOMMON
   122  0079                     __pbssCOMMON:	
   123  0079                     _SeletedLine:	
   124  0079                     	ds	1
   125  007A                     _Fbodysensor:	
   126  007A                     	ds	1
   127                           
   128                           	psect	bssBANK0
   129  0020                     __pbssBANK0:	
   130  0020                     _flag_time:	
   131  0020                     	ds	2
   132  0022                     _CNTkey2:	
   133  0022                     	ds	2
   134  0024                     _CNTkey1:	
   135  0024                     	ds	2
   136  0026                     _CNTfct:	
   137  0026                     	ds	2
   138  0028                     _CNTfctStart:	
   139  0028                     	ds	2
   140  002A                     _CNTbodyExitTime:	
   141  002A                     	ds	2
   142  002C                     _CNTbodyInTime:	
   143  002C                     	ds	2
   144  002E                     _BufCntAdd:	
   145  002E                     	ds	2
   146  0030                     _CNTbody_l:	
   147  0030                     	ds	2
   148  0032                     _CNTbody_h:	
   149  0032                     	ds	2
   150  0034                     _CNTflush:	
   151  0034                     	ds	2
   152  0036                     _AD_Result:	
   153  0036                     	ds	2
   154  0038                     _MainTime_1s:	
   155  0038                     	ds	2
   156  003A                     _CNTbreath_Led3:	
   157  003A                     	ds	2
   158  003C                     _CNTbreath_Led2:	
   159  003C                     	ds	2
   160  003E                     _CNTbreath_Led1:	
   161  003E                     	ds	2
   162  0040                     _CNTbreath_Led:	
   163  0040                     	ds	2
   164  0042                     _My_test_cnt:	
   165  0042                     	ds	2
   166  0044                     _CurrentIO:	
   167  0044                     	ds	1
   168  0045                     _CNTfctFlashLed:	
   169  0045                     	ds	1
   170  0046                     _CNTfctSensior:	
   171  0046                     	ds	1
   172  0047                     _FCT:	
   173  0047                     	ds	1
   174  0048                     _SEQbody:	
   175  0048                     	ds	1
   176  0049                     _u8stsBodySensor:	
   177  0049                     	ds	1
   178  004A                     _SEQflsuh:	
   179  004A                     	ds	1
   180  004B                     _Fflush1:	
   181  004B                     	ds	1
   182  004C                     _MainTime_1min:	
   183  004C                     	ds	1
   184  004D                     _SEQmain:	
   185  004D                     	ds	1
   186  004E                     _templ:	
   187  004E                     	ds	1
   188  004F                     _RX_Buf:	
   189  004F                     	ds	1
   190  0050                     _FledBits01:	
   191  0050                     	ds	1
   192  0051                     _Fsys1m:	
   193  0051                     	ds	1
   194  0052                     _Fsys1s:	
   195  0052                     	ds	1
   196  0053                     _Fsys1:	
   197  0053                     	ds	1
   198  0054                     _fctBits001:	
   199  0054                     	ds	1
   200  0055                     _KeyLines:	
   201  0055                     	ds	8
   202                           
   203                           	psect	clrtext
   204  0595                     clear_ram0:	
   205                           ;	Called with FSR containing the base address, and
   206                           ;	W with the last address+1
   207                           
   208  0595  0064               	clrwdt	;clear the watchdog before getting into this loop
   209  0596                     clrloop0:	
   210  0596  0180               	clrf	0	;clear RAM location pointed to by FSR
   211  0597  0A84               	incf	4,f	;increment pointer
   212  0598  0604               	xorwf	4,w	;XOR with final address
   213  0599  1903               	btfsc	3,2	;have we reached the end yet?
   214  059A  3400               	retlw	0	;all done for this memory range, return
   215  059B  0604               	xorwf	4,w	;XOR again to restore value
   216  059C  2D96               	goto	clrloop0	;do the next byte
   217                           
   218                           	psect	cstackCOMMON
   219  0070                     __pcstackCOMMON:	
   220  0070                     ?_LED_Time:	
   221  0070                     ?_LED_Key:	
   222                           ; 1 bytes @ 0x0
   223                           
   224  0070                     ?_LED_Judge:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0070                     ?_LED_Con:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     ?_FCTloop:	
   231                           ; 1 bytes @ 0x0
   232                           
   233  0070                     ?_GsensorLoop:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  0070                     ?_GflushLoop:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  0070                     ?_FlushTime:	
   240                           ; 1 bytes @ 0x0
   241                           
   242  0070                     ?_FlushJudge:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0070                     ?_FlushCon:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0070                     ?_GkeyLoop:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0070                     ?_SensorKey:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0070                     ?_SensorTime:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0070                     ?_SensorJudge:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     ?_SensorControl:	
   261                           ; 1 bytes @ 0x0
   262                           
   263  0070                     ?_FCTkey:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0070                     ?_FCTjudge:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ?_ScanKey:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     ?_KeyControl:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0070                     ?_GledLoop:	
   276                           ; 1 bytes @ 0x0
   277                           
   278  0070                     ?_INT_LED_SHOW:	
   279                           ; 1 bytes @ 0x0
   280                           
   281  0070                     ??_INT_LED_SHOW:	
   282                           ; 1 bytes @ 0x0
   283                           
   284  0070                     ?_Init_GPIO:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0070                     ?_Init_IC:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0070                     ?_Init_TIMER1:	
   291                           ; 1 bytes @ 0x0
   292                           
   293  0070                     ?_Init_TIMER2:	
   294                           ; 1 bytes @ 0x0
   295                           
   296  0070                     ?_main:	
   297                           ; 1 bytes @ 0x0
   298                           
   299  0070                     ?_Int_ALL:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0070                     ??_Int_ALL:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     ?_G_KEY:	
   306                           ; 1 bytes @ 0x0
   307                           
   308  0070                     ?_R_KEY:	
   309                           ; 1 bytes @ 0x0
   310                           
   311  0070                     ?_key1:	
   312                           ; 1 bytes @ 0x0
   313                           
   314  0070                     ?_key2:	
   315                           ; 1 bytes @ 0x0
   316                           
   317                           
   318                           ; 1 bytes @ 0x0
   319  0070                     	ds	2
   320  0072                     ??_LED_Time:	
   321  0072                     ??_LED_Key:	
   322                           ; 1 bytes @ 0x2
   323                           
   324  0072                     ??_LED_Judge:	
   325                           ; 1 bytes @ 0x2
   326                           
   327  0072                     ??_LED_Con:	
   328                           ; 1 bytes @ 0x2
   329                           
   330  0072                     ??_FCTloop:	
   331                           ; 1 bytes @ 0x2
   332                           
   333  0072                     ??_FlushTime:	
   334                           ; 1 bytes @ 0x2
   335                           
   336  0072                     ??_FlushCon:	
   337                           ; 1 bytes @ 0x2
   338                           
   339  0072                     ??_SensorKey:	
   340                           ; 1 bytes @ 0x2
   341                           
   342  0072                     ??_SensorTime:	
   343                           ; 1 bytes @ 0x2
   344                           
   345  0072                     ??_SensorJudge:	
   346                           ; 1 bytes @ 0x2
   347                           
   348  0072                     ??_SensorControl:	
   349                           ; 1 bytes @ 0x2
   350                           
   351  0072                     ??_FCTkey:	
   352                           ; 1 bytes @ 0x2
   353                           
   354  0072                     ??_FCTjudge:	
   355                           ; 1 bytes @ 0x2
   356                           
   357  0072                     ??_ScanKey:	
   358                           ; 1 bytes @ 0x2
   359                           
   360  0072                     ??_KeyControl:	
   361                           ; 1 bytes @ 0x2
   362                           
   363  0072                     ??_GledLoop:	
   364                           ; 1 bytes @ 0x2
   365                           
   366  0072                     ?_Delay:	
   367                           ; 1 bytes @ 0x2
   368                           
   369  0072                     ??_Init_GPIO:	
   370                           ; 1 bytes @ 0x2
   371                           
   372  0072                     ??_Init_IC:	
   373                           ; 1 bytes @ 0x2
   374                           
   375  0072                     ??_Init_TIMER1:	
   376                           ; 1 bytes @ 0x2
   377                           
   378  0072                     ??_Init_TIMER2:	
   379                           ; 1 bytes @ 0x2
   380                           
   381  0072                     ??_G_KEY:	
   382                           ; 1 bytes @ 0x2
   383                           
   384  0072                     ??_R_KEY:	
   385                           ; 1 bytes @ 0x2
   386                           
   387  0072                     ??_key1:	
   388                           ; 1 bytes @ 0x2
   389                           
   390  0072                     ??_key2:	
   391                           ; 1 bytes @ 0x2
   392                           
   393  0072                     ScanKey@line_num:	
   394                           ; 1 bytes @ 0x2
   395                           
   396  0072                     Delay@dtemp:	
   397                           ; 1 bytes @ 0x2
   398                           
   399                           
   400                           ; 2 bytes @ 0x2
   401  0072                     	ds	1
   402  0073                     ??_GsensorLoop:	
   403                           
   404                           ; 1 bytes @ 0x3
   405  0073                     	ds	1
   406  0074                     ??_GkeyLoop:	
   407  0074                     ??_Delay:	
   408                           ; 1 bytes @ 0x4
   409                           
   410  0074                     ?_Delay_nms:	
   411                           ; 1 bytes @ 0x4
   412                           
   413  0074                     Delay_nms@inittempl:	
   414                           ; 1 bytes @ 0x4
   415                           
   416                           
   417                           ; 2 bytes @ 0x4
   418  0074                     	ds	2
   419  0076                     ??_FlushJudge:	
   420  0076                     ??_Delay_nms:	
   421                           ; 1 bytes @ 0x6
   422                           
   423  0076                     FlushJudge@Key_Step:	
   424                           ; 1 bytes @ 0x6
   425                           
   426  0076                     Delay_nms@i:	
   427                           ; 1 bytes @ 0x6
   428                           
   429                           
   430                           ; 2 bytes @ 0x6
   431  0076                     	ds	1
   432  0077                     ??_GflushLoop:	
   433                           
   434                           ; 1 bytes @ 0x7
   435  0077                     	ds	1
   436  0078                     Delay_nms@gtemp:	
   437                           
   438                           ; 1 bytes @ 0x8
   439  0078                     	ds	1
   440  0079                     ??_main:	
   441                           
   442                           	psect	cstackBANK0
   443  005D                     __pcstackBANK0:	
   444                           ; 1 bytes @ 0x9
   445                           
   446  005D                     _KeyControl$3154:	
   447                           
   448                           ; 2 bytes @ 0x0
   449  005D                     	ds	2
   450  005F                     _KeyControl$3155:	
   451                           
   452                           ; 2 bytes @ 0x2
   453  005F                     	ds	2
   454  0061                     _KeyControl$3156:	
   455                           
   456                           ; 2 bytes @ 0x4
   457  0061                     	ds	2
   458  0063                     KeyControl@this:	
   459                           
   460                           ; 1 bytes @ 0x6
   461  0063                     	ds	1
   462                           
   463                           	psect	maintext
   464  047F                     __pmaintext:	
   465 ;;
   466 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   467 ;;
   468 ;; *************** function _main *****************
   469 ;; Defined at:
   470 ;;		line 473 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\main.c"
   471 ;; Parameters:    Size  Location     Type
   472 ;;		None
   473 ;; Auto vars:     Size  Location     Type
   474 ;;		None
   475 ;; Return value:  Size  Location     Type
   476 ;;                  1    wreg      void 
   477 ;; Registers used:
   478 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   479 ;; Tracked objects:
   480 ;;		On entry : B00/0
   481 ;;		On exit  : 300/0
   482 ;;		Unchanged: 0/0
   483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   484 ;;      Params:         0       0       0       0       0
   485 ;;      Locals:         0       0       0       0       0
   486 ;;      Temps:          0       0       0       0       0
   487 ;;      Totals:         0       0       0       0       0
   488 ;;Total ram usage:        0 bytes
   489 ;; Hardware stack levels required when called:    6
   490 ;; This function calls:
   491 ;;		_Delay_nms
   492 ;;		_FCTloop
   493 ;;		_GflushLoop
   494 ;;		_GledLoop
   495 ;;		_GsensorLoop
   496 ;;		_Init_GPIO
   497 ;;		_Init_IC
   498 ;;		_Init_TIMER1
   499 ;;		_Init_TIMER2
   500 ;; This function is called by:
   501 ;;		Startup code after reset
   502 ;; This function uses a non-reentrant model
   503 ;;
   504                           
   505                           
   506                           ;psect for function _main
   507  047F                     _main:	
   508                           
   509                           ;incstack = 0
   510                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   511  047F  0000               	nop	;# 
   512  0480  0064               	clrwdt	;# 
   513                           
   514                           ;main.c: 478: INTCON = 0;
   515  0481  018B               	clrf	11	;volatile
   516                           
   517                           ;main.c: 480: Init_GPIO();
   518  0482  120A  118A  2556  120A  118A  	fcall	_Init_GPIO
   519                           
   520                           ;main.c: 481: Init_IC();
   521  0487  120A  118A  256B  120A  118A  	fcall	_Init_IC
   522                           
   523                           ;main.c: 482: Delay_nms(200);
   524  048C  30C8               	movlw	200
   525  048D  00F4               	movwf	Delay_nms@inittempl
   526  048E  01F5               	clrf	Delay_nms@inittempl+1
   527  048F  120A  118A  252B  120A  118A  	fcall	_Delay_nms
   528                           
   529                           ;main.c: 483: Init_TIMER1();
   530  0494  120A  118A  257D  120A  118A  	fcall	_Init_TIMER1
   531                           
   532                           ;main.c: 484: Init_TIMER2();
   533  0499  120A  118A  258A  120A  118A  	fcall	_Init_TIMER2
   534                           
   535                           ;main.c: 495: INTCON = 0XC0;
   536  049E  30C0               	movlw	192
   537  049F  008B               	movwf	11	;volatile
   538  04A0                     l7632:	
   539                           
   540                           ;main.c: 499: {
   541                           ;main.c: 501: if (Fsys1.bits.bit_1 == 1)
   542  04A0  1CD3               	btfss	_Fsys1,1	;volatile
   543  04A1  2CA0               	goto	l7632
   544  04A2  0064               	clrwdt	;# 
   545                           
   546                           ;main.c: 505: Fsys1.bits.bit_1 = 0;
   547  04A3  1283               	bcf	3,5	;RP0=0, select bank0
   548  04A4  1303               	bcf	3,6	;RP1=0, select bank0
   549  04A5  10D3               	bcf	_Fsys1,1	;volatile
   550                           
   551                           ;main.c: 506: switch (SEQmain)
   552  04A6  2CC5               	goto	l7646
   553  04A7                     l7636:	
   554                           
   555                           ;main.c: 509: FCTloop();
   556  04A7  120A  118A  240B  120A  118A  	fcall	_FCTloop
   557                           
   558                           ;main.c: 510: break;
   559  04AC  2CE5               	goto	l7648
   560  04AD                     l1964:	
   561                           ;main.c: 511: case 1:
   562                           
   563                           
   564                           ;main.c: 512: if(fctBits001.bits.bit_0 == 0)
   565  04AD  1854               	btfsc	_fctBits001,0	;volatile
   566  04AE  2CE5               	goto	l7648
   567                           
   568                           ;main.c: 513: {
   569                           ;main.c: 514: GsensorLoop();
   570  04AF  120A  118A  2247  120A  118A  	fcall	_GsensorLoop
   571  04B4  2CE5               	goto	l7648
   572  04B5                     l1968:	
   573                           ;main.c: 523: case 4:
   574                           
   575                           
   576                           ;main.c: 524: if(fctBits001.bits.bit_0 == 0)
   577  04B5  1854               	btfsc	_fctBits001,0	;volatile
   578  04B6  2CE5               	goto	l7648
   579                           
   580                           ;main.c: 525: {
   581                           ;main.c: 526: GflushLoop();
   582  04B7  120A  118A  201C  120A  118A  	fcall	_GflushLoop
   583  04BC  2CE5               	goto	l7648
   584  04BD                     l1973:	
   585                           ;main.c: 538: case 8:
   586                           
   587                           
   588                           ;main.c: 539: if(fctBits001.bits.bit_0 == 0)
   589  04BD  1854               	btfsc	_fctBits001,0	;volatile
   590  04BE  2CE5               	goto	l7648
   591                           
   592                           ;main.c: 540: {
   593                           ;main.c: 541: GledLoop();
   594  04BF  120A  118A  233D  120A  118A  	fcall	_GledLoop
   595  04C4  2CE5               	goto	l7648
   596  04C5                     l7646:	
   597  04C5  084D               	movf	_SEQmain,w	;volatile
   598                           
   599                           ; Switch size 1, requested type "space"
   600                           ; Number of cases is 10, Range of values is 0 to 9
   601                           ; switch strategies available:
   602                           ; Name         Instructions Cycles
   603                           ; simple_byte           31    16 (average)
   604                           ; direct_byte           38     8 (fixed)
   605                           ; jumptable            260     6 (fixed)
   606                           ;	Chosen strategy is simple_byte
   607  04C6  3A00               	xorlw	0	; case 0
   608  04C7  1903               	skipnz
   609  04C8  2CA7               	goto	l7636
   610  04C9  3A01               	xorlw	1	; case 1
   611  04CA  1903               	skipnz
   612  04CB  2CAD               	goto	l1964
   613  04CC  3A03               	xorlw	3	; case 2
   614  04CD  1903               	skipnz
   615  04CE  2CE5               	goto	l7648
   616  04CF  3A01               	xorlw	1	; case 3
   617  04D0  1903               	skipnz
   618  04D1  2CE5               	goto	l7648
   619  04D2  3A07               	xorlw	7	; case 4
   620  04D3  1903               	skipnz
   621  04D4  2CB5               	goto	l1968
   622  04D5  3A01               	xorlw	1	; case 5
   623  04D6  1903               	skipnz
   624  04D7  2CE5               	goto	l7648
   625  04D8  3A03               	xorlw	3	; case 6
   626  04D9  1903               	skipnz
   627  04DA  2CE5               	goto	l7648
   628  04DB  3A01               	xorlw	1	; case 7
   629  04DC  1903               	skipnz
   630  04DD  2CE5               	goto	l7648
   631  04DE  3A0F               	xorlw	15	; case 8
   632  04DF  1903               	skipnz
   633  04E0  2CBD               	goto	l1973
   634  04E1  3A01               	xorlw	1	; case 9
   635  04E2  1903               	skipnz
   636  04E3  2CE5               	goto	l7648
   637  04E4  2CE5               	goto	l7648
   638  04E5                     l7648:	
   639                           
   640                           ;main.c: 551: if (++SEQmain >= 10)
   641  04E5  300A               	movlw	10
   642  04E6  1283               	bcf	3,5	;RP0=0, select bank0
   643  04E7  1303               	bcf	3,6	;RP1=0, select bank0
   644  04E8  0ACD               	incf	_SEQmain,f	;volatile
   645  04E9  024D               	subwf	_SEQmain,w	;volatile
   646  04EA  1C03               	skipc
   647  04EB  2CA0               	goto	l7632
   648                           
   649                           ;main.c: 552: {
   650                           ;main.c: 553: SEQmain = 0;
   651  04EC  01CD               	clrf	_SEQmain	;volatile
   652  04ED  2CA0               	goto	l7632
   653  04EE                     __end_of_main:	
   654                           
   655                           	psect	text1
   656  058A                     __ptext1:	
   657 ;; *************** function _Init_TIMER2 *****************
   658 ;; Defined at:
   659 ;;		line 174 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\main.c"
   660 ;; Parameters:    Size  Location     Type
   661 ;;		None
   662 ;; Auto vars:     Size  Location     Type
   663 ;;		None
   664 ;; Return value:  Size  Location     Type
   665 ;;                  1    wreg      void 
   666 ;; Registers used:
   667 ;;		wreg
   668 ;; Tracked objects:
   669 ;;		On entry : 300/0
   670 ;;		On exit  : 300/0
   671 ;;		Unchanged: 0/0
   672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   673 ;;      Params:         0       0       0       0       0
   674 ;;      Locals:         0       0       0       0       0
   675 ;;      Temps:          0       0       0       0       0
   676 ;;      Totals:         0       0       0       0       0
   677 ;;Total ram usage:        0 bytes
   678 ;; Hardware stack levels used:    1
   679 ;; Hardware stack levels required when called:    2
   680 ;; This function calls:
   681 ;;		Nothing
   682 ;; This function is called by:
   683 ;;		_main
   684 ;; This function uses a non-reentrant model
   685 ;;
   686                           
   687                           
   688                           ;psect for function _Init_TIMER2
   689  058A                     _Init_TIMER2:	
   690                           
   691                           ;main.c: 176: PR2 = 24;
   692                           
   693                           ;incstack = 0
   694                           ; Regs used in _Init_TIMER2: [wreg]
   695  058A  3018               	movlw	24
   696  058B  1683               	bsf	3,5	;RP0=1, select bank1
   697  058C  0092               	movwf	18	;volatile
   698                           
   699                           ;main.c: 177: TMR2IF = 0;
   700  058D  1283               	bcf	3,5	;RP0=0, select bank0
   701  058E  108C               	bcf	12,1	;volatile
   702                           
   703                           ;main.c: 178: TMR2IE = 1;
   704  058F  1683               	bsf	3,5	;RP0=1, select bank1
   705  0590  148C               	bsf	12,1	;volatile
   706                           
   707                           ;main.c: 179: T2CON = 5;
   708  0591  3005               	movlw	5
   709  0592  1283               	bcf	3,5	;RP0=0, select bank0
   710  0593  0092               	movwf	18	;volatile
   711  0594  0008               	return
   712  0595                     __end_of_Init_TIMER2:	
   713                           
   714                           	psect	text2
   715  057D                     __ptext2:	
   716 ;; *************** function _Init_TIMER1 *****************
   717 ;; Defined at:
   718 ;;		line 152 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\main.c"
   719 ;; Parameters:    Size  Location     Type
   720 ;;		None
   721 ;; Auto vars:     Size  Location     Type
   722 ;;		None
   723 ;; Return value:  Size  Location     Type
   724 ;;                  1    wreg      void 
   725 ;; Registers used:
   726 ;;		wreg
   727 ;; Tracked objects:
   728 ;;		On entry : 0/100
   729 ;;		On exit  : 300/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   732 ;;      Params:         0       0       0       0       0
   733 ;;      Locals:         0       0       0       0       0
   734 ;;      Temps:          0       0       0       0       0
   735 ;;      Totals:         0       0       0       0       0
   736 ;;Total ram usage:        0 bytes
   737 ;; Hardware stack levels used:    1
   738 ;; Hardware stack levels required when called:    2
   739 ;; This function calls:
   740 ;;		Nothing
   741 ;; This function is called by:
   742 ;;		_main
   743 ;; This function uses a non-reentrant model
   744 ;;
   745                           
   746                           
   747                           ;psect for function _Init_TIMER1
   748  057D                     _Init_TIMER1:	
   749                           
   750                           ;main.c: 156: TMR1 = 0xE0C0;
   751                           
   752                           ;incstack = 0
   753                           ; Regs used in _Init_TIMER1: [wreg]
   754  057D  30E0               	movlw	224
   755  057E  1283               	bcf	3,5	;RP0=0, select bank0
   756  057F  1303               	bcf	3,6	;RP1=0, select bank0
   757  0580  008F               	movwf	15	;volatile
   758  0581  30C0               	movlw	192
   759  0582  008E               	movwf	14	;volatile
   760                           
   761                           ;main.c: 157: TMR1IF = 0;
   762  0583  100C               	bcf	12,0	;volatile
   763                           
   764                           ;main.c: 158: TMR1IE = 1;
   765  0584  1683               	bsf	3,5	;RP0=1, select bank1
   766  0585  140C               	bsf	12,0	;volatile
   767                           
   768                           ;main.c: 159: T1CON = 0x01;
   769  0586  3001               	movlw	1
   770  0587  1283               	bcf	3,5	;RP0=0, select bank0
   771  0588  0090               	movwf	16	;volatile
   772  0589  0008               	return
   773  058A                     __end_of_Init_TIMER1:	
   774                           
   775                           	psect	text3
   776  056B                     __ptext3:	
   777 ;; *************** function _Init_IC *****************
   778 ;; Defined at:
   779 ;;		line 96 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\main.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;		None
   782 ;; Auto vars:     Size  Location     Type
   783 ;;		None
   784 ;; Return value:  Size  Location     Type
   785 ;;                  1    wreg      void 
   786 ;; Registers used:
   787 ;;		wreg, status,2
   788 ;; Tracked objects:
   789 ;;		On entry : 300/300
   790 ;;		On exit  : 300/100
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   793 ;;      Params:         0       0       0       0       0
   794 ;;      Locals:         0       0       0       0       0
   795 ;;      Temps:          0       0       0       0       0
   796 ;;      Totals:         0       0       0       0       0
   797 ;;Total ram usage:        0 bytes
   798 ;; Hardware stack levels used:    1
   799 ;; Hardware stack levels required when called:    2
   800 ;; This function calls:
   801 ;;		Nothing
   802 ;; This function is called by:
   803 ;;		_main
   804 ;; This function uses a non-reentrant model
   805 ;;
   806                           
   807                           
   808                           ;psect for function _Init_IC
   809  056B                     _Init_IC:	
   810                           
   811                           ;incstack = 0
   812                           ; Regs used in _Init_IC: [wreg+status,2]
   813  056B  0064               	clrwdt	;# 
   814                           
   815                           ;main.c: 103: INTCON = 0x00;
   816  056C  018B               	clrf	11	;volatile
   817                           
   818                           ;main.c: 108: PIR1 = 0;
   819  056D  1283               	bcf	3,5	;RP0=0, select bank0
   820  056E  1303               	bcf	3,6	;RP1=0, select bank0
   821  056F  018C               	clrf	12	;volatile
   822                           
   823                           ;main.c: 113: PIR2 = 0;
   824  0570  018D               	clrf	13	;volatile
   825                           
   826                           ;main.c: 118: WDTCON = 0x01;
   827  0571  3001               	movlw	1
   828  0572  1703               	bsf	3,6	;RP1=1, select bank2
   829  0573  0085               	movwf	5	;volatile
   830                           
   831                           ;main.c: 123: OPTION_REG = 0b00001110;
   832  0574  300E               	movlw	14
   833  0575  1683               	bsf	3,5	;RP0=1, select bank1
   834  0576  1303               	bcf	3,6	;RP1=0, select bank1
   835  0577  0081               	movwf	1	;volatile
   836                           
   837                           ;main.c: 128: OSCCON = 0x71;
   838  0578  3071               	movlw	113
   839  0579  008F               	movwf	15	;volatile
   840                           
   841                           ;main.c: 133: PIE1 = 0;
   842  057A  018C               	clrf	12	;volatile
   843                           
   844                           ;main.c: 138: PIE2 = 0;
   845  057B  018D               	clrf	13	;volatile
   846  057C  0008               	return
   847  057D                     __end_of_Init_IC:	
   848                           
   849                           	psect	text4
   850  0556                     __ptext4:	
   851 ;; *************** function _Init_GPIO *****************
   852 ;; Defined at:
   853 ;;		line 62 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\main.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;		None
   856 ;; Auto vars:     Size  Location     Type
   857 ;;		None
   858 ;; Return value:  Size  Location     Type
   859 ;;                  1    wreg      void 
   860 ;; Registers used:
   861 ;;		wreg, status,2
   862 ;; Tracked objects:
   863 ;;		On entry : 0/0
   864 ;;		On exit  : 300/300
   865 ;;		Unchanged: 0/0
   866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   867 ;;      Params:         0       0       0       0       0
   868 ;;      Locals:         0       0       0       0       0
   869 ;;      Temps:          0       0       0       0       0
   870 ;;      Totals:         0       0       0       0       0
   871 ;;Total ram usage:        0 bytes
   872 ;; Hardware stack levels used:    1
   873 ;; Hardware stack levels required when called:    2
   874 ;; This function calls:
   875 ;;		Nothing
   876 ;; This function is called by:
   877 ;;		_main
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881                           
   882                           ;psect for function _Init_GPIO
   883  0556                     _Init_GPIO:	
   884                           
   885                           ;main.c: 66: PORTA = 0B01000000;
   886                           
   887                           ;incstack = 0
   888                           ; Regs used in _Init_GPIO: [wreg+status,2]
   889  0556  3040               	movlw	64
   890  0557  1283               	bcf	3,5	;RP0=0, select bank0
   891  0558  1303               	bcf	3,6	;RP1=0, select bank0
   892  0559  0085               	movwf	5	;volatile
   893                           
   894                           ;main.c: 67: PORTB = 0B00000001;
   895  055A  3001               	movlw	1
   896  055B  0086               	movwf	6	;volatile
   897                           
   898                           ;main.c: 68: PORTC = 0B00000000;
   899  055C  0187               	clrf	7	;volatile
   900                           
   901                           ;main.c: 71: TRISA = 0B01000000;
   902  055D  3040               	movlw	64
   903  055E  1683               	bsf	3,5	;RP0=1, select bank1
   904  055F  0085               	movwf	5	;volatile
   905                           
   906                           ;main.c: 72: TRISB = 0B00000111;
   907  0560  3007               	movlw	7
   908  0561  0086               	movwf	6	;volatile
   909                           
   910                           ;main.c: 73: TRISC = 0B00000000;
   911  0562  0187               	clrf	7	;volatile
   912                           
   913                           ;main.c: 76: WPUA = 0B00000000;
   914  0563  1703               	bsf	3,6	;RP1=1, select bank3
   915  0564  018E               	clrf	14	;volatile
   916                           
   917                           ;main.c: 77: WPUB = 0B00000010;
   918  0565  3002               	movlw	2
   919  0566  1303               	bcf	3,6	;RP1=0, select bank1
   920  0567  0095               	movwf	21	;volatile
   921                           
   922                           ;main.c: 78: WPUC = 0B00000000;
   923  0568  1703               	bsf	3,6	;RP1=1, select bank3
   924  0569  018F               	clrf	15	;volatile
   925  056A  0008               	return
   926  056B                     __end_of_Init_GPIO:	
   927                           
   928                           	psect	text5
   929  0247                     __ptext5:	
   930 ;; *************** function _GsensorLoop *****************
   931 ;; Defined at:
   932 ;;		line 19 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\sensor.c"
   933 ;; Parameters:    Size  Location     Type
   934 ;;		None
   935 ;; Auto vars:     Size  Location     Type
   936 ;;		None
   937 ;; Return value:  Size  Location     Type
   938 ;;                  1    wreg      void 
   939 ;; Registers used:
   940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   941 ;; Tracked objects:
   942 ;;		On entry : 300/0
   943 ;;		On exit  : 0/0
   944 ;;		Unchanged: 0/0
   945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   946 ;;      Params:         0       0       0       0       0
   947 ;;      Locals:         0       0       0       0       0
   948 ;;      Temps:          0       0       0       0       0
   949 ;;      Totals:         0       0       0       0       0
   950 ;;Total ram usage:        0 bytes
   951 ;; Hardware stack levels used:    1
   952 ;; Hardware stack levels required when called:    3
   953 ;; This function calls:
   954 ;;		_SensorControl
   955 ;;		_SensorJudge
   956 ;;		_SensorKey
   957 ;;		_SensorTime
   958 ;; This function is called by:
   959 ;;		_main
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963                           
   964                           ;psect for function _GsensorLoop
   965  0247                     _GsensorLoop:	
   966                           
   967                           ;sensor.c: 21: SensorKey();
   968                           
   969                           ;incstack = 0
   970                           ; Regs used in _GsensorLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   971  0247  2251  120A  118A   	fcall	_SensorKey
   972                           
   973                           ;sensor.c: 22: SensorTime();
   974  024A  2252  120A  118A   	fcall	_SensorTime
   975                           
   976                           ;sensor.c: 23: SensorJudge();
   977  024D  22A5  120A  118A   	fcall	_SensorJudge
   978                           
   979                           ;sensor.c: 24: SensorControl();
   980  0250  2A8A               	ljmp	l7274
   981  0251                     __end_of_GsensorLoop:	
   982  0251                     __ptext7:	
   983 ;; *************** function _SensorKey *****************
   984 ;; Defined at:
   985 ;;		line 27 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\sensor.c"
   986 ;; Parameters:    Size  Location     Type
   987 ;;		None
   988 ;; Auto vars:     Size  Location     Type
   989 ;;		None
   990 ;; Return value:  Size  Location     Type
   991 ;;                  1    wreg      void 
   992 ;; Registers used:
   993 ;;		None
   994 ;; Tracked objects:
   995 ;;		On entry : 300/0
   996 ;;		On exit  : 300/0
   997 ;;		Unchanged: 300/0
   998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   999 ;;      Params:         0       0       0       0       0
  1000 ;;      Locals:         0       0       0       0       0
  1001 ;;      Temps:          0       0       0       0       0
  1002 ;;      Totals:         0       0       0       0       0
  1003 ;;Total ram usage:        0 bytes
  1004 ;; Hardware stack levels used:    1
  1005 ;; Hardware stack levels required when called:    2
  1006 ;; This function calls:
  1007 ;;		Nothing
  1008 ;; This function is called by:
  1009 ;;		_GsensorLoop
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           
  1014                           ;psect for function _SensorKey
  1015  0251                     _SensorKey:	
  1016                           
  1017                           ;incstack = 0
  1018                           ; Regs used in _SensorKey: []
  1019  0251  0008               	return
  1020  0252                     __end_of_SensorKey:	
  1021  0252                     __ptext6:	
  1022 ;; *************** function _SensorTime *****************
  1023 ;; Defined at:
  1024 ;;		line 33 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\sensor.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;		None
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;		None
  1029 ;; Return value:  Size  Location     Type
  1030 ;;                  1    wreg      void 
  1031 ;; Registers used:
  1032 ;;		wreg, status,2, status,0
  1033 ;; Tracked objects:
  1034 ;;		On entry : 300/0
  1035 ;;		On exit  : 300/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1038 ;;      Params:         0       0       0       0       0
  1039 ;;      Locals:         0       0       0       0       0
  1040 ;;      Temps:          0       0       0       0       0
  1041 ;;      Totals:         0       0       0       0       0
  1042 ;;Total ram usage:        0 bytes
  1043 ;; Hardware stack levels used:    1
  1044 ;; Hardware stack levels required when called:    2
  1045 ;; This function calls:
  1046 ;;		Nothing
  1047 ;; This function is called by:
  1048 ;;		_GsensorLoop
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052                           
  1053                           ;psect for function _SensorTime
  1054  0252                     _SensorTime:	
  1055                           
  1056                           ;sensor.c: 35: if(Fbodysensor.bits.bit_0 == 1)
  1057                           
  1058                           ;incstack = 0
  1059                           ; Regs used in _SensorTime: [wreg+status,2+status,0]
  1060  0252  1C7A               	btfss	_Fbodysensor,0	;volatile
  1061  0253  2A76               	goto	l7208
  1062                           
  1063                           ;sensor.c: 36: {
  1064                           ;sensor.c: 37: Fbodysensor.bits.bit_5 = 0;
  1065  0254  12FA               	bcf	_Fbodysensor,5	;volatile
  1066                           
  1067                           ;sensor.c: 38: CNTbodyExitTime = 0;
  1068  0255  01AA               	clrf	_CNTbodyExitTime	;volatile
  1069  0256  01AB               	clrf	_CNTbodyExitTime+1	;volatile
  1070                           
  1071                           ;sensor.c: 39: if(FledBits01.bits.bit_2 == 0)
  1072  0257  1950               	btfsc	_FledBits01,2	;volatile
  1073  0258  2A71               	goto	l3881
  1074                           
  1075                           ;sensor.c: 40: {
  1076                           ;sensor.c: 41: if(++CNTbodyInTime >= 6000)
  1077  0259  0AAC               	incf	_CNTbodyInTime,f	;volatile
  1078  025A  1903               	skipnz
  1079  025B  0AAD               	incf	_CNTbodyInTime+1,f	;volatile
  1080  025C  3017               	movlw	23
  1081  025D  022D               	subwf	_CNTbodyInTime+1,w	;volatile
  1082  025E  3070               	movlw	112
  1083  025F  1903               	skipnz
  1084  0260  022C               	subwf	_CNTbodyInTime,w	;volatile
  1085  0261  1C03               	skipc
  1086  0262  2A69               	goto	l7202
  1087                           
  1088                           ;sensor.c: 42: {
  1089                           ;sensor.c: 43: CNTbodyInTime = 6000;
  1090  0263  3070               	movlw	112
  1091  0264  00AC               	movwf	_CNTbodyInTime	;volatile
  1092  0265  3017               	movlw	23
  1093  0266  00AD               	movwf	_CNTbodyInTime+1	;volatile
  1094                           
  1095                           ;sensor.c: 44: Fbodysensor.bits.bit_3 = 1;
  1096  0267  15FA               	bsf	_Fbodysensor,3	;volatile
  1097                           
  1098                           ;sensor.c: 45: }
  1099  0268  0008               	return
  1100  0269                     l7202:	
  1101                           
  1102                           ;sensor.c: 46: else if(CNTbodyInTime >= 500)
  1103  0269  3001               	movlw	1
  1104  026A  022D               	subwf	_CNTbodyInTime+1,w	;volatile
  1105  026B  30F4               	movlw	244
  1106  026C  1903               	skipnz
  1107  026D  022C               	subwf	_CNTbodyInTime,w	;volatile
  1108  026E  1803               	btfsc	3,0
  1109                           
  1110                           ;sensor.c: 47: {
  1111                           ;sensor.c: 48: Fbodysensor.bits.bit_4 = 1;
  1112  026F  167A               	bsf	_Fbodysensor,4	;volatile
  1113  0270  0008               	return
  1114  0271                     l3881:	
  1115                           
  1116                           ;sensor.c: 51: else
  1117                           ;sensor.c: 52: {
  1118                           ;sensor.c: 53: if(Fbodysensor.bits.bit_4 == 0)
  1119  0271  1A7A               	btfsc	_Fbodysensor,4	;volatile
  1120  0272  0008               	return
  1121                           
  1122                           ;sensor.c: 54: {
  1123                           ;sensor.c: 55: CNTbodyInTime = 0;
  1124  0273  01AC               	clrf	_CNTbodyInTime	;volatile
  1125  0274  01AD               	clrf	_CNTbodyInTime+1	;volatile
  1126                           
  1127                           ;sensor.c: 56: }
  1128                           ;sensor.c: 57: }
  1129                           ;sensor.c: 58: }
  1130  0275  0008               	return
  1131  0276                     l7208:	
  1132                           
  1133                           ;sensor.c: 59: else
  1134                           ;sensor.c: 60: {
  1135                           ;sensor.c: 61: CNTbodyInTime = 0;
  1136  0276  01AC               	clrf	_CNTbodyInTime	;volatile
  1137  0277  01AD               	clrf	_CNTbodyInTime+1	;volatile
  1138                           
  1139                           ;sensor.c: 62: Fbodysensor.bits.bit_4 = 0;
  1140  0278  127A               	bcf	_Fbodysensor,4	;volatile
  1141                           
  1142                           ;sensor.c: 63: Fbodysensor.bits.bit_3 = 0;
  1143  0279  11FA               	bcf	_Fbodysensor,3	;volatile
  1144                           
  1145                           ;sensor.c: 64: if(++CNTbodyExitTime >= 500)
  1146  027A  0AAA               	incf	_CNTbodyExitTime,f	;volatile
  1147  027B  1903               	skipnz
  1148  027C  0AAB               	incf	_CNTbodyExitTime+1,f	;volatile
  1149  027D  3001               	movlw	1
  1150  027E  022B               	subwf	_CNTbodyExitTime+1,w	;volatile
  1151  027F  30F4               	movlw	244
  1152  0280  1903               	skipnz
  1153  0281  022A               	subwf	_CNTbodyExitTime,w	;volatile
  1154  0282  1C03               	skipc
  1155  0283  0008               	return
  1156                           
  1157                           ;sensor.c: 65: {
  1158                           ;sensor.c: 66: CNTbodyExitTime = 500;
  1159  0284  30F4               	movlw	244
  1160  0285  00AA               	movwf	_CNTbodyExitTime	;volatile
  1161  0286  3001               	movlw	1
  1162  0287  00AB               	movwf	_CNTbodyExitTime+1	;volatile
  1163                           
  1164                           ;sensor.c: 67: Fbodysensor.bits.bit_5 = 1;
  1165  0288  16FA               	bsf	_Fbodysensor,5	;volatile
  1166  0289  0008               	return
  1167  028A                     __end_of_SensorTime:	
  1168  028A                     __ptext9:	
  1169 ;; *************** function _SensorControl *****************
  1170 ;; Defined at:
  1171 ;;		line 179 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\sensor.c"
  1172 ;; Parameters:    Size  Location     Type
  1173 ;;		None
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;		None
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  1    wreg      void 
  1178 ;; Registers used:
  1179 ;;		wreg
  1180 ;; Tracked objects:
  1181 ;;		On entry : 300/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1185 ;;      Params:         0       0       0       0       0
  1186 ;;      Locals:         0       0       0       0       0
  1187 ;;      Temps:          1       0       0       0       0
  1188 ;;      Totals:         1       0       0       0       0
  1189 ;;Total ram usage:        1 bytes
  1190 ;; Hardware stack levels used:    1
  1191 ;; Hardware stack levels required when called:    2
  1192 ;; This function calls:
  1193 ;;		Nothing
  1194 ;; This function is called by:
  1195 ;;		_GsensorLoop
  1196 ;; This function uses a non-reentrant model
  1197 ;;
  1198                           
  1199                           
  1200                           ;psect for function _SensorControl
  1201  028A                     _SensorControl:	
  1202  028A                     l7274:	
  1203                           ;incstack = 0
  1204                           ; Regs used in _SensorControl: [wreg]
  1205                           
  1206                           
  1207                           ;sensor.c: 181: Fbodysensor.bits.bit_1 = 0;
  1208  028A  10FA               	bcf	_Fbodysensor,1	;volatile
  1209                           
  1210                           ;sensor.c: 182: Fbodysensor.bits.bit_2 = 0;
  1211  028B  117A               	bcf	_Fbodysensor,2	;volatile
  1212                           
  1213                           ;sensor.c: 183: if(Fbodysensor.bits.bit_6 != Fbodysensor.bits.bit_0)
  1214  028C  1C7A               	btfss	_Fbodysensor,0	;volatile
  1215  028D  2A90               	goto	u2050
  1216  028E  3001               	movlw	1
  1217  028F  2A91               	goto	u2052
  1218  0290                     u2050:	
  1219  0290  3000               	movlw	0
  1220  0291                     u2052:	
  1221  0291  00F2               	movwf	??_SensorControl
  1222  0292  1F7A               	btfss	_Fbodysensor,6	;volatile
  1223  0293  2A96               	goto	u2060
  1224  0294  3001               	movlw	1
  1225  0295  2A97               	goto	u2062
  1226  0296                     u2060:	
  1227  0296  3000               	movlw	0
  1228  0297                     u2062:	
  1229  0297  0672               	xorwf	??_SensorControl,w
  1230  0298  1903               	skipnz
  1231  0299  0008               	return
  1232                           
  1233                           ;sensor.c: 184: {
  1234                           ;sensor.c: 185: if(Fbodysensor.bits.bit_0 == 1)
  1235  029A  1C7A               	btfss	_Fbodysensor,0	;volatile
  1236  029B  2A9E               	goto	l3918
  1237                           
  1238                           ;sensor.c: 186: {
  1239                           ;sensor.c: 187: Fbodysensor.bits.bit_1 = 1;
  1240  029C  14FA               	bsf	_Fbodysensor,1	;volatile
  1241                           
  1242                           ;sensor.c: 188: }
  1243  029D  2A9F               	goto	l3919
  1244  029E                     l3918:	
  1245                           
  1246                           ;sensor.c: 189: else
  1247                           ;sensor.c: 190: {
  1248                           ;sensor.c: 191: Fbodysensor.bits.bit_2 = 1;
  1249  029E  157A               	bsf	_Fbodysensor,2	;volatile
  1250  029F                     l3919:	
  1251                           
  1252                           ;sensor.c: 192: }
  1253                           ;sensor.c: 193: Fbodysensor.bits.bit_6 = Fbodysensor.bits.bit_0;
  1254  029F  1C7A               	btfss	_Fbodysensor,0	;volatile
  1255  02A0  2AA3               	goto	u2090
  1256  02A1  177A               	bsf	_Fbodysensor,6	;volatile
  1257  02A2  0008               	return
  1258  02A3                     u2090:	
  1259  02A3  137A               	bcf	_Fbodysensor,6	;volatile
  1260  02A4  0008               	return
  1261  02A5                     __end_of_SensorControl:	
  1262  02A5                     __ptext8:	
  1263 ;; *************** function _SensorJudge *****************
  1264 ;; Defined at:
  1265 ;;		line 73 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\sensor.c"
  1266 ;; Parameters:    Size  Location     Type
  1267 ;;		None
  1268 ;; Auto vars:     Size  Location     Type
  1269 ;;		None
  1270 ;; Return value:  Size  Location     Type
  1271 ;;                  1    wreg      void 
  1272 ;; Registers used:
  1273 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1274 ;; Tracked objects:
  1275 ;;		On entry : 300/0
  1276 ;;		On exit  : 300/0
  1277 ;;		Unchanged: 0/0
  1278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1279 ;;      Params:         0       0       0       0       0
  1280 ;;      Locals:         0       0       0       0       0
  1281 ;;      Temps:          0       0       0       0       0
  1282 ;;      Totals:         0       0       0       0       0
  1283 ;;Total ram usage:        0 bytes
  1284 ;; Hardware stack levels used:    1
  1285 ;; Hardware stack levels required when called:    2
  1286 ;; This function calls:
  1287 ;;		Nothing
  1288 ;; This function is called by:
  1289 ;;		_GsensorLoop
  1290 ;; This function uses a non-reentrant model
  1291 ;;
  1292                           
  1293                           
  1294                           ;psect for function _SensorJudge
  1295  02A5                     _SensorJudge:	
  1296                           
  1297                           ;sensor.c: 75: switch (SEQbody)
  1298                           
  1299                           ;incstack = 0
  1300                           ; Regs used in _SensorJudge: [wreg-fsr0h+status,2+status,0]
  1301  02A5  2B22               	goto	l7272
  1302  02A6                     l3893:	
  1303                           ;sensor.c: 76: {
  1304                           ;sensor.c: 77: case 0:
  1305                           
  1306                           
  1307                           ;sensor.c: 78: Fbodysensor.bits.bit_0 = 0;
  1308  02A6  107A               	bcf	_Fbodysensor,0	;volatile
  1309                           
  1310                           ;sensor.c: 79: FledBits01.bits.bit_2 = 0;
  1311  02A7  1150               	bcf	_FledBits01,2	;volatile
  1312                           
  1313                           ;sensor.c: 110: }
  1314  02A8  2AB7               	goto	l7222
  1315  02A9                     l7234:	
  1316                           
  1317                           ;sensor.c: 111: else
  1318                           ;sensor.c: 112: {
  1319                           ;sensor.c: 113: if(++CNTbody_l >= 6)
  1320  02A9  0AB0               	incf	_CNTbody_l,f	;volatile
  1321  02AA  1903               	skipnz
  1322  02AB  0AB1               	incf	_CNTbody_l+1,f	;volatile
  1323  02AC  3000               	movlw	0
  1324  02AD  0231               	subwf	_CNTbody_l+1,w	;volatile
  1325  02AE  3006               	movlw	6
  1326  02AF  1903               	skipnz
  1327  02B0  0230               	subwf	_CNTbody_l,w	;volatile
  1328  02B1  1C03               	skipc
  1329  02B2  2AD9               	goto	l7240
  1330                           
  1331                           ;sensor.c: 114: {
  1332                           ;sensor.c: 115: CNTbody_h = 0;
  1333  02B3  01B2               	clrf	_CNTbody_h	;volatile
  1334  02B4  01B3               	clrf	_CNTbody_h+1	;volatile
  1335                           
  1336                           ;sensor.c: 116: CNTbody_l = 0;
  1337  02B5  01B0               	clrf	_CNTbody_l	;volatile
  1338  02B6  01B1               	clrf	_CNTbody_l+1	;volatile
  1339  02B7                     l7222:	
  1340                           
  1341                           ;sensor.c: 80: SEQbody = 1;
  1342  02B7  3001               	movlw	1
  1343  02B8  00C8               	movwf	_SEQbody	;volatile
  1344                           
  1345                           ;sensor.c: 81: break;
  1346  02B9  0008               	return
  1347  02BA                     l3895:	
  1348                           ;sensor.c: 84: case 1:
  1349                           
  1350                           
  1351                           ;sensor.c: 85: Fbodysensor.bits.bit_0 = 0;
  1352  02BA  107A               	bcf	_Fbodysensor,0	;volatile
  1353                           
  1354                           ;sensor.c: 86: FledBits01.bits.bit_2 = 0;
  1355  02BB  1150               	bcf	_FledBits01,2	;volatile
  1356                           
  1357                           ;sensor.c: 87: if(RB1 == 0)
  1358  02BC  1886               	btfsc	6,1	;volatile
  1359  02BD  2ACF               	goto	l7230
  1360                           
  1361                           ;sensor.c: 88: {
  1362                           ;sensor.c: 89: if(++CNTbody_h >= 3)
  1363  02BE  0AB2               	incf	_CNTbody_h,f	;volatile
  1364  02BF  1903               	skipnz
  1365  02C0  0AB3               	incf	_CNTbody_h+1,f	;volatile
  1366  02C1  3000               	movlw	0
  1367  02C2  0233               	subwf	_CNTbody_h+1,w	;volatile
  1368  02C3  3003               	movlw	3
  1369  02C4  1903               	skipnz
  1370  02C5  0232               	subwf	_CNTbody_h,w	;volatile
  1371  02C6  1C03               	skipc
  1372  02C7  0008               	return
  1373                           
  1374                           ;sensor.c: 90: {
  1375                           ;sensor.c: 91: CNTbody_h = 0;
  1376  02C8  01B2               	clrf	_CNTbody_h	;volatile
  1377  02C9  01B3               	clrf	_CNTbody_h+1	;volatile
  1378                           
  1379                           ;sensor.c: 92: CNTbody_l = 0;
  1380  02CA  01B0               	clrf	_CNTbody_l	;volatile
  1381  02CB  01B1               	clrf	_CNTbody_l+1	;volatile
  1382                           
  1383                           ;sensor.c: 93: SEQbody = 2;
  1384  02CC  3002               	movlw	2
  1385  02CD  00C8               	movwf	_SEQbody	;volatile
  1386                           
  1387                           ;sensor.c: 94: break;
  1388  02CE  0008               	return
  1389  02CF                     l7230:	
  1390                           
  1391                           ;sensor.c: 97: else
  1392                           ;sensor.c: 98: {
  1393                           ;sensor.c: 99: CNTbody_h = 0;
  1394  02CF  01B2               	clrf	_CNTbody_h	;volatile
  1395  02D0  01B3               	clrf	_CNTbody_h+1	;volatile
  1396  02D1  0008               	return
  1397  02D2                     l3899:	
  1398                           ;sensor.c: 104: case 2:
  1399                           
  1400                           
  1401                           ;sensor.c: 105: Fbodysensor.bits.bit_0 = 0;
  1402  02D2  107A               	bcf	_Fbodysensor,0	;volatile
  1403                           
  1404                           ;sensor.c: 106: FledBits01.bits.bit_2 = 0;
  1405  02D3  1150               	bcf	_FledBits01,2	;volatile
  1406                           
  1407                           ;sensor.c: 107: if(RB1 == 0)
  1408  02D4  1886               	btfsc	6,1	;volatile
  1409  02D5  2AA9               	goto	l7234
  1410                           
  1411                           ;sensor.c: 108: {
  1412                           ;sensor.c: 109: ++CNTbody_h;
  1413  02D6  0AB2               	incf	_CNTbody_h,f	;volatile
  1414  02D7  1903               	skipnz
  1415  02D8  0AB3               	incf	_CNTbody_h+1,f	;volatile
  1416  02D9                     l7240:	
  1417                           
  1418                           ;sensor.c: 119: }
  1419                           ;sensor.c: 120: }
  1420                           ;sensor.c: 121: BufCntAdd = CNTbody_h +CNTbody_l;
  1421  02D9  2334  120A  118A   	fcall	PL10	;call to abstracted procedure
  1422                           
  1423                           ;sensor.c: 122: if(BufCntAdd >= 30)
  1424  02DC  3000               	movlw	0
  1425  02DD  022F               	subwf	_BufCntAdd+1,w	;volatile
  1426  02DE  301E               	movlw	30
  1427  02DF  1903               	skipnz
  1428  02E0  022E               	subwf	_BufCntAdd,w	;volatile
  1429  02E1  1C03               	skipc
  1430  02E2  0008               	return
  1431  02E3                     l7244:	
  1432                           
  1433                           ;sensor.c: 123: {
  1434                           ;sensor.c: 124: SEQbody = 3;
  1435  02E3  3003               	movlw	3
  1436  02E4  00C8               	movwf	_SEQbody	;volatile
  1437                           
  1438                           ;sensor.c: 125: break;
  1439  02E5  0008               	return
  1440  02E6                     l3904:	
  1441                           ;sensor.c: 129: case 3:
  1442                           
  1443                           
  1444                           ;sensor.c: 130: Fbodysensor.bits.bit_0 = 1;
  1445  02E6  147A               	bsf	_Fbodysensor,0	;volatile
  1446                           
  1447                           ;sensor.c: 131: FledBits01.bits.bit_2 = 0;
  1448  02E7  1150               	bcf	_FledBits01,2	;volatile
  1449                           
  1450                           ;sensor.c: 132: if(RB1 == 1)
  1451  02E8  1C86               	btfss	6,1	;volatile
  1452  02E9  2AFB               	goto	l7252
  1453                           
  1454                           ;sensor.c: 133: {
  1455                           ;sensor.c: 134: if(++CNTbody_l >= 3)
  1456  02EA  0AB0               	incf	_CNTbody_l,f	;volatile
  1457  02EB  1903               	skipnz
  1458  02EC  0AB1               	incf	_CNTbody_l+1,f	;volatile
  1459  02ED  3000               	movlw	0
  1460  02EE  0231               	subwf	_CNTbody_l+1,w	;volatile
  1461  02EF  3003               	movlw	3
  1462  02F0  1903               	skipnz
  1463  02F1  0230               	subwf	_CNTbody_l,w	;volatile
  1464  02F2  1C03               	skipc
  1465  02F3  0008               	return
  1466                           
  1467                           ;sensor.c: 135: {
  1468                           ;sensor.c: 136: CNTbody_h = 0;
  1469  02F4  01B2               	clrf	_CNTbody_h	;volatile
  1470  02F5  01B3               	clrf	_CNTbody_h+1	;volatile
  1471                           
  1472                           ;sensor.c: 137: CNTbody_l = 0;
  1473  02F6  01B0               	clrf	_CNTbody_l	;volatile
  1474  02F7  01B1               	clrf	_CNTbody_l+1	;volatile
  1475                           
  1476                           ;sensor.c: 138: SEQbody = 4;
  1477  02F8  3004               	movlw	4
  1478  02F9  00C8               	movwf	_SEQbody	;volatile
  1479                           
  1480                           ;sensor.c: 139: break;
  1481  02FA  0008               	return
  1482  02FB                     l7252:	
  1483                           
  1484                           ;sensor.c: 142: else
  1485                           ;sensor.c: 143: {
  1486                           ;sensor.c: 144: CNTbody_l = 0;
  1487  02FB  01B0               	clrf	_CNTbody_l	;volatile
  1488  02FC  01B1               	clrf	_CNTbody_l+1	;volatile
  1489  02FD  0008               	return
  1490  02FE                     l3908:	
  1491                           ;sensor.c: 148: case 4:
  1492                           
  1493                           
  1494                           ;sensor.c: 149: Fbodysensor.bits.bit_0 = 1;
  1495  02FE  147A               	bsf	_Fbodysensor,0	;volatile
  1496                           
  1497                           ;sensor.c: 150: FledBits01.bits.bit_2 = 1;
  1498  02FF  1550               	bsf	_FledBits01,2	;volatile
  1499                           
  1500                           ;sensor.c: 151: if(RB1 == 0)
  1501  0300  1886               	btfsc	6,1	;volatile
  1502  0301  2B11               	goto	l7260
  1503                           
  1504                           ;sensor.c: 152: {
  1505                           ;sensor.c: 153: if(++CNTbody_h >= 6)
  1506  0302  0AB2               	incf	_CNTbody_h,f	;volatile
  1507  0303  1903               	skipnz
  1508  0304  0AB3               	incf	_CNTbody_h+1,f	;volatile
  1509  0305  3000               	movlw	0
  1510  0306  0233               	subwf	_CNTbody_h+1,w	;volatile
  1511  0307  3006               	movlw	6
  1512  0308  1903               	skipnz
  1513  0309  0232               	subwf	_CNTbody_h,w	;volatile
  1514  030A  1C03               	skipc
  1515  030B  2B14               	goto	l7262
  1516                           
  1517                           ;sensor.c: 154: {
  1518                           ;sensor.c: 155: CNTbody_h = 0;
  1519  030C  01B2               	clrf	_CNTbody_h	;volatile
  1520  030D  01B3               	clrf	_CNTbody_h+1	;volatile
  1521                           
  1522                           ;sensor.c: 156: CNTbody_l = 0;
  1523  030E  01B0               	clrf	_CNTbody_l	;volatile
  1524  030F  01B1               	clrf	_CNTbody_l+1	;volatile
  1525  0310  2AE3               	goto	l7244
  1526  0311                     l7260:	
  1527                           
  1528                           ;sensor.c: 161: else
  1529                           ;sensor.c: 162: {
  1530                           ;sensor.c: 163: ++CNTbody_l;
  1531  0311  0AB0               	incf	_CNTbody_l,f	;volatile
  1532  0312  1903               	skipnz
  1533  0313  0AB1               	incf	_CNTbody_l+1,f	;volatile
  1534  0314                     l7262:	
  1535                           
  1536                           ;sensor.c: 164: }
  1537                           ;sensor.c: 165: BufCntAdd = CNTbody_h +CNTbody_l;
  1538  0314  2334  120A  118A   	fcall	PL10	;call to abstracted procedure
  1539                           
  1540                           ;sensor.c: 166: if(BufCntAdd >= 500)
  1541  0317  3001               	movlw	1
  1542  0318  022F               	subwf	_BufCntAdd+1,w	;volatile
  1543  0319  30F4               	movlw	244
  1544  031A  1903               	skipnz
  1545  031B  022E               	subwf	_BufCntAdd,w	;volatile
  1546  031C  1C03               	skipc
  1547  031D  0008               	return
  1548  031E  2AB7               	goto	l7222
  1549  031F                     l7266:	
  1550                           
  1551                           ;sensor.c: 173: SEQbody = 0;
  1552  031F  01C8               	clrf	_SEQbody	;volatile
  1553                           
  1554                           ;sensor.c: 174: FledBits01.bits.bit_2 = 0;
  1555  0320  1150               	bcf	_FledBits01,2	;volatile
  1556                           
  1557                           ;sensor.c: 175: break;
  1558  0321  0008               	return
  1559  0322                     l7272:	
  1560  0322  0848               	movf	_SEQbody,w	;volatile
  1561                           
  1562                           ; Switch size 1, requested type "space"
  1563                           ; Number of cases is 5, Range of values is 0 to 4
  1564                           ; switch strategies available:
  1565                           ; Name         Instructions Cycles
  1566                           ; simple_byte           16     9 (average)
  1567                           ; direct_byte           23     8 (fixed)
  1568                           ; jumptable            260     6 (fixed)
  1569                           ;	Chosen strategy is simple_byte
  1570  0323  3A00               	xorlw	0	; case 0
  1571  0324  1903               	skipnz
  1572  0325  2AA6               	goto	l3893
  1573  0326  3A01               	xorlw	1	; case 1
  1574  0327  1903               	skipnz
  1575  0328  2ABA               	goto	l3895
  1576  0329  3A03               	xorlw	3	; case 2
  1577  032A  1903               	skipnz
  1578  032B  2AD2               	goto	l3899
  1579  032C  3A01               	xorlw	1	; case 3
  1580  032D  1903               	skipnz
  1581  032E  2AE6               	goto	l3904
  1582  032F  3A07               	xorlw	7	; case 4
  1583  0330  1903               	skipnz
  1584  0331  2AFE               	goto	l3908
  1585  0332  2B1F               	goto	l7266
  1586  0333  0008               	return
  1587  0334                     __end_of_SensorJudge:	
  1588  0334                     PL10:	
  1589  0334  0830               	movf	_CNTbody_l,w	;volatile
  1590  0335  0732               	addwf	_CNTbody_h,w	;volatile
  1591  0336  00AE               	movwf	_BufCntAdd	;volatile
  1592  0337  0831               	movf	_CNTbody_l+1,w	;volatile
  1593  0338  1803               	skipnc
  1594  0339  0A31               	incf	_CNTbody_l+1,w	;volatile
  1595  033A  0733               	addwf	_CNTbody_h+1,w	;volatile
  1596  033B  00AF               	movwf	_BufCntAdd+1	;volatile
  1597  033C  0008               	return
  1598  033D                     __end_ofPL10:	
  1599                           
  1600                           	psect	text10
  1601  033D                     __ptext10:	
  1602 ;; *************** function _GledLoop *****************
  1603 ;; Defined at:
  1604 ;;		line 16 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\light.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;		None
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;		None
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  1    wreg      void 
  1611 ;; Registers used:
  1612 ;;		wreg, status,2, status,0, pclath, cstack
  1613 ;; Tracked objects:
  1614 ;;		On entry : 300/0
  1615 ;;		On exit  : 300/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1618 ;;      Params:         0       0       0       0       0
  1619 ;;      Locals:         0       0       0       0       0
  1620 ;;      Temps:          0       0       0       0       0
  1621 ;;      Totals:         0       0       0       0       0
  1622 ;;Total ram usage:        0 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; Hardware stack levels required when called:    3
  1625 ;; This function calls:
  1626 ;;		_LED_Con
  1627 ;;		_LED_Judge
  1628 ;;		_LED_Key
  1629 ;;		_LED_Time
  1630 ;; This function is called by:
  1631 ;;		_main
  1632 ;; This function uses a non-reentrant model
  1633 ;;
  1634                           
  1635                           
  1636                           ;psect for function _GledLoop
  1637  033D                     _GledLoop:	
  1638                           
  1639                           ;light.c: 18: LED_Time();
  1640                           
  1641                           ;incstack = 0
  1642                           ; Regs used in _GledLoop: [wreg+status,2+status,0+pclath+cstack]
  1643  033D  2348  120A  118A   	fcall	_LED_Time
  1644                           
  1645                           ;light.c: 19: LED_Key();
  1646  0340  2347  120A  118A   	fcall	_LED_Key
  1647                           
  1648                           ;light.c: 20: LED_Judge();
  1649  0343  23F7  120A  118A   	fcall	_LED_Judge
  1650                           
  1651                           ;light.c: 21: LED_Con();
  1652  0346  2B4B               	ljmp	l6972
  1653  0347                     __end_of_GledLoop:	
  1654  0347                     __ptext12:	
  1655 ;; *************** function _LED_Key *****************
  1656 ;; Defined at:
  1657 ;;		line 24 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\light.c"
  1658 ;; Parameters:    Size  Location     Type
  1659 ;;		None
  1660 ;; Auto vars:     Size  Location     Type
  1661 ;;		None
  1662 ;; Return value:  Size  Location     Type
  1663 ;;                  1    wreg      void 
  1664 ;; Registers used:
  1665 ;;		None
  1666 ;; Tracked objects:
  1667 ;;		On entry : 300/0
  1668 ;;		On exit  : 300/0
  1669 ;;		Unchanged: 300/0
  1670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1671 ;;      Params:         0       0       0       0       0
  1672 ;;      Locals:         0       0       0       0       0
  1673 ;;      Temps:          0       0       0       0       0
  1674 ;;      Totals:         0       0       0       0       0
  1675 ;;Total ram usage:        0 bytes
  1676 ;; Hardware stack levels used:    1
  1677 ;; Hardware stack levels required when called:    2
  1678 ;; This function calls:
  1679 ;;		Nothing
  1680 ;; This function is called by:
  1681 ;;		_GledLoop
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           
  1686                           ;psect for function _LED_Key
  1687  0347                     _LED_Key:	
  1688                           
  1689                           ;incstack = 0
  1690                           ; Regs used in _LED_Key: []
  1691  0347  0008               	return
  1692  0348                     __end_of_LED_Key:	
  1693  0348                     __ptext11:	
  1694 ;; *************** function _LED_Time *****************
  1695 ;; Defined at:
  1696 ;;		line 45 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\light.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;		None
  1701 ;; Return value:  Size  Location     Type
  1702 ;;                  1    wreg      void 
  1703 ;; Registers used:
  1704 ;;		None
  1705 ;; Tracked objects:
  1706 ;;		On entry : 300/0
  1707 ;;		On exit  : 300/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1710 ;;      Params:         0       0       0       0       0
  1711 ;;      Locals:         0       0       0       0       0
  1712 ;;      Temps:          0       0       0       0       0
  1713 ;;      Totals:         0       0       0       0       0
  1714 ;;Total ram usage:        0 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    2
  1717 ;; This function calls:
  1718 ;;		Nothing
  1719 ;; This function is called by:
  1720 ;;		_GledLoop
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           
  1725                           ;psect for function _LED_Time
  1726  0348                     _LED_Time:	
  1727                           
  1728                           ;light.c: 47: if(Fsys1m.bits.bit_0 == 1)
  1729                           
  1730                           ;incstack = 0
  1731                           ; Regs used in _LED_Time: []
  1732  0348  1851               	btfsc	_Fsys1m,0	;volatile
  1733                           
  1734                           ;light.c: 48: {
  1735                           ;light.c: 49: Fsys1m.bits.bit_0 = 0;
  1736  0349  1051               	bcf	_Fsys1m,0	;volatile
  1737  034A  0008               	return
  1738  034B                     __end_of_LED_Time:	
  1739  034B                     __ptext14:	
  1740 ;; *************** function _LED_Con *****************
  1741 ;; Defined at:
  1742 ;;		line 84 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\light.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;		None
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;		None
  1747 ;; Return value:  Size  Location     Type
  1748 ;;                  1    wreg      void 
  1749 ;; Registers used:
  1750 ;;		wreg, status,2, status,0
  1751 ;; Tracked objects:
  1752 ;;		On entry : 300/0
  1753 ;;		On exit  : 300/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1756 ;;      Params:         0       0       0       0       0
  1757 ;;      Locals:         0       0       0       0       0
  1758 ;;      Temps:          0       0       0       0       0
  1759 ;;      Totals:         0       0       0       0       0
  1760 ;;Total ram usage:        0 bytes
  1761 ;; Hardware stack levels used:    1
  1762 ;; Hardware stack levels required when called:    2
  1763 ;; This function calls:
  1764 ;;		Nothing
  1765 ;; This function is called by:
  1766 ;;		_GledLoop
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           
  1771                           ;psect for function _LED_Con
  1772  034B                     _LED_Con:	
  1773  034B                     l6972:	
  1774                           ;incstack = 0
  1775                           ; Regs used in _LED_Con: [wreg+status,2+status,0]
  1776                           
  1777                           
  1778                           ;light.c: 86: RA5 = FledBits01.bits.bit_0;
  1779  034B  1C50               	btfss	_FledBits01,0	;volatile
  1780  034C  2B51               	goto	u1410
  1781  034D  1283               	bcf	3,5	;RP0=0, select bank0
  1782  034E  1303               	bcf	3,6	;RP1=0, select bank0
  1783  034F  1685               	bsf	5,5	;volatile
  1784  0350  2B54               	goto	u1424
  1785  0351                     u1410:	
  1786  0351  1283               	bcf	3,5	;RP0=0, select bank0
  1787  0352  1303               	bcf	3,6	;RP1=0, select bank0
  1788  0353  1285               	bcf	5,5	;volatile
  1789  0354                     u1424:	
  1790                           
  1791                           ;light.c: 88: if (FledBits01.bits.bit_0 == 1)
  1792  0354  1C50               	btfss	_FledBits01,0	;volatile
  1793  0355  2BEE               	goto	l7060
  1794                           
  1795                           ;light.c: 89: {
  1796                           ;light.c: 90: if (FledBits01.bits.bit_3 == 0)
  1797  0356  19D0               	btfsc	_FledBits01,3	;volatile
  1798  0357  2BA4               	goto	l7016
  1799                           
  1800                           ;light.c: 91: {
  1801                           ;light.c: 92: if (CNTbreath_Led2 >= 80)
  1802  0358  3000               	movlw	0
  1803  0359  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  1804  035A  3050               	movlw	80
  1805  035B  1903               	skipnz
  1806  035C  023C               	subwf	_CNTbreath_Led2,w	;volatile
  1807  035D  1C03               	skipc
  1808  035E  2B70               	goto	l6986
  1809                           
  1810                           ;light.c: 93: {
  1811                           ;light.c: 94: CNTbreath_Led2 = 80;
  1812  035F  3050               	movlw	80
  1813  0360  00BC               	movwf	_CNTbreath_Led2	;volatile
  1814  0361  01BD               	clrf	_CNTbreath_Led2+1	;volatile
  1815                           
  1816                           ;light.c: 95: if (++CNTbreath_Led3 > 10)
  1817  0362  0ABA               	incf	_CNTbreath_Led3,f	;volatile
  1818  0363  1903               	skipnz
  1819  0364  0ABB               	incf	_CNTbreath_Led3+1,f	;volatile
  1820  0365  3000               	movlw	0
  1821  0366  023B               	subwf	_CNTbreath_Led3+1,w	;volatile
  1822  0367  300B               	movlw	11
  1823  0368  1903               	skipnz
  1824  0369  023A               	subwf	_CNTbreath_Led3,w	;volatile
  1825  036A  1C03               	skipc
  1826  036B  0008               	return
  1827                           
  1828                           ;light.c: 96: {
  1829                           ;light.c: 97: FledBits01.bits.bit_3 = 1;
  1830  036C  15D0               	bsf	_FledBits01,3	;volatile
  1831                           
  1832                           ;light.c: 98: CNTbreath_Led3 = 0;
  1833  036D  01BA               	clrf	_CNTbreath_Led3	;volatile
  1834  036E  01BB               	clrf	_CNTbreath_Led3+1	;volatile
  1835  036F  0008               	return
  1836  0370                     l6986:	
  1837                           
  1838                           ;light.c: 101: else if (CNTbreath_Led2 > 45)
  1839  0370  3000               	movlw	0
  1840  0371  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  1841  0372  302E               	movlw	46
  1842  0373  1903               	skipnz
  1843  0374  023C               	subwf	_CNTbreath_Led2,w	;volatile
  1844  0375  1C03               	skipc
  1845  0376  2B8F               	goto	l6994
  1846                           
  1847                           ;light.c: 102: {
  1848                           ;light.c: 103: if (++CNTbreath_Led1 >= 3)
  1849  0377  2405  120A  118A   	fcall	PL16	;call to abstracted procedure
  1850  037A  2B85               	goto	L3
  1851  037B                     l6996:	
  1852                           
  1853                           ;light.c: 110: {
  1854                           ;light.c: 111: if (++CNTbreath_Led1 >= 8)
  1855  037B  23FF  120A  118A   	fcall	PL14	;call to abstracted procedure
  1856  037E  2B85               	goto	L3
  1857  037F                     l7004:	
  1858                           
  1859                           ;light.c: 118: {
  1860                           ;light.c: 119: if (++CNTbreath_Led1 >= 5)
  1861  037F  0ABE               	incf	_CNTbreath_Led1,f	;volatile
  1862  0380  1903               	skipnz
  1863  0381  0ABF               	incf	_CNTbreath_Led1+1,f	;volatile
  1864  0382  3000               	movlw	0
  1865  0383  023F               	subwf	_CNTbreath_Led1+1,w	;volatile
  1866  0384  3005               	movlw	5
  1867  0385                     L3:	
  1868  0385  1903               	skipnz
  1869  0386  023E               	subwf	_CNTbreath_Led1,w	;volatile
  1870  0387  1C03               	skipc
  1871  0388  0008               	return
  1872                           
  1873                           ;light.c: 104: {
  1874                           ;light.c: 105: CNTbreath_Led1 = 0;
  1875  0389  01BE               	clrf	_CNTbreath_Led1	;volatile
  1876  038A  01BF               	clrf	_CNTbreath_Led1+1	;volatile
  1877                           
  1878                           ;light.c: 106: CNTbreath_Led2++;
  1879  038B  0ABC               	incf	_CNTbreath_Led2,f	;volatile
  1880  038C  1903               	skipnz
  1881  038D  0ABD               	incf	_CNTbreath_Led2+1,f	;volatile
  1882  038E  0008               	return
  1883  038F                     l6994:	
  1884                           
  1885                           ;light.c: 109: else if (CNTbreath_Led2 > 30)
  1886  038F  3000               	movlw	0
  1887  0390  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  1888  0391  301F               	movlw	31
  1889  0392  1903               	skipnz
  1890  0393  023C               	subwf	_CNTbreath_Led2,w	;volatile
  1891  0394  1803               	btfsc	3,0
  1892  0395  2B7B               	goto	l6996
  1893                           
  1894                           ;light.c: 117: else if (CNTbreath_Led2 > 10)
  1895  0396  3000               	movlw	0
  1896  0397  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  1897  0398  300B               	movlw	11
  1898  0399  1903               	skipnz
  1899  039A  023C               	subwf	_CNTbreath_Led2,w	;volatile
  1900  039B  1803               	btfsc	3,0
  1901  039C  2B7F               	goto	l7004
  1902                           
  1903                           ;light.c: 125: else
  1904                           ;light.c: 126: {
  1905                           ;light.c: 127: if (++CNTbreath_Led1 >= 11)
  1906  039D  0ABE               	incf	_CNTbreath_Led1,f	;volatile
  1907  039E  1903               	skipnz
  1908  039F  0ABF               	incf	_CNTbreath_Led1+1,f	;volatile
  1909  03A0  3000               	movlw	0
  1910  03A1  023F               	subwf	_CNTbreath_Led1+1,w	;volatile
  1911  03A2  300B               	movlw	11
  1912  03A3  2B85               	goto	L3
  1913  03A4                     l7016:	
  1914                           ;light.c: 131: }
  1915                           ;light.c: 132: }
  1916                           ;light.c: 133: }
  1917                           
  1918                           
  1919                           ;light.c: 134: else
  1920                           ;light.c: 135: {
  1921                           ;light.c: 136: if (CNTbreath_Led2 < 5)
  1922  03A4  3000               	movlw	0
  1923  03A5  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  1924  03A6  3005               	movlw	5
  1925  03A7  1903               	skipnz
  1926  03A8  023C               	subwf	_CNTbreath_Led2,w	;volatile
  1927  03A9  1803               	skipnc
  1928  03AA  2BB0               	goto	l7022
  1929                           
  1930                           ;light.c: 137: {
  1931                           ;light.c: 138: CNTbreath_Led2 = 5;
  1932  03AB  3005               	movlw	5
  1933  03AC  00BC               	movwf	_CNTbreath_Led2	;volatile
  1934  03AD  01BD               	clrf	_CNTbreath_Led2+1	;volatile
  1935                           
  1936                           ;light.c: 139: FledBits01.bits.bit_3 = 0;
  1937  03AE  11D0               	bcf	_FledBits01,3	;volatile
  1938                           
  1939                           ;light.c: 140: }
  1940  03AF  0008               	return
  1941  03B0                     l7022:	
  1942                           
  1943                           ;light.c: 141: else if (CNTbreath_Led2 < 10)
  1944  03B0  3000               	movlw	0
  1945  03B1  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  1946  03B2  300A               	movlw	10
  1947  03B3  1903               	skipnz
  1948  03B4  023C               	subwf	_CNTbreath_Led2,w	;volatile
  1949  03B5  1803               	skipnc
  1950  03B6  2BD5               	goto	l7030
  1951  03B7                     l7032:	
  1952                           ;light.c: 142: {
  1953                           ;light.c: 143: if (++CNTbreath_Led1 >= 6)
  1954                           
  1955                           
  1956                           ;light.c: 150: {
  1957                           ;light.c: 151: if (++CNTbreath_Led1 >= 6)
  1958  03B7  0ABE               	incf	_CNTbreath_Led1,f	;volatile
  1959  03B8  1903               	skipnz
  1960  03B9  0ABF               	incf	_CNTbreath_Led1+1,f	;volatile
  1961  03BA  3000               	movlw	0
  1962  03BB  023F               	subwf	_CNTbreath_Led1+1,w	;volatile
  1963  03BC  3006               	movlw	6
  1964  03BD  2BC8               	goto	L1
  1965  03BE                     l7040:	
  1966                           
  1967                           ;light.c: 158: {
  1968                           ;light.c: 159: if (++CNTbreath_Led1 >= 8)
  1969  03BE  23FF  120A  118A   	fcall	PL14	;call to abstracted procedure
  1970  03C1  2BC8               	goto	L1
  1971  03C2                     l7048:	
  1972                           
  1973                           ;light.c: 166: {
  1974                           ;light.c: 167: if (++CNTbreath_Led1 >= 4)
  1975  03C2  0ABE               	incf	_CNTbreath_Led1,f	;volatile
  1976  03C3  1903               	skipnz
  1977  03C4  0ABF               	incf	_CNTbreath_Led1+1,f	;volatile
  1978  03C5  3000               	movlw	0
  1979  03C6  023F               	subwf	_CNTbreath_Led1+1,w	;volatile
  1980  03C7  3004               	movlw	4
  1981  03C8                     L1:	
  1982  03C8  1903               	skipnz
  1983  03C9  023E               	subwf	_CNTbreath_Led1,w	;volatile
  1984  03CA  1C03               	skipc
  1985  03CB  0008               	return
  1986                           
  1987                           ;light.c: 144: {
  1988                           ;light.c: 145: CNTbreath_Led1 = 0;
  1989  03CC  01BE               	clrf	_CNTbreath_Led1	;volatile
  1990  03CD  01BF               	clrf	_CNTbreath_Led1+1	;volatile
  1991                           
  1992                           ;light.c: 146: CNTbreath_Led2--;
  1993  03CE  3001               	movlw	1
  1994  03CF  02BC               	subwf	_CNTbreath_Led2,f	;volatile
  1995  03D0  3000               	movlw	0
  1996  03D1  1C03               	skipc
  1997  03D2  03BD               	decf	_CNTbreath_Led2+1,f	;volatile
  1998  03D3  02BD               	subwf	_CNTbreath_Led2+1,f	;volatile
  1999  03D4  0008               	return
  2000  03D5                     l7030:	
  2001                           
  2002                           ;light.c: 149: else if (CNTbreath_Led2 < 30)
  2003  03D5  3000               	movlw	0
  2004  03D6  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  2005  03D7  301E               	movlw	30
  2006  03D8  1903               	skipnz
  2007  03D9  023C               	subwf	_CNTbreath_Led2,w	;volatile
  2008  03DA  1C03               	btfss	3,0
  2009  03DB  2BB7               	goto	l7032
  2010                           
  2011                           ;light.c: 157: else if (CNTbreath_Led2 < 40)
  2012  03DC  3000               	movlw	0
  2013  03DD  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  2014  03DE  3028               	movlw	40
  2015  03DF  1903               	skipnz
  2016  03E0  023C               	subwf	_CNTbreath_Led2,w	;volatile
  2017  03E1  1C03               	btfss	3,0
  2018  03E2  2BBE               	goto	l7040
  2019                           
  2020                           ;light.c: 165: else if (CNTbreath_Led2 < 60)
  2021  03E3  3000               	movlw	0
  2022  03E4  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  2023  03E5  303C               	movlw	60
  2024  03E6  1903               	skipnz
  2025  03E7  023C               	subwf	_CNTbreath_Led2,w	;volatile
  2026  03E8  1C03               	btfss	3,0
  2027  03E9  2BC2               	goto	l7048
  2028                           
  2029                           ;light.c: 173: else
  2030                           ;light.c: 174: {
  2031                           ;light.c: 175: if (++CNTbreath_Led1 >= 3)
  2032  03EA  2405  120A  118A   	fcall	PL16	;call to abstracted procedure
  2033  03ED  2BC8               	goto	L1
  2034  03EE                     l7060:	
  2035                           
  2036                           ;light.c: 183: else
  2037                           ;light.c: 184: {
  2038                           ;light.c: 185: CNTbreath_Led1 = 0;
  2039  03EE  01BE               	clrf	_CNTbreath_Led1	;volatile
  2040  03EF  01BF               	clrf	_CNTbreath_Led1+1	;volatile
  2041                           
  2042                           ;light.c: 186: CNTbreath_Led2 = 0;
  2043  03F0  01BC               	clrf	_CNTbreath_Led2	;volatile
  2044  03F1  01BD               	clrf	_CNTbreath_Led2+1	;volatile
  2045                           
  2046                           ;light.c: 187: CNTbreath_Led3 = 0;
  2047  03F2  01BA               	clrf	_CNTbreath_Led3	;volatile
  2048  03F3  01BB               	clrf	_CNTbreath_Led3+1	;volatile
  2049                           
  2050                           ;light.c: 188: FledBits01.bits.bit_3 = 0;
  2051  03F4  11D0               	bcf	_FledBits01,3	;volatile
  2052                           
  2053                           ;light.c: 189: RA5 = 0;
  2054  03F5  1285               	bcf	5,5	;volatile
  2055  03F6  0008               	return
  2056  03F7                     __end_of_LED_Con:	
  2057  03F7                     __ptext13:	
  2058 ;; *************** function _LED_Judge *****************
  2059 ;; Defined at:
  2060 ;;		line 53 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\light.c"
  2061 ;; Parameters:    Size  Location     Type
  2062 ;;		None
  2063 ;; Auto vars:     Size  Location     Type
  2064 ;;		None
  2065 ;; Return value:  Size  Location     Type
  2066 ;;                  1    wreg      void 
  2067 ;; Registers used:
  2068 ;;		None
  2069 ;; Tracked objects:
  2070 ;;		On entry : 300/0
  2071 ;;		On exit  : 300/0
  2072 ;;		Unchanged: 0/0
  2073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2074 ;;      Params:         0       0       0       0       0
  2075 ;;      Locals:         0       0       0       0       0
  2076 ;;      Temps:          0       0       0       0       0
  2077 ;;      Totals:         0       0       0       0       0
  2078 ;;Total ram usage:        0 bytes
  2079 ;; Hardware stack levels used:    1
  2080 ;; Hardware stack levels required when called:    2
  2081 ;; This function calls:
  2082 ;;		Nothing
  2083 ;; This function is called by:
  2084 ;;		_GledLoop
  2085 ;; This function uses a non-reentrant model
  2086 ;;
  2087                           
  2088                           
  2089                           ;psect for function _LED_Judge
  2090  03F7                     _LED_Judge:	
  2091                           
  2092                           ;light.c: 55: if(Fbodysensor.bits.bit_0 == 1)
  2093                           
  2094                           ;incstack = 0
  2095                           ; Regs used in _LED_Judge: []
  2096  03F7  1C7A               	btfss	_Fbodysensor,0	;volatile
  2097  03F8  2BFD               	goto	l6970
  2098                           
  2099                           ;light.c: 56: {
  2100                           ;light.c: 57: FledBits01.bits.bit_0 = 1;
  2101  03F9  1450               	bsf	_FledBits01,0	;volatile
  2102                           
  2103                           ;light.c: 58: if(Fbodysensor.bits.bit_4 == 0)
  2104  03FA  1E7A               	btfss	_Fbodysensor,4	;volatile
  2105                           
  2106                           ;light.c: 59: {
  2107                           ;light.c: 60: if(FledBits01.bits.bit_2 == 1)
  2108  03FB  1D50               	btfss	_FledBits01,2	;volatile
  2109  03FC  0008               	return
  2110  03FD                     l6970:	
  2111                           
  2112                           ;light.c: 61: {
  2113                           ;light.c: 62: FledBits01.bits.bit_0 = 0;
  2114  03FD  1050               	bcf	_FledBits01,0	;volatile
  2115  03FE  0008               	return
  2116  03FF                     __end_of_LED_Judge:	
  2117  03FF                     PL14:	
  2118  03FF  0ABE               	incf	_CNTbreath_Led1,f	;volatile
  2119  0400  1903               	skipnz
  2120  0401  0ABF               	incf	_CNTbreath_Led1+1,f	;volatile
  2121  0402  3000               	movlw	0
  2122  0403  023F               	subwf	_CNTbreath_Led1+1,w	;volatile
  2123  0404  3408               	retlw	8
  2124  0405                     __end_ofPL14:	
  2125  0405                     PL16:	
  2126  0405  0ABE               	incf	_CNTbreath_Led1,f	;volatile
  2127  0406  1903               	skipnz
  2128  0407  0ABF               	incf	_CNTbreath_Led1+1,f	;volatile
  2129  0408  3000               	movlw	0
  2130  0409  023F               	subwf	_CNTbreath_Led1+1,w	;volatile
  2131  040A  3403               	retlw	3
  2132  040B                     __end_ofPL16:	
  2133                           
  2134                           	psect	text15
  2135  001C                     __ptext15:	
  2136 ;; *************** function _GflushLoop *****************
  2137 ;; Defined at:
  2138 ;;		line 15 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\flush.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;		None
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;		None
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  1    wreg      void 
  2145 ;; Registers used:
  2146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 300/0
  2149 ;;		On exit  : 300/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2152 ;;      Params:         0       0       0       0       0
  2153 ;;      Locals:         0       0       0       0       0
  2154 ;;      Temps:          0       0       0       0       0
  2155 ;;      Totals:         0       0       0       0       0
  2156 ;;Total ram usage:        0 bytes
  2157 ;; Hardware stack levels used:    1
  2158 ;; Hardware stack levels required when called:    5
  2159 ;; This function calls:
  2160 ;;		_FlushCon
  2161 ;;		_FlushJudge
  2162 ;;		_FlushTime
  2163 ;; This function is called by:
  2164 ;;		_main
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           
  2169                           ;psect for function _GflushLoop
  2170  001C                     _GflushLoop:	
  2171                           
  2172                           ;flush.c: 17: FlushTime();
  2173                           
  2174                           ;incstack = 0
  2175                           ; Regs used in _GflushLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2176  001C  2023  120A  118A   	fcall	_FlushTime
  2177                           
  2178                           ;flush.c: 18: FlushJudge();
  2179  001F  20FC  120A  118A   	fcall	_FlushJudge
  2180                           
  2181                           ;flush.c: 19: FlushCon();
  2182  0022  2824               	ljmp	l7102
  2183  0023                     __end_of_GflushLoop:	
  2184  0023                     __ptext16:	
  2185 ;; *************** function _FlushTime *****************
  2186 ;; Defined at:
  2187 ;;		line 22 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\flush.c"
  2188 ;; Parameters:    Size  Location     Type
  2189 ;;		None
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;		None
  2192 ;; Return value:  Size  Location     Type
  2193 ;;                  1    wreg      void 
  2194 ;; Registers used:
  2195 ;;		None
  2196 ;; Tracked objects:
  2197 ;;		On entry : 300/0
  2198 ;;		On exit  : 300/0
  2199 ;;		Unchanged: 300/0
  2200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2201 ;;      Params:         0       0       0       0       0
  2202 ;;      Locals:         0       0       0       0       0
  2203 ;;      Temps:          0       0       0       0       0
  2204 ;;      Totals:         0       0       0       0       0
  2205 ;;Total ram usage:        0 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    2
  2208 ;; This function calls:
  2209 ;;		Nothing
  2210 ;; This function is called by:
  2211 ;;		_GflushLoop
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           
  2216                           ;psect for function _FlushTime
  2217  0023                     _FlushTime:	
  2218                           
  2219                           ;incstack = 0
  2220                           ; Regs used in _FlushTime: []
  2221  0023  0008               	return
  2222  0024                     __end_of_FlushTime:	
  2223  0024                     __ptext21:	
  2224 ;; *************** function _FlushCon *****************
  2225 ;; Defined at:
  2226 ;;		line 105 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\flush.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;		None
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;		None
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  1    wreg      void 
  2233 ;; Registers used:
  2234 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2235 ;; Tracked objects:
  2236 ;;		On entry : 300/0
  2237 ;;		On exit  : 300/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2240 ;;      Params:         0       0       0       0       0
  2241 ;;      Locals:         0       0       0       0       0
  2242 ;;      Temps:          0       0       0       0       0
  2243 ;;      Totals:         0       0       0       0       0
  2244 ;;Total ram usage:        0 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    2
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_GflushLoop
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           
  2255                           ;psect for function _FlushCon
  2256  0024                     _FlushCon:	
  2257  0024                     l7102:	
  2258                           ;incstack = 0
  2259                           ; Regs used in _FlushCon: [wreg-fsr0h+status,2+status,0]
  2260                           
  2261                           
  2262                           ;flush.c: 107: switch (SEQflsuh)
  2263  0024  28D5               	goto	l7186
  2264  0025                     l2922:	
  2265                           ;flush.c: 108: {
  2266                           ;flush.c: 109: case FLUSH_INIT_0:
  2267                           
  2268                           
  2269                           ;flush.c: 110: Fflush1.bits.bit_6 = 0;
  2270  0025  134B               	bcf	_Fflush1,6	;volatile
  2271                           
  2272                           ;flush.c: 111: RA2 = 0;
  2273  0026  1105               	bcf	5,2	;volatile
  2274                           
  2275                           ;flush.c: 112: RA4 = 0;
  2276  0027  1205               	bcf	5,4	;volatile
  2277                           
  2278                           ;flush.c: 113: RA1 = 0;
  2279  0028  1085               	bcf	5,1	;volatile
  2280                           
  2281                           ;flush.c: 114: if((Fflush1.bits.bit_1 == 1) || (Fflush1.bits.bit_3 == 1))
  2282  0029  18CB               	btfsc	_Fflush1,1	;volatile
  2283  002A  282D               	goto	l7106
  2284  002B  1DCB               	btfss	_Fflush1,3	;volatile
  2285  002C  0008               	return
  2286  002D                     l7106:	
  2287                           
  2288                           ;flush.c: 115: {
  2289                           ;flush.c: 116: SEQflsuh = FLUSH_INIT_1;
  2290  002D  3001               	movlw	1
  2291  002E  2830               	goto	L18
  2292  002F                     l7110:	
  2293                           
  2294                           ;flush.c: 126: {
  2295                           ;flush.c: 127: SEQflsuh = FLUSH_END_0;
  2296  002F  300A               	movlw	10
  2297  0030                     L18:	
  2298  0030  00CA               	movwf	_SEQflsuh	;volatile
  2299                           
  2300                           ;flush.c: 117: CNTflush = 0;
  2301  0031  01B4               	clrf	_CNTflush	;volatile
  2302  0032  01B5               	clrf	_CNTflush+1	;volatile
  2303  0033  0008               	return
  2304  0034                     l2927:	
  2305                           ;flush.c: 120: case FLUSH_INIT_1:
  2306                           
  2307                           
  2308                           ;flush.c: 121: Fflush1.bits.bit_6 = 1;
  2309  0034  174B               	bsf	_Fflush1,6	;volatile
  2310                           
  2311                           ;flush.c: 122: RA2 = 0;
  2312  0035  1105               	bcf	5,2	;volatile
  2313                           
  2314                           ;flush.c: 123: RA4 = 0;
  2315  0036  1205               	bcf	5,4	;volatile
  2316                           
  2317                           ;flush.c: 124: RA1 = 0;
  2318  0037  1085               	bcf	5,1	;volatile
  2319                           
  2320                           ;flush.c: 125: if(Fbodysensor.bits.bit_0 == 1)
  2321  0038  187A               	btfsc	_Fbodysensor,0	;volatile
  2322  0039  282F               	goto	l7110
  2323                           
  2324                           ;flush.c: 130: }
  2325                           ;flush.c: 131: if(++CNTflush >= 5)
  2326  003A  0AB4               	incf	_CNTflush,f	;volatile
  2327  003B  1903               	skipnz
  2328  003C  0AB5               	incf	_CNTflush+1,f	;volatile
  2329  003D  3000               	movlw	0
  2330  003E  0235               	subwf	_CNTflush+1,w	;volatile
  2331  003F  3005               	movlw	5
  2332  0040  1903               	skipnz
  2333  0041  0234               	subwf	_CNTflush,w	;volatile
  2334  0042  1C03               	skipc
  2335  0043  0008               	return
  2336                           
  2337                           ;flush.c: 132: {
  2338                           ;flush.c: 133: CNTflush = 0;
  2339  0044  01B4               	clrf	_CNTflush	;volatile
  2340  0045  01B5               	clrf	_CNTflush+1	;volatile
  2341                           
  2342                           ;flush.c: 134: SEQflsuh = FLUSH_INIT_2;
  2343  0046  3002               	movlw	2
  2344  0047  00CA               	movwf	_SEQflsuh	;volatile
  2345  0048  0008               	return
  2346  0049                     l2930:	
  2347                           ;flush.c: 137: case FLUSH_INIT_2:
  2348                           
  2349                           
  2350                           ;flush.c: 138: Fflush1.bits.bit_6 = 1;
  2351  0049  174B               	bsf	_Fflush1,6	;volatile
  2352                           
  2353                           ;flush.c: 139: RA2 = 0;
  2354  004A  1105               	bcf	5,2	;volatile
  2355                           
  2356                           ;flush.c: 140: RA4 = 0;
  2357  004B  1205               	bcf	5,4	;volatile
  2358                           
  2359                           ;flush.c: 141: RA1 = 0;
  2360  004C  1085               	bcf	5,1	;volatile
  2361                           
  2362                           ;flush.c: 142: if(Fbodysensor.bits.bit_0 == 1)
  2363  004D  187A               	btfsc	_Fbodysensor,0	;volatile
  2364  004E  282F               	goto	l7110
  2365                           
  2366                           ;flush.c: 147: }
  2367                           ;flush.c: 149: if(Fflush1.bits.bit_1 == 1)
  2368  004F  1CCB               	btfss	_Fflush1,1	;volatile
  2369  0050  2854               	goto	l2932
  2370                           
  2371                           ;flush.c: 150: {
  2372                           ;flush.c: 151: SEQflsuh = FLUSH_BIG_0;
  2373  0051  3003               	movlw	3
  2374  0052  00CA               	movwf	_SEQflsuh	;volatile
  2375                           
  2376                           ;flush.c: 152: }
  2377  0053  0008               	return
  2378  0054                     l2932:	
  2379                           
  2380                           ;flush.c: 153: else if(Fflush1.bits.bit_3 == 1)
  2381  0054  1DCB               	btfss	_Fflush1,3	;volatile
  2382  0055  0008               	return
  2383                           
  2384                           ;flush.c: 154: {
  2385                           ;flush.c: 155: SEQflsuh = FLUSH_SML_0;
  2386  0056  3007               	movlw	7
  2387  0057  00CA               	movwf	_SEQflsuh	;volatile
  2388  0058  0008               	return
  2389  0059                     l2935:	
  2390                           ;flush.c: 158: case FLUSH_BIG_0:
  2391                           
  2392                           
  2393                           ;flush.c: 159: Fflush1.bits.bit_6 = 1;
  2394                           
  2395                           ;flush.c: 160: RA2 = 0;
  2396                           
  2397                           ;flush.c: 161: RA4 = 1;
  2398                           
  2399                           ;flush.c: 162: RA1 = 1;
  2400                           
  2401                           ;flush.c: 163: if(++CNTflush >= 10)
  2402  0059  222F  120A  118A   	fcall	PL4	;call to abstracted procedure
  2403  005C  1903               	skipnz
  2404  005D  0234               	subwf	_CNTflush,w	;volatile
  2405  005E  1C03               	skipc
  2406  005F  0008               	return
  2407                           
  2408                           ;flush.c: 164: {
  2409                           ;flush.c: 165: CNTflush = 0;
  2410  0060  01B4               	clrf	_CNTflush	;volatile
  2411  0061  01B5               	clrf	_CNTflush+1	;volatile
  2412                           
  2413                           ;flush.c: 166: SEQflsuh = FLUSH_BIG_1;
  2414  0062  3004               	movlw	4
  2415  0063  00CA               	movwf	_SEQflsuh	;volatile
  2416  0064  0008               	return
  2417  0065                     l2937:	
  2418                           ;flush.c: 169: case FLUSH_BIG_1:
  2419                           
  2420                           
  2421                           ;flush.c: 170: Fflush1.bits.bit_6 = 1;
  2422  0065  174B               	bsf	_Fflush1,6	;volatile
  2423                           
  2424                           ;flush.c: 171: RA2 = 1;
  2425  0066  1505               	bsf	5,2	;volatile
  2426                           
  2427                           ;flush.c: 172: RA4 = 1;
  2428  0067  1605               	bsf	5,4	;volatile
  2429                           
  2430                           ;flush.c: 173: RA1 = 1;
  2431                           
  2432                           ;flush.c: 175: if(++CNTflush >= 100)
  2433  0068  2240  120A  118A   	fcall	PL8	;call to abstracted procedure
  2434  006B  3064               	movlw	100
  2435  006C  1903               	skipnz
  2436  006D  0234               	subwf	_CNTflush,w	;volatile
  2437  006E  1C03               	skipc
  2438  006F  0008               	return
  2439                           
  2440                           ;flush.c: 176: {
  2441                           ;flush.c: 177: CNTflush = 0;
  2442  0070  01B4               	clrf	_CNTflush	;volatile
  2443  0071  01B5               	clrf	_CNTflush+1	;volatile
  2444                           
  2445                           ;flush.c: 178: SEQflsuh = FLUSH_BIG_2;
  2446  0072  3005               	movlw	5
  2447  0073  00CA               	movwf	_SEQflsuh	;volatile
  2448  0074  0008               	return
  2449  0075                     l2939:	
  2450                           ;flush.c: 189: case FLUSH_BIG_2:
  2451                           
  2452                           
  2453                           ;flush.c: 190: Fflush1.bits.bit_6 = 1;
  2454                           
  2455                           ;flush.c: 191: RA2 = 0;
  2456                           
  2457                           ;flush.c: 192: RA4 = 1;
  2458                           
  2459                           ;flush.c: 193: RA1 = 1;
  2460                           
  2461                           ;flush.c: 194: if(++CNTflush >= 10)
  2462  0075  222F  120A  118A   	fcall	PL4	;call to abstracted procedure
  2463  0078  1903               	skipnz
  2464  0079  0234               	subwf	_CNTflush,w	;volatile
  2465  007A  1C03               	skipc
  2466  007B  0008               	return
  2467                           
  2468                           ;flush.c: 195: {
  2469                           ;flush.c: 196: CNTflush = 0;
  2470  007C  01B4               	clrf	_CNTflush	;volatile
  2471  007D  01B5               	clrf	_CNTflush+1	;volatile
  2472                           
  2473                           ;flush.c: 197: SEQflsuh = FLUSH_BIG_3;
  2474  007E  3006               	movlw	6
  2475  007F  00CA               	movwf	_SEQflsuh	;volatile
  2476  0080  0008               	return
  2477  0081                     l2941:	
  2478                           ;flush.c: 200: case FLUSH_BIG_3:
  2479                           
  2480                           
  2481                           ;flush.c: 201: Fflush1.bits.bit_6 = 1;
  2482  0081  174B               	bsf	_Fflush1,6	;volatile
  2483                           
  2484                           ;flush.c: 202: RA2 = 0;
  2485  0082  1105               	bcf	5,2	;volatile
  2486                           
  2487                           ;flush.c: 203: RA4 = 0;
  2488  0083  1205               	bcf	5,4	;volatile
  2489                           
  2490                           ;flush.c: 204: RA1 = 1;
  2491                           
  2492                           ;flush.c: 205: if(++CNTflush >= 200)
  2493  0084  2240  120A  118A   	fcall	PL8	;call to abstracted procedure
  2494  0087  30C8               	movlw	200
  2495  0088                     L17:	
  2496  0088  1903               	skipnz
  2497  0089  0234               	subwf	_CNTflush,w	;volatile
  2498  008A  1C03               	skipc
  2499  008B  0008               	return
  2500                           
  2501                           ;flush.c: 206: {
  2502                           ;flush.c: 207: CNTflush = 0;
  2503  008C  01B4               	clrf	_CNTflush	;volatile
  2504  008D  01B5               	clrf	_CNTflush+1	;volatile
  2505                           
  2506                           ;flush.c: 208: SEQflsuh = FLUSH_END_0;
  2507  008E  300A               	movlw	10
  2508  008F  00CA               	movwf	_SEQflsuh	;volatile
  2509  0090  0008               	return
  2510  0091                     l2943:	
  2511                           ;flush.c: 211: case FLUSH_SML_0:
  2512                           
  2513                           
  2514                           ;flush.c: 212: Fflush1.bits.bit_6 = 1;
  2515                           
  2516                           ;flush.c: 213: RA2 = 0;
  2517                           
  2518                           ;flush.c: 214: RA4 = 1;
  2519                           
  2520                           ;flush.c: 215: RA1 = 0;
  2521                           
  2522                           ;flush.c: 216: if(++CNTflush >= 5)
  2523  0091  2225  120A  118A   	fcall	PL2	;call to abstracted procedure
  2524  0094  1903               	skipnz
  2525  0095  0234               	subwf	_CNTflush,w	;volatile
  2526  0096  1C03               	skipc
  2527  0097  0008               	return
  2528                           
  2529                           ;flush.c: 217: {
  2530                           ;flush.c: 218: CNTflush = 0;
  2531  0098  01B4               	clrf	_CNTflush	;volatile
  2532  0099  01B5               	clrf	_CNTflush+1	;volatile
  2533                           
  2534                           ;flush.c: 219: SEQflsuh = FLUSH_SML_1;
  2535  009A  3008               	movlw	8
  2536  009B  00CA               	movwf	_SEQflsuh	;volatile
  2537  009C  0008               	return
  2538  009D                     l2945:	
  2539                           ;flush.c: 222: case FLUSH_SML_1:
  2540                           
  2541                           
  2542                           ;flush.c: 223: Fflush1.bits.bit_6 = 1;
  2543  009D  174B               	bsf	_Fflush1,6	;volatile
  2544                           
  2545                           ;flush.c: 224: RA2 = 1;
  2546  009E  1505               	bsf	5,2	;volatile
  2547                           
  2548                           ;flush.c: 225: RA4 = 1;
  2549  009F  1605               	bsf	5,4	;volatile
  2550                           
  2551                           ;flush.c: 226: RA1 = 0;
  2552                           
  2553                           ;flush.c: 228: if(++CNTflush >= 100)
  2554  00A0  2239  120A  118A   	fcall	PL6	;call to abstracted procedure
  2555  00A3  3064               	movlw	100
  2556  00A4  1903               	skipnz
  2557  00A5  0234               	subwf	_CNTflush,w	;volatile
  2558  00A6  1C03               	skipc
  2559  00A7  0008               	return
  2560                           
  2561                           ;flush.c: 229: {
  2562                           ;flush.c: 230: CNTflush = 0;
  2563  00A8  01B4               	clrf	_CNTflush	;volatile
  2564  00A9  01B5               	clrf	_CNTflush+1	;volatile
  2565                           
  2566                           ;flush.c: 231: SEQflsuh = FLUSH_SML_2;
  2567  00AA  3009               	movlw	9
  2568  00AB  00CA               	movwf	_SEQflsuh	;volatile
  2569  00AC  0008               	return
  2570  00AD                     l2947:	
  2571                           ;flush.c: 234: case FLUSH_SML_2:
  2572                           
  2573                           
  2574                           ;flush.c: 235: Fflush1.bits.bit_6 = 1;
  2575                           
  2576                           ;flush.c: 236: RA2 = 0;
  2577                           
  2578                           ;flush.c: 237: RA4 = 1;
  2579                           
  2580                           ;flush.c: 238: RA1 = 0;
  2581                           
  2582                           ;flush.c: 239: if(++CNTflush >= 5)
  2583  00AD  2225  120A  118A   	fcall	PL2	;call to abstracted procedure
  2584  00B0  2888               	goto	L17
  2585  00B1                     l2949:	
  2586                           ;flush.c: 246: case FLUSH_END_0:
  2587                           
  2588                           
  2589                           ;flush.c: 247: Fflush1.bits.bit_6 = 1;
  2590  00B1  174B               	bsf	_Fflush1,6	;volatile
  2591                           
  2592                           ;flush.c: 248: RA2 = 0;
  2593  00B2  1105               	bcf	5,2	;volatile
  2594                           
  2595                           ;flush.c: 249: RA4 = 0;
  2596  00B3  1205               	bcf	5,4	;volatile
  2597                           
  2598                           ;flush.c: 250: RA1 = 0;
  2599                           
  2600                           ;flush.c: 251: if(++CNTflush >= 5)
  2601  00B4  2239  120A  118A   	fcall	PL6	;call to abstracted procedure
  2602  00B7  3005               	movlw	5
  2603  00B8  1903               	skipnz
  2604  00B9  0234               	subwf	_CNTflush,w	;volatile
  2605  00BA  1C03               	skipc
  2606  00BB  0008               	return
  2607                           
  2608                           ;flush.c: 252: {
  2609                           ;flush.c: 253: CNTflush = 0;
  2610  00BC  01B4               	clrf	_CNTflush	;volatile
  2611  00BD  01B5               	clrf	_CNTflush+1	;volatile
  2612                           
  2613                           ;flush.c: 254: SEQflsuh = FLUSH_END_1;
  2614  00BE  300B               	movlw	11
  2615  00BF  00CA               	movwf	_SEQflsuh	;volatile
  2616  00C0  0008               	return
  2617  00C1                     l2951:	
  2618                           ;flush.c: 257: case FLUSH_END_1:
  2619                           
  2620                           
  2621                           ;flush.c: 258: Fflush1.bits.bit_6 = 0;
  2622  00C1  134B               	bcf	_Fflush1,6	;volatile
  2623                           
  2624                           ;flush.c: 259: RA2 = 0;
  2625  00C2  1105               	bcf	5,2	;volatile
  2626                           
  2627                           ;flush.c: 260: RA4 = 0;
  2628  00C3  1205               	bcf	5,4	;volatile
  2629                           
  2630                           ;flush.c: 261: RA1 = 0;
  2631  00C4  1085               	bcf	5,1	;volatile
  2632                           
  2633                           ;flush.c: 262: SEQflsuh = FLUSH_INIT_0;
  2634  00C5  01CA               	clrf	_SEQflsuh	;volatile
  2635                           
  2636                           ;flush.c: 263: CNTflush = 0;
  2637  00C6  01B4               	clrf	_CNTflush	;volatile
  2638  00C7  01B5               	clrf	_CNTflush+1	;volatile
  2639                           
  2640                           ;flush.c: 264: Fflush1.bits.bit_1 = 0;
  2641  00C8  10CB               	bcf	_Fflush1,1	;volatile
  2642                           
  2643                           ;flush.c: 265: Fflush1.bits.bit_3 = 0;
  2644  00C9  11CB               	bcf	_Fflush1,3	;volatile
  2645                           
  2646                           ;flush.c: 266: break;
  2647  00CA  0008               	return
  2648  00CB                     l2952:	
  2649                           ;flush.c: 267: default:
  2650                           
  2651                           
  2652                           ;flush.c: 268: Fflush1.bits.bit_6 = 0;
  2653  00CB  134B               	bcf	_Fflush1,6	;volatile
  2654                           
  2655                           ;flush.c: 269: RA2 = 0;
  2656  00CC  1105               	bcf	5,2	;volatile
  2657                           
  2658                           ;flush.c: 270: RA4 = 0;
  2659  00CD  1205               	bcf	5,4	;volatile
  2660                           
  2661                           ;flush.c: 271: RA1 = 0;
  2662  00CE  1085               	bcf	5,1	;volatile
  2663                           
  2664                           ;flush.c: 272: Fflush1.bits.bit_1 = 0;
  2665  00CF  10CB               	bcf	_Fflush1,1	;volatile
  2666                           
  2667                           ;flush.c: 273: Fflush1.bits.bit_3 = 0;
  2668  00D0  11CB               	bcf	_Fflush1,3	;volatile
  2669                           
  2670                           ;flush.c: 274: SEQflsuh = FLUSH_INIT_0;
  2671  00D1  01CA               	clrf	_SEQflsuh	;volatile
  2672                           
  2673                           ;flush.c: 275: CNTflush = 0;
  2674  00D2  01B4               	clrf	_CNTflush	;volatile
  2675  00D3  01B5               	clrf	_CNTflush+1	;volatile
  2676                           
  2677                           ;flush.c: 276: break;
  2678  00D4  0008               	return
  2679  00D5                     l7186:	
  2680  00D5  084A               	movf	_SEQflsuh,w	;volatile
  2681                           
  2682                           ; Switch size 1, requested type "space"
  2683                           ; Number of cases is 12, Range of values is 0 to 11
  2684                           ; switch strategies available:
  2685                           ; Name         Instructions Cycles
  2686                           ; simple_byte           37    19 (average)
  2687                           ; direct_byte           44     8 (fixed)
  2688                           ; jumptable            260     6 (fixed)
  2689                           ;	Chosen strategy is simple_byte
  2690  00D6  3A00               	xorlw	0	; case 0
  2691  00D7  1903               	skipnz
  2692  00D8  2825               	goto	l2922
  2693  00D9  3A01               	xorlw	1	; case 1
  2694  00DA  1903               	skipnz
  2695  00DB  2834               	goto	l2927
  2696  00DC  3A03               	xorlw	3	; case 2
  2697  00DD  1903               	skipnz
  2698  00DE  2849               	goto	l2930
  2699  00DF  3A01               	xorlw	1	; case 3
  2700  00E0  1903               	skipnz
  2701  00E1  2859               	goto	l2935
  2702  00E2  3A07               	xorlw	7	; case 4
  2703  00E3  1903               	skipnz
  2704  00E4  2865               	goto	l2937
  2705  00E5  3A01               	xorlw	1	; case 5
  2706  00E6  1903               	skipnz
  2707  00E7  2875               	goto	l2939
  2708  00E8  3A03               	xorlw	3	; case 6
  2709  00E9  1903               	skipnz
  2710  00EA  2881               	goto	l2941
  2711  00EB  3A01               	xorlw	1	; case 7
  2712  00EC  1903               	skipnz
  2713  00ED  2891               	goto	l2943
  2714  00EE  3A0F               	xorlw	15	; case 8
  2715  00EF  1903               	skipnz
  2716  00F0  289D               	goto	l2945
  2717  00F1  3A01               	xorlw	1	; case 9
  2718  00F2  1903               	skipnz
  2719  00F3  28AD               	goto	l2947
  2720  00F4  3A03               	xorlw	3	; case 10
  2721  00F5  1903               	skipnz
  2722  00F6  28B1               	goto	l2949
  2723  00F7  3A01               	xorlw	1	; case 11
  2724  00F8  1903               	skipnz
  2725  00F9  28C1               	goto	l2951
  2726  00FA  28CB               	goto	l2952
  2727  00FB  0008               	return
  2728  00FC                     __end_of_FlushCon:	
  2729  00FC                     __ptext17:	
  2730 ;; *************** function _FlushJudge *****************
  2731 ;; Defined at:
  2732 ;;		line 26 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\flush.c"
  2733 ;; Parameters:    Size  Location     Type
  2734 ;;		None
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;  Key_Step        1    6[COMMON] unsigned char 
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  1    wreg      void 
  2739 ;; Registers used:
  2740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2741 ;; Tracked objects:
  2742 ;;		On entry : 300/0
  2743 ;;		On exit  : 300/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2746 ;;      Params:         0       0       0       0       0
  2747 ;;      Locals:         1       0       0       0       0
  2748 ;;      Temps:          0       0       0       0       0
  2749 ;;      Totals:         1       0       0       0       0
  2750 ;;Total ram usage:        1 bytes
  2751 ;; Hardware stack levels used:    1
  2752 ;; Hardware stack levels required when called:    4
  2753 ;; This function calls:
  2754 ;;		_GkeyLoop
  2755 ;; This function is called by:
  2756 ;;		_GflushLoop
  2757 ;; This function uses a non-reentrant model
  2758 ;;
  2759                           
  2760                           
  2761                           ;psect for function _FlushJudge
  2762  00FC                     _FlushJudge:	
  2763                           
  2764                           ;flush.c: 31: if(Fbodysensor.bits.bit_3 == 1)
  2765                           
  2766                           ;incstack = 0
  2767                           ; Regs used in _FlushJudge: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2768  00FC  1DFA               	btfss	_Fbodysensor,3	;volatile
  2769  00FD  2901               	goto	l2905
  2770                           
  2771                           ;flush.c: 32: {
  2772                           ;flush.c: 33: Fflush1.bits.bit_0 = 1;
  2773  00FE  144B               	bsf	_Fflush1,0	;volatile
  2774                           
  2775                           ;flush.c: 34: Fflush1.bits.bit_2 = 0;
  2776  00FF  114B               	bcf	_Fflush1,2	;volatile
  2777                           
  2778                           ;flush.c: 35: }
  2779  0100  2917               	goto	l2906
  2780  0101                     l2905:	
  2781                           
  2782                           ;flush.c: 36: else if(Fbodysensor.bits.bit_4 == 1)
  2783  0101  1E7A               	btfss	_Fbodysensor,4	;volatile
  2784  0102  2905               	goto	l7586
  2785                           
  2786                           ;flush.c: 37: {
  2787                           ;flush.c: 38: Fflush1.bits.bit_2 = 1;
  2788  0103  154B               	bsf	_Fflush1,2	;volatile
  2789  0104  2909               	goto	L4
  2790  0105                     l7586:	
  2791                           ;flush.c: 40: }
  2792                           
  2793                           ;flush.c: 39: Fflush1.bits.bit_0 = 0;
  2794                           
  2795                           
  2796                           ;flush.c: 41: else if (SEQflsuh)
  2797  0105  084A               	movf	_SEQflsuh,w	;volatile
  2798  0106  1903               	btfsc	3,2
  2799  0107  290B               	goto	l7590
  2800  0108                     l7588:	
  2801                           
  2802                           ;flush.c: 42: {
  2803                           ;flush.c: 43: Fflush1.bits.bit_2 = 0;
  2804  0108  114B               	bcf	_Fflush1,2	;volatile
  2805  0109                     L4:	
  2806                           
  2807                           ;flush.c: 44: Fflush1.bits.bit_0 = 0;
  2808  0109  104B               	bcf	_Fflush1,0	;volatile
  2809                           
  2810                           ;flush.c: 45: }
  2811  010A  2917               	goto	l2906
  2812  010B                     l7590:	
  2813                           
  2814                           ;flush.c: 46: else
  2815                           ;flush.c: 47: {
  2816                           ;flush.c: 48: Key_Step = GkeyLoop();
  2817  010B  212B  120A  118A   	fcall	_GkeyLoop
  2818  010E  00F6               	movwf	FlushJudge@Key_Step
  2819                           
  2820                           ;flush.c: 49: if (Key_Step)
  2821  010F  0876               	movf	FlushJudge@Key_Step,w
  2822  0110  1903               	btfsc	3,2
  2823  0111  2908               	goto	l7588
  2824                           
  2825                           ;flush.c: 50: {
  2826                           ;flush.c: 51: SEQflsuh = Key_Step;
  2827  0112  0876               	movf	FlushJudge@Key_Step,w
  2828  0113  00CA               	movwf	_SEQflsuh	;volatile
  2829                           
  2830                           ;flush.c: 52: CNTflush = 0;
  2831  0114  01B4               	clrf	_CNTflush	;volatile
  2832  0115  01B5               	clrf	_CNTflush+1	;volatile
  2833                           
  2834                           ;flush.c: 53: Fflush1.bits.bit_7 = 1;
  2835  0116  17CB               	bsf	_Fflush1,7	;volatile
  2836  0117                     l2906:	
  2837                           ;flush.c: 54: }else
  2838                           
  2839                           
  2840                           ;flush.c: 58: }
  2841                           ;flush.c: 59: }
  2842                           ;flush.c: 76: if (Fbodysensor.bits.bit_2 == 1)
  2843  0117  197A               	btfsc	_Fbodysensor,2	;volatile
  2844                           
  2845                           ;flush.c: 77: {
  2846                           ;flush.c: 78: Fflush1.bits.bit_7 = 1;
  2847  0118  17CB               	bsf	_Fflush1,7	;volatile
  2848                           
  2849                           ;flush.c: 79: }
  2850                           ;flush.c: 80: if (Fflush1.bits.bit_7 == 1)
  2851  0119  1FCB               	btfss	_Fflush1,7	;volatile
  2852  011A  0008               	return
  2853                           
  2854                           ;flush.c: 81: {
  2855                           ;flush.c: 82: if (Fflush1.bits.bit_6 == 1)
  2856  011B  1F4B               	btfss	_Fflush1,6	;volatile
  2857  011C  2920               	goto	l2915
  2858                           
  2859                           ;flush.c: 83: {
  2860                           ;flush.c: 84: Fflush1.bits.bit_2 = 0;
  2861  011D  114B               	bcf	_Fflush1,2	;volatile
  2862                           
  2863                           ;flush.c: 85: Fflush1.bits.bit_0 = 0;
  2864  011E  104B               	bcf	_Fflush1,0	;volatile
  2865                           
  2866                           ;flush.c: 86: return;
  2867  011F  0008               	return
  2868  0120                     l2915:	
  2869                           
  2870                           ;flush.c: 87: }
  2871                           ;flush.c: 88: Fflush1.bits.bit_7 = 0;
  2872  0120  13CB               	bcf	_Fflush1,7	;volatile
  2873                           
  2874                           ;flush.c: 89: if(Fflush1.bits.bit_0 == 1)
  2875  0121  1C4B               	btfss	_Fflush1,0	;volatile
  2876  0122  2926               	goto	l2917
  2877                           
  2878                           ;flush.c: 90: {
  2879                           ;flush.c: 91: Fflush1.bits.bit_0 = 0;
  2880  0123  104B               	bcf	_Fflush1,0	;volatile
  2881                           
  2882                           ;flush.c: 92: Fflush1.bits.bit_1 = 1;
  2883  0124  14CB               	bsf	_Fflush1,1	;volatile
  2884                           
  2885                           ;flush.c: 93: return;
  2886  0125  0008               	return
  2887  0126                     l2917:	
  2888                           
  2889                           ;flush.c: 94: }
  2890                           ;flush.c: 95: if(Fflush1.bits.bit_2 == 1)
  2891  0126  1D4B               	btfss	_Fflush1,2	;volatile
  2892  0127  0008               	return
  2893                           
  2894                           ;flush.c: 96: {
  2895                           ;flush.c: 97: Fflush1.bits.bit_2 = 0;
  2896  0128  114B               	bcf	_Fflush1,2	;volatile
  2897                           
  2898                           ;flush.c: 98: Fflush1.bits.bit_3 = 1;
  2899  0129  15CB               	bsf	_Fflush1,3	;volatile
  2900  012A  0008               	return
  2901  012B                     __end_of_FlushJudge:	
  2902  012B                     __ptext18:	
  2903 ;; *************** function _GkeyLoop *****************
  2904 ;; Defined at:
  2905 ;;		line 7 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\key.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;		None
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;		None
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  1    wreg      unsigned char 
  2912 ;; Registers used:
  2913 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2914 ;; Tracked objects:
  2915 ;;		On entry : 300/0
  2916 ;;		On exit  : 300/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2919 ;;      Params:         0       0       0       0       0
  2920 ;;      Locals:         0       0       0       0       0
  2921 ;;      Temps:          2       0       0       0       0
  2922 ;;      Totals:         2       0       0       0       0
  2923 ;;Total ram usage:        2 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; Hardware stack levels required when called:    3
  2926 ;; This function calls:
  2927 ;;		_KeyControl
  2928 ;;		_ScanKey
  2929 ;; This function is called by:
  2930 ;;		_FlushJudge
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934                           
  2935                           ;psect for function _GkeyLoop
  2936  012B                     _GkeyLoop:	
  2937                           
  2938                           ;key.c: 9: for ( SeletedLine = 0; SeletedLine < 2; SeletedLine++)
  2939                           
  2940                           ;incstack = 0
  2941                           ; Regs used in _GkeyLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2942  012B  01F9               	clrf	_SeletedLine	;volatile
  2943  012C                     L10:	
  2944  012C  3002               	movlw	2
  2945  012D  0279               	subwf	_SeletedLine,w	;volatile
  2946  012E  1803               	btfsc	3,0
  2947  012F  3400               	retlw	0
  2948                           
  2949                           ;key.c: 10: {
  2950                           ;key.c: 11: KeyLines[SeletedLine].flags.level =ScanKey(SeletedLine);
  2951  0130  0879               	movf	_SeletedLine,w	;volatile
  2952  0131  2212  120A  118A   	fcall	_ScanKey
  2953  0134  00F4               	movwf	??_GkeyLoop
  2954  0135  0879               	movf	_SeletedLine,w	;volatile
  2955  0136  00F5               	movwf	??_GkeyLoop+1
  2956  0137  3001               	movlw	1
  2957  0138  1003               	clrc
  2958  0139                     L5:	
  2959  0139  0DF5               	rlf	??_GkeyLoop+1,f
  2960  013A  3EFF               	addlw	-1
  2961  013B  1003               	clrc
  2962  013C  1D03               	skipz
  2963  013D  2939               	goto	L5
  2964  013E  0D75               	rlf	??_GkeyLoop+1,w
  2965  013F  3E55               	addlw	(low (_KeyLines| 0))& (0+255)
  2966  0140  0084               	movwf	4
  2967  0141  0DF4               	rlf	??_GkeyLoop,f
  2968  0142  0DF4               	rlf	??_GkeyLoop,f
  2969  0143  1383               	bcf	3,7	;select IRP bank0
  2970  0144  0800               	movf	0,w
  2971  0145  0674               	xorwf	??_GkeyLoop,w
  2972  0146  39FB               	andlw	-5
  2973  0147  0674               	xorwf	??_GkeyLoop,w
  2974  0148  0080               	movwf	0
  2975                           
  2976                           ;key.c: 13: if(KeyLines[SeletedLine].flags.is_forbidden)
  2977  0149  0879               	movf	_SeletedLine,w	;volatile
  2978  014A  00F4               	movwf	??_GkeyLoop
  2979  014B  3001               	movlw	1
  2980  014C  1003               	clrc
  2981  014D                     L6:	
  2982  014D  0DF4               	rlf	??_GkeyLoop,f
  2983  014E  3EFF               	addlw	-1
  2984  014F  1003               	clrc
  2985  0150  1D03               	skipz
  2986  0151  294D               	goto	L6
  2987  0152  0D74               	rlf	??_GkeyLoop,w
  2988  0153  3E55               	addlw	(low (_KeyLines| 0))& (0+255)
  2989  0154  0084               	movwf	4
  2990  0155  1C00               	btfss	0,0
  2991  0156  2973               	goto	l7554
  2992                           
  2993                           ;key.c: 14: {
  2994                           ;key.c: 15: if (KeyLines[SeletedLine].flags.level)
  2995  0157  0879               	movf	_SeletedLine,w	;volatile
  2996  0158  00F4               	movwf	??_GkeyLoop
  2997  0159  3001               	movlw	1
  2998  015A  1003               	clrc
  2999  015B                     L7:	
  3000  015B  0DF4               	rlf	??_GkeyLoop,f
  3001  015C  3EFF               	addlw	-1
  3002  015D  1003               	clrc
  3003  015E  1D03               	skipz
  3004  015F  295B               	goto	L7
  3005  0160  0D74               	rlf	??_GkeyLoop,w
  3006  0161  3E55               	addlw	(low (_KeyLines| 0))& (0+255)
  3007  0162  0084               	movwf	4
  3008  0163  1D00               	btfss	0,2
  3009  0164  2993               	goto	l7570
  3010                           
  3011                           ;key.c: 16: {
  3012                           ;key.c: 17: KeyLines[SeletedLine].flags.is_forbidden = 0;
  3013  0165  0879               	movf	_SeletedLine,w	;volatile
  3014  0166  00F4               	movwf	??_GkeyLoop
  3015  0167  3001               	movlw	1
  3016  0168  1003               	clrc
  3017  0169                     L8:	
  3018  0169  0DF4               	rlf	??_GkeyLoop,f
  3019  016A  3EFF               	addlw	-1
  3020  016B  1003               	clrc
  3021  016C  1D03               	skipz
  3022  016D  2969               	goto	L8
  3023  016E  0D74               	rlf	??_GkeyLoop,w
  3024  016F  3E55               	addlw	(low (_KeyLines| 0))& (0+255)
  3025  0170  0084               	movwf	4
  3026  0171  1000               	bcf	0,0
  3027  0172  2993               	goto	l7570
  3028  0173                     l7554:	
  3029                           
  3030                           ;key.c: 20: }
  3031                           ;key.c: 21: if (KeyControl(&KeyLines[SeletedLine]))
  3032  0173  0879               	movf	_SeletedLine,w	;volatile
  3033  0174  00F4               	movwf	??_GkeyLoop
  3034  0175  3001               	movlw	1
  3035  0176  1003               	clrc
  3036  0177                     L9:	
  3037  0177  0DF4               	rlf	??_GkeyLoop,f
  3038  0178  3EFF               	addlw	-1
  3039  0179  1003               	clrc
  3040  017A  1D03               	skipz
  3041  017B  2977               	goto	L9
  3042  017C  0D74               	rlf	??_GkeyLoop,w
  3043  017D  3E55               	addlw	(low (_KeyLines| 0))& (0+255)
  3044  017E  2195  120A  118A   	fcall	_KeyControl
  3045  0181  3A00               	xorlw	0
  3046  0182  1D03               	btfss	3,2
  3047  0183  298B               	goto	l7568
  3048  0184  2993               	goto	l7570
  3049  0185                     l5793:	
  3050                           ;key.c: 24: {
  3051                           ;key.c: 25: case PortA:
  3052                           
  3053                           
  3054                           ;key.c: 26: Fflush1.bits.bit_0 = 1;
  3055  0185  144B               	bsf	_Fflush1,0	;volatile
  3056                           
  3057                           ;key.c: 27: KeyLines[PortB].flags.is_forbidden = 1;
  3058  0186  1459               	bsf	_KeyLines+4,0	;volatile
  3059                           
  3060                           ;key.c: 28: return FLUSH_BIG_0;
  3061  0187  3403               	retlw	3
  3062  0188                     l5795:	
  3063                           ;key.c: 29: case PortB:
  3064                           
  3065                           
  3066                           ;key.c: 30: Fflush1.bits.bit_2 = 1;
  3067  0188  154B               	bsf	_Fflush1,2	;volatile
  3068                           
  3069                           ;key.c: 31: KeyLines[PortA].flags.is_forbidden = 1;
  3070  0189  1455               	bsf	_KeyLines,0	;volatile
  3071                           
  3072                           ;key.c: 32: return FLUSH_SML_0;
  3073  018A  3407               	retlw	7
  3074  018B                     l7568:	
  3075  018B  0879               	movf	_SeletedLine,w	;volatile
  3076                           
  3077                           ; Switch size 1, requested type "space"
  3078                           ; Number of cases is 2, Range of values is 0 to 1
  3079                           ; switch strategies available:
  3080                           ; Name         Instructions Cycles
  3081                           ; simple_byte            7     4 (average)
  3082                           ; direct_byte           14     8 (fixed)
  3083                           ; jumptable            260     6 (fixed)
  3084                           ;	Chosen strategy is simple_byte
  3085  018C  3A00               	xorlw	0	; case 0
  3086  018D  1903               	skipnz
  3087  018E  2985               	goto	l5793
  3088  018F  3A01               	xorlw	1	; case 1
  3089  0190  1903               	skipnz
  3090  0191  2988               	goto	l5795
  3091  0192  2993               	goto	l7570
  3092  0193                     l7570:	
  3093  0193  0AF9               	incf	_SeletedLine,f	;volatile
  3094  0194  292C               	goto	L10
  3095  0195                     __end_of_GkeyLoop:	
  3096                           ;key.c: 38: }
  3097                           ;key.c: 39: }
  3098                           ;key.c: 40: return 0;
  3099                           
  3100  0195                     __ptext20:	
  3101 ;; *************** function _KeyControl *****************
  3102 ;; Defined at:
  3103 ;;		line 58 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\key.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;  this            1    wreg     PTR struct _KEY_PRIVATE
  3106 ;;		 -> KeyLines(8), 
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;  this            1    6[BANK0 ] PTR struct _KEY_PRIVATE
  3109 ;;		 -> KeyLines(8), 
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  1    wreg      unsigned char 
  3112 ;; Registers used:
  3113 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3114 ;; Tracked objects:
  3115 ;;		On entry : B00/0
  3116 ;;		On exit  : B00/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3119 ;;      Params:         0       0       0       0       0
  3120 ;;      Locals:         0       7       0       0       0
  3121 ;;      Temps:          2       0       0       0       0
  3122 ;;      Totals:         2       7       0       0       0
  3123 ;;Total ram usage:        9 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    2
  3126 ;; This function calls:
  3127 ;;		Nothing
  3128 ;; This function is called by:
  3129 ;;		_GkeyLoop
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           
  3134                           ;psect for function _KeyControl
  3135  0195                     _KeyControl:	
  3136                           
  3137                           ;incstack = 0
  3138                           ; Regs used in _KeyControl: [wreg-fsr0h+status,2+status,0]
  3139                           ;KeyControl@this stored from wreg
  3140  0195  00E3               	movwf	KeyControl@this
  3141                           
  3142                           ;key.c: 60: if(!(this->flags.level))
  3143  0196  0084               	movwf	4
  3144                           
  3145                           ;key.c: 61: {
  3146                           ;key.c: 62: if (this->flags.is_pressing)
  3147  0197  0863               	movf	KeyControl@this,w
  3148  0198  1900               	btfsc	0,2
  3149  0199  29EB               	goto	L14
  3150  019A  0084               	movwf	4
  3151                           
  3152                           ;key.c: 63: {
  3153                           ;key.c: 64: this->cnt = 0;
  3154  019B  0A63               	incf	KeyControl@this,w
  3155  019C  1C80               	btfss	0,1
  3156  019D  29D0               	goto	L15
  3157  019E  0084               	movwf	4
  3158  019F  0180               	clrf	0
  3159                           
  3160                           ;key.c: 66: if (((++(this->cnt_timeout)) > (600)?(0 == ((this->cnt_timeout) = 0)):0))
  3161  01A0  0863               	movf	KeyControl@this,w
  3162  01A1  3E02               	addlw	2
  3163  01A2  0084               	movwf	4
  3164  01A3  3001               	movlw	1
  3165  01A4  0780               	addwf	0,f
  3166  01A5  0A84               	incf	4,f
  3167  01A6  1803               	skipnc
  3168  01A7  0A80               	incf	0,f
  3169  01A8  0384               	decf	4,f
  3170  01A9  0800               	movf	0,w
  3171  01AA  00F2               	movwf	??_KeyControl
  3172  01AB  0A84               	incf	4,f
  3173  01AC  0800               	movf	0,w
  3174  01AD  00F3               	movwf	??_KeyControl+1
  3175  01AE  3002               	movlw	2
  3176  01AF  0273               	subwf	??_KeyControl+1,w
  3177  01B0  3059               	movlw	89
  3178  01B1  1903               	skipnz
  3179  01B2  0272               	subwf	??_KeyControl,w
  3180  01B3  1803               	skipnc
  3181  01B4  29B7               	goto	l7500
  3182  01B5  01DD               	clrf	_KeyControl$3154
  3183  01B6  29C7               	goto	L11
  3184  01B7                     l7500:	
  3185  01B7  0863               	movf	KeyControl@this,w
  3186  01B8  3E02               	addlw	2
  3187  01B9  0084               	movwf	4
  3188  01BA  0180               	clrf	0
  3189  01BB  0A84               	incf	4,f
  3190  01BC  0180               	clrf	0
  3191  01BD  01F2               	clrf	??_KeyControl
  3192  01BE  01F3               	clrf	??_KeyControl+1
  3193  01BF  0872               	movf	??_KeyControl,w
  3194  01C0  0473               	iorwf	??_KeyControl+1,w
  3195  01C1  1D03               	btfss	3,2
  3196  01C2  29C5               	goto	u2470
  3197  01C3  3001               	movlw	1
  3198  01C4  29C6               	goto	u2480
  3199  01C5                     u2470:	
  3200  01C5  3000               	movlw	0
  3201  01C6                     u2480:	
  3202  01C6  00DD               	movwf	_KeyControl$3154
  3203  01C7                     L11:	
  3204  01C7  01DE               	clrf	_KeyControl$3154+1
  3205  01C8  085D               	movf	_KeyControl$3154,w
  3206  01C9  045E               	iorwf	_KeyControl$3154+1,w
  3207  01CA  1903               	btfsc	3,2
  3208  01CB  3400               	retlw	0
  3209                           
  3210                           ;key.c: 67: {
  3211                           ;key.c: 68: this->flags.is_forbidden = 1;
  3212  01CC  0863               	movf	KeyControl@this,w
  3213  01CD  0084               	movwf	4
  3214  01CE  1400               	bsf	0,0
  3215  01CF  3400               	retlw	0
  3216  01D0                     L15:	
  3217                           ;key.c: 72: {
  3218                           ;key.c: 73: if (((++(this->cnt)) > (10)?(0 == ((this->cnt) = 0)):0))
  3219                           
  3220  01D0  0084               	movwf	4
  3221  01D1  300B               	movlw	11
  3222  01D2  0A80               	incf	0,f
  3223  01D3  0200               	subwf	0,w
  3224  01D4  1803               	skipnc
  3225  01D5  29D8               	goto	l7510
  3226  01D6  01DF               	clrf	_KeyControl$3155
  3227  01D7  29E1               	goto	L12
  3228  01D8                     l7510:	
  3229  01D8  0A63               	incf	KeyControl@this,w
  3230  01D9  0084               	movwf	4
  3231  01DA  0180               	clrf	0
  3232  01DB  1D03               	btfss	3,2
  3233  01DC  29DF               	goto	u2510
  3234  01DD  3001               	movlw	1
  3235  01DE  29E0               	goto	u2520
  3236  01DF                     u2510:	
  3237  01DF  3000               	movlw	0
  3238  01E0                     u2520:	
  3239  01E0  00DF               	movwf	_KeyControl$3155
  3240  01E1                     L12:	
  3241  01E1  01E0               	clrf	_KeyControl$3155+1
  3242  01E2  085F               	movf	_KeyControl$3155,w
  3243  01E3  0460               	iorwf	_KeyControl$3155+1,w
  3244  01E4  1903               	btfsc	3,2
  3245  01E5  3400               	retlw	0
  3246                           
  3247                           ;key.c: 74: {
  3248                           ;key.c: 75: this->flags.is_pressing = 1;
  3249  01E6  0863               	movf	KeyControl@this,w
  3250  01E7  0084               	movwf	4
  3251  01E8  3001               	movlw	1
  3252  01E9  1480               	bsf	0,1
  3253                           
  3254                           ;key.c: 76: return 1;
  3255  01EA  0008               	return
  3256  01EB                     L14:	
  3257                           ;key.c: 81: else
  3258                           ;key.c: 82: {
  3259                           ;key.c: 83: if (this->flags.is_pressing)
  3260                           
  3261  01EB  0084               	movwf	4
  3262                           
  3263                           ;key.c: 84: {
  3264                           ;key.c: 85: if (((++(this->cnt)) > (10)?(0 == ((this->cnt) = 0)):0))
  3265  01EC  0A63               	incf	KeyControl@this,w
  3266  01ED  1C80               	btfss	0,1
  3267  01EE  2A09               	goto	L16
  3268  01EF  0084               	movwf	4
  3269  01F0  300B               	movlw	11
  3270  01F1  0A80               	incf	0,f
  3271  01F2  0200               	subwf	0,w
  3272  01F3  1803               	skipnc
  3273  01F4  29F7               	goto	l7526
  3274  01F5  01E1               	clrf	_KeyControl$3156
  3275  01F6  2A00               	goto	L13
  3276  01F7                     l7526:	
  3277  01F7  0A63               	incf	KeyControl@this,w
  3278  01F8  0084               	movwf	4
  3279  01F9  0180               	clrf	0
  3280  01FA  1D03               	btfss	3,2
  3281  01FB  29FE               	goto	u2560
  3282  01FC  3001               	movlw	1
  3283  01FD  29FF               	goto	u2570
  3284  01FE                     u2560:	
  3285  01FE  3000               	movlw	0
  3286  01FF                     u2570:	
  3287  01FF  00E1               	movwf	_KeyControl$3156
  3288  0200                     L13:	
  3289  0200  01E2               	clrf	_KeyControl$3156+1
  3290  0201  0861               	movf	_KeyControl$3156,w
  3291  0202  0462               	iorwf	_KeyControl$3156+1,w
  3292  0203  1903               	btfsc	3,2
  3293  0204  3400               	retlw	0
  3294                           
  3295                           ;key.c: 86: {
  3296                           ;key.c: 87: this->flags.is_pressing = 0;
  3297  0205  0863               	movf	KeyControl@this,w
  3298  0206  0084               	movwf	4
  3299  0207  1080               	bcf	0,1
  3300  0208  3400               	retlw	0
  3301  0209                     L16:	
  3302                           ;key.c: 90: {
  3303                           ;key.c: 91: this->cnt = 0;
  3304                           
  3305  0209  0084               	movwf	4
  3306  020A  0180               	clrf	0
  3307                           
  3308                           ;key.c: 92: this->cnt_timeout = 0;
  3309  020B  0863               	movf	KeyControl@this,w
  3310  020C  3E02               	addlw	2
  3311  020D  0084               	movwf	4
  3312  020E  0180               	clrf	0
  3313  020F  0A84               	incf	4,f
  3314  0210  0180               	clrf	0
  3315                           
  3316                           ;key.c: 93: }
  3317                           ;key.c: 95: }
  3318                           ;key.c: 96: return 0;
  3319  0211  3400               	retlw	0
  3320  0212                     __end_of_KeyControl:	
  3321  0212                     __ptext19:	
  3322 ;; *************** function _ScanKey *****************
  3323 ;; Defined at:
  3324 ;;		line 45 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\key.c"
  3325 ;; Parameters:    Size  Location     Type
  3326 ;;  line_num        1    wreg     enum E879
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;  line_num        1    2[COMMON] enum E879
  3329 ;; Return value:  Size  Location     Type
  3330 ;;                  1    wreg      unsigned char 
  3331 ;; Registers used:
  3332 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3333 ;; Tracked objects:
  3334 ;;		On entry : 300/0
  3335 ;;		On exit  : 300/0
  3336 ;;		Unchanged: 0/0
  3337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3338 ;;      Params:         0       0       0       0       0
  3339 ;;      Locals:         1       0       0       0       0
  3340 ;;      Temps:          0       0       0       0       0
  3341 ;;      Totals:         1       0       0       0       0
  3342 ;;Total ram usage:        1 bytes
  3343 ;; Hardware stack levels used:    1
  3344 ;; Hardware stack levels required when called:    2
  3345 ;; This function calls:
  3346 ;;		Nothing
  3347 ;; This function is called by:
  3348 ;;		_GkeyLoop
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           
  3353                           ;psect for function _ScanKey
  3354  0212                     _ScanKey:	
  3355                           
  3356                           ;incstack = 0
  3357                           ; Regs used in _ScanKey: [wreg-fsr0h+status,2+status,0]
  3358                           ;ScanKey@line_num stored from wreg
  3359  0212  00F2               	movwf	ScanKey@line_num
  3360                           
  3361                           ;key.c: 47: switch (line_num)
  3362  0213  2A1C               	goto	l6862
  3363  0214                     l6852:	
  3364                           
  3365                           ;key.c: 50: return RA6;
  3366  0214  3000               	movlw	0
  3367  0215  1B05               	btfsc	5,6	;volatile
  3368  0216  3001               	movlw	1
  3369  0217  0008               	return
  3370  0218                     l6856:	
  3371                           
  3372                           ;key.c: 52: return RB0;
  3373  0218  3000               	movlw	0
  3374  0219  1806               	btfsc	6,0	;volatile
  3375  021A  3001               	movlw	1
  3376  021B  0008               	return
  3377  021C                     l6862:	
  3378  021C  0872               	movf	ScanKey@line_num,w
  3379                           
  3380                           ; Switch size 1, requested type "space"
  3381                           ; Number of cases is 2, Range of values is 0 to 1
  3382                           ; switch strategies available:
  3383                           ; Name         Instructions Cycles
  3384                           ; simple_byte            7     4 (average)
  3385                           ; direct_byte           14     8 (fixed)
  3386                           ; jumptable            260     6 (fixed)
  3387                           ;	Chosen strategy is simple_byte
  3388  021D  3A00               	xorlw	0	; case 0
  3389  021E  1903               	skipnz
  3390  021F  2A14               	goto	l6852
  3391  0220  3A01               	xorlw	1	; case 1
  3392  0221  1903               	skipnz
  3393  0222  2A18               	goto	l6856
  3394  0223  2A24               	goto	l5802
  3395  0224                     l5802:	
  3396  0224  0008               	return
  3397  0225                     __end_of_ScanKey:	
  3398  0225                     PL2:	
  3399  0225  174B               	bsf	_Fflush1,6	;volatile
  3400  0226  1105               	bcf	5,2	;volatile
  3401  0227  1605               	bsf	5,4	;volatile
  3402  0228  1085               	bcf	5,1	;volatile
  3403  0229  0AB4               	incf	_CNTflush,f	;volatile
  3404  022A  1903               	skipnz
  3405  022B  0AB5               	incf	_CNTflush+1,f	;volatile
  3406  022C  3000               	movlw	0
  3407  022D  0235               	subwf	_CNTflush+1,w	;volatile
  3408  022E  3405               	retlw	5
  3409  022F                     __end_ofPL2:	
  3410  022F                     PL4:	
  3411  022F  174B               	bsf	_Fflush1,6	;volatile
  3412  0230  1105               	bcf	5,2	;volatile
  3413  0231  1605               	bsf	5,4	;volatile
  3414  0232  1485               	bsf	5,1	;volatile
  3415  0233  0AB4               	incf	_CNTflush,f	;volatile
  3416  0234  1903               	skipnz
  3417  0235  0AB5               	incf	_CNTflush+1,f	;volatile
  3418  0236  3000               	movlw	0
  3419  0237  0235               	subwf	_CNTflush+1,w	;volatile
  3420  0238  340A               	retlw	10
  3421  0239                     __end_ofPL4:	
  3422  0239                     PL6:	
  3423  0239  1085               	bcf	5,1	;volatile
  3424  023A  0AB4               	incf	_CNTflush,f	;volatile
  3425  023B  1903               	skipnz
  3426  023C  0AB5               	incf	_CNTflush+1,f	;volatile
  3427  023D  3000               	movlw	0
  3428  023E  0235               	subwf	_CNTflush+1,w	;volatile
  3429  023F  0008               	return
  3430  0240                     __end_ofPL6:	
  3431  0240                     PL8:	
  3432  0240  1485               	bsf	5,1	;volatile
  3433  0241  0AB4               	incf	_CNTflush,f	;volatile
  3434  0242  1903               	skipnz
  3435  0243  0AB5               	incf	_CNTflush+1,f	;volatile
  3436  0244  3000               	movlw	0
  3437  0245  0235               	subwf	_CNTflush+1,w	;volatile
  3438  0246  0008               	return
  3439  0247                     __end_ofPL8:	
  3440                           
  3441                           	psect	text22
  3442  040B                     __ptext22:	
  3443 ;; *************** function _FCTloop *****************
  3444 ;; Defined at:
  3445 ;;		line 23 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\fct.c"
  3446 ;; Parameters:    Size  Location     Type
  3447 ;;		None
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;		None
  3450 ;; Return value:  Size  Location     Type
  3451 ;;                  1    wreg      void 
  3452 ;; Registers used:
  3453 ;;		wreg, status,2, status,0, pclath, cstack
  3454 ;; Tracked objects:
  3455 ;;		On entry : 300/0
  3456 ;;		On exit  : 300/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3459 ;;      Params:         0       0       0       0       0
  3460 ;;      Locals:         0       0       0       0       0
  3461 ;;      Temps:          0       0       0       0       0
  3462 ;;      Totals:         0       0       0       0       0
  3463 ;;Total ram usage:        0 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; Hardware stack levels required when called:    4
  3466 ;; This function calls:
  3467 ;;		_FCTjudge
  3468 ;;		_FCTkey
  3469 ;; This function is called by:
  3470 ;;		_main
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           
  3475                           ;psect for function _FCTloop
  3476  040B                     _FCTloop:	
  3477                           
  3478                           ;fct.c: 25: FCTkey();
  3479                           
  3480                           ;incstack = 0
  3481                           ; Regs used in _FCTloop: [wreg+status,2+status,0+pclath+cstack]
  3482  040B  2441  120A  118A   	fcall	_FCTkey
  3483                           
  3484                           ;fct.c: 26: FCTjudge();
  3485  040E  2C0F               	ljmp	l7328
  3486  040F                     __end_of_FCTloop:	
  3487  040F                     __ptext24:	
  3488 ;; *************** function _FCTjudge *****************
  3489 ;; Defined at:
  3490 ;;		line 143 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\fct.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;		None
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;		None
  3495 ;; Return value:  Size  Location     Type
  3496 ;;                  1    wreg      void 
  3497 ;; Registers used:
  3498 ;;		wreg, status,2, status,0, pclath, cstack
  3499 ;; Tracked objects:
  3500 ;;		On entry : 300/0
  3501 ;;		On exit  : 300/0
  3502 ;;		Unchanged: 0/0
  3503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3504 ;;      Params:         0       0       0       0       0
  3505 ;;      Locals:         0       0       0       0       0
  3506 ;;      Temps:          0       0       0       0       0
  3507 ;;      Totals:         0       0       0       0       0
  3508 ;;Total ram usage:        0 bytes
  3509 ;; Hardware stack levels used:    1
  3510 ;; Hardware stack levels required when called:    3
  3511 ;; This function calls:
  3512 ;;		_G_KEY
  3513 ;;		_R_KEY
  3514 ;;		_key1
  3515 ;;		_key2
  3516 ;; This function is called by:
  3517 ;;		_FCTloop
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           
  3522                           ;psect for function _FCTjudge
  3523  040F                     _FCTjudge:	
  3524  040F                     l7328:	
  3525                           ;incstack = 0
  3526                           ; Regs used in _FCTjudge: [wreg+status,2+status,0+pclath+cstack]
  3527                           
  3528                           
  3529                           ;fct.c: 145: if(fctBits001.bits.bit_0 == 1)
  3530  040F  1C54               	btfss	_fctBits001,0	;volatile
  3531  0410  2C28               	goto	l4869
  3532                           
  3533                           ;fct.c: 146: {
  3534                           ;fct.c: 147: if(++flag_time == 1500)
  3535  0411  0AA0               	incf	_flag_time,f	;volatile
  3536  0412  1903               	skipnz
  3537  0413  0AA1               	incf	_flag_time+1,f	;volatile
  3538  0414  30DC               	movlw	220
  3539  0415  0620               	xorwf	_flag_time,w	;volatile
  3540  0416  3005               	movlw	5
  3541  0417  1903               	skipnz
  3542  0418  0621               	xorwf	_flag_time+1,w	;volatile
  3543  0419  1D03               	btfss	3,2
  3544  041A  2C1E               	goto	l7336
  3545                           
  3546                           ;fct.c: 148: {
  3547                           ;fct.c: 149: fctBits001.bits.bit_0 = 0;
  3548  041B  1054               	bcf	_fctBits001,0	;volatile
  3549                           
  3550                           ;fct.c: 150: flag_time = 0;
  3551  041C  01A0               	clrf	_flag_time	;volatile
  3552  041D  01A1               	clrf	_flag_time+1	;volatile
  3553  041E                     l7336:	
  3554                           
  3555                           ;fct.c: 151: }
  3556                           ;fct.c: 152: if(RB1 == 0)
  3557  041E  1886               	btfsc	6,1	;volatile
  3558  041F  2C21               	goto	l4871
  3559                           
  3560                           ;fct.c: 153: {
  3561                           ;fct.c: 154: R_KEY();
  3562  0420  2C32               	ljmp	l6954
  3563  0421                     l4871:	
  3564                           ;fct.c: 155: }
  3565                           
  3566                           
  3567                           ;fct.c: 156: else
  3568                           ;fct.c: 157: {
  3569                           ;fct.c: 158: if(RA6 == 0)
  3570  0421  1B05               	btfsc	5,6	;volatile
  3571  0422  2C24               	goto	l4873
  3572                           
  3573                           ;fct.c: 159: {
  3574                           ;fct.c: 160: key1();
  3575  0423  2C37               	ljmp	l6956
  3576  0424                     l4873:	
  3577                           ;fct.c: 161: }
  3578                           
  3579                           
  3580                           ;fct.c: 162: else
  3581                           ;fct.c: 163: {
  3582                           ;fct.c: 164: if(RB0 == 0)
  3583  0424  1806               	btfsc	6,0	;volatile
  3584  0425  2C27               	goto	l7344
  3585                           
  3586                           ;fct.c: 165: {
  3587                           ;fct.c: 166: key2();
  3588  0426  2C3C               	ljmp	l6958
  3589  0427                     l7344:	
  3590                           ;fct.c: 167: }
  3591                           
  3592                           
  3593                           ;fct.c: 168: else
  3594                           ;fct.c: 169: {
  3595                           ;fct.c: 170: G_KEY();
  3596  0427  2C2D               	ljmp	l6952
  3597  0428                     l4869:	
  3598                           
  3599                           ;fct.c: 175: else if(fctBits001.bits.bit_0 == 0)
  3600  0428  1854               	btfsc	_fctBits001,0	;volatile
  3601  0429  0008               	return
  3602                           
  3603                           ;fct.c: 176: {
  3604                           ;fct.c: 177: flag_time = 0;
  3605  042A  01A0               	clrf	_flag_time	;volatile
  3606  042B  01A1               	clrf	_flag_time+1	;volatile
  3607  042C  0008               	return
  3608  042D                     __end_of_FCTjudge:	
  3609  042D                     __ptext28:	
  3610 ;; *************** function _G_KEY *****************
  3611 ;; Defined at:
  3612 ;;		line 111 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\fct.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;		None
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;		None
  3617 ;; Return value:  Size  Location     Type
  3618 ;;                  1    wreg      void 
  3619 ;; Registers used:
  3620 ;;		None
  3621 ;; Tracked objects:
  3622 ;;		On entry : 300/0
  3623 ;;		On exit  : 300/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3626 ;;      Params:         0       0       0       0       0
  3627 ;;      Locals:         0       0       0       0       0
  3628 ;;      Temps:          0       0       0       0       0
  3629 ;;      Totals:         0       0       0       0       0
  3630 ;;Total ram usage:        0 bytes
  3631 ;; Hardware stack levels used:    1
  3632 ;; Hardware stack levels required when called:    2
  3633 ;; This function calls:
  3634 ;;		Nothing
  3635 ;; This function is called by:
  3636 ;;		_FCTjudge
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           
  3641                           ;psect for function _G_KEY
  3642  042D                     _G_KEY:	
  3643  042D                     l6952:	
  3644                           ;incstack = 0
  3645                           ; Regs used in _G_KEY: []
  3646                           
  3647                           
  3648                           ;fct.c: 113: RA5 = 0;
  3649  042D  1285               	bcf	5,5	;volatile
  3650                           
  3651                           ;fct.c: 114: RA2 = 0;
  3652  042E  1105               	bcf	5,2	;volatile
  3653                           
  3654                           ;fct.c: 115: RA4 = 1;
  3655  042F  1605               	bsf	5,4	;volatile
  3656                           
  3657                           ;fct.c: 116: RA1 = 0;
  3658  0430  1085               	bcf	5,1	;volatile
  3659  0431  0008               	return
  3660  0432                     __end_of_G_KEY:	
  3661  0432                     __ptext27:	
  3662 ;; *************** function _R_KEY *****************
  3663 ;; Defined at:
  3664 ;;		line 119 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\fct.c"
  3665 ;; Parameters:    Size  Location     Type
  3666 ;;		None
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;		None
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  1    wreg      void 
  3671 ;; Registers used:
  3672 ;;		None
  3673 ;; Tracked objects:
  3674 ;;		On entry : 300/0
  3675 ;;		On exit  : 300/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3678 ;;      Params:         0       0       0       0       0
  3679 ;;      Locals:         0       0       0       0       0
  3680 ;;      Temps:          0       0       0       0       0
  3681 ;;      Totals:         0       0       0       0       0
  3682 ;;Total ram usage:        0 bytes
  3683 ;; Hardware stack levels used:    1
  3684 ;; Hardware stack levels required when called:    2
  3685 ;; This function calls:
  3686 ;;		Nothing
  3687 ;; This function is called by:
  3688 ;;		_FCTjudge
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           
  3693                           ;psect for function _R_KEY
  3694  0432                     _R_KEY:	
  3695  0432                     l6954:	
  3696                           ;incstack = 0
  3697                           ; Regs used in _R_KEY: []
  3698                           
  3699                           
  3700                           ;fct.c: 121: RA5 = 0;
  3701  0432  1285               	bcf	5,5	;volatile
  3702                           
  3703                           ;fct.c: 122: RA2 = 1;
  3704  0433  1505               	bsf	5,2	;volatile
  3705                           
  3706                           ;fct.c: 123: RA4 = 1;
  3707  0434  1605               	bsf	5,4	;volatile
  3708                           
  3709                           ;fct.c: 124: RA1 = 0;
  3710  0435  1085               	bcf	5,1	;volatile
  3711  0436  0008               	return
  3712  0437                     __end_of_R_KEY:	
  3713  0437                     __ptext26:	
  3714 ;; *************** function _key1 *****************
  3715 ;; Defined at:
  3716 ;;		line 127 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\fct.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;		None
  3719 ;; Auto vars:     Size  Location     Type
  3720 ;;		None
  3721 ;; Return value:  Size  Location     Type
  3722 ;;                  1    wreg      void 
  3723 ;; Registers used:
  3724 ;;		None
  3725 ;; Tracked objects:
  3726 ;;		On entry : 300/0
  3727 ;;		On exit  : 300/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3730 ;;      Params:         0       0       0       0       0
  3731 ;;      Locals:         0       0       0       0       0
  3732 ;;      Temps:          0       0       0       0       0
  3733 ;;      Totals:         0       0       0       0       0
  3734 ;;Total ram usage:        0 bytes
  3735 ;; Hardware stack levels used:    1
  3736 ;; Hardware stack levels required when called:    2
  3737 ;; This function calls:
  3738 ;;		Nothing
  3739 ;; This function is called by:
  3740 ;;		_FCTjudge
  3741 ;; This function uses a non-reentrant model
  3742 ;;
  3743                           
  3744                           
  3745                           ;psect for function _key1
  3746  0437                     _key1:	
  3747  0437                     l6956:	
  3748                           ;incstack = 0
  3749                           ; Regs used in _key1: []
  3750                           
  3751                           
  3752                           ;fct.c: 129: RA5 = 1;
  3753  0437  1685               	bsf	5,5	;volatile
  3754                           
  3755                           ;fct.c: 130: RA2 = 0;
  3756  0438  1105               	bcf	5,2	;volatile
  3757                           
  3758                           ;fct.c: 131: RA4 = 1;
  3759  0439  1605               	bsf	5,4	;volatile
  3760                           
  3761                           ;fct.c: 132: RA1 = 0;
  3762  043A  1085               	bcf	5,1	;volatile
  3763  043B  0008               	return
  3764  043C                     __end_of_key1:	
  3765  043C                     __ptext25:	
  3766 ;; *************** function _key2 *****************
  3767 ;; Defined at:
  3768 ;;		line 135 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\fct.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;		None
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;		None
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      void 
  3775 ;; Registers used:
  3776 ;;		None
  3777 ;; Tracked objects:
  3778 ;;		On entry : 300/0
  3779 ;;		On exit  : 300/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3782 ;;      Params:         0       0       0       0       0
  3783 ;;      Locals:         0       0       0       0       0
  3784 ;;      Temps:          0       0       0       0       0
  3785 ;;      Totals:         0       0       0       0       0
  3786 ;;Total ram usage:        0 bytes
  3787 ;; Hardware stack levels used:    1
  3788 ;; Hardware stack levels required when called:    2
  3789 ;; This function calls:
  3790 ;;		Nothing
  3791 ;; This function is called by:
  3792 ;;		_FCTjudge
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           
  3797                           ;psect for function _key2
  3798  043C                     _key2:	
  3799  043C                     l6958:	
  3800                           ;incstack = 0
  3801                           ; Regs used in _key2: []
  3802                           
  3803                           
  3804                           ;fct.c: 137: RA5 = 0;
  3805  043C  1285               	bcf	5,5	;volatile
  3806                           
  3807                           ;fct.c: 138: RA2 = 0;
  3808  043D  1105               	bcf	5,2	;volatile
  3809                           
  3810                           ;fct.c: 139: RA4 = 1;
  3811  043E  1605               	bsf	5,4	;volatile
  3812                           
  3813                           ;fct.c: 140: RA1 = 1;
  3814  043F  1485               	bsf	5,1	;volatile
  3815  0440  0008               	return
  3816  0441                     __end_of_key2:	
  3817  0441                     __ptext23:	
  3818 ;; *************** function _FCTkey *****************
  3819 ;; Defined at:
  3820 ;;		line 52 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\fct.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;		None
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;		None
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      void 
  3827 ;; Registers used:
  3828 ;;		wreg, status,2, status,0
  3829 ;; Tracked objects:
  3830 ;;		On entry : 300/0
  3831 ;;		On exit  : 300/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3834 ;;      Params:         0       0       0       0       0
  3835 ;;      Locals:         0       0       0       0       0
  3836 ;;      Temps:          0       0       0       0       0
  3837 ;;      Totals:         0       0       0       0       0
  3838 ;;Total ram usage:        0 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    2
  3841 ;; This function calls:
  3842 ;;		Nothing
  3843 ;; This function is called by:
  3844 ;;		_FCTloop
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           
  3849                           ;psect for function _FCTkey
  3850  0441                     _FCTkey:	
  3851                           
  3852                           ;fct.c: 54: if((FCT == 0) && (RB2 == 0))
  3853                           
  3854                           ;incstack = 0
  3855                           ; Regs used in _FCTkey: [wreg+status,2+status,0]
  3856  0441  0847               	movf	_FCT,w
  3857  0442  1903               	btfsc	3,2
  3858  0443  1906               	btfsc	6,2	;volatile
  3859  0444  2C47               	goto	l7288
  3860                           
  3861                           ;fct.c: 55: {
  3862                           ;fct.c: 56: FCT = 3;
  3863  0445  3003               	movlw	3
  3864  0446  00C7               	movwf	_FCT
  3865  0447                     l7288:	
  3866                           
  3867                           ;fct.c: 57: }
  3868                           ;fct.c: 59: if(FCT == 3)
  3869  0447  3003               	movlw	3
  3870  0448  0647               	xorwf	_FCT,w
  3871  0449  1D03               	btfss	3,2
  3872  044A  2C5D               	goto	l7306
  3873                           
  3874                           ;fct.c: 60: {
  3875                           ;fct.c: 61: if(RB2 == 1)
  3876  044B  1D06               	btfss	6,2	;volatile
  3877  044C  2C5B               	goto	l7304
  3878  044D  2479  120A  118A   	fcall	PL12	;call to abstracted procedure
  3879  0450  1903               	skipnz
  3880  0451  0242               	subwf	_My_test_cnt,w
  3881  0452  1803               	btfsc	3,0
  3882                           
  3883                           ;fct.c: 64: {
  3884                           ;fct.c: 65: if(RB2 == 1)
  3885  0453  1D06               	btfss	6,2	;volatile
  3886  0454  2C5D               	goto	l7306
  3887                           
  3888                           ;fct.c: 66: {
  3889                           ;fct.c: 67: fctBits001.bits.bit_0 = 1;
  3890  0455  1454               	bsf	_fctBits001,0	;volatile
  3891                           
  3892                           ;fct.c: 68: My_test_cnt = 0;
  3893  0456  01C2               	clrf	_My_test_cnt
  3894  0457  01C3               	clrf	_My_test_cnt+1
  3895                           
  3896                           ;fct.c: 69: FCT = 1;
  3897  0458  01C7               	clrf	_FCT
  3898  0459  0AC7               	incf	_FCT,f
  3899                           
  3900                           ;fct.c: 70: return;
  3901  045A  0008               	return
  3902  045B                     l7304:	
  3903                           
  3904                           ;fct.c: 75: else
  3905                           ;fct.c: 76: {
  3906                           ;fct.c: 77: My_test_cnt = 0;
  3907  045B  01C2               	clrf	_My_test_cnt
  3908  045C  01C3               	clrf	_My_test_cnt+1
  3909  045D                     l7306:	
  3910                           
  3911                           ;fct.c: 78: }
  3912                           ;fct.c: 79: }
  3913                           ;fct.c: 81: if((FCT == 1) && (RB2 == 0))
  3914  045D  0B47               	decfsz	_FCT,w
  3915  045E  2C63               	goto	l7312
  3916  045F  1906               	btfsc	6,2	;volatile
  3917  0460  2C63               	goto	l7312
  3918                           
  3919                           ;fct.c: 82: {
  3920                           ;fct.c: 83: FCT = 2;
  3921  0461  3002               	movlw	2
  3922  0462  00C7               	movwf	_FCT
  3923  0463                     l7312:	
  3924                           
  3925                           ;fct.c: 84: }
  3926                           ;fct.c: 86: if(FCT == 2)
  3927  0463  3002               	movlw	2
  3928  0464  0647               	xorwf	_FCT,w
  3929  0465  1D03               	btfss	3,2
  3930  0466  0008               	return
  3931                           
  3932                           ;fct.c: 87: {
  3933                           ;fct.c: 88: if(RB2 == 1)
  3934  0467  1D06               	btfss	6,2	;volatile
  3935  0468  2C76               	goto	l7326
  3936  0469  2479  120A  118A   	fcall	PL12	;call to abstracted procedure
  3937  046C  1903               	skipnz
  3938  046D  0242               	subwf	_My_test_cnt,w
  3939  046E  1803               	btfsc	3,0
  3940                           
  3941                           ;fct.c: 91: {
  3942                           ;fct.c: 93: if(RB2 == 1)
  3943  046F  1D06               	btfss	6,2	;volatile
  3944  0470  0008               	return
  3945                           
  3946                           ;fct.c: 94: {
  3947                           ;fct.c: 95: fctBits001.bits.bit_0 = 0;
  3948  0471  1054               	bcf	_fctBits001,0	;volatile
  3949                           
  3950                           ;fct.c: 96: My_test_cnt = 0;
  3951  0472  01C2               	clrf	_My_test_cnt
  3952  0473  01C3               	clrf	_My_test_cnt+1
  3953                           
  3954                           ;fct.c: 97: FCT = 0;
  3955  0474  01C7               	clrf	_FCT
  3956  0475  0008               	return
  3957  0476                     l7326:	
  3958                           
  3959                           ;fct.c: 103: else
  3960                           ;fct.c: 104: {
  3961                           ;fct.c: 105: My_test_cnt = 0;
  3962  0476  01C2               	clrf	_My_test_cnt
  3963  0477  01C3               	clrf	_My_test_cnt+1
  3964  0478  0008               	return
  3965  0479                     __end_of_FCTkey:	
  3966  0479                     PL12:	
  3967  0479  0AC2               	incf	_My_test_cnt,f
  3968  047A  1903               	skipnz
  3969  047B  0AC3               	incf	_My_test_cnt+1,f
  3970  047C  3000               	movlw	0
  3971  047D  0243               	subwf	_My_test_cnt+1,w
  3972  047E  3465               	retlw	101
  3973  047F                     __end_ofPL12:	
  3974                           
  3975                           	psect	text29
  3976  052B                     __ptext29:	
  3977 ;; *************** function _Delay_nms *****************
  3978 ;; Defined at:
  3979 ;;		line 35 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\main.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;  inittempl       2    4[COMMON] unsigned int 
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;  i               2    6[COMMON] unsigned int 
  3984 ;;  gtemp           1    8[COMMON] unsigned char 
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      void 
  3987 ;; Registers used:
  3988 ;;		wreg, status,2, status,0, pclath, cstack
  3989 ;; Tracked objects:
  3990 ;;		On entry : 300/100
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3994 ;;      Params:         2       0       0       0       0
  3995 ;;      Locals:         3       0       0       0       0
  3996 ;;      Temps:          0       0       0       0       0
  3997 ;;      Totals:         5       0       0       0       0
  3998 ;;Total ram usage:        5 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    3
  4001 ;; This function calls:
  4002 ;;		_Delay
  4003 ;; This function is called by:
  4004 ;;		_main
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           
  4009                           ;psect for function _Delay_nms
  4010  052B                     _Delay_nms:	
  4011                           
  4012                           ;main.c: 37: unsigned int i;
  4013                           ;main.c: 38: unsigned char gtemp;
  4014                           ;main.c: 40: gtemp = 0;
  4015                           
  4016                           ;incstack = 0
  4017                           ; Regs used in _Delay_nms: [wreg+status,2+status,0+pclath+cstack]
  4018  052B  01F8               	clrf	Delay_nms@gtemp
  4019                           
  4020                           ;main.c: 41: if (GIE == 1)
  4021  052C  1F8B               	btfss	11,7	;volatile
  4022  052D  2D31               	goto	l7372
  4023                           
  4024                           ;main.c: 42: {
  4025                           ;main.c: 43: gtemp = 1;
  4026  052E  01F8               	clrf	Delay_nms@gtemp
  4027  052F  0AF8               	incf	Delay_nms@gtemp,f
  4028                           
  4029                           ;main.c: 44: GIE = 0;
  4030  0530  138B               	bcf	11,7	;volatile
  4031  0531                     l7372:	
  4032                           
  4033                           ;main.c: 45: }
  4034                           ;main.c: 46: for (i = 0; i < inittempl; i++)
  4035  0531  01F6               	clrf	Delay_nms@i
  4036  0532  01F7               	clrf	Delay_nms@i+1
  4037  0533                     l7378:	
  4038  0533  0875               	movf	Delay_nms@inittempl+1,w
  4039  0534  0277               	subwf	Delay_nms@i+1,w
  4040  0535  1D03               	skipz
  4041  0536  2D39               	goto	u2345
  4042  0537  0874               	movf	Delay_nms@inittempl,w
  4043  0538  0276               	subwf	Delay_nms@i,w
  4044  0539                     u2345:	
  4045  0539  1803               	btfsc	3,0
  4046  053A  2D46               	goto	l7380
  4047                           
  4048                           ;main.c: 47: {
  4049                           ;main.c: 48: Delay(154);
  4050  053B  309A               	movlw	154
  4051  053C  00F2               	movwf	Delay@dtemp
  4052  053D  01F3               	clrf	Delay@dtemp+1
  4053  053E  254A  120A  118A   	fcall	_Delay
  4054  0541  0064               	clrwdt	;# 
  4055  0542  0AF6               	incf	Delay_nms@i,f
  4056  0543  1903               	skipnz
  4057  0544  0AF7               	incf	Delay_nms@i+1,f
  4058  0545  2D33               	goto	l7378
  4059  0546                     l7380:	
  4060                           
  4061                           ;main.c: 50: }
  4062                           ;main.c: 51: if (gtemp == 1)
  4063  0546  0B78               	decfsz	Delay_nms@gtemp,w
  4064  0547  0008               	return
  4065                           
  4066                           ;main.c: 52: GIE = 1;
  4067  0548  178B               	bsf	11,7	;volatile
  4068  0549  0008               	return
  4069  054A                     __end_of_Delay_nms:	
  4070  054A                     __ptext30:	
  4071 ;; *************** function _Delay *****************
  4072 ;; Defined at:
  4073 ;;		line 27 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\main.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;  dtemp           2    2[COMMON] unsigned int 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;		None
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      void 
  4080 ;; Registers used:
  4081 ;;		wreg, status,2, status,0
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/100
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4087 ;;      Params:         2       0       0       0       0
  4088 ;;      Locals:         0       0       0       0       0
  4089 ;;      Temps:          0       0       0       0       0
  4090 ;;      Totals:         2       0       0       0       0
  4091 ;;Total ram usage:        2 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    2
  4094 ;; This function calls:
  4095 ;;		Nothing
  4096 ;; This function is called by:
  4097 ;;		_Delay_nms
  4098 ;; This function uses a non-reentrant model
  4099 ;;
  4100                           
  4101                           
  4102                           ;psect for function _Delay
  4103  054A                     _Delay:	
  4104  054A                     l7068:	
  4105                           ;main.c: 29: while (dtemp--)
  4106                           
  4107                           ;incstack = 0
  4108                           ; Regs used in _Delay: [wreg+status,2+status,0]
  4109                           
  4110  054A  3001               	movlw	1
  4111  054B  02F2               	subwf	Delay@dtemp,f
  4112  054C  3000               	movlw	0
  4113  054D  1C03               	skipc
  4114  054E  03F3               	decf	Delay@dtemp+1,f
  4115  054F  02F3               	subwf	Delay@dtemp+1,f
  4116  0550  0F72               	incfsz	Delay@dtemp,w
  4117  0551  2D4A               	goto	l7068
  4118  0552  0A73               	incf	Delay@dtemp+1,w
  4119  0553  1903               	btfsc	3,2
  4120  0554  0008               	return
  4121  0555  2D4A               	goto	l7068
  4122  0556                     __end_of_Delay:	
  4123                           
  4124                           	psect	text31
  4125  04EE                     __ptext31:	
  4126 ;; *************** function _Int_ALL *****************
  4127 ;; Defined at:
  4128 ;;		line 563 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\main.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;		None
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;		None
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  1    wreg      void 
  4135 ;; Registers used:
  4136 ;;		wreg, status,2, status,0, pclath, cstack
  4137 ;; Tracked objects:
  4138 ;;		On entry : 0/0
  4139 ;;		On exit  : 300/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4142 ;;      Params:         0       0       0       0       0
  4143 ;;      Locals:         0       0       0       0       0
  4144 ;;      Temps:          2       0       0       0       0
  4145 ;;      Totals:         2       0       0       0       0
  4146 ;;Total ram usage:        2 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; Hardware stack levels required when called:    1
  4149 ;; This function calls:
  4150 ;;		_INT_LED_SHOW
  4151 ;; This function is called by:
  4152 ;;		Interrupt level 1
  4153 ;; This function uses a non-reentrant model
  4154 ;;
  4155                           
  4156                           
  4157                           ;psect for function _Int_ALL
  4158  04EE                     _Int_ALL:	
  4159                           
  4160                           ;main.c: 566: if (TMR1IF)
  4161  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  4162  04EF  1303               	bcf	3,6	;RP1=0, select bank0
  4163  04F0  1C0C               	btfss	12,0	;volatile
  4164  04F1  2D06               	goto	i1l7484
  4165                           
  4166                           ;main.c: 567: {
  4167                           ;main.c: 573: TMR1 = 0xE0C0;
  4168  04F2  30E0               	movlw	224
  4169  04F3  008F               	movwf	15	;volatile
  4170  04F4  30C0               	movlw	192
  4171  04F5  008E               	movwf	14	;volatile
  4172                           
  4173                           ;main.c: 574: TMR1IF = 0;
  4174  04F6  100C               	bcf	12,0	;volatile
  4175                           
  4176                           ;main.c: 577: Fsys1.bits.bit_1 = 1;
  4177  04F7  14D3               	bsf	_Fsys1,1	;volatile
  4178                           
  4179                           ;main.c: 580: if (++MainTime_1s >= 1000)
  4180  04F8  0AB8               	incf	_MainTime_1s,f	;volatile
  4181  04F9  1903               	skipnz
  4182  04FA  0AB9               	incf	_MainTime_1s+1,f	;volatile
  4183  04FB  3003               	movlw	3
  4184  04FC  0239               	subwf	_MainTime_1s+1,w	;volatile
  4185  04FD  30E8               	movlw	232
  4186  04FE  1903               	skipnz
  4187  04FF  0238               	subwf	_MainTime_1s,w	;volatile
  4188  0500  1C03               	skipc
  4189  0501  2D06               	goto	i1l7484
  4190                           
  4191                           ;main.c: 581: {
  4192                           ;main.c: 582: MainTime_1s = 0;
  4193  0502  01B8               	clrf	_MainTime_1s	;volatile
  4194  0503  01B9               	clrf	_MainTime_1s+1	;volatile
  4195                           
  4196                           ;main.c: 583: Fsys1s.byte = 0xFF;
  4197  0504  30FF               	movlw	255
  4198  0505  00D2               	movwf	_Fsys1s	;volatile
  4199  0506                     i1l7484:	
  4200                           
  4201                           ;main.c: 591: }
  4202                           ;main.c: 592: }
  4203                           ;main.c: 595: if (TMR2IF)
  4204  0506  1C8C               	btfss	12,1	;volatile
  4205  0507  2D0A               	goto	i1l1988
  4206                           
  4207                           ;main.c: 596: {
  4208                           ;main.c: 597: TMR2IF = 0;
  4209  0508  108C               	bcf	12,1	;volatile
  4210                           
  4211                           ;main.c: 598: INT_LED_SHOW();
  4212  0509  2511               	fcall	_INT_LED_SHOW
  4213  050A                     i1l1988:	
  4214  050A  0871               	movf	??_Int_ALL+1,w
  4215  050B  008A               	movwf	10
  4216  050C  0E70               	swapf	??_Int_ALL^(0+-128),w
  4217  050D  0083               	movwf	3
  4218  050E  0EFE               	swapf	126,f
  4219  050F  0E7E               	swapf	126,w
  4220  0510  0009               	retfie
  4221  0511                     __end_of_Int_ALL:	
  4222  0511                     __ptext32:	
  4223 ;; *************** function _INT_LED_SHOW *****************
  4224 ;; Defined at:
  4225 ;;		line 193 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_FM3\ABM007_FM3\source\light.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;		None
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;		None
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  1    wreg      void 
  4232 ;; Registers used:
  4233 ;;		wreg, status,2, status,0
  4234 ;; Tracked objects:
  4235 ;;		On entry : 300/0
  4236 ;;		On exit  : 300/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4239 ;;      Params:         0       0       0       0       0
  4240 ;;      Locals:         0       0       0       0       0
  4241 ;;      Temps:          0       0       0       0       0
  4242 ;;      Totals:         0       0       0       0       0
  4243 ;;Total ram usage:        0 bytes
  4244 ;; Hardware stack levels used:    1
  4245 ;; This function calls:
  4246 ;;		Nothing
  4247 ;; This function is called by:
  4248 ;;		_Int_ALL
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           
  4253                           ;psect for function _INT_LED_SHOW
  4254  0511                     _INT_LED_SHOW:	
  4255                           
  4256                           ;light.c: 196: if((FledBits01.bits.bit_0 == 1) && (fctBits001.bits.bit_0 == 0))
  4257                           
  4258                           ;incstack = 0
  4259                           ; Regs used in _INT_LED_SHOW: [wreg+status,2+status,0]
  4260  0511  1850               	btfsc	_FledBits01,0	;volatile
  4261  0512  1854               	btfsc	_fctBits001,0	;volatile
  4262  0513  0008               	return
  4263                           
  4264                           ;light.c: 197: {
  4265                           ;light.c: 198: if (++CNTbreath_Led == 80)
  4266  0514  0AC0               	incf	_CNTbreath_Led,f	;volatile
  4267  0515  1903               	skipnz
  4268  0516  0AC1               	incf	_CNTbreath_Led+1,f	;volatile
  4269  0517  3050               	movlw	80
  4270  0518  0640               	xorwf	_CNTbreath_Led,w	;volatile
  4271  0519  0441               	iorwf	_CNTbreath_Led+1,w	;volatile
  4272  051A  1D03               	btfss	3,2
  4273  051B  2D1F               	goto	i1l7362
  4274                           
  4275                           ;light.c: 199: {
  4276                           ;light.c: 200: CNTbreath_Led = 0;
  4277  051C  01C0               	clrf	_CNTbreath_Led	;volatile
  4278  051D  01C1               	clrf	_CNTbreath_Led+1	;volatile
  4279                           
  4280                           ;light.c: 201: RA5 = 0;
  4281  051E  1285               	bcf	5,5	;volatile
  4282  051F                     i1l7362:	
  4283                           
  4284                           ;light.c: 202: }
  4285                           ;light.c: 203: if (CNTbreath_Led >= CNTbreath_Led2)
  4286  051F  083D               	movf	_CNTbreath_Led2+1,w	;volatile
  4287  0520  0241               	subwf	_CNTbreath_Led+1,w	;volatile
  4288  0521  1D03               	skipz
  4289  0522  2D25               	goto	u232_25
  4290  0523  083C               	movf	_CNTbreath_Led2,w	;volatile
  4291  0524  0240               	subwf	_CNTbreath_Led,w	;volatile
  4292  0525                     u232_25:	
  4293  0525  1C03               	skipc
  4294  0526  2D29               	goto	i1l971
  4295                           
  4296                           ;light.c: 204: {
  4297                           ;light.c: 205: RA5 = 1;
  4298  0527  1685               	bsf	5,5	;volatile
  4299                           
  4300                           ;light.c: 206: }
  4301  0528  0008               	return
  4302  0529                     i1l971:	
  4303                           
  4304                           ;light.c: 207: else
  4305                           ;light.c: 208: {
  4306                           ;light.c: 209: RA5 = 0;
  4307  0529  1285               	bcf	5,5	;volatile
  4308  052A  0008               	return
  4309  052B                     __end_of_INT_LED_SHOW:	
  4310  007E                     btemp	set	126	;btemp
  4311  007E                     wtemp0	set	126
  4312                           
  4313                           	psect	intentry
  4314  0004                     __pintentry:	
  4315                           ;incstack = 0
  4316                           ; Regs used in _Int_ALL: [wreg+status,2+status,0+pclath+cstack]
  4317                           
  4318  0004                     interrupt_function:	
  4319  007E                     saved_w	set	btemp
  4320  0004  00FE               	movwf	btemp
  4321  0005  0E03               	swapf	3,w
  4322  0006  00F0               	movwf	??_Int_ALL
  4323  0007  080A               	movf	10,w
  4324  0008  00F1               	movwf	??_Int_ALL+1
  4325  0009  120A  118A  2CEE   	ljmp	_Int_ALL


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         63
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80      7      68
    BANK1            80      0       0
    BANK3            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    KeyControl@this	PTR struct _KEY_PRIVATE size(1) Largest target is 8
		 -> KeyLines(BANK0[8]), 


Critical Paths under _main in COMMON

    _main->_Delay_nms
    _GsensorLoop->_SensorControl
    _GflushLoop->_FlushJudge
    _FlushJudge->_GkeyLoop
    _GkeyLoop->_KeyControl
    _Delay_nms->_Delay

Critical Paths under _Int_ALL in COMMON

    None.

Critical Paths under _main in BANK0

    _GkeyLoop->_KeyControl

Critical Paths under _Int_ALL in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Int_ALL in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Int_ALL in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Int_ALL in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     919
                          _Delay_nms
                            _FCTloop
                         _GflushLoop
                           _GledLoop
                        _GsensorLoop
                          _Init_GPIO
                            _Init_IC
                        _Init_TIMER1
                        _Init_TIMER2
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_IC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_GPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GsensorLoop                                          0     0      0       0
                      _SensorControl
                        _SensorJudge
                          _SensorKey
                         _SensorTime
 ---------------------------------------------------------------------------------
 (2) _SensorTime                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorKey                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorJudge                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorControl                                        1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GledLoop                                             0     0      0       0
                            _LED_Con
                          _LED_Judge
                            _LED_Key
                           _LED_Time
 ---------------------------------------------------------------------------------
 (2) _LED_Time                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Key                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Judge                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Con                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GflushLoop                                           0     0      0     699
                           _FlushCon
                         _FlushJudge
                          _FlushTime
 ---------------------------------------------------------------------------------
 (2) _FlushTime                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FlushJudge                                           1     1      0     699
                                              6 COMMON     1     1      0
                           _GkeyLoop
 ---------------------------------------------------------------------------------
 (3) _GkeyLoop                                             2     2      0     631
                                              4 COMMON     2     2      0
                         _KeyControl
                            _ScanKey
 ---------------------------------------------------------------------------------
 (4) _ScanKey                                              1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _KeyControl                                           9     9      0     609
                                              2 COMMON     2     2      0
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _FlushCon                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FCTloop                                              0     0      0       0
                           _FCTjudge
                             _FCTkey
 ---------------------------------------------------------------------------------
 (2) _FCTkey                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FCTjudge                                             0     0      0       0
                              _G_KEY
                              _R_KEY
                               _key1
                               _key2
 ---------------------------------------------------------------------------------
 (3) _key2                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _key1                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _R_KEY                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _G_KEY                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay_nms                                            5     3      2     220
                                              4 COMMON     5     3      2
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _Delay                                                2     0      2      86
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Int_ALL                                              2     2      0       0
                                              0 COMMON     2     2      0
                       _INT_LED_SHOW
 ---------------------------------------------------------------------------------
 (6) _INT_LED_SHOW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_nms
     _Delay
   _FCTloop
     _FCTjudge
       _G_KEY
       _R_KEY
       _key1
       _key2
     _FCTkey
   _GflushLoop
     _FlushCon
     _FlushJudge
       _GkeyLoop
         _KeyControl
         _ScanKey
     _FlushTime
   _GledLoop
     _LED_Con
     _LED_Judge
     _LED_Key
     _LED_Time
   _GsensorLoop
     _SensorControl
     _SensorJudge
     _SensorKey
     _SensorTime
   _Init_GPIO
   _Init_IC
   _Init_TIMER1
   _Init_TIMER2

 _Int_ALL (ROOT)
   _INT_LED_SHOW

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      7      44       4       85.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BITBANK3            50      0       0       7        0.0%
BANK3               50      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
ABS                  0      0      4F      11        0.0%
DATA                 0      0      4F      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 24 18:11:31 2024

                     PL2 0225                       PL4 022F                       PL6 0239  
                     PL8 0240                       fsr 0004                      PL10 0334  
                    PL12 0479                      PL14 03FF                      PL16 0405  
                    _FCT 0047                      _GIE 005F                      _RA1 0029  
                    _RA2 002A                      _RB0 0030                      _RB1 0031  
                    _RA4 002C                      _RB2 0032                      _RA5 002D  
                    _RA6 002E                      _PR2 0092                      fsr0 0004  
                    indf 0000          __end_of_LED_Con 03F7          __end_of_LED_Key 0348  
        __end_of_FCTloop 040F                     l2905 0101                     l2930 0049  
                   l2922 0025                     l2906 0117                     l2915 0120  
                   l2932 0054                     l7004 037F                     l1964 04AD  
                   l2941 0081                     l2917 0126                     l1973 04BD  
                   l7110 002F                     l7102 0024                     l7030 03D5  
                   l7022 03B0                     l2951 00C1                     l2943 0091  
                   l2935 0059                     l2927 0034                     l2952 00CB  
                   l7040 03BE                     l7032 03B7                     l7016 03A4  
                   l3904 02E6                     l1968 04B5                     l2945 009D  
                   l2937 0065                     l7106 002D                     l7202 0269  
                   l2947 00AD                     l2939 0075                     l7060 03EE  
                   l3908 02FE                     l2949 00B1                     l3918 029E  
                   l7230 02CF                     l7222 02B7                     l3919 029F  
                   l7312 0463                     l7304 045B                     l7048 03C2  
                   l7240 02D9                     l7208 0276                     l3881 0271  
                   l7306 045D                     l5802 0224                     l7234 02A9  
                   l7068 054A                     l7500 01B7                     l7260 0311  
                   l7252 02FB                     l7244 02E3                     l3893 02A6  
                   l7326 0476                     l7510 01D8                     l7262 0314  
                   l4871 0421                     l3895 02BA                     l7344 0427  
                   l7336 041E                     l7328 040F                     l7272 0322  
                   l4873 0424                     l7186 00D5                     l7274 028A  
                   l7266 031F                     l3899 02D2                     l7380 0546  
                   l7372 0531                     l4869 0428                     l7526 01F7  
                   l7288 0447                     l7632 04A0                     l5793 0185  
                   l7378 0533                     l7570 0193                     l7554 0173  
                   l5795 0188                     l6852 0214                     l7636 04A7  
                   l6862 021C                     l7590 010B                     l7646 04C5  
                   l6952 042D                     l6856 0218                     l7568 018B  
                   l7648 04E5                     l6954 0432                     l7586 0105  
                   l6970 03FD                     l6956 0437                     l7588 0108  
                   l6972 034B                     l6958 043C                     l6994 038F  
                   l6986 0370                     l6996 037B                     u1410 0351  
                   u2050 0290                     u2060 0296                     u2052 0291  
                   u2062 0297                     u1424 0354                     u2090 02A3  
                   u2510 01DF                     u2520 01E0                     u2345 0539  
                   u2470 01C5                     _PIE1 008C                     u2560 01FE  
                   u2480 01C6                     _PIE2 008D                     u2570 01FF  
                   _PIR1 000C                     _PIR2 000D                     _TMR1 000E  
                   _WPUA 018E                     _WPUB 0095                     _WPUC 018F  
                   _key1 0437                     _key2 043C                     _main 047F  
          ??_Init_TIMER1 0072            ??_Init_TIMER2 0072                     btemp 007E  
                   start 000C       __size_of_LED_Judge 0008               _FledBits01 0050  
        __end_of_Int_ALL 0511          __end_of_Init_IC 057D          __end_of_ScanKey 0225  
       __end_of_LED_Time 034B         __end_of_FCTjudge 042D            ??_GsensorLoop 0073  
                  ?_key1 0070                    ?_key2 0070                    ?_main 0070  
                  _T1CON 0010                    _T2CON 0012                    i1l971 0529  
                  _G_KEY 042D                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _R_KEY 0432                    _Delay 054A  
                  _Fsys1 0053               _GflushLoop 001C                    _templ 004E  
                  pclath 000A               _KeyControl 0195                    status 0003  
                  wtemp0 007E               _FlushJudge 00FC         __end_of_GledLoop 0347  
        __initialization 000F         __end_of_GkeyLoop 0195             __end_of_key1 043C  
           __end_of_key2 0441             __end_of_main 04EE      __end_of_Init_TIMER1 058A  
    __end_of_Init_TIMER2 0595       FlushJudge@Key_Step 0076         __end_of_FlushCon 00FC  
     __size_of_Delay_nms 001F                   ??_key1 0072                   ??_key2 0072  
                 ??_main 0079              _Fbodysensor 007A                   ?_G_KEY 0070  
              ??_LED_Con 0072                ??_LED_Key 0072                ??_FCTloop 0072  
                 ?_R_KEY 0070                   ?_Delay 0072        __end_of_LED_Judge 03FF  
  __end_of_SensorControl 02A5      __end_of_GsensorLoop 0251                   i1l1988 050A  
                 _FCTkey 0441                   i1l7362 051F                   i1l7484 0506  
                 u232_25 0525                   _INTCON 000B                   _CNTfct 0026  
     __size_of_Init_GPIO 0015                   _OSCCON 008F                   _TMR1IE 0460  
                 _TMR1IF 0060                   _TMR2IE 0461                   _TMR2IF 0061  
     __size_of_FlushTime 0001            ?_INT_LED_SHOW 0070                   _WDTCON 0105  
              ??_Int_ALL 0070                ??_Init_IC 0072                   _RX_Buf 004F  
          _CNTfctSensior 0046                ??_ScanKey 0072            _CNTbodyInTime 002C  
                 _Fsys1m 0051                   _Fsys1s 0052            _CNTbreath_Led 0040  
             _SensorTime 0252            ??_SensorJudge 0072           KeyControl@this 0063  
            _MainTime_1s 0038       __size_of_SensorKey 0001                   saved_w 007E  
     Delay_nms@inittempl 0074              ?_GflushLoop 0070              ?_KeyControl 0070  
         ??_INT_LED_SHOW 0070        __end_of_Delay_nms 054A  __end_of__initialization 0018  
              ?_LED_Time 0070                ?_FCTjudge 0070              _Init_TIMER1 057D  
            _Init_TIMER2 058A            __end_of_G_KEY 0432              ?_FlushJudge 0070  
          __end_of_R_KEY 0437            __end_of_Delay 0556           __pcstackCOMMON 0070  
             __end_ofPL2 022F               __end_ofPL4 0239               __end_ofPL6 0240  
             __end_ofPL8 0247        __end_of_Init_GPIO 056B        __end_of_FlushTime 0024  
            _GsensorLoop 0247                  ??_G_KEY 0072      __end_of_SensorJudge 0334  
                ??_R_KEY 0072                  ??_Delay 0074                ?_GledLoop 0070  
              ?_GkeyLoop 0070               __pbssBANK0 0020                  ?_FCTkey 0070  
             _fctBits001 0054                ?_FlushCon 0070               ??_LED_Time 0072  
             ??_FCTjudge 0072        __end_of_SensorKey 0252               __pmaintext 047F  
            ?_SensorTime 0070               __pintentry 0004      __size_of_GflushLoop 0007  
        ScanKey@line_num 0072      __size_of_KeyControl 007D           _CNTfctFlashLed 0045  
                _LED_Con 034B                  _LED_Key 0347                  _FCTloop 040B  
                _CNTkey1 0024                  _CNTkey2 0022      __size_of_FlushJudge 002F  
             ??_GledLoop 0072              _SeletedLine 0079                  _SEQbody 0048  
                _SEQmain 004D               ??_GkeyLoop 0074               ??_FlushCon 0072  
        __size_of_FCTkey 0038                  _Fflush1 004B                  _Int_ALL 04EE  
                _Init_IC 056B                  _ScanKey 0212           _CNTbreath_Led1 003E  
         _CNTbreath_Led2 003C           _CNTbreath_Led3 003A              _SensorJudge 02A5  
            _My_test_cnt 0042     __end_of_INT_LED_SHOW 052B                  __ptext0 0000  
                __ptext1 058A                  __ptext2 057D                  __ptext3 056B  
                __ptext4 0556                  __ptext5 0247                  __ptext6 0252  
                __ptext7 0251                  __ptext8 02A5                  __ptext9 028A  
              _AD_Result 0036                  clrloop0 0596                _LED_Judge 03F7  
   end_of_initialization 0018      __size_of_SensorTime 0038                _CNTbody_h 0032  
              _CNTbody_l 0030           Delay_nms@gtemp 0078             ??_GflushLoop 0077  
             ?_LED_Judge 0070             ??_KeyControl 0072           __end_of_FCTkey 0479  
           ?_Init_TIMER1 0070             ?_Init_TIMER2 0070             ??_FlushJudge 0076  
              _BufCntAdd 002E                _Delay_nms 052B        __size_of_LED_Time 0003  
      __size_of_FCTjudge 001E   __size_of_SensorControl 001B       __end_of_GflushLoop 0023  
           ?_GsensorLoop 0070       __end_of_KeyControl 0212              __end_ofPL10 033D  
            __end_ofPL12 047F              __end_ofPL14 0405              __end_ofPL16 040B  
    start_initialization 000F                _Init_GPIO 0556                _FlushTime 0023  
              _CurrentIO 0044       __end_of_FlushJudge 012B                 ??_FCTkey 0072  
      __size_of_GledLoop 000A        __size_of_GkeyLoop 006A        __size_of_FlushCon 00D8  
             ?_Delay_nms 0074                _SensorKey 0251    __size_of_INT_LED_SHOW 001A  
           ??_SensorTime 0072                 ?_LED_Con 0070                 ?_LED_Key 0070  
               ?_FCTloop 0070              __pbssCOMMON 0079               ?_Init_GPIO 0070  
              ___latbits 0002            __pcstackBANK0 005D               ?_FlushTime 0070  
          _SensorControl 028A              ??_LED_Judge 0072       __end_of_SensorTime 028A  
        _KeyControl$3154 005D          _KeyControl$3155 005F          _KeyControl$3156 0061  
           _INT_LED_SHOW 0511                 ?_Int_ALL 0070                 ?_Init_IC 0070  
               ?_ScanKey 0070               ?_SensorKey 0070                _flag_time 0020  
           ?_SensorJudge 0070           __size_of_G_KEY 0005           __size_of_R_KEY 0005  
         __size_of_Delay 000C           ?_SensorControl 0070        interrupt_function 0004  
               _LED_Time 0348                 _FCTjudge 040F                clear_ram0 0595  
               _CNTflush 0034              ??_Delay_nms 0076     __size_of_Init_TIMER1 000D  
   __size_of_Init_TIMER2 000B                 _SEQflsuh 004A     __size_of_GsensorLoop 000A  
            ??_Init_GPIO 0072         __size_of_LED_Con 00AC         __size_of_LED_Key 0001  
            ??_FlushTime 0072         __size_of_FCTloop 0004                 _GledLoop 033D  
               _GkeyLoop 012B                 _KeyLines 0055                 _FlushCon 0024  
       __size_of_Int_ALL 0023         __size_of_Init_IC 0012          _CNTbodyExitTime 002A  
       __size_of_ScanKey 0013              _CNTfctStart 0028              ??_SensorKey 0072  
        ??_SensorControl 0072                 __ptext10 033D                 __ptext11 0348  
               __ptext20 0195                 __ptext12 0347                 __ptext21 0024  
               __ptext13 03F7                 __ptext30 054A                 __ptext22 040B  
               __ptext14 034B                 __ptext31 04EE                 __ptext23 0441  
               __ptext15 001C                 __ptext32 0511                 __ptext24 040F  
               __ptext16 0023                 __ptext25 043C                 __ptext17 00FC  
               __ptext26 0437                 __ptext18 012B                 __ptext27 0432  
               __ptext19 0212                 __ptext28 042D                 __ptext29 052B  
          __size_of_key1 0005            __size_of_key2 0005            __size_of_main 006F  
        _u8stsBodySensor 0049            _MainTime_1min 004C               Delay@dtemp 0072  
   __size_of_SensorJudge 008F               Delay_nms@i 0076                 intlevel1 0000  
             _OPTION_REG 0081  
