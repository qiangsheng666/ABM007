

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jun 04 13:17:31 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	79F133
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text10,local,class=CODE,merge=1,delta=2
    18                           	psect	text15,local,class=CODE,merge=1,delta=2
    19                           	psect	text22,local,class=CODE,merge=1,delta=2
    20                           	psect	text31,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	pa_nodes0,global,class=CODE,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 1.45
    26                           ; Generated 16/11/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F887 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	text0
    61  0000                     __ptext0:	
    62  000E                     _TMR1	set	14
    63  0012                     _T2CON	set	18
    64  0010                     _T1CON	set	16
    65  000D                     _PIR2	set	13
    66  000C                     _PIR1	set	12
    67  000B                     _INTCON	set	11
    68  0007                     _PORTC	set	7
    69  0006                     _PORTB	set	6
    70  0005                     _PORTA	set	5
    71  0060                     _TMR1IF	set	96
    72  0061                     _TMR2IF	set	97
    73  005F                     _GIE	set	95
    74  0030                     _RB0	set	48
    75  0031                     _RB1	set	49
    76  0032                     _RB2	set	50
    77  0029                     _RA1	set	41
    78  002A                     _RA2	set	42
    79  002C                     _RA4	set	44
    80  002D                     _RA5	set	45
    81  002E                     _RA6	set	46
    82  0095                     _WPUB	set	149
    83  0092                     _PR2	set	146
    84  008F                     _OSCCON	set	143
    85  008D                     _PIE2	set	141
    86  008C                     _PIE1	set	140
    87  0087                     _TRISC	set	135
    88  0086                     _TRISB	set	134
    89  0085                     _TRISA	set	133
    90  0081                     _OPTION_REG	set	129
    91  0460                     _TMR1IE	set	1120
    92  0461                     _TMR2IE	set	1121
    93  0105                     _WDTCON	set	261
    94  018F                     _WPUC	set	399
    95  018E                     _WPUA	set	398
    96                           
    97                           	psect	cinit
    98  000F                     start_initialization:	
    99                           ; #config settings
   100                           
   101  000F                     __initialization:	
   102  000F  3020               	movlw	low __pbssBANK0
   103                           
   104                           ; Clear objects allocated to COMMON
   105  0010  01F9               	clrf	__pbssCOMMON& (0+127)
   106  0011  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   107                           
   108                           ; Clear objects allocated to BANK0
   109  0012  1383               	bcf	3,7	;select IRP bank0
   110  0013  0084               	movwf	4
   111  0014  305A               	movlw	low (__pbssBANK0+58)
   112  0015  120A  118A  2560   	fcall	clear_ram0
   113  0018                     end_of_initialization:	
   114                           ;End of C runtime variable initialization code
   115                           
   116  0018                     __end_of__initialization:	
   117  0018  0183               	clrf	3
   118  0019  120A  118A  2C75   	ljmp	_main	;jump to C main() function
   119                           
   120                           	psect	bssCOMMON
   121  0079                     __pbssCOMMON:	
   122  0079                     _SeletedLine:	
   123  0079                     	ds	1
   124  007A                     _Fbodysensor:	
   125  007A                     	ds	1
   126                           
   127                           	psect	bssBANK0
   128  0020                     __pbssBANK0:	
   129  0020                     _flag_time:	
   130  0020                     	ds	2
   131  0022                     _CNTkey2:	
   132  0022                     	ds	2
   133  0024                     _CNTkey1:	
   134  0024                     	ds	2
   135  0026                     _CNTfct:	
   136  0026                     	ds	2
   137  0028                     _CNTfctStart:	
   138  0028                     	ds	2
   139  002A                     _CNTbodyExitTime:	
   140  002A                     	ds	2
   141  002C                     _CNTbodyInTime:	
   142  002C                     	ds	2
   143  002E                     _BufCntAdd:	
   144  002E                     	ds	2
   145  0030                     _CNTbody_l:	
   146  0030                     	ds	2
   147  0032                     _CNTbody_h:	
   148  0032                     	ds	2
   149  0034                     _CNTflush:	
   150  0034                     	ds	2
   151  0036                     _AD_Result:	
   152  0036                     	ds	2
   153  0038                     _MainTime_1s:	
   154  0038                     	ds	2
   155  003A                     _CNTbreath_Led3:	
   156  003A                     	ds	2
   157  003C                     _CNTbreath_Led2:	
   158  003C                     	ds	2
   159  003E                     _CNTbreath_Led1:	
   160  003E                     	ds	2
   161  0040                     _CNTbreath_Led:	
   162  0040                     	ds	2
   163  0042                     _CurrentIO:	
   164  0042                     	ds	1
   165  0043                     _CNTfctFlashLed:	
   166  0043                     	ds	1
   167  0044                     _CNTfctSensior:	
   168  0044                     	ds	1
   169  0045                     _SEQbody:	
   170  0045                     	ds	1
   171  0046                     _u8stsBodySensor:	
   172  0046                     	ds	1
   173  0047                     _SEQflsuh:	
   174  0047                     	ds	1
   175  0048                     _Fflush1:	
   176  0048                     	ds	1
   177  0049                     _MainTime_1min:	
   178  0049                     	ds	1
   179  004A                     _SEQmain:	
   180  004A                     	ds	1
   181  004B                     _templ:	
   182  004B                     	ds	1
   183  004C                     _RX_Buf:	
   184  004C                     	ds	1
   185  004D                     _FledBits01:	
   186  004D                     	ds	1
   187  004E                     _Fsys1m:	
   188  004E                     	ds	1
   189  004F                     _Fsys1s:	
   190  004F                     	ds	1
   191  0050                     _Fsys1:	
   192  0050                     	ds	1
   193  0051                     _fctBits001:	
   194  0051                     	ds	1
   195  0052                     _KeyLines:	
   196  0052                     	ds	8
   197                           
   198                           	psect	clrtext
   199  0560                     clear_ram0:	
   200                           ;	Called with FSR containing the base address, and
   201                           ;	W with the last address+1
   202                           
   203  0560  0064               	clrwdt	;clear the watchdog before getting into this loop
   204  0561                     clrloop0:	
   205  0561  0180               	clrf	0	;clear RAM location pointed to by FSR
   206  0562  0A84               	incf	4,f	;increment pointer
   207  0563  0604               	xorwf	4,w	;XOR with final address
   208  0564  1903               	btfsc	3,2	;have we reached the end yet?
   209  0565  3400               	retlw	0	;all done for this memory range, return
   210  0566  0604               	xorwf	4,w	;XOR again to restore value
   211  0567  2D61               	goto	clrloop0	;do the next byte
   212                           
   213                           	psect	cstackCOMMON
   214  0070                     __pcstackCOMMON:	
   215  0070                     ?_LED_Time:	
   216  0070                     ?_LED_Key:	
   217                           ; 1 bytes @ 0x0
   218                           
   219  0070                     ?_LED_Judge:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0070                     ?_LED_Con:	
   223                           ; 1 bytes @ 0x0
   224                           
   225  0070                     ?_FCTloop:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ?_GsensorLoop:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_GflushLoop:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     ?_FlushTime:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ?_FlushJudge:	
   238                           ; 1 bytes @ 0x0
   239                           
   240  0070                     ?_FlushCon:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ?_GkeyLoop:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0070                     ?_SensorKey:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0070                     ?_SensorTime:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_SensorJudge:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_SensorControl:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_FCTkey:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_FCTjudge:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?_ScanKey:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_KeyControl:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ?_GledLoop:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?_INT_LED_SHOW:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ??_INT_LED_SHOW:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ?_Init_GPIO:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?_Init_IC:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ?_Init_TIMER1:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?_Init_TIMER2:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_main:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_Int_ALL:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ??_Int_ALL:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_G_KEY:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_R_KEY:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_key1:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?_key2:	
   310                           ; 1 bytes @ 0x0
   311                           
   312                           
   313                           ; 1 bytes @ 0x0
   314  0070                     	ds	2
   315  0072                     ??_LED_Time:	
   316  0072                     ??_LED_Key:	
   317                           ; 1 bytes @ 0x2
   318                           
   319  0072                     ??_LED_Judge:	
   320                           ; 1 bytes @ 0x2
   321                           
   322  0072                     ??_LED_Con:	
   323                           ; 1 bytes @ 0x2
   324                           
   325  0072                     ??_FlushTime:	
   326                           ; 1 bytes @ 0x2
   327                           
   328  0072                     ??_FlushCon:	
   329                           ; 1 bytes @ 0x2
   330                           
   331  0072                     ??_SensorKey:	
   332                           ; 1 bytes @ 0x2
   333                           
   334  0072                     ??_SensorTime:	
   335                           ; 1 bytes @ 0x2
   336                           
   337  0072                     ??_SensorJudge:	
   338                           ; 1 bytes @ 0x2
   339                           
   340  0072                     ??_SensorControl:	
   341                           ; 1 bytes @ 0x2
   342                           
   343  0072                     ??_FCTjudge:	
   344                           ; 1 bytes @ 0x2
   345                           
   346  0072                     ??_ScanKey:	
   347                           ; 1 bytes @ 0x2
   348                           
   349  0072                     ??_KeyControl:	
   350                           ; 1 bytes @ 0x2
   351                           
   352  0072                     ??_GledLoop:	
   353                           ; 1 bytes @ 0x2
   354                           
   355  0072                     ?_Delay:	
   356                           ; 1 bytes @ 0x2
   357                           
   358  0072                     ??_Init_GPIO:	
   359                           ; 1 bytes @ 0x2
   360                           
   361  0072                     ??_Init_IC:	
   362                           ; 1 bytes @ 0x2
   363                           
   364  0072                     ??_Init_TIMER1:	
   365                           ; 1 bytes @ 0x2
   366                           
   367  0072                     ??_Init_TIMER2:	
   368                           ; 1 bytes @ 0x2
   369                           
   370  0072                     ??_G_KEY:	
   371                           ; 1 bytes @ 0x2
   372                           
   373  0072                     ??_R_KEY:	
   374                           ; 1 bytes @ 0x2
   375                           
   376  0072                     ??_key1:	
   377                           ; 1 bytes @ 0x2
   378                           
   379  0072                     ??_key2:	
   380                           ; 1 bytes @ 0x2
   381                           
   382  0072                     ScanKey@line_num:	
   383                           ; 1 bytes @ 0x2
   384                           
   385  0072                     Delay@dtemp:	
   386                           ; 1 bytes @ 0x2
   387                           
   388                           
   389                           ; 2 bytes @ 0x2
   390  0072                     	ds	1
   391  0073                     ??_GsensorLoop:	
   392                           
   393                           ; 1 bytes @ 0x3
   394  0073                     	ds	1
   395  0074                     ??_GkeyLoop:	
   396  0074                     ??_Delay:	
   397                           ; 1 bytes @ 0x4
   398                           
   399  0074                     ?_Delay_nms:	
   400                           ; 1 bytes @ 0x4
   401                           
   402  0074                     Delay_nms@inittempl:	
   403                           ; 1 bytes @ 0x4
   404                           
   405                           
   406                           ; 2 bytes @ 0x4
   407  0074                     	ds	2
   408  0076                     ??_FlushJudge:	
   409  0076                     ??_Delay_nms:	
   410                           ; 1 bytes @ 0x6
   411                           
   412  0076                     FlushJudge@Key_Step:	
   413                           ; 1 bytes @ 0x6
   414                           
   415  0076                     Delay_nms@i:	
   416                           ; 1 bytes @ 0x6
   417                           
   418                           
   419                           ; 2 bytes @ 0x6
   420  0076                     	ds	1
   421  0077                     ??_GflushLoop:	
   422                           
   423                           ; 1 bytes @ 0x7
   424  0077                     	ds	1
   425  0078                     Delay_nms@gtemp:	
   426                           
   427                           ; 1 bytes @ 0x8
   428  0078                     	ds	1
   429  0079                     ??_FCTloop:	
   430  0079                     ??_FCTkey:	
   431                           ; 1 bytes @ 0x9
   432                           
   433  0079                     ??_main:	
   434                           ; 1 bytes @ 0x9
   435                           
   436                           
   437                           	psect	cstackBANK0
   438  005A                     __pcstackBANK0:	
   439                           ; 1 bytes @ 0x9
   440                           
   441  005A                     _KeyControl$3140:	
   442                           
   443                           ; 2 bytes @ 0x0
   444  005A                     	ds	2
   445  005C                     _KeyControl$3141:	
   446                           
   447                           ; 2 bytes @ 0x2
   448  005C                     	ds	2
   449  005E                     _KeyControl$3142:	
   450                           
   451                           ; 2 bytes @ 0x4
   452  005E                     	ds	2
   453  0060                     KeyControl@this:	
   454                           
   455                           ; 1 bytes @ 0x6
   456  0060                     	ds	1
   457                           
   458                           	psect	maintext
   459  0475                     __pmaintext:	
   460 ;;
   461 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   462 ;;
   463 ;; *************** function _main *****************
   464 ;; Defined at:
   465 ;;		line 473 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\main.c"
   466 ;; Parameters:    Size  Location     Type
   467 ;;		None
   468 ;; Auto vars:     Size  Location     Type
   469 ;;		None
   470 ;; Return value:  Size  Location     Type
   471 ;;                  1    wreg      void 
   472 ;; Registers used:
   473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   474 ;; Tracked objects:
   475 ;;		On entry : B00/0
   476 ;;		On exit  : 300/0
   477 ;;		Unchanged: 0/0
   478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   479 ;;      Params:         0       0       0       0       0
   480 ;;      Locals:         0       0       0       0       0
   481 ;;      Temps:          0       0       0       0       0
   482 ;;      Totals:         0       0       0       0       0
   483 ;;Total ram usage:        0 bytes
   484 ;; Hardware stack levels required when called:    6
   485 ;; This function calls:
   486 ;;		_Delay_nms
   487 ;;		_FCTloop
   488 ;;		_GflushLoop
   489 ;;		_GledLoop
   490 ;;		_GsensorLoop
   491 ;;		_Init_GPIO
   492 ;;		_Init_IC
   493 ;;		_Init_TIMER1
   494 ;;		_Init_TIMER2
   495 ;; This function is called by:
   496 ;;		Startup code after reset
   497 ;; This function uses a non-reentrant model
   498 ;;
   499                           
   500                           
   501                           ;psect for function _main
   502  0475                     _main:	
   503                           
   504                           ;incstack = 0
   505                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   506  0475  0000               	nop	;# 
   507  0476  0064               	clrwdt	;# 
   508                           
   509                           ;main.c: 478: INTCON = 0;
   510  0477  018B               	clrf	11	;volatile
   511                           
   512                           ;main.c: 480: Init_GPIO();
   513  0478  120A  118A  2521  120A  118A  	fcall	_Init_GPIO
   514                           
   515                           ;main.c: 481: Init_IC();
   516  047D  120A  118A  2536  120A  118A  	fcall	_Init_IC
   517                           
   518                           ;main.c: 482: Delay_nms(200);
   519  0482  30C8               	movlw	200
   520  0483  00F4               	movwf	Delay_nms@inittempl
   521  0484  01F5               	clrf	Delay_nms@inittempl+1
   522  0485  120A  118A  244A  120A  118A  	fcall	_Delay_nms
   523                           
   524                           ;main.c: 483: Init_TIMER1();
   525  048A  120A  118A  2548  120A  118A  	fcall	_Init_TIMER1
   526                           
   527                           ;main.c: 484: Init_TIMER2();
   528  048F  120A  118A  2555  120A  118A  	fcall	_Init_TIMER2
   529                           
   530                           ;main.c: 495: INTCON = 0XC0;
   531  0494  30C0               	movlw	192
   532  0495  008B               	movwf	11	;volatile
   533  0496                     l7531:	
   534                           
   535                           ;main.c: 499: {
   536                           ;main.c: 501: if (Fsys1.bits.bit_1 == 1)
   537  0496  1CD0               	btfss	_Fsys1,1	;volatile
   538  0497  2C96               	goto	l7531
   539  0498  0064               	clrwdt	;# 
   540                           
   541                           ;main.c: 505: Fsys1.bits.bit_1 = 0;
   542  0499  1283               	bcf	3,5	;RP0=0, select bank0
   543  049A  1303               	bcf	3,6	;RP1=0, select bank0
   544  049B  10D0               	bcf	_Fsys1,1	;volatile
   545                           
   546                           ;main.c: 506: switch (SEQmain)
   547  049C  2CBB               	goto	l7545
   548  049D                     l7535:	
   549                           
   550                           ;main.c: 509: FCTloop();
   551  049D  120A  118A  23F4  120A  118A  	fcall	_FCTloop
   552                           
   553                           ;main.c: 510: break;
   554  04A2  2CDB               	goto	l7547
   555  04A3                     l1956:	
   556                           ;main.c: 511: case 1:
   557                           
   558                           
   559                           ;main.c: 512: if(fctBits001.bits.bit_0 == 0)
   560  04A3  1851               	btfsc	_fctBits001,0	;volatile
   561  04A4  2CDB               	goto	l7547
   562                           
   563                           ;main.c: 513: {
   564                           ;main.c: 514: GsensorLoop();
   565  04A5  120A  118A  2230  120A  118A  	fcall	_GsensorLoop
   566  04AA  2CDB               	goto	l7547
   567  04AB                     l1960:	
   568                           ;main.c: 523: case 4:
   569                           
   570                           
   571                           ;main.c: 524: if(fctBits001.bits.bit_0 == 0)
   572  04AB  1851               	btfsc	_fctBits001,0	;volatile
   573  04AC  2CDB               	goto	l7547
   574                           
   575                           ;main.c: 525: {
   576                           ;main.c: 526: GflushLoop();
   577  04AD  120A  118A  201C  120A  118A  	fcall	_GflushLoop
   578  04B2  2CDB               	goto	l7547
   579  04B3                     l1965:	
   580                           ;main.c: 538: case 8:
   581                           
   582                           
   583                           ;main.c: 539: if(fctBits001.bits.bit_0 == 0)
   584  04B3  1851               	btfsc	_fctBits001,0	;volatile
   585  04B4  2CDB               	goto	l7547
   586                           
   587                           ;main.c: 540: {
   588                           ;main.c: 541: GledLoop();
   589  04B5  120A  118A  2326  120A  118A  	fcall	_GledLoop
   590  04BA  2CDB               	goto	l7547
   591  04BB                     l7545:	
   592  04BB  084A               	movf	_SEQmain,w	;volatile
   593                           
   594                           ; Switch size 1, requested type "space"
   595                           ; Number of cases is 10, Range of values is 0 to 9
   596                           ; switch strategies available:
   597                           ; Name         Instructions Cycles
   598                           ; simple_byte           31    16 (average)
   599                           ; direct_byte           38     8 (fixed)
   600                           ; jumptable            260     6 (fixed)
   601                           ;	Chosen strategy is simple_byte
   602  04BC  3A00               	xorlw	0	; case 0
   603  04BD  1903               	skipnz
   604  04BE  2C9D               	goto	l7535
   605  04BF  3A01               	xorlw	1	; case 1
   606  04C0  1903               	skipnz
   607  04C1  2CA3               	goto	l1956
   608  04C2  3A03               	xorlw	3	; case 2
   609  04C3  1903               	skipnz
   610  04C4  2CDB               	goto	l7547
   611  04C5  3A01               	xorlw	1	; case 3
   612  04C6  1903               	skipnz
   613  04C7  2CDB               	goto	l7547
   614  04C8  3A07               	xorlw	7	; case 4
   615  04C9  1903               	skipnz
   616  04CA  2CAB               	goto	l1960
   617  04CB  3A01               	xorlw	1	; case 5
   618  04CC  1903               	skipnz
   619  04CD  2CDB               	goto	l7547
   620  04CE  3A03               	xorlw	3	; case 6
   621  04CF  1903               	skipnz
   622  04D0  2CDB               	goto	l7547
   623  04D1  3A01               	xorlw	1	; case 7
   624  04D2  1903               	skipnz
   625  04D3  2CDB               	goto	l7547
   626  04D4  3A0F               	xorlw	15	; case 8
   627  04D5  1903               	skipnz
   628  04D6  2CB3               	goto	l1965
   629  04D7  3A01               	xorlw	1	; case 9
   630  04D8  1903               	skipnz
   631  04D9  2CDB               	goto	l7547
   632  04DA  2CDB               	goto	l7547
   633  04DB                     l7547:	
   634                           
   635                           ;main.c: 551: if (++SEQmain >= 10)
   636  04DB  300A               	movlw	10
   637  04DC  1283               	bcf	3,5	;RP0=0, select bank0
   638  04DD  1303               	bcf	3,6	;RP1=0, select bank0
   639  04DE  0ACA               	incf	_SEQmain,f	;volatile
   640  04DF  024A               	subwf	_SEQmain,w	;volatile
   641  04E0  1C03               	skipc
   642  04E1  2C96               	goto	l7531
   643                           
   644                           ;main.c: 552: {
   645                           ;main.c: 553: SEQmain = 0;
   646  04E2  01CA               	clrf	_SEQmain	;volatile
   647  04E3  2C96               	goto	l7531
   648  04E4                     __end_of_main:	
   649                           
   650                           	psect	text1
   651  0555                     __ptext1:	
   652 ;; *************** function _Init_TIMER2 *****************
   653 ;; Defined at:
   654 ;;		line 174 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\main.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;		None
   657 ;; Auto vars:     Size  Location     Type
   658 ;;		None
   659 ;; Return value:  Size  Location     Type
   660 ;;                  1    wreg      void 
   661 ;; Registers used:
   662 ;;		wreg
   663 ;; Tracked objects:
   664 ;;		On entry : 300/0
   665 ;;		On exit  : 300/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   668 ;;      Params:         0       0       0       0       0
   669 ;;      Locals:         0       0       0       0       0
   670 ;;      Temps:          0       0       0       0       0
   671 ;;      Totals:         0       0       0       0       0
   672 ;;Total ram usage:        0 bytes
   673 ;; Hardware stack levels used:    1
   674 ;; Hardware stack levels required when called:    2
   675 ;; This function calls:
   676 ;;		Nothing
   677 ;; This function is called by:
   678 ;;		_main
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           
   683                           ;psect for function _Init_TIMER2
   684  0555                     _Init_TIMER2:	
   685                           
   686                           ;main.c: 176: PR2 = 24;
   687                           
   688                           ;incstack = 0
   689                           ; Regs used in _Init_TIMER2: [wreg]
   690  0555  3018               	movlw	24
   691  0556  1683               	bsf	3,5	;RP0=1, select bank1
   692  0557  0092               	movwf	18	;volatile
   693                           
   694                           ;main.c: 177: TMR2IF = 0;
   695  0558  1283               	bcf	3,5	;RP0=0, select bank0
   696  0559  108C               	bcf	12,1	;volatile
   697                           
   698                           ;main.c: 178: TMR2IE = 1;
   699  055A  1683               	bsf	3,5	;RP0=1, select bank1
   700  055B  148C               	bsf	12,1	;volatile
   701                           
   702                           ;main.c: 179: T2CON = 5;
   703  055C  3005               	movlw	5
   704  055D  1283               	bcf	3,5	;RP0=0, select bank0
   705  055E  0092               	movwf	18	;volatile
   706  055F  0008               	return
   707  0560                     __end_of_Init_TIMER2:	
   708                           
   709                           	psect	text2
   710  0548                     __ptext2:	
   711 ;; *************** function _Init_TIMER1 *****************
   712 ;; Defined at:
   713 ;;		line 152 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\main.c"
   714 ;; Parameters:    Size  Location     Type
   715 ;;		None
   716 ;; Auto vars:     Size  Location     Type
   717 ;;		None
   718 ;; Return value:  Size  Location     Type
   719 ;;                  1    wreg      void 
   720 ;; Registers used:
   721 ;;		wreg
   722 ;; Tracked objects:
   723 ;;		On entry : 0/100
   724 ;;		On exit  : 300/0
   725 ;;		Unchanged: 0/0
   726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   727 ;;      Params:         0       0       0       0       0
   728 ;;      Locals:         0       0       0       0       0
   729 ;;      Temps:          0       0       0       0       0
   730 ;;      Totals:         0       0       0       0       0
   731 ;;Total ram usage:        0 bytes
   732 ;; Hardware stack levels used:    1
   733 ;; Hardware stack levels required when called:    2
   734 ;; This function calls:
   735 ;;		Nothing
   736 ;; This function is called by:
   737 ;;		_main
   738 ;; This function uses a non-reentrant model
   739 ;;
   740                           
   741                           
   742                           ;psect for function _Init_TIMER1
   743  0548                     _Init_TIMER1:	
   744                           
   745                           ;main.c: 156: TMR1 = 0xE0C0;
   746                           
   747                           ;incstack = 0
   748                           ; Regs used in _Init_TIMER1: [wreg]
   749  0548  30E0               	movlw	224
   750  0549  1283               	bcf	3,5	;RP0=0, select bank0
   751  054A  1303               	bcf	3,6	;RP1=0, select bank0
   752  054B  008F               	movwf	15	;volatile
   753  054C  30C0               	movlw	192
   754  054D  008E               	movwf	14	;volatile
   755                           
   756                           ;main.c: 157: TMR1IF = 0;
   757  054E  100C               	bcf	12,0	;volatile
   758                           
   759                           ;main.c: 158: TMR1IE = 1;
   760  054F  1683               	bsf	3,5	;RP0=1, select bank1
   761  0550  140C               	bsf	12,0	;volatile
   762                           
   763                           ;main.c: 159: T1CON = 0x01;
   764  0551  3001               	movlw	1
   765  0552  1283               	bcf	3,5	;RP0=0, select bank0
   766  0553  0090               	movwf	16	;volatile
   767  0554  0008               	return
   768  0555                     __end_of_Init_TIMER1:	
   769                           
   770                           	psect	text3
   771  0536                     __ptext3:	
   772 ;; *************** function _Init_IC *****************
   773 ;; Defined at:
   774 ;;		line 96 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\main.c"
   775 ;; Parameters:    Size  Location     Type
   776 ;;		None
   777 ;; Auto vars:     Size  Location     Type
   778 ;;		None
   779 ;; Return value:  Size  Location     Type
   780 ;;                  1    wreg      void 
   781 ;; Registers used:
   782 ;;		wreg, status,2
   783 ;; Tracked objects:
   784 ;;		On entry : 300/300
   785 ;;		On exit  : 300/100
   786 ;;		Unchanged: 0/0
   787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   788 ;;      Params:         0       0       0       0       0
   789 ;;      Locals:         0       0       0       0       0
   790 ;;      Temps:          0       0       0       0       0
   791 ;;      Totals:         0       0       0       0       0
   792 ;;Total ram usage:        0 bytes
   793 ;; Hardware stack levels used:    1
   794 ;; Hardware stack levels required when called:    2
   795 ;; This function calls:
   796 ;;		Nothing
   797 ;; This function is called by:
   798 ;;		_main
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           
   803                           ;psect for function _Init_IC
   804  0536                     _Init_IC:	
   805                           
   806                           ;incstack = 0
   807                           ; Regs used in _Init_IC: [wreg+status,2]
   808  0536  0064               	clrwdt	;# 
   809                           
   810                           ;main.c: 103: INTCON = 0x00;
   811  0537  018B               	clrf	11	;volatile
   812                           
   813                           ;main.c: 108: PIR1 = 0;
   814  0538  1283               	bcf	3,5	;RP0=0, select bank0
   815  0539  1303               	bcf	3,6	;RP1=0, select bank0
   816  053A  018C               	clrf	12	;volatile
   817                           
   818                           ;main.c: 113: PIR2 = 0;
   819  053B  018D               	clrf	13	;volatile
   820                           
   821                           ;main.c: 118: WDTCON = 0x01;
   822  053C  3001               	movlw	1
   823  053D  1703               	bsf	3,6	;RP1=1, select bank2
   824  053E  0085               	movwf	5	;volatile
   825                           
   826                           ;main.c: 123: OPTION_REG = 0b00001110;
   827  053F  300E               	movlw	14
   828  0540  1683               	bsf	3,5	;RP0=1, select bank1
   829  0541  1303               	bcf	3,6	;RP1=0, select bank1
   830  0542  0081               	movwf	1	;volatile
   831                           
   832                           ;main.c: 128: OSCCON = 0x71;
   833  0543  3071               	movlw	113
   834  0544  008F               	movwf	15	;volatile
   835                           
   836                           ;main.c: 133: PIE1 = 0;
   837  0545  018C               	clrf	12	;volatile
   838                           
   839                           ;main.c: 138: PIE2 = 0;
   840  0546  018D               	clrf	13	;volatile
   841  0547  0008               	return
   842  0548                     __end_of_Init_IC:	
   843                           
   844                           	psect	text4
   845  0521                     __ptext4:	
   846 ;; *************** function _Init_GPIO *****************
   847 ;; Defined at:
   848 ;;		line 62 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\main.c"
   849 ;; Parameters:    Size  Location     Type
   850 ;;		None
   851 ;; Auto vars:     Size  Location     Type
   852 ;;		None
   853 ;; Return value:  Size  Location     Type
   854 ;;                  1    wreg      void 
   855 ;; Registers used:
   856 ;;		wreg, status,2
   857 ;; Tracked objects:
   858 ;;		On entry : 0/0
   859 ;;		On exit  : 300/300
   860 ;;		Unchanged: 0/0
   861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   862 ;;      Params:         0       0       0       0       0
   863 ;;      Locals:         0       0       0       0       0
   864 ;;      Temps:          0       0       0       0       0
   865 ;;      Totals:         0       0       0       0       0
   866 ;;Total ram usage:        0 bytes
   867 ;; Hardware stack levels used:    1
   868 ;; Hardware stack levels required when called:    2
   869 ;; This function calls:
   870 ;;		Nothing
   871 ;; This function is called by:
   872 ;;		_main
   873 ;; This function uses a non-reentrant model
   874 ;;
   875                           
   876                           
   877                           ;psect for function _Init_GPIO
   878  0521                     _Init_GPIO:	
   879                           
   880                           ;main.c: 66: PORTA = 0B01000000;
   881                           
   882                           ;incstack = 0
   883                           ; Regs used in _Init_GPIO: [wreg+status,2]
   884  0521  3040               	movlw	64
   885  0522  1283               	bcf	3,5	;RP0=0, select bank0
   886  0523  1303               	bcf	3,6	;RP1=0, select bank0
   887  0524  0085               	movwf	5	;volatile
   888                           
   889                           ;main.c: 67: PORTB = 0B00000001;
   890  0525  3001               	movlw	1
   891  0526  0086               	movwf	6	;volatile
   892                           
   893                           ;main.c: 68: PORTC = 0B00000000;
   894  0527  0187               	clrf	7	;volatile
   895                           
   896                           ;main.c: 71: TRISA = 0B01000000;
   897  0528  3040               	movlw	64
   898  0529  1683               	bsf	3,5	;RP0=1, select bank1
   899  052A  0085               	movwf	5	;volatile
   900                           
   901                           ;main.c: 72: TRISB = 0B00000111;
   902  052B  3007               	movlw	7
   903  052C  0086               	movwf	6	;volatile
   904                           
   905                           ;main.c: 73: TRISC = 0B00000000;
   906  052D  0187               	clrf	7	;volatile
   907                           
   908                           ;main.c: 76: WPUA = 0B00000000;
   909  052E  1703               	bsf	3,6	;RP1=1, select bank3
   910  052F  018E               	clrf	14	;volatile
   911                           
   912                           ;main.c: 77: WPUB = 0B00000010;
   913  0530  3002               	movlw	2
   914  0531  1303               	bcf	3,6	;RP1=0, select bank1
   915  0532  0095               	movwf	21	;volatile
   916                           
   917                           ;main.c: 78: WPUC = 0B00000000;
   918  0533  1703               	bsf	3,6	;RP1=1, select bank3
   919  0534  018F               	clrf	15	;volatile
   920  0535  0008               	return
   921  0536                     __end_of_Init_GPIO:	
   922                           
   923                           	psect	text5
   924  0230                     __ptext5:	
   925 ;; *************** function _GsensorLoop *****************
   926 ;; Defined at:
   927 ;;		line 19 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\sensor.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;		None
   930 ;; Auto vars:     Size  Location     Type
   931 ;;		None
   932 ;; Return value:  Size  Location     Type
   933 ;;                  1    wreg      void 
   934 ;; Registers used:
   935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   936 ;; Tracked objects:
   937 ;;		On entry : 300/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   941 ;;      Params:         0       0       0       0       0
   942 ;;      Locals:         0       0       0       0       0
   943 ;;      Temps:          0       0       0       0       0
   944 ;;      Totals:         0       0       0       0       0
   945 ;;Total ram usage:        0 bytes
   946 ;; Hardware stack levels used:    1
   947 ;; Hardware stack levels required when called:    3
   948 ;; This function calls:
   949 ;;		_SensorControl
   950 ;;		_SensorJudge
   951 ;;		_SensorKey
   952 ;;		_SensorTime
   953 ;; This function is called by:
   954 ;;		_main
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           
   959                           ;psect for function _GsensorLoop
   960  0230                     _GsensorLoop:	
   961                           
   962                           ;sensor.c: 21: SensorKey();
   963                           
   964                           ;incstack = 0
   965                           ; Regs used in _GsensorLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   966  0230  223A  120A  118A   	fcall	_SensorKey
   967                           
   968                           ;sensor.c: 22: SensorTime();
   969  0233  223B  120A  118A   	fcall	_SensorTime
   970                           
   971                           ;sensor.c: 23: SensorJudge();
   972  0236  228E  120A  118A   	fcall	_SensorJudge
   973                           
   974                           ;sensor.c: 24: SensorControl();
   975  0239  2A73               	ljmp	l7219
   976  023A                     __end_of_GsensorLoop:	
   977  023A                     __ptext7:	
   978 ;; *************** function _SensorKey *****************
   979 ;; Defined at:
   980 ;;		line 27 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\sensor.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;		None
   985 ;; Return value:  Size  Location     Type
   986 ;;                  1    wreg      void 
   987 ;; Registers used:
   988 ;;		None
   989 ;; Tracked objects:
   990 ;;		On entry : 300/0
   991 ;;		On exit  : 300/0
   992 ;;		Unchanged: 300/0
   993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   994 ;;      Params:         0       0       0       0       0
   995 ;;      Locals:         0       0       0       0       0
   996 ;;      Temps:          0       0       0       0       0
   997 ;;      Totals:         0       0       0       0       0
   998 ;;Total ram usage:        0 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:    2
  1001 ;; This function calls:
  1002 ;;		Nothing
  1003 ;; This function is called by:
  1004 ;;		_GsensorLoop
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           
  1009                           ;psect for function _SensorKey
  1010  023A                     _SensorKey:	
  1011                           
  1012                           ;incstack = 0
  1013                           ; Regs used in _SensorKey: []
  1014  023A  0008               	return
  1015  023B                     __end_of_SensorKey:	
  1016  023B                     __ptext6:	
  1017 ;; *************** function _SensorTime *****************
  1018 ;; Defined at:
  1019 ;;		line 33 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\sensor.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;		None
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;		None
  1024 ;; Return value:  Size  Location     Type
  1025 ;;                  1    wreg      void 
  1026 ;; Registers used:
  1027 ;;		wreg, status,2, status,0
  1028 ;; Tracked objects:
  1029 ;;		On entry : 300/0
  1030 ;;		On exit  : 300/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1033 ;;      Params:         0       0       0       0       0
  1034 ;;      Locals:         0       0       0       0       0
  1035 ;;      Temps:          0       0       0       0       0
  1036 ;;      Totals:         0       0       0       0       0
  1037 ;;Total ram usage:        0 bytes
  1038 ;; Hardware stack levels used:    1
  1039 ;; Hardware stack levels required when called:    2
  1040 ;; This function calls:
  1041 ;;		Nothing
  1042 ;; This function is called by:
  1043 ;;		_GsensorLoop
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           
  1048                           ;psect for function _SensorTime
  1049  023B                     _SensorTime:	
  1050                           
  1051                           ;sensor.c: 35: if(Fbodysensor.bits.bit_0 == 1)
  1052                           
  1053                           ;incstack = 0
  1054                           ; Regs used in _SensorTime: [wreg+status,2+status,0]
  1055  023B  1C7A               	btfss	_Fbodysensor,0	;volatile
  1056  023C  2A5F               	goto	l7153
  1057                           
  1058                           ;sensor.c: 36: {
  1059                           ;sensor.c: 37: Fbodysensor.bits.bit_5 = 0;
  1060  023D  12FA               	bcf	_Fbodysensor,5	;volatile
  1061                           
  1062                           ;sensor.c: 38: CNTbodyExitTime = 0;
  1063  023E  01AA               	clrf	_CNTbodyExitTime	;volatile
  1064  023F  01AB               	clrf	_CNTbodyExitTime+1	;volatile
  1065                           
  1066                           ;sensor.c: 39: if(FledBits01.bits.bit_2 == 0)
  1067  0240  194D               	btfsc	_FledBits01,2	;volatile
  1068  0241  2A5A               	goto	l3863
  1069                           
  1070                           ;sensor.c: 40: {
  1071                           ;sensor.c: 41: if(++CNTbodyInTime >= 6000)
  1072  0242  0AAC               	incf	_CNTbodyInTime,f	;volatile
  1073  0243  1903               	skipnz
  1074  0244  0AAD               	incf	_CNTbodyInTime+1,f	;volatile
  1075  0245  3017               	movlw	23
  1076  0246  022D               	subwf	_CNTbodyInTime+1,w	;volatile
  1077  0247  3070               	movlw	112
  1078  0248  1903               	skipnz
  1079  0249  022C               	subwf	_CNTbodyInTime,w	;volatile
  1080  024A  1C03               	skipc
  1081  024B  2A52               	goto	l7147
  1082                           
  1083                           ;sensor.c: 42: {
  1084                           ;sensor.c: 43: CNTbodyInTime = 6000;
  1085  024C  3070               	movlw	112
  1086  024D  00AC               	movwf	_CNTbodyInTime	;volatile
  1087  024E  3017               	movlw	23
  1088  024F  00AD               	movwf	_CNTbodyInTime+1	;volatile
  1089                           
  1090                           ;sensor.c: 44: Fbodysensor.bits.bit_3 = 1;
  1091  0250  15FA               	bsf	_Fbodysensor,3	;volatile
  1092                           
  1093                           ;sensor.c: 45: }
  1094  0251  0008               	return
  1095  0252                     l7147:	
  1096                           
  1097                           ;sensor.c: 46: else if(CNTbodyInTime >= 500)
  1098  0252  3001               	movlw	1
  1099  0253  022D               	subwf	_CNTbodyInTime+1,w	;volatile
  1100  0254  30F4               	movlw	244
  1101  0255  1903               	skipnz
  1102  0256  022C               	subwf	_CNTbodyInTime,w	;volatile
  1103  0257  1803               	btfsc	3,0
  1104                           
  1105                           ;sensor.c: 47: {
  1106                           ;sensor.c: 48: Fbodysensor.bits.bit_4 = 1;
  1107  0258  167A               	bsf	_Fbodysensor,4	;volatile
  1108  0259  0008               	return
  1109  025A                     l3863:	
  1110                           
  1111                           ;sensor.c: 51: else
  1112                           ;sensor.c: 52: {
  1113                           ;sensor.c: 53: if(Fbodysensor.bits.bit_4 == 0)
  1114  025A  1A7A               	btfsc	_Fbodysensor,4	;volatile
  1115  025B  0008               	return
  1116                           
  1117                           ;sensor.c: 54: {
  1118                           ;sensor.c: 55: CNTbodyInTime = 0;
  1119  025C  01AC               	clrf	_CNTbodyInTime	;volatile
  1120  025D  01AD               	clrf	_CNTbodyInTime+1	;volatile
  1121                           
  1122                           ;sensor.c: 56: }
  1123                           ;sensor.c: 57: }
  1124                           ;sensor.c: 58: }
  1125  025E  0008               	return
  1126  025F                     l7153:	
  1127                           
  1128                           ;sensor.c: 59: else
  1129                           ;sensor.c: 60: {
  1130                           ;sensor.c: 61: CNTbodyInTime = 0;
  1131  025F  01AC               	clrf	_CNTbodyInTime	;volatile
  1132  0260  01AD               	clrf	_CNTbodyInTime+1	;volatile
  1133                           
  1134                           ;sensor.c: 62: Fbodysensor.bits.bit_4 = 0;
  1135  0261  127A               	bcf	_Fbodysensor,4	;volatile
  1136                           
  1137                           ;sensor.c: 63: Fbodysensor.bits.bit_3 = 0;
  1138  0262  11FA               	bcf	_Fbodysensor,3	;volatile
  1139                           
  1140                           ;sensor.c: 64: if(++CNTbodyExitTime >= 500)
  1141  0263  0AAA               	incf	_CNTbodyExitTime,f	;volatile
  1142  0264  1903               	skipnz
  1143  0265  0AAB               	incf	_CNTbodyExitTime+1,f	;volatile
  1144  0266  3001               	movlw	1
  1145  0267  022B               	subwf	_CNTbodyExitTime+1,w	;volatile
  1146  0268  30F4               	movlw	244
  1147  0269  1903               	skipnz
  1148  026A  022A               	subwf	_CNTbodyExitTime,w	;volatile
  1149  026B  1C03               	skipc
  1150  026C  0008               	return
  1151                           
  1152                           ;sensor.c: 65: {
  1153                           ;sensor.c: 66: CNTbodyExitTime = 500;
  1154  026D  30F4               	movlw	244
  1155  026E  00AA               	movwf	_CNTbodyExitTime	;volatile
  1156  026F  3001               	movlw	1
  1157  0270  00AB               	movwf	_CNTbodyExitTime+1	;volatile
  1158                           
  1159                           ;sensor.c: 67: Fbodysensor.bits.bit_5 = 1;
  1160  0271  16FA               	bsf	_Fbodysensor,5	;volatile
  1161  0272  0008               	return
  1162  0273                     __end_of_SensorTime:	
  1163  0273                     __ptext9:	
  1164 ;; *************** function _SensorControl *****************
  1165 ;; Defined at:
  1166 ;;		line 179 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\sensor.c"
  1167 ;; Parameters:    Size  Location     Type
  1168 ;;		None
  1169 ;; Auto vars:     Size  Location     Type
  1170 ;;		None
  1171 ;; Return value:  Size  Location     Type
  1172 ;;                  1    wreg      void 
  1173 ;; Registers used:
  1174 ;;		wreg
  1175 ;; Tracked objects:
  1176 ;;		On entry : 300/0
  1177 ;;		On exit  : 0/0
  1178 ;;		Unchanged: 0/0
  1179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1180 ;;      Params:         0       0       0       0       0
  1181 ;;      Locals:         0       0       0       0       0
  1182 ;;      Temps:          1       0       0       0       0
  1183 ;;      Totals:         1       0       0       0       0
  1184 ;;Total ram usage:        1 bytes
  1185 ;; Hardware stack levels used:    1
  1186 ;; Hardware stack levels required when called:    2
  1187 ;; This function calls:
  1188 ;;		Nothing
  1189 ;; This function is called by:
  1190 ;;		_GsensorLoop
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           
  1195                           ;psect for function _SensorControl
  1196  0273                     _SensorControl:	
  1197  0273                     l7219:	
  1198                           ;incstack = 0
  1199                           ; Regs used in _SensorControl: [wreg]
  1200                           
  1201                           
  1202                           ;sensor.c: 181: Fbodysensor.bits.bit_1 = 0;
  1203  0273  10FA               	bcf	_Fbodysensor,1	;volatile
  1204                           
  1205                           ;sensor.c: 182: Fbodysensor.bits.bit_2 = 0;
  1206  0274  117A               	bcf	_Fbodysensor,2	;volatile
  1207                           
  1208                           ;sensor.c: 183: if(Fbodysensor.bits.bit_6 != Fbodysensor.bits.bit_0)
  1209  0275  1C7A               	btfss	_Fbodysensor,0	;volatile
  1210  0276  2A79               	goto	u1980
  1211  0277  3001               	movlw	1
  1212  0278  2A7A               	goto	u1982
  1213  0279                     u1980:	
  1214  0279  3000               	movlw	0
  1215  027A                     u1982:	
  1216  027A  00F2               	movwf	??_SensorControl
  1217  027B  1F7A               	btfss	_Fbodysensor,6	;volatile
  1218  027C  2A7F               	goto	u1990
  1219  027D  3001               	movlw	1
  1220  027E  2A80               	goto	u1992
  1221  027F                     u1990:	
  1222  027F  3000               	movlw	0
  1223  0280                     u1992:	
  1224  0280  0672               	xorwf	??_SensorControl,w
  1225  0281  1903               	skipnz
  1226  0282  0008               	return
  1227                           
  1228                           ;sensor.c: 184: {
  1229                           ;sensor.c: 185: if(Fbodysensor.bits.bit_0 == 1)
  1230  0283  1C7A               	btfss	_Fbodysensor,0	;volatile
  1231  0284  2A87               	goto	l3900
  1232                           
  1233                           ;sensor.c: 186: {
  1234                           ;sensor.c: 187: Fbodysensor.bits.bit_1 = 1;
  1235  0285  14FA               	bsf	_Fbodysensor,1	;volatile
  1236                           
  1237                           ;sensor.c: 188: }
  1238  0286  2A88               	goto	l3901
  1239  0287                     l3900:	
  1240                           
  1241                           ;sensor.c: 189: else
  1242                           ;sensor.c: 190: {
  1243                           ;sensor.c: 191: Fbodysensor.bits.bit_2 = 1;
  1244  0287  157A               	bsf	_Fbodysensor,2	;volatile
  1245  0288                     l3901:	
  1246                           
  1247                           ;sensor.c: 192: }
  1248                           ;sensor.c: 193: Fbodysensor.bits.bit_6 = Fbodysensor.bits.bit_0;
  1249  0288  1C7A               	btfss	_Fbodysensor,0	;volatile
  1250  0289  2A8C               	goto	u2020
  1251  028A  177A               	bsf	_Fbodysensor,6	;volatile
  1252  028B  0008               	return
  1253  028C                     u2020:	
  1254  028C  137A               	bcf	_Fbodysensor,6	;volatile
  1255  028D  0008               	return
  1256  028E                     __end_of_SensorControl:	
  1257  028E                     __ptext8:	
  1258 ;; *************** function _SensorJudge *****************
  1259 ;; Defined at:
  1260 ;;		line 73 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\sensor.c"
  1261 ;; Parameters:    Size  Location     Type
  1262 ;;		None
  1263 ;; Auto vars:     Size  Location     Type
  1264 ;;		None
  1265 ;; Return value:  Size  Location     Type
  1266 ;;                  1    wreg      void 
  1267 ;; Registers used:
  1268 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1269 ;; Tracked objects:
  1270 ;;		On entry : 300/0
  1271 ;;		On exit  : 300/0
  1272 ;;		Unchanged: 0/0
  1273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1274 ;;      Params:         0       0       0       0       0
  1275 ;;      Locals:         0       0       0       0       0
  1276 ;;      Temps:          0       0       0       0       0
  1277 ;;      Totals:         0       0       0       0       0
  1278 ;;Total ram usage:        0 bytes
  1279 ;; Hardware stack levels used:    1
  1280 ;; Hardware stack levels required when called:    2
  1281 ;; This function calls:
  1282 ;;		Nothing
  1283 ;; This function is called by:
  1284 ;;		_GsensorLoop
  1285 ;; This function uses a non-reentrant model
  1286 ;;
  1287                           
  1288                           
  1289                           ;psect for function _SensorJudge
  1290  028E                     _SensorJudge:	
  1291                           
  1292                           ;sensor.c: 75: switch (SEQbody)
  1293                           
  1294                           ;incstack = 0
  1295                           ; Regs used in _SensorJudge: [wreg-fsr0h+status,2+status,0]
  1296  028E  2B0B               	goto	l7217
  1297  028F                     l3875:	
  1298                           ;sensor.c: 76: {
  1299                           ;sensor.c: 77: case 0:
  1300                           
  1301                           
  1302                           ;sensor.c: 78: Fbodysensor.bits.bit_0 = 0;
  1303  028F  107A               	bcf	_Fbodysensor,0	;volatile
  1304                           
  1305                           ;sensor.c: 79: FledBits01.bits.bit_2 = 0;
  1306  0290  114D               	bcf	_FledBits01,2	;volatile
  1307                           
  1308                           ;sensor.c: 110: }
  1309  0291  2AA0               	goto	l7167
  1310  0292                     l7179:	
  1311                           
  1312                           ;sensor.c: 111: else
  1313                           ;sensor.c: 112: {
  1314                           ;sensor.c: 113: if(++CNTbody_l >= 6)
  1315  0292  0AB0               	incf	_CNTbody_l,f	;volatile
  1316  0293  1903               	skipnz
  1317  0294  0AB1               	incf	_CNTbody_l+1,f	;volatile
  1318  0295  3000               	movlw	0
  1319  0296  0231               	subwf	_CNTbody_l+1,w	;volatile
  1320  0297  3006               	movlw	6
  1321  0298  1903               	skipnz
  1322  0299  0230               	subwf	_CNTbody_l,w	;volatile
  1323  029A  1C03               	skipc
  1324  029B  2AC2               	goto	l7185
  1325                           
  1326                           ;sensor.c: 114: {
  1327                           ;sensor.c: 115: CNTbody_h = 0;
  1328  029C  01B2               	clrf	_CNTbody_h	;volatile
  1329  029D  01B3               	clrf	_CNTbody_h+1	;volatile
  1330                           
  1331                           ;sensor.c: 116: CNTbody_l = 0;
  1332  029E  01B0               	clrf	_CNTbody_l	;volatile
  1333  029F  01B1               	clrf	_CNTbody_l+1	;volatile
  1334  02A0                     l7167:	
  1335                           
  1336                           ;sensor.c: 80: SEQbody = 1;
  1337  02A0  3001               	movlw	1
  1338  02A1  00C5               	movwf	_SEQbody	;volatile
  1339                           
  1340                           ;sensor.c: 81: break;
  1341  02A2  0008               	return
  1342  02A3                     l3877:	
  1343                           ;sensor.c: 84: case 1:
  1344                           
  1345                           
  1346                           ;sensor.c: 85: Fbodysensor.bits.bit_0 = 0;
  1347  02A3  107A               	bcf	_Fbodysensor,0	;volatile
  1348                           
  1349                           ;sensor.c: 86: FledBits01.bits.bit_2 = 0;
  1350  02A4  114D               	bcf	_FledBits01,2	;volatile
  1351                           
  1352                           ;sensor.c: 87: if(RB1 == 0)
  1353  02A5  1886               	btfsc	6,1	;volatile
  1354  02A6  2AB8               	goto	l7175
  1355                           
  1356                           ;sensor.c: 88: {
  1357                           ;sensor.c: 89: if(++CNTbody_h >= 3)
  1358  02A7  0AB2               	incf	_CNTbody_h,f	;volatile
  1359  02A8  1903               	skipnz
  1360  02A9  0AB3               	incf	_CNTbody_h+1,f	;volatile
  1361  02AA  3000               	movlw	0
  1362  02AB  0233               	subwf	_CNTbody_h+1,w	;volatile
  1363  02AC  3003               	movlw	3
  1364  02AD  1903               	skipnz
  1365  02AE  0232               	subwf	_CNTbody_h,w	;volatile
  1366  02AF  1C03               	skipc
  1367  02B0  0008               	return
  1368                           
  1369                           ;sensor.c: 90: {
  1370                           ;sensor.c: 91: CNTbody_h = 0;
  1371  02B1  01B2               	clrf	_CNTbody_h	;volatile
  1372  02B2  01B3               	clrf	_CNTbody_h+1	;volatile
  1373                           
  1374                           ;sensor.c: 92: CNTbody_l = 0;
  1375  02B3  01B0               	clrf	_CNTbody_l	;volatile
  1376  02B4  01B1               	clrf	_CNTbody_l+1	;volatile
  1377                           
  1378                           ;sensor.c: 93: SEQbody = 2;
  1379  02B5  3002               	movlw	2
  1380  02B6  00C5               	movwf	_SEQbody	;volatile
  1381                           
  1382                           ;sensor.c: 94: break;
  1383  02B7  0008               	return
  1384  02B8                     l7175:	
  1385                           
  1386                           ;sensor.c: 97: else
  1387                           ;sensor.c: 98: {
  1388                           ;sensor.c: 99: CNTbody_h = 0;
  1389  02B8  01B2               	clrf	_CNTbody_h	;volatile
  1390  02B9  01B3               	clrf	_CNTbody_h+1	;volatile
  1391  02BA  0008               	return
  1392  02BB                     l3881:	
  1393                           ;sensor.c: 104: case 2:
  1394                           
  1395                           
  1396                           ;sensor.c: 105: Fbodysensor.bits.bit_0 = 0;
  1397  02BB  107A               	bcf	_Fbodysensor,0	;volatile
  1398                           
  1399                           ;sensor.c: 106: FledBits01.bits.bit_2 = 0;
  1400  02BC  114D               	bcf	_FledBits01,2	;volatile
  1401                           
  1402                           ;sensor.c: 107: if(RB1 == 0)
  1403  02BD  1886               	btfsc	6,1	;volatile
  1404  02BE  2A92               	goto	l7179
  1405                           
  1406                           ;sensor.c: 108: {
  1407                           ;sensor.c: 109: ++CNTbody_h;
  1408  02BF  0AB2               	incf	_CNTbody_h,f	;volatile
  1409  02C0  1903               	skipnz
  1410  02C1  0AB3               	incf	_CNTbody_h+1,f	;volatile
  1411  02C2                     l7185:	
  1412                           
  1413                           ;sensor.c: 119: }
  1414                           ;sensor.c: 120: }
  1415                           ;sensor.c: 121: BufCntAdd = CNTbody_h +CNTbody_l;
  1416  02C2  231D  120A  118A   	fcall	PL8	;call to abstracted procedure
  1417                           
  1418                           ;sensor.c: 122: if(BufCntAdd >= 30)
  1419  02C5  3000               	movlw	0
  1420  02C6  022F               	subwf	_BufCntAdd+1,w	;volatile
  1421  02C7  301E               	movlw	30
  1422  02C8  1903               	skipnz
  1423  02C9  022E               	subwf	_BufCntAdd,w	;volatile
  1424  02CA  1C03               	skipc
  1425  02CB  0008               	return
  1426  02CC                     l7189:	
  1427                           
  1428                           ;sensor.c: 123: {
  1429                           ;sensor.c: 124: SEQbody = 3;
  1430  02CC  3003               	movlw	3
  1431  02CD  00C5               	movwf	_SEQbody	;volatile
  1432                           
  1433                           ;sensor.c: 125: break;
  1434  02CE  0008               	return
  1435  02CF                     l3886:	
  1436                           ;sensor.c: 129: case 3:
  1437                           
  1438                           
  1439                           ;sensor.c: 130: Fbodysensor.bits.bit_0 = 1;
  1440  02CF  147A               	bsf	_Fbodysensor,0	;volatile
  1441                           
  1442                           ;sensor.c: 131: FledBits01.bits.bit_2 = 0;
  1443  02D0  114D               	bcf	_FledBits01,2	;volatile
  1444                           
  1445                           ;sensor.c: 132: if(RB1 == 1)
  1446  02D1  1C86               	btfss	6,1	;volatile
  1447  02D2  2AE4               	goto	l7197
  1448                           
  1449                           ;sensor.c: 133: {
  1450                           ;sensor.c: 134: if(++CNTbody_l >= 3)
  1451  02D3  0AB0               	incf	_CNTbody_l,f	;volatile
  1452  02D4  1903               	skipnz
  1453  02D5  0AB1               	incf	_CNTbody_l+1,f	;volatile
  1454  02D6  3000               	movlw	0
  1455  02D7  0231               	subwf	_CNTbody_l+1,w	;volatile
  1456  02D8  3003               	movlw	3
  1457  02D9  1903               	skipnz
  1458  02DA  0230               	subwf	_CNTbody_l,w	;volatile
  1459  02DB  1C03               	skipc
  1460  02DC  0008               	return
  1461                           
  1462                           ;sensor.c: 135: {
  1463                           ;sensor.c: 136: CNTbody_h = 0;
  1464  02DD  01B2               	clrf	_CNTbody_h	;volatile
  1465  02DE  01B3               	clrf	_CNTbody_h+1	;volatile
  1466                           
  1467                           ;sensor.c: 137: CNTbody_l = 0;
  1468  02DF  01B0               	clrf	_CNTbody_l	;volatile
  1469  02E0  01B1               	clrf	_CNTbody_l+1	;volatile
  1470                           
  1471                           ;sensor.c: 138: SEQbody = 4;
  1472  02E1  3004               	movlw	4
  1473  02E2  00C5               	movwf	_SEQbody	;volatile
  1474                           
  1475                           ;sensor.c: 139: break;
  1476  02E3  0008               	return
  1477  02E4                     l7197:	
  1478                           
  1479                           ;sensor.c: 142: else
  1480                           ;sensor.c: 143: {
  1481                           ;sensor.c: 144: CNTbody_l = 0;
  1482  02E4  01B0               	clrf	_CNTbody_l	;volatile
  1483  02E5  01B1               	clrf	_CNTbody_l+1	;volatile
  1484  02E6  0008               	return
  1485  02E7                     l3890:	
  1486                           ;sensor.c: 148: case 4:
  1487                           
  1488                           
  1489                           ;sensor.c: 149: Fbodysensor.bits.bit_0 = 1;
  1490  02E7  147A               	bsf	_Fbodysensor,0	;volatile
  1491                           
  1492                           ;sensor.c: 150: FledBits01.bits.bit_2 = 1;
  1493  02E8  154D               	bsf	_FledBits01,2	;volatile
  1494                           
  1495                           ;sensor.c: 151: if(RB1 == 0)
  1496  02E9  1886               	btfsc	6,1	;volatile
  1497  02EA  2AFA               	goto	l7205
  1498                           
  1499                           ;sensor.c: 152: {
  1500                           ;sensor.c: 153: if(++CNTbody_h >= 6)
  1501  02EB  0AB2               	incf	_CNTbody_h,f	;volatile
  1502  02EC  1903               	skipnz
  1503  02ED  0AB3               	incf	_CNTbody_h+1,f	;volatile
  1504  02EE  3000               	movlw	0
  1505  02EF  0233               	subwf	_CNTbody_h+1,w	;volatile
  1506  02F0  3006               	movlw	6
  1507  02F1  1903               	skipnz
  1508  02F2  0232               	subwf	_CNTbody_h,w	;volatile
  1509  02F3  1C03               	skipc
  1510  02F4  2AFD               	goto	l7207
  1511                           
  1512                           ;sensor.c: 154: {
  1513                           ;sensor.c: 155: CNTbody_h = 0;
  1514  02F5  01B2               	clrf	_CNTbody_h	;volatile
  1515  02F6  01B3               	clrf	_CNTbody_h+1	;volatile
  1516                           
  1517                           ;sensor.c: 156: CNTbody_l = 0;
  1518  02F7  01B0               	clrf	_CNTbody_l	;volatile
  1519  02F8  01B1               	clrf	_CNTbody_l+1	;volatile
  1520  02F9  2ACC               	goto	l7189
  1521  02FA                     l7205:	
  1522                           
  1523                           ;sensor.c: 161: else
  1524                           ;sensor.c: 162: {
  1525                           ;sensor.c: 163: ++CNTbody_l;
  1526  02FA  0AB0               	incf	_CNTbody_l,f	;volatile
  1527  02FB  1903               	skipnz
  1528  02FC  0AB1               	incf	_CNTbody_l+1,f	;volatile
  1529  02FD                     l7207:	
  1530                           
  1531                           ;sensor.c: 164: }
  1532                           ;sensor.c: 165: BufCntAdd = CNTbody_h +CNTbody_l;
  1533  02FD  231D  120A  118A   	fcall	PL8	;call to abstracted procedure
  1534                           
  1535                           ;sensor.c: 166: if(BufCntAdd >= 500)
  1536  0300  3001               	movlw	1
  1537  0301  022F               	subwf	_BufCntAdd+1,w	;volatile
  1538  0302  30F4               	movlw	244
  1539  0303  1903               	skipnz
  1540  0304  022E               	subwf	_BufCntAdd,w	;volatile
  1541  0305  1C03               	skipc
  1542  0306  0008               	return
  1543  0307  2AA0               	goto	l7167
  1544  0308                     l7211:	
  1545                           
  1546                           ;sensor.c: 173: SEQbody = 0;
  1547  0308  01C5               	clrf	_SEQbody	;volatile
  1548                           
  1549                           ;sensor.c: 174: FledBits01.bits.bit_2 = 0;
  1550  0309  114D               	bcf	_FledBits01,2	;volatile
  1551                           
  1552                           ;sensor.c: 175: break;
  1553  030A  0008               	return
  1554  030B                     l7217:	
  1555  030B  0845               	movf	_SEQbody,w	;volatile
  1556                           
  1557                           ; Switch size 1, requested type "space"
  1558                           ; Number of cases is 5, Range of values is 0 to 4
  1559                           ; switch strategies available:
  1560                           ; Name         Instructions Cycles
  1561                           ; simple_byte           16     9 (average)
  1562                           ; direct_byte           23     8 (fixed)
  1563                           ; jumptable            260     6 (fixed)
  1564                           ;	Chosen strategy is simple_byte
  1565  030C  3A00               	xorlw	0	; case 0
  1566  030D  1903               	skipnz
  1567  030E  2A8F               	goto	l3875
  1568  030F  3A01               	xorlw	1	; case 1
  1569  0310  1903               	skipnz
  1570  0311  2AA3               	goto	l3877
  1571  0312  3A03               	xorlw	3	; case 2
  1572  0313  1903               	skipnz
  1573  0314  2ABB               	goto	l3881
  1574  0315  3A01               	xorlw	1	; case 3
  1575  0316  1903               	skipnz
  1576  0317  2ACF               	goto	l3886
  1577  0318  3A07               	xorlw	7	; case 4
  1578  0319  1903               	skipnz
  1579  031A  2AE7               	goto	l3890
  1580  031B  2B08               	goto	l7211
  1581  031C  0008               	return
  1582  031D                     __end_of_SensorJudge:	
  1583  031D                     PL8:	
  1584  031D  0830               	movf	_CNTbody_l,w	;volatile
  1585  031E  0732               	addwf	_CNTbody_h,w	;volatile
  1586  031F  00AE               	movwf	_BufCntAdd	;volatile
  1587  0320  0831               	movf	_CNTbody_l+1,w	;volatile
  1588  0321  1803               	skipnc
  1589  0322  0A31               	incf	_CNTbody_l+1,w	;volatile
  1590  0323  0733               	addwf	_CNTbody_h+1,w	;volatile
  1591  0324  00AF               	movwf	_BufCntAdd+1	;volatile
  1592  0325  0008               	return
  1593  0326                     __end_ofPL8:	
  1594                           
  1595                           	psect	text10
  1596  0326                     __ptext10:	
  1597 ;; *************** function _GledLoop *****************
  1598 ;; Defined at:
  1599 ;;		line 16 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\light.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;		None
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;		None
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      void 
  1606 ;; Registers used:
  1607 ;;		wreg, status,2, status,0, pclath, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 300/0
  1610 ;;		On exit  : 300/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1613 ;;      Params:         0       0       0       0       0
  1614 ;;      Locals:         0       0       0       0       0
  1615 ;;      Temps:          0       0       0       0       0
  1616 ;;      Totals:         0       0       0       0       0
  1617 ;;Total ram usage:        0 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    3
  1620 ;; This function calls:
  1621 ;;		_LED_Con
  1622 ;;		_LED_Judge
  1623 ;;		_LED_Key
  1624 ;;		_LED_Time
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           
  1631                           ;psect for function _GledLoop
  1632  0326                     _GledLoop:	
  1633                           
  1634                           ;light.c: 18: LED_Time();
  1635                           
  1636                           ;incstack = 0
  1637                           ; Regs used in _GledLoop: [wreg+status,2+status,0+pclath+cstack]
  1638  0326  2331  120A  118A   	fcall	_LED_Time
  1639                           
  1640                           ;light.c: 19: LED_Key();
  1641  0329  2330  120A  118A   	fcall	_LED_Key
  1642                           
  1643                           ;light.c: 20: LED_Judge();
  1644  032C  23E0  120A  118A   	fcall	_LED_Judge
  1645                           
  1646                           ;light.c: 21: LED_Con();
  1647  032F  2B34               	ljmp	l6927
  1648  0330                     __end_of_GledLoop:	
  1649  0330                     __ptext12:	
  1650 ;; *************** function _LED_Key *****************
  1651 ;; Defined at:
  1652 ;;		line 24 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\light.c"
  1653 ;; Parameters:    Size  Location     Type
  1654 ;;		None
  1655 ;; Auto vars:     Size  Location     Type
  1656 ;;		None
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  1    wreg      void 
  1659 ;; Registers used:
  1660 ;;		None
  1661 ;; Tracked objects:
  1662 ;;		On entry : 300/0
  1663 ;;		On exit  : 300/0
  1664 ;;		Unchanged: 300/0
  1665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1666 ;;      Params:         0       0       0       0       0
  1667 ;;      Locals:         0       0       0       0       0
  1668 ;;      Temps:          0       0       0       0       0
  1669 ;;      Totals:         0       0       0       0       0
  1670 ;;Total ram usage:        0 bytes
  1671 ;; Hardware stack levels used:    1
  1672 ;; Hardware stack levels required when called:    2
  1673 ;; This function calls:
  1674 ;;		Nothing
  1675 ;; This function is called by:
  1676 ;;		_GledLoop
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           
  1681                           ;psect for function _LED_Key
  1682  0330                     _LED_Key:	
  1683                           
  1684                           ;incstack = 0
  1685                           ; Regs used in _LED_Key: []
  1686  0330  0008               	return
  1687  0331                     __end_of_LED_Key:	
  1688  0331                     __ptext11:	
  1689 ;; *************** function _LED_Time *****************
  1690 ;; Defined at:
  1691 ;;		line 45 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\light.c"
  1692 ;; Parameters:    Size  Location     Type
  1693 ;;		None
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;		None
  1696 ;; Return value:  Size  Location     Type
  1697 ;;                  1    wreg      void 
  1698 ;; Registers used:
  1699 ;;		None
  1700 ;; Tracked objects:
  1701 ;;		On entry : 300/0
  1702 ;;		On exit  : 300/0
  1703 ;;		Unchanged: 0/0
  1704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1705 ;;      Params:         0       0       0       0       0
  1706 ;;      Locals:         0       0       0       0       0
  1707 ;;      Temps:          0       0       0       0       0
  1708 ;;      Totals:         0       0       0       0       0
  1709 ;;Total ram usage:        0 bytes
  1710 ;; Hardware stack levels used:    1
  1711 ;; Hardware stack levels required when called:    2
  1712 ;; This function calls:
  1713 ;;		Nothing
  1714 ;; This function is called by:
  1715 ;;		_GledLoop
  1716 ;; This function uses a non-reentrant model
  1717 ;;
  1718                           
  1719                           
  1720                           ;psect for function _LED_Time
  1721  0331                     _LED_Time:	
  1722                           
  1723                           ;light.c: 47: if(Fsys1m.bits.bit_0 == 1)
  1724                           
  1725                           ;incstack = 0
  1726                           ; Regs used in _LED_Time: []
  1727  0331  184E               	btfsc	_Fsys1m,0	;volatile
  1728                           
  1729                           ;light.c: 48: {
  1730                           ;light.c: 49: Fsys1m.bits.bit_0 = 0;
  1731  0332  104E               	bcf	_Fsys1m,0	;volatile
  1732  0333  0008               	return
  1733  0334                     __end_of_LED_Time:	
  1734  0334                     __ptext14:	
  1735 ;; *************** function _LED_Con *****************
  1736 ;; Defined at:
  1737 ;;		line 84 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\light.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;		None
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;		None
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      void 
  1744 ;; Registers used:
  1745 ;;		wreg, status,2, status,0
  1746 ;; Tracked objects:
  1747 ;;		On entry : 300/0
  1748 ;;		On exit  : 300/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1751 ;;      Params:         0       0       0       0       0
  1752 ;;      Locals:         0       0       0       0       0
  1753 ;;      Temps:          0       0       0       0       0
  1754 ;;      Totals:         0       0       0       0       0
  1755 ;;Total ram usage:        0 bytes
  1756 ;; Hardware stack levels used:    1
  1757 ;; Hardware stack levels required when called:    2
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_GledLoop
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           
  1766                           ;psect for function _LED_Con
  1767  0334                     _LED_Con:	
  1768  0334                     l6927:	
  1769                           ;incstack = 0
  1770                           ; Regs used in _LED_Con: [wreg+status,2+status,0]
  1771                           
  1772                           
  1773                           ;light.c: 86: RA5 = FledBits01.bits.bit_0;
  1774  0334  1C4D               	btfss	_FledBits01,0	;volatile
  1775  0335  2B3A               	goto	u1360
  1776  0336  1283               	bcf	3,5	;RP0=0, select bank0
  1777  0337  1303               	bcf	3,6	;RP1=0, select bank0
  1778  0338  1685               	bsf	5,5	;volatile
  1779  0339  2B3D               	goto	u1374
  1780  033A                     u1360:	
  1781  033A  1283               	bcf	3,5	;RP0=0, select bank0
  1782  033B  1303               	bcf	3,6	;RP1=0, select bank0
  1783  033C  1285               	bcf	5,5	;volatile
  1784  033D                     u1374:	
  1785                           
  1786                           ;light.c: 88: if (FledBits01.bits.bit_0 == 1)
  1787  033D  1C4D               	btfss	_FledBits01,0	;volatile
  1788  033E  2BD7               	goto	l7015
  1789                           
  1790                           ;light.c: 89: {
  1791                           ;light.c: 90: if (FledBits01.bits.bit_3 == 0)
  1792  033F  19CD               	btfsc	_FledBits01,3	;volatile
  1793  0340  2B8D               	goto	l6971
  1794                           
  1795                           ;light.c: 91: {
  1796                           ;light.c: 92: if (CNTbreath_Led2 >= 80)
  1797  0341  3000               	movlw	0
  1798  0342  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  1799  0343  3050               	movlw	80
  1800  0344  1903               	skipnz
  1801  0345  023C               	subwf	_CNTbreath_Led2,w	;volatile
  1802  0346  1C03               	skipc
  1803  0347  2B59               	goto	l6941
  1804                           
  1805                           ;light.c: 93: {
  1806                           ;light.c: 94: CNTbreath_Led2 = 80;
  1807  0348  3050               	movlw	80
  1808  0349  00BC               	movwf	_CNTbreath_Led2	;volatile
  1809  034A  01BD               	clrf	_CNTbreath_Led2+1	;volatile
  1810                           
  1811                           ;light.c: 95: if (++CNTbreath_Led3 > 10)
  1812  034B  0ABA               	incf	_CNTbreath_Led3,f	;volatile
  1813  034C  1903               	skipnz
  1814  034D  0ABB               	incf	_CNTbreath_Led3+1,f	;volatile
  1815  034E  3000               	movlw	0
  1816  034F  023B               	subwf	_CNTbreath_Led3+1,w	;volatile
  1817  0350  300B               	movlw	11
  1818  0351  1903               	skipnz
  1819  0352  023A               	subwf	_CNTbreath_Led3,w	;volatile
  1820  0353  1C03               	skipc
  1821  0354  0008               	return
  1822                           
  1823                           ;light.c: 96: {
  1824                           ;light.c: 97: FledBits01.bits.bit_3 = 1;
  1825  0355  15CD               	bsf	_FledBits01,3	;volatile
  1826                           
  1827                           ;light.c: 98: CNTbreath_Led3 = 0;
  1828  0356  01BA               	clrf	_CNTbreath_Led3	;volatile
  1829  0357  01BB               	clrf	_CNTbreath_Led3+1	;volatile
  1830  0358  0008               	return
  1831  0359                     l6941:	
  1832                           
  1833                           ;light.c: 101: else if (CNTbreath_Led2 > 45)
  1834  0359  3000               	movlw	0
  1835  035A  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  1836  035B  302E               	movlw	46
  1837  035C  1903               	skipnz
  1838  035D  023C               	subwf	_CNTbreath_Led2,w	;volatile
  1839  035E  1C03               	skipc
  1840  035F  2B78               	goto	l6949
  1841                           
  1842                           ;light.c: 102: {
  1843                           ;light.c: 103: if (++CNTbreath_Led1 >= 3)
  1844  0360  23EE  120A  118A   	fcall	PL12	;call to abstracted procedure
  1845  0363  2B6E               	goto	L3
  1846  0364                     l6951:	
  1847                           
  1848                           ;light.c: 110: {
  1849                           ;light.c: 111: if (++CNTbreath_Led1 >= 8)
  1850  0364  23E8  120A  118A   	fcall	PL10	;call to abstracted procedure
  1851  0367  2B6E               	goto	L3
  1852  0368                     l6959:	
  1853                           
  1854                           ;light.c: 118: {
  1855                           ;light.c: 119: if (++CNTbreath_Led1 >= 5)
  1856  0368  0ABE               	incf	_CNTbreath_Led1,f	;volatile
  1857  0369  1903               	skipnz
  1858  036A  0ABF               	incf	_CNTbreath_Led1+1,f	;volatile
  1859  036B  3000               	movlw	0
  1860  036C  023F               	subwf	_CNTbreath_Led1+1,w	;volatile
  1861  036D  3005               	movlw	5
  1862  036E                     L3:	
  1863  036E  1903               	skipnz
  1864  036F  023E               	subwf	_CNTbreath_Led1,w	;volatile
  1865  0370  1C03               	skipc
  1866  0371  0008               	return
  1867                           
  1868                           ;light.c: 104: {
  1869                           ;light.c: 105: CNTbreath_Led1 = 0;
  1870  0372  01BE               	clrf	_CNTbreath_Led1	;volatile
  1871  0373  01BF               	clrf	_CNTbreath_Led1+1	;volatile
  1872                           
  1873                           ;light.c: 106: CNTbreath_Led2++;
  1874  0374  0ABC               	incf	_CNTbreath_Led2,f	;volatile
  1875  0375  1903               	skipnz
  1876  0376  0ABD               	incf	_CNTbreath_Led2+1,f	;volatile
  1877  0377  0008               	return
  1878  0378                     l6949:	
  1879                           
  1880                           ;light.c: 109: else if (CNTbreath_Led2 > 30)
  1881  0378  3000               	movlw	0
  1882  0379  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  1883  037A  301F               	movlw	31
  1884  037B  1903               	skipnz
  1885  037C  023C               	subwf	_CNTbreath_Led2,w	;volatile
  1886  037D  1803               	btfsc	3,0
  1887  037E  2B64               	goto	l6951
  1888                           
  1889                           ;light.c: 117: else if (CNTbreath_Led2 > 10)
  1890  037F  3000               	movlw	0
  1891  0380  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  1892  0381  300B               	movlw	11
  1893  0382  1903               	skipnz
  1894  0383  023C               	subwf	_CNTbreath_Led2,w	;volatile
  1895  0384  1803               	btfsc	3,0
  1896  0385  2B68               	goto	l6959
  1897                           
  1898                           ;light.c: 125: else
  1899                           ;light.c: 126: {
  1900                           ;light.c: 127: if (++CNTbreath_Led1 >= 11)
  1901  0386  0ABE               	incf	_CNTbreath_Led1,f	;volatile
  1902  0387  1903               	skipnz
  1903  0388  0ABF               	incf	_CNTbreath_Led1+1,f	;volatile
  1904  0389  3000               	movlw	0
  1905  038A  023F               	subwf	_CNTbreath_Led1+1,w	;volatile
  1906  038B  300B               	movlw	11
  1907  038C  2B6E               	goto	L3
  1908  038D                     l6971:	
  1909                           ;light.c: 131: }
  1910                           ;light.c: 132: }
  1911                           ;light.c: 133: }
  1912                           
  1913                           
  1914                           ;light.c: 134: else
  1915                           ;light.c: 135: {
  1916                           ;light.c: 136: if (CNTbreath_Led2 < 5)
  1917  038D  3000               	movlw	0
  1918  038E  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  1919  038F  3005               	movlw	5
  1920  0390  1903               	skipnz
  1921  0391  023C               	subwf	_CNTbreath_Led2,w	;volatile
  1922  0392  1803               	skipnc
  1923  0393  2B99               	goto	l6977
  1924                           
  1925                           ;light.c: 137: {
  1926                           ;light.c: 138: CNTbreath_Led2 = 5;
  1927  0394  3005               	movlw	5
  1928  0395  00BC               	movwf	_CNTbreath_Led2	;volatile
  1929  0396  01BD               	clrf	_CNTbreath_Led2+1	;volatile
  1930                           
  1931                           ;light.c: 139: FledBits01.bits.bit_3 = 0;
  1932  0397  11CD               	bcf	_FledBits01,3	;volatile
  1933                           
  1934                           ;light.c: 140: }
  1935  0398  0008               	return
  1936  0399                     l6977:	
  1937                           
  1938                           ;light.c: 141: else if (CNTbreath_Led2 < 10)
  1939  0399  3000               	movlw	0
  1940  039A  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  1941  039B  300A               	movlw	10
  1942  039C  1903               	skipnz
  1943  039D  023C               	subwf	_CNTbreath_Led2,w	;volatile
  1944  039E  1803               	skipnc
  1945  039F  2BBE               	goto	l6985
  1946  03A0                     l6987:	
  1947                           ;light.c: 142: {
  1948                           ;light.c: 143: if (++CNTbreath_Led1 >= 6)
  1949                           
  1950                           
  1951                           ;light.c: 150: {
  1952                           ;light.c: 151: if (++CNTbreath_Led1 >= 6)
  1953  03A0  0ABE               	incf	_CNTbreath_Led1,f	;volatile
  1954  03A1  1903               	skipnz
  1955  03A2  0ABF               	incf	_CNTbreath_Led1+1,f	;volatile
  1956  03A3  3000               	movlw	0
  1957  03A4  023F               	subwf	_CNTbreath_Led1+1,w	;volatile
  1958  03A5  3006               	movlw	6
  1959  03A6  2BB1               	goto	L1
  1960  03A7                     l6995:	
  1961                           
  1962                           ;light.c: 158: {
  1963                           ;light.c: 159: if (++CNTbreath_Led1 >= 8)
  1964  03A7  23E8  120A  118A   	fcall	PL10	;call to abstracted procedure
  1965  03AA  2BB1               	goto	L1
  1966  03AB                     l7003:	
  1967                           
  1968                           ;light.c: 166: {
  1969                           ;light.c: 167: if (++CNTbreath_Led1 >= 4)
  1970  03AB  0ABE               	incf	_CNTbreath_Led1,f	;volatile
  1971  03AC  1903               	skipnz
  1972  03AD  0ABF               	incf	_CNTbreath_Led1+1,f	;volatile
  1973  03AE  3000               	movlw	0
  1974  03AF  023F               	subwf	_CNTbreath_Led1+1,w	;volatile
  1975  03B0  3004               	movlw	4
  1976  03B1                     L1:	
  1977  03B1  1903               	skipnz
  1978  03B2  023E               	subwf	_CNTbreath_Led1,w	;volatile
  1979  03B3  1C03               	skipc
  1980  03B4  0008               	return
  1981                           
  1982                           ;light.c: 144: {
  1983                           ;light.c: 145: CNTbreath_Led1 = 0;
  1984  03B5  01BE               	clrf	_CNTbreath_Led1	;volatile
  1985  03B6  01BF               	clrf	_CNTbreath_Led1+1	;volatile
  1986                           
  1987                           ;light.c: 146: CNTbreath_Led2--;
  1988  03B7  3001               	movlw	1
  1989  03B8  02BC               	subwf	_CNTbreath_Led2,f	;volatile
  1990  03B9  3000               	movlw	0
  1991  03BA  1C03               	skipc
  1992  03BB  03BD               	decf	_CNTbreath_Led2+1,f	;volatile
  1993  03BC  02BD               	subwf	_CNTbreath_Led2+1,f	;volatile
  1994  03BD  0008               	return
  1995  03BE                     l6985:	
  1996                           
  1997                           ;light.c: 149: else if (CNTbreath_Led2 < 30)
  1998  03BE  3000               	movlw	0
  1999  03BF  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  2000  03C0  301E               	movlw	30
  2001  03C1  1903               	skipnz
  2002  03C2  023C               	subwf	_CNTbreath_Led2,w	;volatile
  2003  03C3  1C03               	btfss	3,0
  2004  03C4  2BA0               	goto	l6987
  2005                           
  2006                           ;light.c: 157: else if (CNTbreath_Led2 < 40)
  2007  03C5  3000               	movlw	0
  2008  03C6  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  2009  03C7  3028               	movlw	40
  2010  03C8  1903               	skipnz
  2011  03C9  023C               	subwf	_CNTbreath_Led2,w	;volatile
  2012  03CA  1C03               	btfss	3,0
  2013  03CB  2BA7               	goto	l6995
  2014                           
  2015                           ;light.c: 165: else if (CNTbreath_Led2 < 60)
  2016  03CC  3000               	movlw	0
  2017  03CD  023D               	subwf	_CNTbreath_Led2+1,w	;volatile
  2018  03CE  303C               	movlw	60
  2019  03CF  1903               	skipnz
  2020  03D0  023C               	subwf	_CNTbreath_Led2,w	;volatile
  2021  03D1  1C03               	btfss	3,0
  2022  03D2  2BAB               	goto	l7003
  2023                           
  2024                           ;light.c: 173: else
  2025                           ;light.c: 174: {
  2026                           ;light.c: 175: if (++CNTbreath_Led1 >= 3)
  2027  03D3  23EE  120A  118A   	fcall	PL12	;call to abstracted procedure
  2028  03D6  2BB1               	goto	L1
  2029  03D7                     l7015:	
  2030                           
  2031                           ;light.c: 183: else
  2032                           ;light.c: 184: {
  2033                           ;light.c: 185: CNTbreath_Led1 = 0;
  2034  03D7  01BE               	clrf	_CNTbreath_Led1	;volatile
  2035  03D8  01BF               	clrf	_CNTbreath_Led1+1	;volatile
  2036                           
  2037                           ;light.c: 186: CNTbreath_Led2 = 0;
  2038  03D9  01BC               	clrf	_CNTbreath_Led2	;volatile
  2039  03DA  01BD               	clrf	_CNTbreath_Led2+1	;volatile
  2040                           
  2041                           ;light.c: 187: CNTbreath_Led3 = 0;
  2042  03DB  01BA               	clrf	_CNTbreath_Led3	;volatile
  2043  03DC  01BB               	clrf	_CNTbreath_Led3+1	;volatile
  2044                           
  2045                           ;light.c: 188: FledBits01.bits.bit_3 = 0;
  2046  03DD  11CD               	bcf	_FledBits01,3	;volatile
  2047                           
  2048                           ;light.c: 189: RA5 = 0;
  2049  03DE  1285               	bcf	5,5	;volatile
  2050  03DF  0008               	return
  2051  03E0                     __end_of_LED_Con:	
  2052  03E0                     __ptext13:	
  2053 ;; *************** function _LED_Judge *****************
  2054 ;; Defined at:
  2055 ;;		line 53 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\light.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;		None
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;		None
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  1    wreg      void 
  2062 ;; Registers used:
  2063 ;;		None
  2064 ;; Tracked objects:
  2065 ;;		On entry : 300/0
  2066 ;;		On exit  : 300/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2069 ;;      Params:         0       0       0       0       0
  2070 ;;      Locals:         0       0       0       0       0
  2071 ;;      Temps:          0       0       0       0       0
  2072 ;;      Totals:         0       0       0       0       0
  2073 ;;Total ram usage:        0 bytes
  2074 ;; Hardware stack levels used:    1
  2075 ;; Hardware stack levels required when called:    2
  2076 ;; This function calls:
  2077 ;;		Nothing
  2078 ;; This function is called by:
  2079 ;;		_GledLoop
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           
  2084                           ;psect for function _LED_Judge
  2085  03E0                     _LED_Judge:	
  2086                           
  2087                           ;light.c: 55: if(Fbodysensor.bits.bit_0 == 1)
  2088                           
  2089                           ;incstack = 0
  2090                           ; Regs used in _LED_Judge: []
  2091  03E0  1C7A               	btfss	_Fbodysensor,0	;volatile
  2092  03E1  2BE6               	goto	l6925
  2093                           
  2094                           ;light.c: 56: {
  2095                           ;light.c: 57: FledBits01.bits.bit_0 = 1;
  2096  03E2  144D               	bsf	_FledBits01,0	;volatile
  2097                           
  2098                           ;light.c: 58: if(Fbodysensor.bits.bit_4 == 0)
  2099  03E3  1E7A               	btfss	_Fbodysensor,4	;volatile
  2100                           
  2101                           ;light.c: 59: {
  2102                           ;light.c: 60: if(FledBits01.bits.bit_2 == 1)
  2103  03E4  1D4D               	btfss	_FledBits01,2	;volatile
  2104  03E5  0008               	return
  2105  03E6                     l6925:	
  2106                           
  2107                           ;light.c: 61: {
  2108                           ;light.c: 62: FledBits01.bits.bit_0 = 0;
  2109  03E6  104D               	bcf	_FledBits01,0	;volatile
  2110  03E7  0008               	return
  2111  03E8                     __end_of_LED_Judge:	
  2112  03E8                     PL10:	
  2113  03E8  0ABE               	incf	_CNTbreath_Led1,f	;volatile
  2114  03E9  1903               	skipnz
  2115  03EA  0ABF               	incf	_CNTbreath_Led1+1,f	;volatile
  2116  03EB  3000               	movlw	0
  2117  03EC  023F               	subwf	_CNTbreath_Led1+1,w	;volatile
  2118  03ED  3408               	retlw	8
  2119  03EE                     __end_ofPL10:	
  2120  03EE                     PL12:	
  2121  03EE  0ABE               	incf	_CNTbreath_Led1,f	;volatile
  2122  03EF  1903               	skipnz
  2123  03F0  0ABF               	incf	_CNTbreath_Led1+1,f	;volatile
  2124  03F1  3000               	movlw	0
  2125  03F2  023F               	subwf	_CNTbreath_Led1+1,w	;volatile
  2126  03F3  3403               	retlw	3
  2127  03F4                     __end_ofPL12:	
  2128                           
  2129                           	psect	text15
  2130  001C                     __ptext15:	
  2131 ;; *************** function _GflushLoop *****************
  2132 ;; Defined at:
  2133 ;;		line 15 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\flush.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;		None
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;		None
  2138 ;; Return value:  Size  Location     Type
  2139 ;;                  1    wreg      void 
  2140 ;; Registers used:
  2141 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2142 ;; Tracked objects:
  2143 ;;		On entry : 300/0
  2144 ;;		On exit  : 300/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2147 ;;      Params:         0       0       0       0       0
  2148 ;;      Locals:         0       0       0       0       0
  2149 ;;      Temps:          0       0       0       0       0
  2150 ;;      Totals:         0       0       0       0       0
  2151 ;;Total ram usage:        0 bytes
  2152 ;; Hardware stack levels used:    1
  2153 ;; Hardware stack levels required when called:    5
  2154 ;; This function calls:
  2155 ;;		_FlushCon
  2156 ;;		_FlushJudge
  2157 ;;		_FlushTime
  2158 ;; This function is called by:
  2159 ;;		_main
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           
  2164                           ;psect for function _GflushLoop
  2165  001C                     _GflushLoop:	
  2166                           
  2167                           ;flush.c: 17: FlushTime();
  2168                           
  2169                           ;incstack = 0
  2170                           ; Regs used in _GflushLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2171  001C  2023  120A  118A   	fcall	_FlushTime
  2172                           
  2173                           ;flush.c: 18: FlushJudge();
  2174  001F  20EC  120A  118A   	fcall	_FlushJudge
  2175                           
  2176                           ;flush.c: 19: FlushCon();
  2177  0022  2824               	ljmp	l7053
  2178  0023                     __end_of_GflushLoop:	
  2179  0023                     __ptext16:	
  2180 ;; *************** function _FlushTime *****************
  2181 ;; Defined at:
  2182 ;;		line 22 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\flush.c"
  2183 ;; Parameters:    Size  Location     Type
  2184 ;;		None
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;		None
  2187 ;; Return value:  Size  Location     Type
  2188 ;;                  1    wreg      void 
  2189 ;; Registers used:
  2190 ;;		None
  2191 ;; Tracked objects:
  2192 ;;		On entry : 300/0
  2193 ;;		On exit  : 300/0
  2194 ;;		Unchanged: 300/0
  2195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2196 ;;      Params:         0       0       0       0       0
  2197 ;;      Locals:         0       0       0       0       0
  2198 ;;      Temps:          0       0       0       0       0
  2199 ;;      Totals:         0       0       0       0       0
  2200 ;;Total ram usage:        0 bytes
  2201 ;; Hardware stack levels used:    1
  2202 ;; Hardware stack levels required when called:    2
  2203 ;; This function calls:
  2204 ;;		Nothing
  2205 ;; This function is called by:
  2206 ;;		_GflushLoop
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           
  2211                           ;psect for function _FlushTime
  2212  0023                     _FlushTime:	
  2213                           
  2214                           ;incstack = 0
  2215                           ; Regs used in _FlushTime: []
  2216  0023  0008               	return
  2217  0024                     __end_of_FlushTime:	
  2218  0024                     __ptext21:	
  2219 ;; *************** function _FlushCon *****************
  2220 ;; Defined at:
  2221 ;;		line 107 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\flush.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;		None
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;		None
  2226 ;; Return value:  Size  Location     Type
  2227 ;;                  1    wreg      void 
  2228 ;; Registers used:
  2229 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2230 ;; Tracked objects:
  2231 ;;		On entry : 300/0
  2232 ;;		On exit  : 300/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2235 ;;      Params:         0       0       0       0       0
  2236 ;;      Locals:         0       0       0       0       0
  2237 ;;      Temps:          0       0       0       0       0
  2238 ;;      Totals:         0       0       0       0       0
  2239 ;;Total ram usage:        0 bytes
  2240 ;; Hardware stack levels used:    1
  2241 ;; Hardware stack levels required when called:    2
  2242 ;; This function calls:
  2243 ;;		Nothing
  2244 ;; This function is called by:
  2245 ;;		_GflushLoop
  2246 ;; This function uses a non-reentrant model
  2247 ;;
  2248                           
  2249                           
  2250                           ;psect for function _FlushCon
  2251  0024                     _FlushCon:	
  2252  0024                     l7053:	
  2253                           ;incstack = 0
  2254                           ; Regs used in _FlushCon: [wreg-fsr0h+status,2+status,0]
  2255                           
  2256                           
  2257                           ;flush.c: 109: switch (SEQflsuh)
  2258  0024  28C8               	goto	l7131
  2259  0025                     l2910:	
  2260                           ;flush.c: 110: {
  2261                           ;flush.c: 111: case FLUSH_INIT_0:
  2262                           
  2263                           
  2264                           ;flush.c: 112: Fflush1.bits.bit_6 = 0;
  2265  0025  1348               	bcf	_Fflush1,6	;volatile
  2266                           
  2267                           ;flush.c: 113: RA2 = 0;
  2268  0026  1105               	bcf	5,2	;volatile
  2269                           
  2270                           ;flush.c: 114: RA4 = 0;
  2271  0027  1205               	bcf	5,4	;volatile
  2272                           
  2273                           ;flush.c: 115: RA1 = 0;
  2274  0028  1085               	bcf	5,1	;volatile
  2275                           
  2276                           ;flush.c: 116: if((Fflush1.bits.bit_1 == 1) || (Fflush1.bits.bit_3 == 1))
  2277  0029  18C8               	btfsc	_Fflush1,1	;volatile
  2278  002A  282D               	goto	l7057
  2279  002B  1DC8               	btfss	_Fflush1,3	;volatile
  2280  002C  0008               	return
  2281  002D                     l7057:	
  2282                           
  2283                           ;flush.c: 117: {
  2284                           ;flush.c: 118: SEQflsuh = FLUSH_INIT_1;
  2285  002D  3001               	movlw	1
  2286  002E  2830               	goto	L18
  2287  002F                     l7061:	
  2288                           
  2289                           ;flush.c: 128: {
  2290                           ;flush.c: 129: SEQflsuh = FLUSH_END_0;
  2291  002F  3009               	movlw	9
  2292  0030                     L18:	
  2293  0030  00C7               	movwf	_SEQflsuh	;volatile
  2294                           
  2295                           ;flush.c: 119: CNTflush = 0;
  2296  0031  01B4               	clrf	_CNTflush	;volatile
  2297  0032  01B5               	clrf	_CNTflush+1	;volatile
  2298  0033  0008               	return
  2299  0034                     l2915:	
  2300                           ;flush.c: 122: case FLUSH_INIT_1:
  2301                           
  2302                           
  2303                           ;flush.c: 123: Fflush1.bits.bit_6 = 1;
  2304  0034  1748               	bsf	_Fflush1,6	;volatile
  2305                           
  2306                           ;flush.c: 124: RA2 = 0;
  2307  0035  1105               	bcf	5,2	;volatile
  2308                           
  2309                           ;flush.c: 125: RA4 = 0;
  2310  0036  1205               	bcf	5,4	;volatile
  2311                           
  2312                           ;flush.c: 126: RA1 = 0;
  2313  0037  1085               	bcf	5,1	;volatile
  2314                           
  2315                           ;flush.c: 127: if(Fbodysensor.bits.bit_0 == 1)
  2316  0038  187A               	btfsc	_Fbodysensor,0	;volatile
  2317  0039  282F               	goto	l7061
  2318                           
  2319                           ;flush.c: 132: }
  2320                           ;flush.c: 133: if(++CNTflush >= 5)
  2321  003A  0AB4               	incf	_CNTflush,f	;volatile
  2322  003B  1903               	skipnz
  2323  003C  0AB5               	incf	_CNTflush+1,f	;volatile
  2324  003D  3000               	movlw	0
  2325  003E  0235               	subwf	_CNTflush+1,w	;volatile
  2326  003F  3005               	movlw	5
  2327  0040  1903               	skipnz
  2328  0041  0234               	subwf	_CNTflush,w	;volatile
  2329  0042  1C03               	skipc
  2330  0043  0008               	return
  2331                           
  2332                           ;flush.c: 134: {
  2333                           ;flush.c: 135: CNTflush = 0;
  2334  0044  01B4               	clrf	_CNTflush	;volatile
  2335  0045  01B5               	clrf	_CNTflush+1	;volatile
  2336                           
  2337                           ;flush.c: 136: SEQflsuh = FLUSH_INIT_2;
  2338  0046  3002               	movlw	2
  2339  0047  00C7               	movwf	_SEQflsuh	;volatile
  2340  0048  0008               	return
  2341  0049                     l2918:	
  2342                           ;flush.c: 139: case FLUSH_INIT_2:
  2343                           
  2344                           
  2345                           ;flush.c: 140: Fflush1.bits.bit_6 = 1;
  2346  0049  1748               	bsf	_Fflush1,6	;volatile
  2347                           
  2348                           ;flush.c: 141: RA2 = 0;
  2349  004A  1105               	bcf	5,2	;volatile
  2350                           
  2351                           ;flush.c: 142: RA4 = 0;
  2352  004B  1205               	bcf	5,4	;volatile
  2353                           
  2354                           ;flush.c: 143: RA1 = 0;
  2355  004C  1085               	bcf	5,1	;volatile
  2356                           
  2357                           ;flush.c: 144: if(Fbodysensor.bits.bit_0 == 1)
  2358  004D  187A               	btfsc	_Fbodysensor,0	;volatile
  2359  004E  282F               	goto	l7061
  2360                           
  2361                           ;flush.c: 149: }
  2362                           ;flush.c: 151: if(Fflush1.bits.bit_1 == 1)
  2363  004F  1CC8               	btfss	_Fflush1,1	;volatile
  2364  0050  2854               	goto	l2920
  2365                           
  2366                           ;flush.c: 152: {
  2367                           ;flush.c: 153: SEQflsuh = FLUSH_BIG_0;
  2368  0051  3003               	movlw	3
  2369  0052  00C7               	movwf	_SEQflsuh	;volatile
  2370                           
  2371                           ;flush.c: 154: }
  2372  0053  0008               	return
  2373  0054                     l2920:	
  2374                           
  2375                           ;flush.c: 155: else if(Fflush1.bits.bit_3 == 1)
  2376  0054  1DC8               	btfss	_Fflush1,3	;volatile
  2377  0055  0008               	return
  2378                           
  2379                           ;flush.c: 156: {
  2380                           ;flush.c: 157: SEQflsuh = FLUSH_SML_0;
  2381  0056  3006               	movlw	6
  2382  0057  00C7               	movwf	_SEQflsuh	;volatile
  2383  0058  0008               	return
  2384  0059                     l2923:	
  2385                           ;flush.c: 160: case FLUSH_BIG_0:
  2386                           
  2387                           
  2388                           ;flush.c: 161: Fflush1.bits.bit_6 = 1;
  2389                           
  2390                           ;flush.c: 162: RA2 = 0;
  2391                           
  2392                           ;flush.c: 163: RA4 = 1;
  2393                           
  2394                           ;flush.c: 164: RA1 = 1;
  2395                           
  2396                           ;flush.c: 165: if(++CNTflush >= 10)
  2397  0059  221F  120A  118A   	fcall	PL4	;call to abstracted procedure
  2398  005C  1903               	skipnz
  2399  005D  0234               	subwf	_CNTflush,w	;volatile
  2400  005E  1C03               	skipc
  2401  005F  0008               	return
  2402                           
  2403                           ;flush.c: 166: {
  2404                           ;flush.c: 167: CNTflush = 0;
  2405  0060  01B4               	clrf	_CNTflush	;volatile
  2406  0061  01B5               	clrf	_CNTflush+1	;volatile
  2407                           
  2408                           ;flush.c: 168: SEQflsuh = FLUSH_BIG_1;
  2409  0062  3004               	movlw	4
  2410  0063  00C7               	movwf	_SEQflsuh	;volatile
  2411  0064  0008               	return
  2412  0065                     l2925:	
  2413                           ;flush.c: 171: case FLUSH_BIG_1:
  2414                           
  2415                           
  2416                           ;flush.c: 172: Fflush1.bits.bit_6 = 1;
  2417  0065  1748               	bsf	_Fflush1,6	;volatile
  2418                           
  2419                           ;flush.c: 173: RA2 = 1;
  2420  0066  1505               	bsf	5,2	;volatile
  2421                           
  2422                           ;flush.c: 174: RA4 = 1;
  2423  0067  1605               	bsf	5,4	;volatile
  2424                           
  2425                           ;flush.c: 175: RA1 = 1;
  2426                           
  2427                           ;flush.c: 184: if(++CNTflush >= 100)
  2428  0068  2229  120A  118A   	fcall	PL6	;call to abstracted procedure
  2429  006B  3064               	movlw	100
  2430  006C  1903               	skipnz
  2431  006D  0234               	subwf	_CNTflush,w	;volatile
  2432  006E  1C03               	skipc
  2433  006F  0008               	return
  2434                           
  2435                           ;flush.c: 185: {
  2436                           ;flush.c: 186: CNTflush = 0;
  2437  0070  01B4               	clrf	_CNTflush	;volatile
  2438  0071  01B5               	clrf	_CNTflush+1	;volatile
  2439                           
  2440                           ;flush.c: 187: SEQflsuh = FLUSH_BIG_2;
  2441  0072  3005               	movlw	5
  2442  0073  00C7               	movwf	_SEQflsuh	;volatile
  2443  0074  0008               	return
  2444  0075                     l2927:	
  2445                           ;flush.c: 191: case FLUSH_BIG_2:
  2446                           
  2447                           
  2448                           ;flush.c: 192: Fflush1.bits.bit_6 = 1;
  2449                           
  2450                           ;flush.c: 193: RA2 = 0;
  2451                           
  2452                           ;flush.c: 194: RA4 = 1;
  2453                           
  2454                           ;flush.c: 195: RA1 = 1;
  2455                           
  2456                           ;flush.c: 196: if(++CNTflush >= 10)
  2457  0075  221F  120A  118A   	fcall	PL4	;call to abstracted procedure
  2458  0078  1903               	skipnz
  2459  0079  0234               	subwf	_CNTflush,w	;volatile
  2460  007A  1C03               	skipc
  2461  007B  0008               	return
  2462                           
  2463                           ;flush.c: 197: {
  2464                           ;flush.c: 198: CNTflush = 0;
  2465  007C  01B4               	clrf	_CNTflush	;volatile
  2466  007D  01B5               	clrf	_CNTflush+1	;volatile
  2467                           
  2468                           ;flush.c: 199: SEQflsuh = FLUSH_END_0;
  2469  007E  3009               	movlw	9
  2470  007F  00C7               	movwf	_SEQflsuh	;volatile
  2471  0080  0008               	return
  2472  0081                     l2929:	
  2473                           ;flush.c: 203: case FLUSH_SML_0:
  2474                           
  2475                           
  2476                           ;flush.c: 204: Fflush1.bits.bit_6 = 1;
  2477                           
  2478                           ;flush.c: 205: RA2 = 0;
  2479                           
  2480                           ;flush.c: 206: RA4 = 1;
  2481                           
  2482                           ;flush.c: 207: RA1 = 0;
  2483                           
  2484                           ;flush.c: 208: if(++CNTflush >= 5)
  2485  0081  2215  120A  118A   	fcall	PL2	;call to abstracted procedure
  2486  0084  1903               	skipnz
  2487  0085  0234               	subwf	_CNTflush,w	;volatile
  2488  0086  1C03               	skipc
  2489  0087  0008               	return
  2490                           
  2491                           ;flush.c: 209: {
  2492                           ;flush.c: 210: CNTflush = 0;
  2493  0088  01B4               	clrf	_CNTflush	;volatile
  2494  0089  01B5               	clrf	_CNTflush+1	;volatile
  2495                           
  2496                           ;flush.c: 211: SEQflsuh = FLUSH_SML_1;
  2497  008A  3007               	movlw	7
  2498  008B  00C7               	movwf	_SEQflsuh	;volatile
  2499  008C  0008               	return
  2500  008D                     l2931:	
  2501                           ;flush.c: 214: case FLUSH_SML_1:
  2502                           
  2503                           
  2504                           ;flush.c: 215: Fflush1.bits.bit_6 = 1;
  2505  008D  1748               	bsf	_Fflush1,6	;volatile
  2506                           
  2507                           ;flush.c: 216: RA2 = 1;
  2508  008E  1505               	bsf	5,2	;volatile
  2509                           
  2510                           ;flush.c: 217: RA4 = 1;
  2511  008F  1605               	bsf	5,4	;volatile
  2512                           
  2513                           ;flush.c: 218: RA1 = 0;
  2514  0090  1085               	bcf	5,1	;volatile
  2515                           
  2516                           ;flush.c: 220: if(++CNTflush >= 100)
  2517  0091  0AB4               	incf	_CNTflush,f	;volatile
  2518  0092  1903               	skipnz
  2519  0093  0AB5               	incf	_CNTflush+1,f	;volatile
  2520  0094  3000               	movlw	0
  2521  0095  0235               	subwf	_CNTflush+1,w	;volatile
  2522  0096  3064               	movlw	100
  2523  0097  1903               	skipnz
  2524  0098  0234               	subwf	_CNTflush,w	;volatile
  2525  0099  1C03               	skipc
  2526  009A  0008               	return
  2527                           
  2528                           ;flush.c: 221: {
  2529                           ;flush.c: 222: CNTflush = 0;
  2530  009B  01B4               	clrf	_CNTflush	;volatile
  2531  009C  01B5               	clrf	_CNTflush+1	;volatile
  2532                           
  2533                           ;flush.c: 223: SEQflsuh = FLUSH_SML_2;
  2534  009D  3008               	movlw	8
  2535  009E  00C7               	movwf	_SEQflsuh	;volatile
  2536  009F  0008               	return
  2537  00A0                     l2933:	
  2538                           ;flush.c: 226: case FLUSH_SML_2:
  2539                           
  2540                           
  2541                           ;flush.c: 227: Fflush1.bits.bit_6 = 1;
  2542                           
  2543                           ;flush.c: 228: RA2 = 0;
  2544                           
  2545                           ;flush.c: 229: RA4 = 1;
  2546                           
  2547                           ;flush.c: 230: RA1 = 0;
  2548                           
  2549                           ;flush.c: 231: if(++CNTflush >= 5)
  2550  00A0  2215  120A  118A   	fcall	PL2	;call to abstracted procedure
  2551  00A3                     L17:	
  2552  00A3  1903               	skipnz
  2553  00A4  0234               	subwf	_CNTflush,w	;volatile
  2554  00A5  1C03               	skipc
  2555  00A6  0008               	return
  2556                           
  2557                           ;flush.c: 232: {
  2558                           ;flush.c: 233: CNTflush = 0;
  2559  00A7  01B4               	clrf	_CNTflush	;volatile
  2560  00A8  01B5               	clrf	_CNTflush+1	;volatile
  2561                           
  2562                           ;flush.c: 234: SEQflsuh = FLUSH_END_1;
  2563  00A9  300A               	movlw	10
  2564  00AA  00C7               	movwf	_SEQflsuh	;volatile
  2565  00AB  0008               	return
  2566  00AC                     l2935:	
  2567                           ;flush.c: 238: case FLUSH_END_0:
  2568                           
  2569                           
  2570                           ;flush.c: 239: Fflush1.bits.bit_6 = 1;
  2571  00AC  1748               	bsf	_Fflush1,6	;volatile
  2572                           
  2573                           ;flush.c: 240: RA2 = 0;
  2574  00AD  1105               	bcf	5,2	;volatile
  2575                           
  2576                           ;flush.c: 241: RA4 = 0;
  2577  00AE  1205               	bcf	5,4	;volatile
  2578                           
  2579                           ;flush.c: 242: RA1 = 1;
  2580                           
  2581                           ;flush.c: 243: if(++CNTflush >= 200)
  2582  00AF  2229  120A  118A   	fcall	PL6	;call to abstracted procedure
  2583  00B2  30C8               	movlw	200
  2584  00B3  28A3               	goto	L17
  2585  00B4                     l2937:	
  2586                           ;flush.c: 250: case FLUSH_END_1:
  2587                           
  2588                           
  2589                           ;flush.c: 251: Fflush1.bits.bit_6 = 0;
  2590  00B4  1348               	bcf	_Fflush1,6	;volatile
  2591                           
  2592                           ;flush.c: 252: RA2 = 0;
  2593  00B5  1105               	bcf	5,2	;volatile
  2594                           
  2595                           ;flush.c: 253: RA4 = 0;
  2596  00B6  1205               	bcf	5,4	;volatile
  2597                           
  2598                           ;flush.c: 254: RA1 = 0;
  2599  00B7  1085               	bcf	5,1	;volatile
  2600                           
  2601                           ;flush.c: 255: SEQflsuh = FLUSH_INIT_0;
  2602  00B8  01C7               	clrf	_SEQflsuh	;volatile
  2603                           
  2604                           ;flush.c: 256: CNTflush = 0;
  2605  00B9  01B4               	clrf	_CNTflush	;volatile
  2606  00BA  01B5               	clrf	_CNTflush+1	;volatile
  2607                           
  2608                           ;flush.c: 257: Fflush1.bits.bit_1 = 0;
  2609  00BB  10C8               	bcf	_Fflush1,1	;volatile
  2610                           
  2611                           ;flush.c: 258: Fflush1.bits.bit_3 = 0;
  2612  00BC  11C8               	bcf	_Fflush1,3	;volatile
  2613                           
  2614                           ;flush.c: 259: break;
  2615  00BD  0008               	return
  2616  00BE                     l2938:	
  2617                           ;flush.c: 260: default:
  2618                           
  2619                           
  2620                           ;flush.c: 261: Fflush1.bits.bit_6 = 0;
  2621  00BE  1348               	bcf	_Fflush1,6	;volatile
  2622                           
  2623                           ;flush.c: 262: RA2 = 0;
  2624  00BF  1105               	bcf	5,2	;volatile
  2625                           
  2626                           ;flush.c: 263: RA4 = 0;
  2627  00C0  1205               	bcf	5,4	;volatile
  2628                           
  2629                           ;flush.c: 264: RA1 = 0;
  2630  00C1  1085               	bcf	5,1	;volatile
  2631                           
  2632                           ;flush.c: 265: Fflush1.bits.bit_1 = 0;
  2633  00C2  10C8               	bcf	_Fflush1,1	;volatile
  2634                           
  2635                           ;flush.c: 266: Fflush1.bits.bit_3 = 0;
  2636  00C3  11C8               	bcf	_Fflush1,3	;volatile
  2637                           
  2638                           ;flush.c: 267: SEQflsuh = FLUSH_INIT_0;
  2639  00C4  01C7               	clrf	_SEQflsuh	;volatile
  2640                           
  2641                           ;flush.c: 268: CNTflush = 0;
  2642  00C5  01B4               	clrf	_CNTflush	;volatile
  2643  00C6  01B5               	clrf	_CNTflush+1	;volatile
  2644                           
  2645                           ;flush.c: 269: break;
  2646  00C7  0008               	return
  2647  00C8                     l7131:	
  2648  00C8  0847               	movf	_SEQflsuh,w	;volatile
  2649                           
  2650                           ; Switch size 1, requested type "space"
  2651                           ; Number of cases is 11, Range of values is 0 to 10
  2652                           ; switch strategies available:
  2653                           ; Name         Instructions Cycles
  2654                           ; simple_byte           34    18 (average)
  2655                           ; direct_byte           41     8 (fixed)
  2656                           ; jumptable            260     6 (fixed)
  2657                           ;	Chosen strategy is simple_byte
  2658  00C9  3A00               	xorlw	0	; case 0
  2659  00CA  1903               	skipnz
  2660  00CB  2825               	goto	l2910
  2661  00CC  3A01               	xorlw	1	; case 1
  2662  00CD  1903               	skipnz
  2663  00CE  2834               	goto	l2915
  2664  00CF  3A03               	xorlw	3	; case 2
  2665  00D0  1903               	skipnz
  2666  00D1  2849               	goto	l2918
  2667  00D2  3A01               	xorlw	1	; case 3
  2668  00D3  1903               	skipnz
  2669  00D4  2859               	goto	l2923
  2670  00D5  3A07               	xorlw	7	; case 4
  2671  00D6  1903               	skipnz
  2672  00D7  2865               	goto	l2925
  2673  00D8  3A01               	xorlw	1	; case 5
  2674  00D9  1903               	skipnz
  2675  00DA  2875               	goto	l2927
  2676  00DB  3A03               	xorlw	3	; case 6
  2677  00DC  1903               	skipnz
  2678  00DD  2881               	goto	l2929
  2679  00DE  3A01               	xorlw	1	; case 7
  2680  00DF  1903               	skipnz
  2681  00E0  288D               	goto	l2931
  2682  00E1  3A0F               	xorlw	15	; case 8
  2683  00E2  1903               	skipnz
  2684  00E3  28A0               	goto	l2933
  2685  00E4  3A01               	xorlw	1	; case 9
  2686  00E5  1903               	skipnz
  2687  00E6  28AC               	goto	l2935
  2688  00E7  3A03               	xorlw	3	; case 10
  2689  00E8  1903               	skipnz
  2690  00E9  28B4               	goto	l2937
  2691  00EA  28BE               	goto	l2938
  2692  00EB  0008               	return
  2693  00EC                     __end_of_FlushCon:	
  2694  00EC                     __ptext17:	
  2695 ;; *************** function _FlushJudge *****************
  2696 ;; Defined at:
  2697 ;;		line 26 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\flush.c"
  2698 ;; Parameters:    Size  Location     Type
  2699 ;;		None
  2700 ;; Auto vars:     Size  Location     Type
  2701 ;;  Key_Step        1    6[COMMON] unsigned char 
  2702 ;; Return value:  Size  Location     Type
  2703 ;;                  1    wreg      void 
  2704 ;; Registers used:
  2705 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2706 ;; Tracked objects:
  2707 ;;		On entry : 300/0
  2708 ;;		On exit  : 300/0
  2709 ;;		Unchanged: 0/0
  2710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2711 ;;      Params:         0       0       0       0       0
  2712 ;;      Locals:         1       0       0       0       0
  2713 ;;      Temps:          0       0       0       0       0
  2714 ;;      Totals:         1       0       0       0       0
  2715 ;;Total ram usage:        1 bytes
  2716 ;; Hardware stack levels used:    1
  2717 ;; Hardware stack levels required when called:    4
  2718 ;; This function calls:
  2719 ;;		_GkeyLoop
  2720 ;; This function is called by:
  2721 ;;		_GflushLoop
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           
  2726                           ;psect for function _FlushJudge
  2727  00EC                     _FlushJudge:	
  2728                           
  2729                           ;flush.c: 31: if(Fbodysensor.bits.bit_3 == 1)
  2730                           
  2731                           ;incstack = 0
  2732                           ; Regs used in _FlushJudge: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2733  00EC  1DFA               	btfss	_Fbodysensor,3	;volatile
  2734  00ED  28F1               	goto	l2893
  2735                           
  2736                           ;flush.c: 32: {
  2737                           ;flush.c: 33: Fflush1.bits.bit_0 = 1;
  2738  00EE  1448               	bsf	_Fflush1,0	;volatile
  2739                           
  2740                           ;flush.c: 34: Fflush1.bits.bit_2 = 0;
  2741  00EF  1148               	bcf	_Fflush1,2	;volatile
  2742                           
  2743                           ;flush.c: 35: }
  2744  00F0  2907               	goto	l2894
  2745  00F1                     l2893:	
  2746                           
  2747                           ;flush.c: 36: else if(Fbodysensor.bits.bit_4 == 1)
  2748  00F1  1E7A               	btfss	_Fbodysensor,4	;volatile
  2749  00F2  28F5               	goto	l7485
  2750                           
  2751                           ;flush.c: 37: {
  2752                           ;flush.c: 38: Fflush1.bits.bit_2 = 1;
  2753  00F3  1548               	bsf	_Fflush1,2	;volatile
  2754  00F4  28F9               	goto	L4
  2755  00F5                     l7485:	
  2756                           ;flush.c: 40: }
  2757                           
  2758                           ;flush.c: 39: Fflush1.bits.bit_0 = 0;
  2759                           
  2760                           
  2761                           ;flush.c: 41: else if (SEQflsuh)
  2762  00F5  0847               	movf	_SEQflsuh,w	;volatile
  2763  00F6  1903               	btfsc	3,2
  2764  00F7  28FB               	goto	l7489
  2765  00F8                     l7487:	
  2766                           
  2767                           ;flush.c: 42: {
  2768                           ;flush.c: 43: Fflush1.bits.bit_2 = 0;
  2769  00F8  1148               	bcf	_Fflush1,2	;volatile
  2770  00F9                     L4:	
  2771                           
  2772                           ;flush.c: 44: Fflush1.bits.bit_0 = 0;
  2773  00F9  1048               	bcf	_Fflush1,0	;volatile
  2774                           
  2775                           ;flush.c: 45: }
  2776  00FA  2907               	goto	l2894
  2777  00FB                     l7489:	
  2778                           
  2779                           ;flush.c: 46: else
  2780                           ;flush.c: 47: {
  2781                           ;flush.c: 48: Key_Step = GkeyLoop();
  2782  00FB  211B  120A  118A   	fcall	_GkeyLoop
  2783  00FE  00F6               	movwf	FlushJudge@Key_Step
  2784                           
  2785                           ;flush.c: 49: if (Key_Step)
  2786  00FF  0876               	movf	FlushJudge@Key_Step,w
  2787  0100  1903               	btfsc	3,2
  2788  0101  28F8               	goto	l7487
  2789                           
  2790                           ;flush.c: 50: {
  2791                           ;flush.c: 51: SEQflsuh = Key_Step;
  2792  0102  0876               	movf	FlushJudge@Key_Step,w
  2793  0103  00C7               	movwf	_SEQflsuh	;volatile
  2794                           
  2795                           ;flush.c: 52: CNTflush = 0;
  2796  0104  01B4               	clrf	_CNTflush	;volatile
  2797  0105  01B5               	clrf	_CNTflush+1	;volatile
  2798                           
  2799                           ;flush.c: 53: Fflush1.bits.bit_7 = 1;
  2800  0106  17C8               	bsf	_Fflush1,7	;volatile
  2801  0107                     l2894:	
  2802                           ;flush.c: 54: }else
  2803                           
  2804                           
  2805                           ;flush.c: 58: }
  2806                           ;flush.c: 59: }
  2807                           ;flush.c: 76: if (Fbodysensor.bits.bit_2 == 1)
  2808  0107  197A               	btfsc	_Fbodysensor,2	;volatile
  2809                           
  2810                           ;flush.c: 77: {
  2811                           ;flush.c: 78: Fflush1.bits.bit_7 = 1;
  2812  0108  17C8               	bsf	_Fflush1,7	;volatile
  2813                           
  2814                           ;flush.c: 79: }
  2815                           ;flush.c: 80: if (Fflush1.bits.bit_7 == 1)
  2816  0109  1FC8               	btfss	_Fflush1,7	;volatile
  2817  010A  0008               	return
  2818                           
  2819                           ;flush.c: 81: {
  2820                           ;flush.c: 82: if (Fflush1.bits.bit_6 == 1)
  2821  010B  1F48               	btfss	_Fflush1,6	;volatile
  2822  010C  2910               	goto	l2903
  2823                           
  2824                           ;flush.c: 83: {
  2825                           ;flush.c: 84: Fflush1.bits.bit_2 = 0;
  2826  010D  1148               	bcf	_Fflush1,2	;volatile
  2827                           
  2828                           ;flush.c: 85: Fflush1.bits.bit_0 = 0;
  2829  010E  1048               	bcf	_Fflush1,0	;volatile
  2830                           
  2831                           ;flush.c: 86: return;
  2832  010F  0008               	return
  2833  0110                     l2903:	
  2834                           
  2835                           ;flush.c: 87: }
  2836                           ;flush.c: 88: Fflush1.bits.bit_7 = 0;
  2837  0110  13C8               	bcf	_Fflush1,7	;volatile
  2838                           
  2839                           ;flush.c: 89: if(Fflush1.bits.bit_0 == 1)
  2840  0111  1C48               	btfss	_Fflush1,0	;volatile
  2841  0112  2916               	goto	l2905
  2842                           
  2843                           ;flush.c: 90: {
  2844                           ;flush.c: 91: Fflush1.bits.bit_0 = 0;
  2845  0113  1048               	bcf	_Fflush1,0	;volatile
  2846                           
  2847                           ;flush.c: 92: Fflush1.bits.bit_1 = 1;
  2848  0114  14C8               	bsf	_Fflush1,1	;volatile
  2849                           
  2850                           ;flush.c: 93: return;
  2851  0115  0008               	return
  2852  0116                     l2905:	
  2853                           
  2854                           ;flush.c: 94: }
  2855                           ;flush.c: 95: if(Fflush1.bits.bit_2 == 1)
  2856  0116  1D48               	btfss	_Fflush1,2	;volatile
  2857  0117  0008               	return
  2858                           
  2859                           ;flush.c: 96: {
  2860                           ;flush.c: 97: Fflush1.bits.bit_2 = 0;
  2861  0118  1148               	bcf	_Fflush1,2	;volatile
  2862                           
  2863                           ;flush.c: 98: Fflush1.bits.bit_3 = 1;
  2864  0119  15C8               	bsf	_Fflush1,3	;volatile
  2865  011A  0008               	return
  2866  011B                     __end_of_FlushJudge:	
  2867  011B                     __ptext18:	
  2868 ;; *************** function _GkeyLoop *****************
  2869 ;; Defined at:
  2870 ;;		line 7 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\key.c"
  2871 ;; Parameters:    Size  Location     Type
  2872 ;;		None
  2873 ;; Auto vars:     Size  Location     Type
  2874 ;;		None
  2875 ;; Return value:  Size  Location     Type
  2876 ;;                  1    wreg      unsigned char 
  2877 ;; Registers used:
  2878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2879 ;; Tracked objects:
  2880 ;;		On entry : 300/0
  2881 ;;		On exit  : 300/0
  2882 ;;		Unchanged: 0/0
  2883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2884 ;;      Params:         0       0       0       0       0
  2885 ;;      Locals:         0       0       0       0       0
  2886 ;;      Temps:          2       0       0       0       0
  2887 ;;      Totals:         2       0       0       0       0
  2888 ;;Total ram usage:        2 bytes
  2889 ;; Hardware stack levels used:    1
  2890 ;; Hardware stack levels required when called:    3
  2891 ;; This function calls:
  2892 ;;		_KeyControl
  2893 ;;		_ScanKey
  2894 ;; This function is called by:
  2895 ;;		_FlushJudge
  2896 ;; This function uses a non-reentrant model
  2897 ;;
  2898                           
  2899                           
  2900                           ;psect for function _GkeyLoop
  2901  011B                     _GkeyLoop:	
  2902                           
  2903                           ;key.c: 9: for ( SeletedLine = 0; SeletedLine < 2; SeletedLine++)
  2904                           
  2905                           ;incstack = 0
  2906                           ; Regs used in _GkeyLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2907  011B  01F9               	clrf	_SeletedLine	;volatile
  2908  011C                     L10:	
  2909  011C  3002               	movlw	2
  2910  011D  0279               	subwf	_SeletedLine,w	;volatile
  2911  011E  1803               	btfsc	3,0
  2912  011F  3400               	retlw	0
  2913                           
  2914                           ;key.c: 10: {
  2915                           ;key.c: 11: KeyLines[SeletedLine].flags.level =ScanKey(SeletedLine);
  2916  0120  0879               	movf	_SeletedLine,w	;volatile
  2917  0121  2202  120A  118A   	fcall	_ScanKey
  2918  0124  00F4               	movwf	??_GkeyLoop
  2919  0125  0879               	movf	_SeletedLine,w	;volatile
  2920  0126  00F5               	movwf	??_GkeyLoop+1
  2921  0127  3001               	movlw	1
  2922  0128  1003               	clrc
  2923  0129                     L5:	
  2924  0129  0DF5               	rlf	??_GkeyLoop+1,f
  2925  012A  3EFF               	addlw	-1
  2926  012B  1003               	clrc
  2927  012C  1D03               	skipz
  2928  012D  2929               	goto	L5
  2929  012E  0D75               	rlf	??_GkeyLoop+1,w
  2930  012F  3E52               	addlw	(low (_KeyLines| 0))& (0+255)
  2931  0130  0084               	movwf	4
  2932  0131  0DF4               	rlf	??_GkeyLoop,f
  2933  0132  0DF4               	rlf	??_GkeyLoop,f
  2934  0133  1383               	bcf	3,7	;select IRP bank0
  2935  0134  0800               	movf	0,w
  2936  0135  0674               	xorwf	??_GkeyLoop,w
  2937  0136  39FB               	andlw	-5
  2938  0137  0674               	xorwf	??_GkeyLoop,w
  2939  0138  0080               	movwf	0
  2940                           
  2941                           ;key.c: 13: if(KeyLines[SeletedLine].flags.is_forbidden)
  2942  0139  0879               	movf	_SeletedLine,w	;volatile
  2943  013A  00F4               	movwf	??_GkeyLoop
  2944  013B  3001               	movlw	1
  2945  013C  1003               	clrc
  2946  013D                     L6:	
  2947  013D  0DF4               	rlf	??_GkeyLoop,f
  2948  013E  3EFF               	addlw	-1
  2949  013F  1003               	clrc
  2950  0140  1D03               	skipz
  2951  0141  293D               	goto	L6
  2952  0142  0D74               	rlf	??_GkeyLoop,w
  2953  0143  3E52               	addlw	(low (_KeyLines| 0))& (0+255)
  2954  0144  0084               	movwf	4
  2955  0145  1C00               	btfss	0,0
  2956  0146  2963               	goto	l7453
  2957                           
  2958                           ;key.c: 14: {
  2959                           ;key.c: 15: if (KeyLines[SeletedLine].flags.level)
  2960  0147  0879               	movf	_SeletedLine,w	;volatile
  2961  0148  00F4               	movwf	??_GkeyLoop
  2962  0149  3001               	movlw	1
  2963  014A  1003               	clrc
  2964  014B                     L7:	
  2965  014B  0DF4               	rlf	??_GkeyLoop,f
  2966  014C  3EFF               	addlw	-1
  2967  014D  1003               	clrc
  2968  014E  1D03               	skipz
  2969  014F  294B               	goto	L7
  2970  0150  0D74               	rlf	??_GkeyLoop,w
  2971  0151  3E52               	addlw	(low (_KeyLines| 0))& (0+255)
  2972  0152  0084               	movwf	4
  2973  0153  1D00               	btfss	0,2
  2974  0154  2983               	goto	l7469
  2975                           
  2976                           ;key.c: 16: {
  2977                           ;key.c: 17: KeyLines[SeletedLine].flags.is_forbidden = 0;
  2978  0155  0879               	movf	_SeletedLine,w	;volatile
  2979  0156  00F4               	movwf	??_GkeyLoop
  2980  0157  3001               	movlw	1
  2981  0158  1003               	clrc
  2982  0159                     L8:	
  2983  0159  0DF4               	rlf	??_GkeyLoop,f
  2984  015A  3EFF               	addlw	-1
  2985  015B  1003               	clrc
  2986  015C  1D03               	skipz
  2987  015D  2959               	goto	L8
  2988  015E  0D74               	rlf	??_GkeyLoop,w
  2989  015F  3E52               	addlw	(low (_KeyLines| 0))& (0+255)
  2990  0160  0084               	movwf	4
  2991  0161  1000               	bcf	0,0
  2992  0162  2983               	goto	l7469
  2993  0163                     l7453:	
  2994                           
  2995                           ;key.c: 20: }
  2996                           ;key.c: 21: if (KeyControl(&KeyLines[SeletedLine]))
  2997  0163  0879               	movf	_SeletedLine,w	;volatile
  2998  0164  00F4               	movwf	??_GkeyLoop
  2999  0165  3001               	movlw	1
  3000  0166  1003               	clrc
  3001  0167                     L9:	
  3002  0167  0DF4               	rlf	??_GkeyLoop,f
  3003  0168  3EFF               	addlw	-1
  3004  0169  1003               	clrc
  3005  016A  1D03               	skipz
  3006  016B  2967               	goto	L9
  3007  016C  0D74               	rlf	??_GkeyLoop,w
  3008  016D  3E52               	addlw	(low (_KeyLines| 0))& (0+255)
  3009  016E  2185  120A  118A   	fcall	_KeyControl
  3010  0171  3A00               	xorlw	0
  3011  0172  1D03               	btfss	3,2
  3012  0173  297B               	goto	l7467
  3013  0174  2983               	goto	l7469
  3014  0175                     l5760:	
  3015                           ;key.c: 24: {
  3016                           ;key.c: 25: case PortA:
  3017                           
  3018                           
  3019                           ;key.c: 26: Fflush1.bits.bit_0 = 1;
  3020  0175  1448               	bsf	_Fflush1,0	;volatile
  3021                           
  3022                           ;key.c: 27: KeyLines[PortB].flags.is_forbidden = 1;
  3023  0176  1456               	bsf	_KeyLines+4,0	;volatile
  3024                           
  3025                           ;key.c: 28: return FLUSH_BIG_0;
  3026  0177  3403               	retlw	3
  3027  0178                     l5762:	
  3028                           ;key.c: 29: case PortB:
  3029                           
  3030                           
  3031                           ;key.c: 30: Fflush1.bits.bit_2 = 1;
  3032  0178  1548               	bsf	_Fflush1,2	;volatile
  3033                           
  3034                           ;key.c: 31: KeyLines[PortA].flags.is_forbidden = 1;
  3035  0179  1452               	bsf	_KeyLines,0	;volatile
  3036                           
  3037                           ;key.c: 32: return FLUSH_SML_0;
  3038  017A  3406               	retlw	6
  3039  017B                     l7467:	
  3040  017B  0879               	movf	_SeletedLine,w	;volatile
  3041                           
  3042                           ; Switch size 1, requested type "space"
  3043                           ; Number of cases is 2, Range of values is 0 to 1
  3044                           ; switch strategies available:
  3045                           ; Name         Instructions Cycles
  3046                           ; simple_byte            7     4 (average)
  3047                           ; direct_byte           14     8 (fixed)
  3048                           ; jumptable            260     6 (fixed)
  3049                           ;	Chosen strategy is simple_byte
  3050  017C  3A00               	xorlw	0	; case 0
  3051  017D  1903               	skipnz
  3052  017E  2975               	goto	l5760
  3053  017F  3A01               	xorlw	1	; case 1
  3054  0180  1903               	skipnz
  3055  0181  2978               	goto	l5762
  3056  0182  2983               	goto	l7469
  3057  0183                     l7469:	
  3058  0183  0AF9               	incf	_SeletedLine,f	;volatile
  3059  0184  291C               	goto	L10
  3060  0185                     __end_of_GkeyLoop:	
  3061                           ;key.c: 38: }
  3062                           ;key.c: 39: }
  3063                           ;key.c: 40: return 0;
  3064                           
  3065  0185                     __ptext20:	
  3066 ;; *************** function _KeyControl *****************
  3067 ;; Defined at:
  3068 ;;		line 58 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\key.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;  this            1    wreg     PTR struct _KEY_PRIVATE
  3071 ;;		 -> KeyLines(8), 
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;  this            1    6[BANK0 ] PTR struct _KEY_PRIVATE
  3074 ;;		 -> KeyLines(8), 
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  1    wreg      unsigned char 
  3077 ;; Registers used:
  3078 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3079 ;; Tracked objects:
  3080 ;;		On entry : B00/0
  3081 ;;		On exit  : B00/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3084 ;;      Params:         0       0       0       0       0
  3085 ;;      Locals:         0       7       0       0       0
  3086 ;;      Temps:          2       0       0       0       0
  3087 ;;      Totals:         2       7       0       0       0
  3088 ;;Total ram usage:        9 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; Hardware stack levels required when called:    2
  3091 ;; This function calls:
  3092 ;;		Nothing
  3093 ;; This function is called by:
  3094 ;;		_GkeyLoop
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           
  3099                           ;psect for function _KeyControl
  3100  0185                     _KeyControl:	
  3101                           
  3102                           ;incstack = 0
  3103                           ; Regs used in _KeyControl: [wreg-fsr0h+status,2+status,0]
  3104                           ;KeyControl@this stored from wreg
  3105  0185  00E0               	movwf	KeyControl@this
  3106                           
  3107                           ;key.c: 60: if(!(this->flags.level))
  3108  0186  0084               	movwf	4
  3109                           
  3110                           ;key.c: 61: {
  3111                           ;key.c: 62: if (this->flags.is_pressing)
  3112  0187  0860               	movf	KeyControl@this,w
  3113  0188  1900               	btfsc	0,2
  3114  0189  29DB               	goto	L14
  3115  018A  0084               	movwf	4
  3116                           
  3117                           ;key.c: 63: {
  3118                           ;key.c: 64: this->cnt = 0;
  3119  018B  0A60               	incf	KeyControl@this,w
  3120  018C  1C80               	btfss	0,1
  3121  018D  29C0               	goto	L15
  3122  018E  0084               	movwf	4
  3123  018F  0180               	clrf	0
  3124                           
  3125                           ;key.c: 66: if (((++(this->cnt_timeout)) > (600)?(0 == ((this->cnt_timeout) = 0)):0))
  3126  0190  0860               	movf	KeyControl@this,w
  3127  0191  3E02               	addlw	2
  3128  0192  0084               	movwf	4
  3129  0193  3001               	movlw	1
  3130  0194  0780               	addwf	0,f
  3131  0195  0A84               	incf	4,f
  3132  0196  1803               	skipnc
  3133  0197  0A80               	incf	0,f
  3134  0198  0384               	decf	4,f
  3135  0199  0800               	movf	0,w
  3136  019A  00F2               	movwf	??_KeyControl
  3137  019B  0A84               	incf	4,f
  3138  019C  0800               	movf	0,w
  3139  019D  00F3               	movwf	??_KeyControl+1
  3140  019E  3002               	movlw	2
  3141  019F  0273               	subwf	??_KeyControl+1,w
  3142  01A0  3059               	movlw	89
  3143  01A1  1903               	skipnz
  3144  01A2  0272               	subwf	??_KeyControl,w
  3145  01A3  1803               	skipnc
  3146  01A4  29A7               	goto	l7399
  3147  01A5  01DA               	clrf	_KeyControl$3140
  3148  01A6  29B7               	goto	L11
  3149  01A7                     l7399:	
  3150  01A7  0860               	movf	KeyControl@this,w
  3151  01A8  3E02               	addlw	2
  3152  01A9  0084               	movwf	4
  3153  01AA  0180               	clrf	0
  3154  01AB  0A84               	incf	4,f
  3155  01AC  0180               	clrf	0
  3156  01AD  01F2               	clrf	??_KeyControl
  3157  01AE  01F3               	clrf	??_KeyControl+1
  3158  01AF  0872               	movf	??_KeyControl,w
  3159  01B0  0473               	iorwf	??_KeyControl+1,w
  3160  01B1  1D03               	btfss	3,2
  3161  01B2  29B5               	goto	u2300
  3162  01B3  3001               	movlw	1
  3163  01B4  29B6               	goto	u2310
  3164  01B5                     u2300:	
  3165  01B5  3000               	movlw	0
  3166  01B6                     u2310:	
  3167  01B6  00DA               	movwf	_KeyControl$3140
  3168  01B7                     L11:	
  3169  01B7  01DB               	clrf	_KeyControl$3140+1
  3170  01B8  085A               	movf	_KeyControl$3140,w
  3171  01B9  045B               	iorwf	_KeyControl$3140+1,w
  3172  01BA  1903               	btfsc	3,2
  3173  01BB  3400               	retlw	0
  3174                           
  3175                           ;key.c: 67: {
  3176                           ;key.c: 68: this->flags.is_forbidden = 1;
  3177  01BC  0860               	movf	KeyControl@this,w
  3178  01BD  0084               	movwf	4
  3179  01BE  1400               	bsf	0,0
  3180  01BF  3400               	retlw	0
  3181  01C0                     L15:	
  3182                           ;key.c: 72: {
  3183                           ;key.c: 73: if (((++(this->cnt)) > (10)?(0 == ((this->cnt) = 0)):0))
  3184                           
  3185  01C0  0084               	movwf	4
  3186  01C1  300B               	movlw	11
  3187  01C2  0A80               	incf	0,f
  3188  01C3  0200               	subwf	0,w
  3189  01C4  1803               	skipnc
  3190  01C5  29C8               	goto	l7409
  3191  01C6  01DC               	clrf	_KeyControl$3141
  3192  01C7  29D1               	goto	L12
  3193  01C8                     l7409:	
  3194  01C8  0A60               	incf	KeyControl@this,w
  3195  01C9  0084               	movwf	4
  3196  01CA  0180               	clrf	0
  3197  01CB  1D03               	btfss	3,2
  3198  01CC  29CF               	goto	u2340
  3199  01CD  3001               	movlw	1
  3200  01CE  29D0               	goto	u2350
  3201  01CF                     u2340:	
  3202  01CF  3000               	movlw	0
  3203  01D0                     u2350:	
  3204  01D0  00DC               	movwf	_KeyControl$3141
  3205  01D1                     L12:	
  3206  01D1  01DD               	clrf	_KeyControl$3141+1
  3207  01D2  085C               	movf	_KeyControl$3141,w
  3208  01D3  045D               	iorwf	_KeyControl$3141+1,w
  3209  01D4  1903               	btfsc	3,2
  3210  01D5  3400               	retlw	0
  3211                           
  3212                           ;key.c: 74: {
  3213                           ;key.c: 75: this->flags.is_pressing = 1;
  3214  01D6  0860               	movf	KeyControl@this,w
  3215  01D7  0084               	movwf	4
  3216  01D8  3001               	movlw	1
  3217  01D9  1480               	bsf	0,1
  3218                           
  3219                           ;key.c: 76: return 1;
  3220  01DA  0008               	return
  3221  01DB                     L14:	
  3222                           ;key.c: 81: else
  3223                           ;key.c: 82: {
  3224                           ;key.c: 83: if (this->flags.is_pressing)
  3225                           
  3226  01DB  0084               	movwf	4
  3227                           
  3228                           ;key.c: 84: {
  3229                           ;key.c: 85: if (((++(this->cnt)) > (10)?(0 == ((this->cnt) = 0)):0))
  3230  01DC  0A60               	incf	KeyControl@this,w
  3231  01DD  1C80               	btfss	0,1
  3232  01DE  29F9               	goto	L16
  3233  01DF  0084               	movwf	4
  3234  01E0  300B               	movlw	11
  3235  01E1  0A80               	incf	0,f
  3236  01E2  0200               	subwf	0,w
  3237  01E3  1803               	skipnc
  3238  01E4  29E7               	goto	l7425
  3239  01E5  01DE               	clrf	_KeyControl$3142
  3240  01E6  29F0               	goto	L13
  3241  01E7                     l7425:	
  3242  01E7  0A60               	incf	KeyControl@this,w
  3243  01E8  0084               	movwf	4
  3244  01E9  0180               	clrf	0
  3245  01EA  1D03               	btfss	3,2
  3246  01EB  29EE               	goto	u2390
  3247  01EC  3001               	movlw	1
  3248  01ED  29EF               	goto	u2400
  3249  01EE                     u2390:	
  3250  01EE  3000               	movlw	0
  3251  01EF                     u2400:	
  3252  01EF  00DE               	movwf	_KeyControl$3142
  3253  01F0                     L13:	
  3254  01F0  01DF               	clrf	_KeyControl$3142+1
  3255  01F1  085E               	movf	_KeyControl$3142,w
  3256  01F2  045F               	iorwf	_KeyControl$3142+1,w
  3257  01F3  1903               	btfsc	3,2
  3258  01F4  3400               	retlw	0
  3259                           
  3260                           ;key.c: 86: {
  3261                           ;key.c: 87: this->flags.is_pressing = 0;
  3262  01F5  0860               	movf	KeyControl@this,w
  3263  01F6  0084               	movwf	4
  3264  01F7  1080               	bcf	0,1
  3265  01F8  3400               	retlw	0
  3266  01F9                     L16:	
  3267                           ;key.c: 90: {
  3268                           ;key.c: 91: this->cnt = 0;
  3269                           
  3270  01F9  0084               	movwf	4
  3271  01FA  0180               	clrf	0
  3272                           
  3273                           ;key.c: 92: this->cnt_timeout = 0;
  3274  01FB  0860               	movf	KeyControl@this,w
  3275  01FC  3E02               	addlw	2
  3276  01FD  0084               	movwf	4
  3277  01FE  0180               	clrf	0
  3278  01FF  0A84               	incf	4,f
  3279  0200  0180               	clrf	0
  3280                           
  3281                           ;key.c: 93: }
  3282                           ;key.c: 95: }
  3283                           ;key.c: 96: return 0;
  3284  0201  3400               	retlw	0
  3285  0202                     __end_of_KeyControl:	
  3286  0202                     __ptext19:	
  3287 ;; *************** function _ScanKey *****************
  3288 ;; Defined at:
  3289 ;;		line 45 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\key.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;  line_num        1    wreg     enum E876
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;  line_num        1    2[COMMON] enum E876
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      unsigned char 
  3296 ;; Registers used:
  3297 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3298 ;; Tracked objects:
  3299 ;;		On entry : 300/0
  3300 ;;		On exit  : 300/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3303 ;;      Params:         0       0       0       0       0
  3304 ;;      Locals:         1       0       0       0       0
  3305 ;;      Temps:          0       0       0       0       0
  3306 ;;      Totals:         1       0       0       0       0
  3307 ;;Total ram usage:        1 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    2
  3310 ;; This function calls:
  3311 ;;		Nothing
  3312 ;; This function is called by:
  3313 ;;		_GkeyLoop
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           
  3318                           ;psect for function _ScanKey
  3319  0202                     _ScanKey:	
  3320                           
  3321                           ;incstack = 0
  3322                           ; Regs used in _ScanKey: [wreg-fsr0h+status,2+status,0]
  3323                           ;ScanKey@line_num stored from wreg
  3324  0202  00F2               	movwf	ScanKey@line_num
  3325                           
  3326                           ;key.c: 47: switch (line_num)
  3327  0203  2A0C               	goto	l6799
  3328  0204                     l6789:	
  3329                           
  3330                           ;key.c: 50: return RA6;
  3331  0204  3000               	movlw	0
  3332  0205  1B05               	btfsc	5,6	;volatile
  3333  0206  3001               	movlw	1
  3334  0207  0008               	return
  3335  0208                     l6793:	
  3336                           
  3337                           ;key.c: 52: return RB0;
  3338  0208  3000               	movlw	0
  3339  0209  1806               	btfsc	6,0	;volatile
  3340  020A  3001               	movlw	1
  3341  020B  0008               	return
  3342  020C                     l6799:	
  3343  020C  0872               	movf	ScanKey@line_num,w
  3344                           
  3345                           ; Switch size 1, requested type "space"
  3346                           ; Number of cases is 2, Range of values is 0 to 1
  3347                           ; switch strategies available:
  3348                           ; Name         Instructions Cycles
  3349                           ; simple_byte            7     4 (average)
  3350                           ; direct_byte           14     8 (fixed)
  3351                           ; jumptable            260     6 (fixed)
  3352                           ;	Chosen strategy is simple_byte
  3353  020D  3A00               	xorlw	0	; case 0
  3354  020E  1903               	skipnz
  3355  020F  2A04               	goto	l6789
  3356  0210  3A01               	xorlw	1	; case 1
  3357  0211  1903               	skipnz
  3358  0212  2A08               	goto	l6793
  3359  0213  2A14               	goto	l5769
  3360  0214                     l5769:	
  3361  0214  0008               	return
  3362  0215                     __end_of_ScanKey:	
  3363  0215                     PL2:	
  3364  0215  1748               	bsf	_Fflush1,6	;volatile
  3365  0216  1105               	bcf	5,2	;volatile
  3366  0217  1605               	bsf	5,4	;volatile
  3367  0218  1085               	bcf	5,1	;volatile
  3368  0219  0AB4               	incf	_CNTflush,f	;volatile
  3369  021A  1903               	skipnz
  3370  021B  0AB5               	incf	_CNTflush+1,f	;volatile
  3371  021C  3000               	movlw	0
  3372  021D  0235               	subwf	_CNTflush+1,w	;volatile
  3373  021E  3405               	retlw	5
  3374  021F                     __end_ofPL2:	
  3375  021F                     PL4:	
  3376  021F  1748               	bsf	_Fflush1,6	;volatile
  3377  0220  1105               	bcf	5,2	;volatile
  3378  0221  1605               	bsf	5,4	;volatile
  3379  0222  1485               	bsf	5,1	;volatile
  3380  0223  0AB4               	incf	_CNTflush,f	;volatile
  3381  0224  1903               	skipnz
  3382  0225  0AB5               	incf	_CNTflush+1,f	;volatile
  3383  0226  3000               	movlw	0
  3384  0227  0235               	subwf	_CNTflush+1,w	;volatile
  3385  0228  340A               	retlw	10
  3386  0229                     __end_ofPL4:	
  3387  0229                     PL6:	
  3388  0229  1485               	bsf	5,1	;volatile
  3389  022A  0AB4               	incf	_CNTflush,f	;volatile
  3390  022B  1903               	skipnz
  3391  022C  0AB5               	incf	_CNTflush+1,f	;volatile
  3392  022D  3000               	movlw	0
  3393  022E  0235               	subwf	_CNTflush+1,w	;volatile
  3394  022F  0008               	return
  3395  0230                     __end_ofPL6:	
  3396                           
  3397                           	psect	text22
  3398  03F4                     __ptext22:	
  3399 ;; *************** function _FCTloop *****************
  3400 ;; Defined at:
  3401 ;;		line 21 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\fct.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;		None
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;		None
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      void 
  3408 ;; Registers used:
  3409 ;;		wreg, status,2, status,0, pclath, cstack
  3410 ;; Tracked objects:
  3411 ;;		On entry : 300/0
  3412 ;;		On exit  : 300/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3415 ;;      Params:         0       0       0       0       0
  3416 ;;      Locals:         0       0       0       0       0
  3417 ;;      Temps:          0       0       0       0       0
  3418 ;;      Totals:         0       0       0       0       0
  3419 ;;Total ram usage:        0 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; Hardware stack levels required when called:    5
  3422 ;; This function calls:
  3423 ;;		_FCTjudge
  3424 ;;		_FCTkey
  3425 ;; This function is called by:
  3426 ;;		_main
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           
  3431                           ;psect for function _FCTloop
  3432  03F4                     _FCTloop:	
  3433                           
  3434                           ;fct.c: 23: FCTkey();
  3435                           
  3436                           ;incstack = 0
  3437                           ; Regs used in _FCTloop: [wreg+status,2+status,0+pclath+cstack]
  3438  03F4  242E  120A  118A   	fcall	_FCTkey
  3439                           
  3440                           ;fct.c: 24: FCTjudge();
  3441  03F7  2BF8               	ljmp	l7243
  3442  03F8                     __end_of_FCTloop:	
  3443  03F8                     __ptext26:	
  3444 ;; *************** function _FCTjudge *****************
  3445 ;; Defined at:
  3446 ;;		line 107 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\fct.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;		None
  3449 ;; Auto vars:     Size  Location     Type
  3450 ;;		None
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  1    wreg      void 
  3453 ;; Registers used:
  3454 ;;		wreg, status,2, status,0, pclath, cstack
  3455 ;; Tracked objects:
  3456 ;;		On entry : 300/0
  3457 ;;		On exit  : 300/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3460 ;;      Params:         0       0       0       0       0
  3461 ;;      Locals:         0       0       0       0       0
  3462 ;;      Temps:          0       0       0       0       0
  3463 ;;      Totals:         0       0       0       0       0
  3464 ;;Total ram usage:        0 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; Hardware stack levels required when called:    3
  3467 ;; This function calls:
  3468 ;;		_G_KEY
  3469 ;;		_R_KEY
  3470 ;;		_key1
  3471 ;;		_key2
  3472 ;; This function is called by:
  3473 ;;		_FCTloop
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           
  3478                           ;psect for function _FCTjudge
  3479  03F8                     _FCTjudge:	
  3480  03F8                     l7243:	
  3481                           ;incstack = 0
  3482                           ; Regs used in _FCTjudge: [wreg+status,2+status,0+pclath+cstack]
  3483                           
  3484                           
  3485                           ;fct.c: 109: if(fctBits001.bits.bit_0 == 1)
  3486  03F8  1C51               	btfss	_fctBits001,0	;volatile
  3487  03F9  2C11               	goto	l4840
  3488                           
  3489                           ;fct.c: 110: {
  3490                           ;fct.c: 111: if(++flag_time == 1500)
  3491  03FA  0AA0               	incf	_flag_time,f	;volatile
  3492  03FB  1903               	skipnz
  3493  03FC  0AA1               	incf	_flag_time+1,f	;volatile
  3494  03FD  30DC               	movlw	220
  3495  03FE  0620               	xorwf	_flag_time,w	;volatile
  3496  03FF  3005               	movlw	5
  3497  0400  1903               	skipnz
  3498  0401  0621               	xorwf	_flag_time+1,w	;volatile
  3499  0402  1D03               	btfss	3,2
  3500  0403  2C07               	goto	l7251
  3501                           
  3502                           ;fct.c: 112: {
  3503                           ;fct.c: 113: fctBits001.bits.bit_0 = 0;
  3504  0404  1051               	bcf	_fctBits001,0	;volatile
  3505                           
  3506                           ;fct.c: 114: flag_time = 0;
  3507  0405  01A0               	clrf	_flag_time	;volatile
  3508  0406  01A1               	clrf	_flag_time+1	;volatile
  3509  0407                     l7251:	
  3510                           
  3511                           ;fct.c: 115: }
  3512                           ;fct.c: 116: if(RB1 == 0)
  3513  0407  1886               	btfsc	6,1	;volatile
  3514  0408  2C0A               	goto	l4842
  3515                           
  3516                           ;fct.c: 117: {
  3517                           ;fct.c: 118: R_KEY();
  3518  0409  2C1F               	ljmp	l6909
  3519  040A                     l4842:	
  3520                           ;fct.c: 119: }
  3521                           
  3522                           
  3523                           ;fct.c: 120: else
  3524                           ;fct.c: 121: {
  3525                           ;fct.c: 122: if(RA6 == 0)
  3526  040A  1B05               	btfsc	5,6	;volatile
  3527  040B  2C0D               	goto	l4844
  3528                           
  3529                           ;fct.c: 123: {
  3530                           ;fct.c: 124: key1();
  3531  040C  2C24               	ljmp	l6911
  3532  040D                     l4844:	
  3533                           ;fct.c: 125: }
  3534                           
  3535                           
  3536                           ;fct.c: 126: else
  3537                           ;fct.c: 127: {
  3538                           ;fct.c: 128: if(RB0 == 0)
  3539  040D  1806               	btfsc	6,0	;volatile
  3540  040E  2C10               	goto	l7259
  3541                           
  3542                           ;fct.c: 129: {
  3543                           ;fct.c: 130: key2();
  3544  040F  2C29               	ljmp	l6913
  3545  0410                     l7259:	
  3546                           ;fct.c: 131: }
  3547                           
  3548                           
  3549                           ;fct.c: 132: else
  3550                           ;fct.c: 133: {
  3551                           ;fct.c: 134: G_KEY();
  3552  0410  2C1A               	ljmp	l6907
  3553  0411                     l4840:	
  3554                           
  3555                           ;fct.c: 139: else if(fctBits001.bits.bit_0 == 0)
  3556  0411  1851               	btfsc	_fctBits001,0	;volatile
  3557  0412  0008               	return
  3558                           
  3559                           ;fct.c: 140: {
  3560                           ;fct.c: 141: RA5 = 0;
  3561  0413  1285               	bcf	5,5	;volatile
  3562                           
  3563                           ;fct.c: 142: RA2 = 0;
  3564  0414  1105               	bcf	5,2	;volatile
  3565                           
  3566                           ;fct.c: 143: RA4 = 0;
  3567  0415  1205               	bcf	5,4	;volatile
  3568                           
  3569                           ;fct.c: 144: RA1 = 0;
  3570  0416  1085               	bcf	5,1	;volatile
  3571                           
  3572                           ;fct.c: 145: flag_time = 0;
  3573  0417  01A0               	clrf	_flag_time	;volatile
  3574  0418  01A1               	clrf	_flag_time+1	;volatile
  3575  0419  0008               	return
  3576  041A                     __end_of_FCTjudge:	
  3577  041A                     __ptext30:	
  3578 ;; *************** function _G_KEY *****************
  3579 ;; Defined at:
  3580 ;;		line 75 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\fct.c"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;		None
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;		None
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      void 
  3587 ;; Registers used:
  3588 ;;		None
  3589 ;; Tracked objects:
  3590 ;;		On entry : 300/0
  3591 ;;		On exit  : 300/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3594 ;;      Params:         0       0       0       0       0
  3595 ;;      Locals:         0       0       0       0       0
  3596 ;;      Temps:          0       0       0       0       0
  3597 ;;      Totals:         0       0       0       0       0
  3598 ;;Total ram usage:        0 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    2
  3601 ;; This function calls:
  3602 ;;		Nothing
  3603 ;; This function is called by:
  3604 ;;		_FCTjudge
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           
  3609                           ;psect for function _G_KEY
  3610  041A                     _G_KEY:	
  3611  041A                     l6907:	
  3612                           ;incstack = 0
  3613                           ; Regs used in _G_KEY: []
  3614                           
  3615                           
  3616                           ;fct.c: 77: RA5 = 0;
  3617  041A  1285               	bcf	5,5	;volatile
  3618                           
  3619                           ;fct.c: 78: RA2 = 0;
  3620  041B  1105               	bcf	5,2	;volatile
  3621                           
  3622                           ;fct.c: 79: RA4 = 1;
  3623  041C  1605               	bsf	5,4	;volatile
  3624                           
  3625                           ;fct.c: 80: RA1 = 0;
  3626  041D  1085               	bcf	5,1	;volatile
  3627  041E  0008               	return
  3628  041F                     __end_of_G_KEY:	
  3629  041F                     __ptext29:	
  3630 ;; *************** function _R_KEY *****************
  3631 ;; Defined at:
  3632 ;;		line 83 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\fct.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      void 
  3639 ;; Registers used:
  3640 ;;		None
  3641 ;; Tracked objects:
  3642 ;;		On entry : 300/0
  3643 ;;		On exit  : 300/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3646 ;;      Params:         0       0       0       0       0
  3647 ;;      Locals:         0       0       0       0       0
  3648 ;;      Temps:          0       0       0       0       0
  3649 ;;      Totals:         0       0       0       0       0
  3650 ;;Total ram usage:        0 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    2
  3653 ;; This function calls:
  3654 ;;		Nothing
  3655 ;; This function is called by:
  3656 ;;		_FCTjudge
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           
  3661                           ;psect for function _R_KEY
  3662  041F                     _R_KEY:	
  3663  041F                     l6909:	
  3664                           ;incstack = 0
  3665                           ; Regs used in _R_KEY: []
  3666                           
  3667                           
  3668                           ;fct.c: 85: RA5 = 0;
  3669  041F  1285               	bcf	5,5	;volatile
  3670                           
  3671                           ;fct.c: 86: RA2 = 1;
  3672  0420  1505               	bsf	5,2	;volatile
  3673                           
  3674                           ;fct.c: 87: RA4 = 1;
  3675  0421  1605               	bsf	5,4	;volatile
  3676                           
  3677                           ;fct.c: 88: RA1 = 0;
  3678  0422  1085               	bcf	5,1	;volatile
  3679  0423  0008               	return
  3680  0424                     __end_of_R_KEY:	
  3681  0424                     __ptext28:	
  3682 ;; *************** function _key1 *****************
  3683 ;; Defined at:
  3684 ;;		line 91 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\fct.c"
  3685 ;; Parameters:    Size  Location     Type
  3686 ;;		None
  3687 ;; Auto vars:     Size  Location     Type
  3688 ;;		None
  3689 ;; Return value:  Size  Location     Type
  3690 ;;                  1    wreg      void 
  3691 ;; Registers used:
  3692 ;;		None
  3693 ;; Tracked objects:
  3694 ;;		On entry : 300/0
  3695 ;;		On exit  : 300/0
  3696 ;;		Unchanged: 0/0
  3697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3698 ;;      Params:         0       0       0       0       0
  3699 ;;      Locals:         0       0       0       0       0
  3700 ;;      Temps:          0       0       0       0       0
  3701 ;;      Totals:         0       0       0       0       0
  3702 ;;Total ram usage:        0 bytes
  3703 ;; Hardware stack levels used:    1
  3704 ;; Hardware stack levels required when called:    2
  3705 ;; This function calls:
  3706 ;;		Nothing
  3707 ;; This function is called by:
  3708 ;;		_FCTjudge
  3709 ;; This function uses a non-reentrant model
  3710 ;;
  3711                           
  3712                           
  3713                           ;psect for function _key1
  3714  0424                     _key1:	
  3715  0424                     l6911:	
  3716                           ;incstack = 0
  3717                           ; Regs used in _key1: []
  3718                           
  3719                           
  3720                           ;fct.c: 93: RA5 = 1;
  3721  0424  1685               	bsf	5,5	;volatile
  3722                           
  3723                           ;fct.c: 94: RA2 = 0;
  3724  0425  1105               	bcf	5,2	;volatile
  3725                           
  3726                           ;fct.c: 95: RA4 = 1;
  3727  0426  1605               	bsf	5,4	;volatile
  3728                           
  3729                           ;fct.c: 96: RA1 = 0;
  3730  0427  1085               	bcf	5,1	;volatile
  3731  0428  0008               	return
  3732  0429                     __end_of_key1:	
  3733  0429                     __ptext27:	
  3734 ;; *************** function _key2 *****************
  3735 ;; Defined at:
  3736 ;;		line 99 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\fct.c"
  3737 ;; Parameters:    Size  Location     Type
  3738 ;;		None
  3739 ;; Auto vars:     Size  Location     Type
  3740 ;;		None
  3741 ;; Return value:  Size  Location     Type
  3742 ;;                  1    wreg      void 
  3743 ;; Registers used:
  3744 ;;		None
  3745 ;; Tracked objects:
  3746 ;;		On entry : 300/0
  3747 ;;		On exit  : 300/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3750 ;;      Params:         0       0       0       0       0
  3751 ;;      Locals:         0       0       0       0       0
  3752 ;;      Temps:          0       0       0       0       0
  3753 ;;      Totals:         0       0       0       0       0
  3754 ;;Total ram usage:        0 bytes
  3755 ;; Hardware stack levels used:    1
  3756 ;; Hardware stack levels required when called:    2
  3757 ;; This function calls:
  3758 ;;		Nothing
  3759 ;; This function is called by:
  3760 ;;		_FCTjudge
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           
  3765                           ;psect for function _key2
  3766  0429                     _key2:	
  3767  0429                     l6913:	
  3768                           ;incstack = 0
  3769                           ; Regs used in _key2: []
  3770                           
  3771                           
  3772                           ;fct.c: 101: RA5 = 0;
  3773  0429  1285               	bcf	5,5	;volatile
  3774                           
  3775                           ;fct.c: 102: RA2 = 0;
  3776  042A  1105               	bcf	5,2	;volatile
  3777                           
  3778                           ;fct.c: 103: RA4 = 1;
  3779  042B  1605               	bsf	5,4	;volatile
  3780                           
  3781                           ;fct.c: 104: RA1 = 1;
  3782  042C  1485               	bsf	5,1	;volatile
  3783  042D  0008               	return
  3784  042E                     __end_of_key2:	
  3785  042E                     __ptext23:	
  3786 ;; *************** function _FCTkey *****************
  3787 ;; Defined at:
  3788 ;;		line 50 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\fct.c"
  3789 ;; Parameters:    Size  Location     Type
  3790 ;;		None
  3791 ;; Auto vars:     Size  Location     Type
  3792 ;;		None
  3793 ;; Return value:  Size  Location     Type
  3794 ;;                  1    wreg      void 
  3795 ;; Registers used:
  3796 ;;		wreg, status,2, status,0, pclath, cstack
  3797 ;; Tracked objects:
  3798 ;;		On entry : 300/0
  3799 ;;		On exit  : 300/0
  3800 ;;		Unchanged: 0/0
  3801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3802 ;;      Params:         0       0       0       0       0
  3803 ;;      Locals:         0       0       0       0       0
  3804 ;;      Temps:          0       0       0       0       0
  3805 ;;      Totals:         0       0       0       0       0
  3806 ;;Total ram usage:        0 bytes
  3807 ;; Hardware stack levels used:    1
  3808 ;; Hardware stack levels required when called:    4
  3809 ;; This function calls:
  3810 ;;		_Delay_nms
  3811 ;; This function is called by:
  3812 ;;		_FCTloop
  3813 ;; This function uses a non-reentrant model
  3814 ;;
  3815                           
  3816                           
  3817                           ;psect for function _FCTkey
  3818  042E                     _FCTkey:	
  3819                           
  3820                           ;fct.c: 52: if(fctBits001.bits.bit_0 == 1)
  3821                           
  3822                           ;incstack = 0
  3823                           ; Regs used in _FCTkey: [wreg+status,2+status,0+pclath+cstack]
  3824  042E  1851               	btfsc	_fctBits001,0	;volatile
  3825                           
  3826                           ;fct.c: 53: {
  3827                           ;fct.c: 54: if(RB2 == 1)
  3828  042F  1D06               	btfss	6,2	;volatile
  3829  0430  2C3E               	goto	l4820
  3830                           
  3831                           ;fct.c: 55: {
  3832                           ;fct.c: 56: Delay_nms(1000);
  3833  0431  30E8               	movlw	232
  3834  0432  00F4               	movwf	Delay_nms@inittempl
  3835  0433  3003               	movlw	3
  3836  0434  00F5               	movwf	Delay_nms@inittempl+1
  3837  0435  244A  120A  118A   	fcall	_Delay_nms
  3838                           
  3839                           ;fct.c: 57: if(RB2 == 1)
  3840  0438  1283               	bcf	3,5	;RP0=0, select bank0
  3841  0439  1303               	bcf	3,6	;RP1=0, select bank0
  3842  043A  1D06               	btfss	6,2	;volatile
  3843  043B  2C3E               	goto	l4820
  3844                           
  3845                           ;fct.c: 58: {
  3846                           ;fct.c: 59: fctBits001.bits.bit_0 = 0;
  3847  043C  1051               	bcf	_fctBits001,0	;volatile
  3848                           
  3849                           ;fct.c: 60: return;
  3850  043D  0008               	return
  3851  043E                     l4820:	
  3852                           
  3853                           ;fct.c: 61: }
  3854                           ;fct.c: 62: }
  3855                           ;fct.c: 63: }
  3856                           ;fct.c: 64: if(RB2 == 1)
  3857  043E  1D06               	btfss	6,2	;volatile
  3858  043F  0008               	return
  3859                           
  3860                           ;fct.c: 65: {
  3861                           ;fct.c: 66: Delay_nms(1000);
  3862  0440  30E8               	movlw	232
  3863  0441  00F4               	movwf	Delay_nms@inittempl
  3864  0442  3003               	movlw	3
  3865  0443  00F5               	movwf	Delay_nms@inittempl+1
  3866  0444  244A               	fcall	_Delay_nms
  3867                           
  3868                           ;fct.c: 67: if(RB2 == 1)
  3869  0445  1283               	bcf	3,5	;RP0=0, select bank0
  3870  0446  1303               	bcf	3,6	;RP1=0, select bank0
  3871  0447  1906               	btfsc	6,2	;volatile
  3872                           
  3873                           ;fct.c: 68: {
  3874                           ;fct.c: 69: fctBits001.bits.bit_0 = 1;
  3875  0448  1451               	bsf	_fctBits001,0	;volatile
  3876                           
  3877                           ;fct.c: 70: return;
  3878  0449  0008               	return
  3879  044A                     __end_of_FCTkey:	
  3880  044A                     __ptext24:	
  3881 ;; *************** function _Delay_nms *****************
  3882 ;; Defined at:
  3883 ;;		line 35 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\main.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  inittempl       2    4[COMMON] unsigned int 
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;  i               2    6[COMMON] unsigned int 
  3888 ;;  gtemp           1    8[COMMON] unsigned char 
  3889 ;; Return value:  Size  Location     Type
  3890 ;;                  1    wreg      void 
  3891 ;; Registers used:
  3892 ;;		wreg, status,2, status,0, pclath, cstack
  3893 ;; Tracked objects:
  3894 ;;		On entry : 200/100
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3898 ;;      Params:         2       0       0       0       0
  3899 ;;      Locals:         3       0       0       0       0
  3900 ;;      Temps:          0       0       0       0       0
  3901 ;;      Totals:         5       0       0       0       0
  3902 ;;Total ram usage:        5 bytes
  3903 ;; Hardware stack levels used:    1
  3904 ;; Hardware stack levels required when called:    3
  3905 ;; This function calls:
  3906 ;;		_Delay
  3907 ;; This function is called by:
  3908 ;;		_main
  3909 ;;		_FCTkey
  3910 ;; This function uses a non-reentrant model
  3911 ;;
  3912                           
  3913                           
  3914                           ;psect for function _Delay_nms
  3915  044A                     _Delay_nms:	
  3916                           
  3917                           ;main.c: 37: unsigned int i;
  3918                           ;main.c: 38: unsigned char gtemp;
  3919                           ;main.c: 40: gtemp = 0;
  3920                           
  3921                           ;incstack = 0
  3922                           ; Regs used in _Delay_nms: [wreg+status,2+status,0+pclath+cstack]
  3923  044A  01F8               	clrf	Delay_nms@gtemp
  3924                           
  3925                           ;main.c: 41: if (GIE == 1)
  3926  044B  1F8B               	btfss	11,7	;volatile
  3927  044C  2C50               	goto	l6857
  3928                           
  3929                           ;main.c: 42: {
  3930                           ;main.c: 43: gtemp = 1;
  3931  044D  01F8               	clrf	Delay_nms@gtemp
  3932  044E  0AF8               	incf	Delay_nms@gtemp,f
  3933                           
  3934                           ;main.c: 44: GIE = 0;
  3935  044F  138B               	bcf	11,7	;volatile
  3936  0450                     l6857:	
  3937                           
  3938                           ;main.c: 45: }
  3939                           ;main.c: 46: for (i = 0; i < inittempl; i++)
  3940  0450  01F6               	clrf	Delay_nms@i
  3941  0451  01F7               	clrf	Delay_nms@i+1
  3942  0452                     l6863:	
  3943  0452  0875               	movf	Delay_nms@inittempl+1,w
  3944  0453  0277               	subwf	Delay_nms@i+1,w
  3945  0454  1D03               	skipz
  3946  0455  2C58               	goto	u1205
  3947  0456  0874               	movf	Delay_nms@inittempl,w
  3948  0457  0276               	subwf	Delay_nms@i,w
  3949  0458                     u1205:	
  3950  0458  1803               	btfsc	3,0
  3951  0459  2C65               	goto	l6865
  3952                           
  3953                           ;main.c: 47: {
  3954                           ;main.c: 48: Delay(154);
  3955  045A  309A               	movlw	154
  3956  045B  00F2               	movwf	Delay@dtemp
  3957  045C  01F3               	clrf	Delay@dtemp+1
  3958  045D  2469  120A  118A   	fcall	_Delay
  3959  0460  0064               	clrwdt	;# 
  3960  0461  0AF6               	incf	Delay_nms@i,f
  3961  0462  1903               	skipnz
  3962  0463  0AF7               	incf	Delay_nms@i+1,f
  3963  0464  2C52               	goto	l6863
  3964  0465                     l6865:	
  3965                           
  3966                           ;main.c: 50: }
  3967                           ;main.c: 51: if (gtemp == 1)
  3968  0465  0B78               	decfsz	Delay_nms@gtemp,w
  3969  0466  0008               	return
  3970                           
  3971                           ;main.c: 52: GIE = 1;
  3972  0467  178B               	bsf	11,7	;volatile
  3973  0468  0008               	return
  3974  0469                     __end_of_Delay_nms:	
  3975  0469                     __ptext25:	
  3976 ;; *************** function _Delay *****************
  3977 ;; Defined at:
  3978 ;;		line 27 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\main.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;  dtemp           2    2[COMMON] unsigned int 
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;		None
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  1    wreg      void 
  3985 ;; Registers used:
  3986 ;;		wreg, status,2, status,0
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/100
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3992 ;;      Params:         2       0       0       0       0
  3993 ;;      Locals:         0       0       0       0       0
  3994 ;;      Temps:          0       0       0       0       0
  3995 ;;      Totals:         2       0       0       0       0
  3996 ;;Total ram usage:        2 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    2
  3999 ;; This function calls:
  4000 ;;		Nothing
  4001 ;; This function is called by:
  4002 ;;		_Delay_nms
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           
  4007                           ;psect for function _Delay
  4008  0469                     _Delay:	
  4009  0469                     l6785:	
  4010                           ;main.c: 29: while (dtemp--)
  4011                           
  4012                           ;incstack = 0
  4013                           ; Regs used in _Delay: [wreg+status,2+status,0]
  4014                           
  4015  0469  3001               	movlw	1
  4016  046A  02F2               	subwf	Delay@dtemp,f
  4017  046B  3000               	movlw	0
  4018  046C  1C03               	skipc
  4019  046D  03F3               	decf	Delay@dtemp+1,f
  4020  046E  02F3               	subwf	Delay@dtemp+1,f
  4021  046F  0F72               	incfsz	Delay@dtemp,w
  4022  0470  2C69               	goto	l6785
  4023  0471  0A73               	incf	Delay@dtemp+1,w
  4024  0472  1903               	btfsc	3,2
  4025  0473  0008               	return
  4026  0474  2C69               	goto	l6785
  4027  0475                     __end_of_Delay:	
  4028                           
  4029                           	psect	text31
  4030  04E4                     __ptext31:	
  4031 ;; *************** function _Int_ALL *****************
  4032 ;; Defined at:
  4033 ;;		line 563 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\main.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;		None
  4036 ;; Auto vars:     Size  Location     Type
  4037 ;;		None
  4038 ;; Return value:  Size  Location     Type
  4039 ;;                  1    wreg      void 
  4040 ;; Registers used:
  4041 ;;		wreg, status,2, status,0, pclath, cstack
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 300/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4047 ;;      Params:         0       0       0       0       0
  4048 ;;      Locals:         0       0       0       0       0
  4049 ;;      Temps:          2       0       0       0       0
  4050 ;;      Totals:         2       0       0       0       0
  4051 ;;Total ram usage:        2 bytes
  4052 ;; Hardware stack levels used:    1
  4053 ;; Hardware stack levels required when called:    1
  4054 ;; This function calls:
  4055 ;;		_INT_LED_SHOW
  4056 ;; This function is called by:
  4057 ;;		Interrupt level 1
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           
  4062                           ;psect for function _Int_ALL
  4063  04E4                     _Int_ALL:	
  4064                           
  4065                           ;main.c: 566: if (TMR1IF)
  4066  04E4  1283               	bcf	3,5	;RP0=0, select bank0
  4067  04E5  1303               	bcf	3,6	;RP1=0, select bank0
  4068  04E6  1C0C               	btfss	12,0	;volatile
  4069  04E7  2CFC               	goto	i1l7383
  4070                           
  4071                           ;main.c: 567: {
  4072                           ;main.c: 573: TMR1 = 0xE0C0;
  4073  04E8  30E0               	movlw	224
  4074  04E9  008F               	movwf	15	;volatile
  4075  04EA  30C0               	movlw	192
  4076  04EB  008E               	movwf	14	;volatile
  4077                           
  4078                           ;main.c: 574: TMR1IF = 0;
  4079  04EC  100C               	bcf	12,0	;volatile
  4080                           
  4081                           ;main.c: 577: Fsys1.bits.bit_1 = 1;
  4082  04ED  14D0               	bsf	_Fsys1,1	;volatile
  4083                           
  4084                           ;main.c: 580: if (++MainTime_1s >= 1000)
  4085  04EE  0AB8               	incf	_MainTime_1s,f	;volatile
  4086  04EF  1903               	skipnz
  4087  04F0  0AB9               	incf	_MainTime_1s+1,f	;volatile
  4088  04F1  3003               	movlw	3
  4089  04F2  0239               	subwf	_MainTime_1s+1,w	;volatile
  4090  04F3  30E8               	movlw	232
  4091  04F4  1903               	skipnz
  4092  04F5  0238               	subwf	_MainTime_1s,w	;volatile
  4093  04F6  1C03               	skipc
  4094  04F7  2CFC               	goto	i1l7383
  4095                           
  4096                           ;main.c: 581: {
  4097                           ;main.c: 582: MainTime_1s = 0;
  4098  04F8  01B8               	clrf	_MainTime_1s	;volatile
  4099  04F9  01B9               	clrf	_MainTime_1s+1	;volatile
  4100                           
  4101                           ;main.c: 583: Fsys1s.byte = 0xFF;
  4102  04FA  30FF               	movlw	255
  4103  04FB  00CF               	movwf	_Fsys1s	;volatile
  4104  04FC                     i1l7383:	
  4105                           
  4106                           ;main.c: 591: }
  4107                           ;main.c: 592: }
  4108                           ;main.c: 595: if (TMR2IF)
  4109  04FC  1C8C               	btfss	12,1	;volatile
  4110  04FD  2D00               	goto	i1l1980
  4111                           
  4112                           ;main.c: 596: {
  4113                           ;main.c: 597: TMR2IF = 0;
  4114  04FE  108C               	bcf	12,1	;volatile
  4115                           
  4116                           ;main.c: 598: INT_LED_SHOW();
  4117  04FF  2507               	fcall	_INT_LED_SHOW
  4118  0500                     i1l1980:	
  4119  0500  0871               	movf	??_Int_ALL+1,w
  4120  0501  008A               	movwf	10
  4121  0502  0E70               	swapf	??_Int_ALL^(0+-128),w
  4122  0503  0083               	movwf	3
  4123  0504  0EFE               	swapf	126,f
  4124  0505  0E7E               	swapf	126,w
  4125  0506  0009               	retfie
  4126  0507                     __end_of_Int_ALL:	
  4127  0507                     __ptext32:	
  4128 ;; *************** function _INT_LED_SHOW *****************
  4129 ;; Defined at:
  4130 ;;		line 193 in file "D:\mywork.wqs\SOUOCETREE\ABM\ABM007_FM3\source\light.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;		None
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;		None
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  1    wreg      void 
  4137 ;; Registers used:
  4138 ;;		wreg, status,2, status,0
  4139 ;; Tracked objects:
  4140 ;;		On entry : 300/0
  4141 ;;		On exit  : 300/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4144 ;;      Params:         0       0       0       0       0
  4145 ;;      Locals:         0       0       0       0       0
  4146 ;;      Temps:          0       0       0       0       0
  4147 ;;      Totals:         0       0       0       0       0
  4148 ;;Total ram usage:        0 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; This function calls:
  4151 ;;		Nothing
  4152 ;; This function is called by:
  4153 ;;		_Int_ALL
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           
  4158                           ;psect for function _INT_LED_SHOW
  4159  0507                     _INT_LED_SHOW:	
  4160                           
  4161                           ;light.c: 196: if((FledBits01.bits.bit_0 == 1) && (fctBits001.bits.bit_0 == 0))
  4162                           
  4163                           ;incstack = 0
  4164                           ; Regs used in _INT_LED_SHOW: [wreg+status,2+status,0]
  4165  0507  184D               	btfsc	_FledBits01,0	;volatile
  4166  0508  1851               	btfsc	_fctBits001,0	;volatile
  4167  0509  0008               	return
  4168                           
  4169                           ;light.c: 197: {
  4170                           ;light.c: 198: if (++CNTbreath_Led == 80)
  4171  050A  0AC0               	incf	_CNTbreath_Led,f	;volatile
  4172  050B  1903               	skipnz
  4173  050C  0AC1               	incf	_CNTbreath_Led+1,f	;volatile
  4174  050D  3050               	movlw	80
  4175  050E  0640               	xorwf	_CNTbreath_Led,w	;volatile
  4176  050F  0441               	iorwf	_CNTbreath_Led+1,w	;volatile
  4177  0510  1D03               	btfss	3,2
  4178  0511  2D15               	goto	i1l7279
  4179                           
  4180                           ;light.c: 199: {
  4181                           ;light.c: 200: CNTbreath_Led = 0;
  4182  0512  01C0               	clrf	_CNTbreath_Led	;volatile
  4183  0513  01C1               	clrf	_CNTbreath_Led+1	;volatile
  4184                           
  4185                           ;light.c: 201: RA5 = 0;
  4186  0514  1285               	bcf	5,5	;volatile
  4187  0515                     i1l7279:	
  4188                           
  4189                           ;light.c: 202: }
  4190                           ;light.c: 203: if (CNTbreath_Led >= CNTbreath_Led2)
  4191  0515  083D               	movf	_CNTbreath_Led2+1,w	;volatile
  4192  0516  0241               	subwf	_CNTbreath_Led+1,w	;volatile
  4193  0517  1D03               	skipz
  4194  0518  2D1B               	goto	u218_25
  4195  0519  083C               	movf	_CNTbreath_Led2,w	;volatile
  4196  051A  0240               	subwf	_CNTbreath_Led,w	;volatile
  4197  051B                     u218_25:	
  4198  051B  1C03               	skipc
  4199  051C  2D1F               	goto	i1l967
  4200                           
  4201                           ;light.c: 204: {
  4202                           ;light.c: 205: RA5 = 1;
  4203  051D  1685               	bsf	5,5	;volatile
  4204                           
  4205                           ;light.c: 206: }
  4206  051E  0008               	return
  4207  051F                     i1l967:	
  4208                           
  4209                           ;light.c: 207: else
  4210                           ;light.c: 208: {
  4211                           ;light.c: 209: RA5 = 0;
  4212  051F  1285               	bcf	5,5	;volatile
  4213  0520  0008               	return
  4214  0521                     __end_of_INT_LED_SHOW:	
  4215  007E                     btemp	set	126	;btemp
  4216  007E                     wtemp0	set	126
  4217                           
  4218                           	psect	intentry
  4219  0004                     __pintentry:	
  4220                           ;incstack = 0
  4221                           ; Regs used in _Int_ALL: [wreg+status,2+status,0+pclath+cstack]
  4222                           
  4223  0004                     interrupt_function:	
  4224  007E                     saved_w	set	btemp
  4225  0004  00FE               	movwf	btemp
  4226  0005  0E03               	swapf	3,w
  4227  0006  00F0               	movwf	??_Int_ALL
  4228  0007  080A               	movf	10,w
  4229  0008  00F1               	movwf	??_Int_ALL+1
  4230  0009  120A  118A  2CE4   	ljmp	_Int_ALL


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80      7      65
    BANK1            80      0       0
    BANK3            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    KeyControl@this	PTR struct _KEY_PRIVATE size(1) Largest target is 8
		 -> KeyLines(BANK0[8]), 


Critical Paths under _main in COMMON

    _main->_Delay_nms
    _GsensorLoop->_SensorControl
    _GflushLoop->_FlushJudge
    _FlushJudge->_GkeyLoop
    _GkeyLoop->_KeyControl
    _FCTkey->_Delay_nms
    _Delay_nms->_Delay

Critical Paths under _Int_ALL in COMMON

    None.

Critical Paths under _main in BANK0

    _GkeyLoop->_KeyControl

Critical Paths under _Int_ALL in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Int_ALL in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Int_ALL in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Int_ALL in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1395
                          _Delay_nms
                            _FCTloop
                         _GflushLoop
                           _GledLoop
                        _GsensorLoop
                          _Init_GPIO
                            _Init_IC
                        _Init_TIMER1
                        _Init_TIMER2
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_IC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_GPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GsensorLoop                                          0     0      0       0
                      _SensorControl
                        _SensorJudge
                          _SensorKey
                         _SensorTime
 ---------------------------------------------------------------------------------
 (2) _SensorTime                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorKey                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorJudge                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorControl                                        1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GledLoop                                             0     0      0       0
                            _LED_Con
                          _LED_Judge
                            _LED_Key
                           _LED_Time
 ---------------------------------------------------------------------------------
 (2) _LED_Time                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Key                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Judge                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Con                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GflushLoop                                           0     0      0     699
                           _FlushCon
                         _FlushJudge
                          _FlushTime
 ---------------------------------------------------------------------------------
 (2) _FlushTime                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FlushJudge                                           1     1      0     699
                                              6 COMMON     1     1      0
                           _GkeyLoop
 ---------------------------------------------------------------------------------
 (3) _GkeyLoop                                             2     2      0     631
                                              4 COMMON     2     2      0
                         _KeyControl
                            _ScanKey
 ---------------------------------------------------------------------------------
 (4) _ScanKey                                              1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _KeyControl                                           9     9      0     609
                                              2 COMMON     2     2      0
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _FlushCon                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FCTloop                                              0     0      0     348
                           _FCTjudge
                             _FCTkey
 ---------------------------------------------------------------------------------
 (2) _FCTkey                                               0     0      0     348
                          _Delay_nms
 ---------------------------------------------------------------------------------
 (3) _Delay_nms                                            5     3      2     348
                                              4 COMMON     5     3      2
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _Delay                                                2     0      2      86
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _FCTjudge                                             0     0      0       0
                              _G_KEY
                              _R_KEY
                               _key1
                               _key2
 ---------------------------------------------------------------------------------
 (3) _key2                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _key1                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _R_KEY                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _G_KEY                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Int_ALL                                              2     2      0       0
                                              0 COMMON     2     2      0
                       _INT_LED_SHOW
 ---------------------------------------------------------------------------------
 (6) _INT_LED_SHOW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_nms
     _Delay
   _FCTloop
     _FCTjudge
       _G_KEY
       _R_KEY
       _key1
       _key2
     _FCTkey
       _Delay_nms
         _Delay
   _GflushLoop
     _FlushCon
     _FlushJudge
       _GkeyLoop
         _KeyControl
         _ScanKey
     _FlushTime
   _GledLoop
     _LED_Con
     _LED_Judge
     _LED_Key
     _LED_Time
   _GsensorLoop
     _SensorControl
     _SensorJudge
     _SensorKey
     _SensorTime
   _Init_GPIO
   _Init_IC
   _Init_TIMER1
   _Init_TIMER2

 _Int_ALL (ROOT)
   _INT_LED_SHOW

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      7      41       4       81.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BITBANK3            50      0       0       7        0.0%
BANK3               50      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
ABS                  0      0      4C      11        0.0%
DATA                 0      0      4C      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jun 04 13:17:31 2024

                     PL2 0215                       PL4 021F                       PL6 0229  
                     PL8 031D                       fsr 0004                      PL10 03E8  
                    PL12 03EE                      _GIE 005F                      _RA1 0029  
                    _RA2 002A                      _RB0 0030                      _RB1 0031  
                    _RA4 002C                      _RB2 0032                      _RA5 002D  
                    _RA6 002E                      _PR2 0092                      fsr0 0004  
                    indf 0000          __end_of_LED_Con 03E0          __end_of_LED_Key 0331  
        __end_of_FCTloop 03F8                     l2910 0025                     l2903 0110  
                   l2920 0054                     l1960 04AB                     l2905 0116  
                   l2931 008D                     l2923 0059                     l2915 0034  
                   l7003 03AB                     l3900 0287                     l1956 04A3  
                   l2933 00A0                     l2925 0065                     l3901 0288  
                   l1965 04B3                     l2918 0049                     l2935 00AC  
                   l2927 0075                     l7015 03D7                     l2937 00B4  
                   l2929 0081                     l2938 00BE                     l7131 00C8  
                   l7211 0308                     l4820 043E                     l7061 002F  
                   l7053 0024                     l2893 00F1                     l7205 02FA  
                   l2894 0107                     l7207 02FD                     l3863 025A  
                   l4840 0411                     l7057 002D                     l3881 02BB  
                   l7217 030B                     l7153 025F                     l4842 040A  
                   l3890 02E7                     l7251 0407                     l7243 03F8  
                   l7219 0273                     l3875 028F                     l7147 0252  
                   l4844 040D                     l3877 02A3                     l3886 02CF  
                   l7175 02B8                     l7167 02A0                     l5760 0175  
                   l7425 01E7                     l7409 01C8                     l7185 02C2  
                   l5762 0178                     l7259 0410                     l7179 0292  
                   l7531 0496                     l7453 0163                     l7197 02E4  
                   l7189 02CC                     l6911 0424                     l7535 049D  
                   l6913 0429                     l5769 0214                     l7545 04BB  
                   l6907 041A                     l7467 017B                     l7547 04DB  
                   l6909 041F                     l7469 0183                     l7485 00F5  
                   l6941 0359                     l6925 03E6                     l6863 0452  
                   l7399 01A7                     l7487 00F8                     l6951 0364  
                   l6927 0334                     l6785 0469                     l6865 0465  
                   l6857 0450                     l6793 0208                     l7489 00FB  
                   l6971 038D                     l6789 0204                     l6949 0378  
                   l6799 020C                     l6959 0368                     l6985 03BE  
                   l6977 0399                     l6995 03A7                     l6987 03A0  
                   u2020 028C                     u1205 0458                     u2300 01B5  
                   u2310 01B6                     u2400 01EF                     u1360 033A  
                   u2340 01CF                     u2350 01D0                     u1374 033D  
                   u2390 01EE                     _PIE1 008C                     _PIE2 008D  
                   u1980 0279                     u1990 027F                     u1982 027A  
                   u1992 0280                     _PIR1 000C                     _PIR2 000D  
                   _TMR1 000E                     _WPUA 018E                     _WPUB 0095  
                   _WPUC 018F                     _key1 0424                     _key2 0429  
                   _main 0475            ??_Init_TIMER1 0072            ??_Init_TIMER2 0072  
                   btemp 007E                     start 000C       __size_of_LED_Judge 0008  
             _FledBits01 004D          __end_of_Int_ALL 0507          __end_of_Init_IC 0548  
        __end_of_ScanKey 0215         __end_of_LED_Time 0334         __end_of_FCTjudge 041A  
          ??_GsensorLoop 0073                    ?_key1 0070                    ?_key2 0070  
                  ?_main 0070                    _T1CON 0010                    _T2CON 0012  
                  i1l967 051F                    _G_KEY 041A                    _PORTA 0005  
                  _PORTB 0006                    _PORTC 0007                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _R_KEY 041F  
                  _Delay 0469                    _Fsys1 0050               _GflushLoop 001C  
                  _templ 004B                    pclath 000A               _KeyControl 0185  
                  status 0003                    wtemp0 007E               _FlushJudge 00EC  
       __end_of_GledLoop 0330          __initialization 000F         __end_of_GkeyLoop 0185  
           __end_of_key1 0429             __end_of_key2 042E             __end_of_main 04E4  
    __end_of_Init_TIMER1 0555      __end_of_Init_TIMER2 0560       FlushJudge@Key_Step 0076  
       __end_of_FlushCon 00EC       __size_of_Delay_nms 001F                   ??_key1 0072  
                 ??_key2 0072                   ??_main 0079              _Fbodysensor 007A  
                 ?_G_KEY 0070                ??_LED_Con 0072                ??_LED_Key 0072  
              ??_FCTloop 0079                   ?_R_KEY 0070                   ?_Delay 0072  
      __end_of_LED_Judge 03E8    __end_of_SensorControl 028E      __end_of_GsensorLoop 023A  
                 i1l1980 0500                   _FCTkey 042E                   i1l7279 0515  
                 i1l7383 04FC                   _INTCON 000B                   u218_25 051B  
                 _CNTfct 0026       __size_of_Init_GPIO 0015                   _OSCCON 008F  
                 _TMR1IE 0460                   _TMR1IF 0060                   _TMR2IE 0461  
                 _TMR2IF 0061       __size_of_FlushTime 0001            ?_INT_LED_SHOW 0070  
                 _WDTCON 0105                ??_Int_ALL 0070                ??_Init_IC 0072  
                 _RX_Buf 004C            _CNTfctSensior 0044                ??_ScanKey 0072  
          _CNTbodyInTime 002C                   _Fsys1m 004E                   _Fsys1s 004F  
          _CNTbreath_Led 0040               _SensorTime 023B            ??_SensorJudge 0072  
         KeyControl@this 0060              _MainTime_1s 0038       __size_of_SensorKey 0001  
                 saved_w 007E       Delay_nms@inittempl 0074              ?_GflushLoop 0070  
            ?_KeyControl 0070           ??_INT_LED_SHOW 0070        __end_of_Delay_nms 0469  
__end_of__initialization 0018                ?_LED_Time 0070                ?_FCTjudge 0070  
            _Init_TIMER1 0548              _Init_TIMER2 0555            __end_of_G_KEY 041F  
            ?_FlushJudge 0070            __end_of_R_KEY 0424            __end_of_Delay 0475  
         __pcstackCOMMON 0070               __end_ofPL2 021F               __end_ofPL4 0229  
             __end_ofPL6 0230               __end_ofPL8 0326        __end_of_Init_GPIO 0536  
      __end_of_FlushTime 0024              _GsensorLoop 0230                  ??_G_KEY 0072  
    __end_of_SensorJudge 031D                  ??_R_KEY 0072                  ??_Delay 0074  
              ?_GledLoop 0070                ?_GkeyLoop 0070               __pbssBANK0 0020  
                ?_FCTkey 0070               _fctBits001 0051                ?_FlushCon 0070  
             ??_LED_Time 0072               ??_FCTjudge 0072        __end_of_SensorKey 023B  
             __pmaintext 0475              ?_SensorTime 0070               __pintentry 0004  
    __size_of_GflushLoop 0007          ScanKey@line_num 0072      __size_of_KeyControl 007D  
         _CNTfctFlashLed 0043                  _LED_Con 0334                  _LED_Key 0330  
                _FCTloop 03F4                  _CNTkey1 0024                  _CNTkey2 0022  
    __size_of_FlushJudge 002F               ??_GledLoop 0072              _SeletedLine 0079  
                _SEQbody 0045                  _SEQmain 004A               ??_GkeyLoop 0074  
             ??_FlushCon 0072          __size_of_FCTkey 001C                  _Fflush1 0048  
                _Int_ALL 04E4                  _Init_IC 0536                  _ScanKey 0202  
         _CNTbreath_Led1 003E           _CNTbreath_Led2 003C           _CNTbreath_Led3 003A  
            _SensorJudge 028E     __end_of_INT_LED_SHOW 0521                  __ptext0 0000  
                __ptext1 0555                  __ptext2 0548                  __ptext3 0536  
                __ptext4 0521                  __ptext5 0230                  __ptext6 023B  
                __ptext7 023A                  __ptext8 028E                  __ptext9 0273  
              _AD_Result 0036                  clrloop0 0561                _LED_Judge 03E0  
   end_of_initialization 0018      __size_of_SensorTime 0038                _CNTbody_h 0032  
              _CNTbody_l 0030           Delay_nms@gtemp 0078             ??_GflushLoop 0077  
             ?_LED_Judge 0070             ??_KeyControl 0072           __end_of_FCTkey 044A  
           ?_Init_TIMER1 0070             ?_Init_TIMER2 0070             ??_FlushJudge 0076  
              _BufCntAdd 002E                _Delay_nms 044A        __size_of_LED_Time 0003  
      __size_of_FCTjudge 0022   __size_of_SensorControl 001B       __end_of_GflushLoop 0023  
           ?_GsensorLoop 0070       __end_of_KeyControl 0202              __end_ofPL10 03EE  
            __end_ofPL12 03F4      start_initialization 000F                _Init_GPIO 0521  
              _FlushTime 0023                _CurrentIO 0042       __end_of_FlushJudge 011B  
               ??_FCTkey 0079        __size_of_GledLoop 000A        __size_of_GkeyLoop 006A  
      __size_of_FlushCon 00C8               ?_Delay_nms 0074                _SensorKey 023A  
  __size_of_INT_LED_SHOW 001A             ??_SensorTime 0072                 ?_LED_Con 0070  
               ?_LED_Key 0070                 ?_FCTloop 0070              __pbssCOMMON 0079  
             ?_Init_GPIO 0070                ___latbits 0002            __pcstackBANK0 005A  
             ?_FlushTime 0070            _SensorControl 0273              ??_LED_Judge 0072  
     __end_of_SensorTime 0273          _KeyControl$3140 005A          _KeyControl$3141 005C  
        _KeyControl$3142 005E             _INT_LED_SHOW 0507                 ?_Int_ALL 0070  
               ?_Init_IC 0070                 ?_ScanKey 0070               ?_SensorKey 0070  
              _flag_time 0020             ?_SensorJudge 0070           __size_of_G_KEY 0005  
         __size_of_R_KEY 0005           __size_of_Delay 000C           ?_SensorControl 0070  
      interrupt_function 0004                 _LED_Time 0331                 _FCTjudge 03F8  
              clear_ram0 0560                 _CNTflush 0034              ??_Delay_nms 0076  
   __size_of_Init_TIMER1 000D     __size_of_Init_TIMER2 000B                 _SEQflsuh 0047  
   __size_of_GsensorLoop 000A              ??_Init_GPIO 0072         __size_of_LED_Con 00AC  
       __size_of_LED_Key 0001              ??_FlushTime 0072         __size_of_FCTloop 0004  
               _GledLoop 0326                 _GkeyLoop 011B                 _KeyLines 0052  
               _FlushCon 0024         __size_of_Int_ALL 0023         __size_of_Init_IC 0012  
        _CNTbodyExitTime 002A         __size_of_ScanKey 0013              _CNTfctStart 0028  
            ??_SensorKey 0072          ??_SensorControl 0072                 __ptext10 0326  
               __ptext11 0331                 __ptext20 0185                 __ptext12 0330  
               __ptext21 0024                 __ptext13 03E0                 __ptext30 041A  
               __ptext22 03F4                 __ptext14 0334                 __ptext31 04E4  
               __ptext23 042E                 __ptext15 001C                 __ptext32 0507  
               __ptext24 044A                 __ptext16 0023                 __ptext25 0469  
               __ptext17 00EC                 __ptext26 03F8                 __ptext18 011B  
               __ptext27 0429                 __ptext19 0202                 __ptext28 0424  
               __ptext29 041F            __size_of_key1 0005            __size_of_key2 0005  
          __size_of_main 006F          _u8stsBodySensor 0046            _MainTime_1min 0049  
             Delay@dtemp 0072     __size_of_SensorJudge 008F               Delay_nms@i 0076  
               intlevel1 0000               _OPTION_REG 0081  
