

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 03 17:38:06 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	79F133
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text10,local,class=CODE,merge=1,delta=2
    18                           	psect	text15,local,class=CODE,merge=1,delta=2
    19                           	psect	text19,local,class=CODE,merge=1,delta=2
    20                           	psect	text28,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	pa_nodes0,global,class=CODE,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 1.45
    26                           ; Generated 16/11/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F887 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	text0
    61  0000                     __ptext0:	
    62  000E                     _TMR1	set	14
    63  0012                     _T2CON	set	18
    64  0010                     _T1CON	set	16
    65  000D                     _PIR2	set	13
    66  000C                     _PIR1	set	12
    67  000B                     _INTCON	set	11
    68  0007                     _PORTC	set	7
    69  0006                     _PORTB	set	6
    70  0005                     _PORTA	set	5
    71  0060                     _TMR1IF	set	96
    72  0061                     _TMR2IF	set	97
    73  005F                     _GIE	set	95
    74  0030                     _RB0	set	48
    75  0031                     _RB1	set	49
    76  0032                     _RB2	set	50
    77  0029                     _RA1	set	41
    78  002A                     _RA2	set	42
    79  002C                     _RA4	set	44
    80  002D                     _RA5	set	45
    81  002E                     _RA6	set	46
    82  0095                     _WPUB	set	149
    83  0092                     _PR2	set	146
    84  008F                     _OSCCON	set	143
    85  008D                     _PIE2	set	141
    86  008C                     _PIE1	set	140
    87  0087                     _TRISC	set	135
    88  0086                     _TRISB	set	134
    89  0085                     _TRISA	set	133
    90  0081                     _OPTION_REG	set	129
    91  0460                     _TMR1IE	set	1120
    92  0461                     _TMR2IE	set	1121
    93  0105                     _WDTCON	set	261
    94  018F                     _WPUC	set	399
    95  018E                     _WPUA	set	398
    96                           
    97                           	psect	cinit
    98  000F                     start_initialization:	
    99                           ; #config settings
   100                           
   101  000F                     __initialization:	
   102  000F  3020               	movlw	low __pbssBANK0
   103                           
   104                           ; Clear objects allocated to COMMON
   105  0010  01F6               	clrf	__pbssCOMMON& (0+127)
   106  0011  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   107  0012  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   108  0013  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   109  0014  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
   110                           
   111                           ; Clear objects allocated to BANK0
   112  0015  1383               	bcf	3,7	;select IRP bank0
   113  0016  0084               	movwf	4
   114  0017  3057               	movlw	low (__pbssBANK0+55)
   115  0018  120A  118A  2378   	fcall	clear_ram0
   116  001B                     end_of_initialization:	
   117                           ;End of C runtime variable initialization code
   118                           
   119  001B                     __end_of__initialization:	
   120  001B  0183               	clrf	3
   121  001C  120A  118A  2A8A   	ljmp	_main	;jump to C main() function
   122                           
   123                           	psect	bssCOMMON
   124  0076                     __pbssCOMMON:	
   125  0076                     _CNTflush:	
   126  0076                     	ds	2
   127  0078                     _Fflush1:	
   128  0078                     	ds	1
   129  0079                     _fctBits001:	
   130  0079                     	ds	1
   131  007A                     _Fbodysensor:	
   132  007A                     	ds	1
   133                           
   134                           	psect	bssBANK0
   135  0020                     __pbssBANK0:	
   136  0020                     _flag_time:	
   137  0020                     	ds	2
   138  0022                     _CNTkey2:	
   139  0022                     	ds	2
   140  0024                     _CNTkey1:	
   141  0024                     	ds	2
   142  0026                     _CNTfct:	
   143  0026                     	ds	2
   144  0028                     _CNTfctStart:	
   145  0028                     	ds	2
   146  002A                     _CNTbodyExitTime:	
   147  002A                     	ds	2
   148  002C                     _CNTbodyInTime:	
   149  002C                     	ds	2
   150  002E                     _BufCntAdd:	
   151  002E                     	ds	2
   152  0030                     _CNTbody_l:	
   153  0030                     	ds	2
   154  0032                     _CNTbody_h:	
   155  0032                     	ds	2
   156  0034                     _AD_Result:	
   157  0034                     	ds	2
   158  0036                     _MainTime_1s:	
   159  0036                     	ds	2
   160  0038                     _CNTbreath_Led3:	
   161  0038                     	ds	2
   162  003A                     _CNTbreath_Led2:	
   163  003A                     	ds	2
   164  003C                     _CNTbreath_Led1:	
   165  003C                     	ds	2
   166  003E                     _CNTbreath_Led:	
   167  003E                     	ds	2
   168  0040                     _SeletedLine:	
   169  0040                     	ds	1
   170  0041                     _CurrentIO:	
   171  0041                     	ds	1
   172  0042                     _CNTfctFlashLed:	
   173  0042                     	ds	1
   174  0043                     _CNTfctSensior:	
   175  0043                     	ds	1
   176  0044                     _SEQbody:	
   177  0044                     	ds	1
   178  0045                     _u8stsBodySensor:	
   179  0045                     	ds	1
   180  0046                     _SEQflsuh:	
   181  0046                     	ds	1
   182  0047                     _MainTime_1min:	
   183  0047                     	ds	1
   184  0048                     _SEQmain:	
   185  0048                     	ds	1
   186  0049                     _templ:	
   187  0049                     	ds	1
   188  004A                     _RX_Buf:	
   189  004A                     	ds	1
   190  004B                     _FledBits01:	
   191  004B                     	ds	1
   192  004C                     _Fsys1m:	
   193  004C                     	ds	1
   194  004D                     _Fsys1s:	
   195  004D                     	ds	1
   196  004E                     _Fsys1:	
   197  004E                     	ds	1
   198  004F                     _KeyLines:	
   199  004F                     	ds	8
   200                           
   201                           	psect	clrtext
   202  0378                     clear_ram0:	
   203                           ;	Called with FSR containing the base address, and
   204                           ;	W with the last address+1
   205                           
   206  0378  0064               	clrwdt	;clear the watchdog before getting into this loop
   207  0379                     clrloop0:	
   208  0379  0180               	clrf	0	;clear RAM location pointed to by FSR
   209  037A  0A84               	incf	4,f	;increment pointer
   210  037B  0604               	xorwf	4,w	;XOR with final address
   211  037C  1903               	btfsc	3,2	;have we reached the end yet?
   212  037D  3400               	retlw	0	;all done for this memory range, return
   213  037E  0604               	xorwf	4,w	;XOR again to restore value
   214  037F  2B79               	goto	clrloop0	;do the next byte
   215                           
   216                           	psect	cstackCOMMON
   217  0070                     __pcstackCOMMON:	
   218  0070                     ?_LED_Time:	
   219  0070                     ?_LED_Key:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0070                     ?_LED_Judge:	
   223                           ; 1 bytes @ 0x0
   224                           
   225  0070                     ?_LED_Con:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ?_FCTloop:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_GsensorLoop:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     ?_GflushLoop:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ?_FlushTime:	
   238                           ; 1 bytes @ 0x0
   239                           
   240  0070                     ?_FlushJudge:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ?_FlushCon:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0070                     ?_SensorKey:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0070                     ?_SensorTime:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_SensorJudge:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_SensorControl:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_FCTkey:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_FCTjudge:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?_GledLoop:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_INT_LED_SHOW:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ??_INT_LED_SHOW:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?_Init_GPIO:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ?_Init_IC:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ?_Init_TIMER1:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?_Init_TIMER2:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ?_main:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?_Int_ALL:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ??_Int_ALL:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_G_KEY:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_R_KEY:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_key1:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_key2:	
   304                           ; 1 bytes @ 0x0
   305                           
   306                           
   307                           ; 1 bytes @ 0x0
   308  0070                     	ds	2
   309  0072                     ??_LED_Time:	
   310  0072                     ??_LED_Key:	
   311                           ; 1 bytes @ 0x2
   312                           
   313  0072                     ??_LED_Judge:	
   314                           ; 1 bytes @ 0x2
   315                           
   316  0072                     ??_LED_Con:	
   317                           ; 1 bytes @ 0x2
   318                           
   319  0072                     ??_GflushLoop:	
   320                           ; 1 bytes @ 0x2
   321                           
   322  0072                     ??_FlushTime:	
   323                           ; 1 bytes @ 0x2
   324                           
   325  0072                     ??_FlushJudge:	
   326                           ; 1 bytes @ 0x2
   327                           
   328  0072                     ??_FlushCon:	
   329                           ; 1 bytes @ 0x2
   330                           
   331  0072                     ??_SensorKey:	
   332                           ; 1 bytes @ 0x2
   333                           
   334  0072                     ??_SensorTime:	
   335                           ; 1 bytes @ 0x2
   336                           
   337  0072                     ??_SensorJudge:	
   338                           ; 1 bytes @ 0x2
   339                           
   340  0072                     ??_SensorControl:	
   341                           ; 1 bytes @ 0x2
   342                           
   343  0072                     ??_FCTjudge:	
   344                           ; 1 bytes @ 0x2
   345                           
   346  0072                     ??_GledLoop:	
   347                           ; 1 bytes @ 0x2
   348                           
   349  0072                     ?_Delay:	
   350                           ; 1 bytes @ 0x2
   351                           
   352  0072                     ??_Init_GPIO:	
   353                           ; 1 bytes @ 0x2
   354                           
   355  0072                     ??_Init_IC:	
   356                           ; 1 bytes @ 0x2
   357                           
   358  0072                     ??_Init_TIMER1:	
   359                           ; 1 bytes @ 0x2
   360                           
   361  0072                     ??_Init_TIMER2:	
   362                           ; 1 bytes @ 0x2
   363                           
   364  0072                     ??_G_KEY:	
   365                           ; 1 bytes @ 0x2
   366                           
   367  0072                     ??_R_KEY:	
   368                           ; 1 bytes @ 0x2
   369                           
   370  0072                     ??_key1:	
   371                           ; 1 bytes @ 0x2
   372                           
   373  0072                     ??_key2:	
   374                           ; 1 bytes @ 0x2
   375                           
   376  0072                     Delay@dtemp:	
   377                           ; 1 bytes @ 0x2
   378                           
   379                           
   380                           ; 2 bytes @ 0x2
   381  0072                     	ds	1
   382  0073                     ??_GsensorLoop:	
   383                           
   384                           ; 1 bytes @ 0x3
   385  0073                     	ds	1
   386  0074                     ??_Delay:	
   387  0074                     ?_Delay_nms:	
   388                           ; 1 bytes @ 0x4
   389                           
   390  0074                     Delay_nms@inittempl:	
   391                           ; 1 bytes @ 0x4
   392                           
   393                           
   394                           ; 2 bytes @ 0x4
   395  0074                     	ds	2
   396  0076                     ??_FCTloop:	
   397  0076                     ??_FCTkey:	
   398                           ; 1 bytes @ 0x6
   399                           
   400  0076                     ??_Delay_nms:	
   401                           ; 1 bytes @ 0x6
   402                           
   403  0076                     ??_main:	
   404                           ; 1 bytes @ 0x6
   405                           
   406                           
   407                           	psect	cstackBANK0
   408  0057                     __pcstackBANK0:	
   409                           ; 1 bytes @ 0x6
   410                           
   411  0057                     Delay_nms@i:	
   412                           
   413                           ; 2 bytes @ 0x0
   414  0057                     	ds	2
   415  0059                     Delay_nms@gtemp:	
   416                           
   417                           ; 1 bytes @ 0x2
   418  0059                     	ds	1
   419                           
   420                           	psect	maintext
   421  028A                     __pmaintext:	
   422 ;;
   423 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   424 ;;
   425 ;; *************** function _main *****************
   426 ;; Defined at:
   427 ;;		line 473 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\main.c"
   428 ;; Parameters:    Size  Location     Type
   429 ;;		None
   430 ;; Auto vars:     Size  Location     Type
   431 ;;		None
   432 ;; Return value:  Size  Location     Type
   433 ;;                  1    wreg      void 
   434 ;; Registers used:
   435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   436 ;; Tracked objects:
   437 ;;		On entry : B00/0
   438 ;;		On exit  : 300/0
   439 ;;		Unchanged: 0/0
   440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   441 ;;      Params:         0       0       0       0       0
   442 ;;      Locals:         0       0       0       0       0
   443 ;;      Temps:          0       0       0       0       0
   444 ;;      Totals:         0       0       0       0       0
   445 ;;Total ram usage:        0 bytes
   446 ;; Hardware stack levels required when called:    6
   447 ;; This function calls:
   448 ;;		_Delay_nms
   449 ;;		_FCTloop
   450 ;;		_GflushLoop
   451 ;;		_GledLoop
   452 ;;		_GsensorLoop
   453 ;;		_Init_GPIO
   454 ;;		_Init_IC
   455 ;;		_Init_TIMER1
   456 ;;		_Init_TIMER2
   457 ;; This function is called by:
   458 ;;		Startup code after reset
   459 ;; This function uses a non-reentrant model
   460 ;;
   461                           
   462                           
   463                           ;psect for function _main
   464  028A                     _main:	
   465                           
   466                           ;incstack = 0
   467                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   468  028A  0000               	nop	;# 
   469  028B  0064               	clrwdt	;# 
   470                           
   471                           ;main.c: 478: INTCON = 0;
   472  028C  018B               	clrf	11	;volatile
   473                           
   474                           ;main.c: 480: Init_GPIO();
   475  028D  120A  118A  233D  120A  118A  	fcall	_Init_GPIO
   476                           
   477                           ;main.c: 481: Init_IC();
   478  0292  120A  118A  2350  120A  118A  	fcall	_Init_IC
   479                           
   480                           ;main.c: 482: Delay_nms(200);
   481  0297  30C8               	movlw	200
   482  0298  00F4               	movwf	Delay_nms@inittempl
   483  0299  01F5               	clrf	Delay_nms@inittempl+1
   484  029A  120A  118A  225C  120A  118A  	fcall	_Delay_nms
   485                           
   486                           ;main.c: 483: Init_TIMER1();
   487  029F  120A  118A  236D  120A  118A  	fcall	_Init_TIMER1
   488                           
   489                           ;main.c: 484: Init_TIMER2();
   490  02A4  120A  118A  2362  120A  118A  	fcall	_Init_TIMER2
   491                           
   492                           ;main.c: 495: INTCON = 0XC0;
   493  02A9  30C0               	movlw	192
   494  02AA  008B               	movwf	11	;volatile
   495  02AB                     l7819:	
   496                           
   497                           ;main.c: 499: {
   498                           ;main.c: 501: if (Fsys1.bits.bit_1 == 1)
   499  02AB  1CCE               	btfss	_Fsys1,1	;volatile
   500  02AC  2AAB               	goto	l7819
   501  02AD  0064               	clrwdt	;# 
   502                           
   503                           ;main.c: 504: Fsys1.bits.bit_1 = 0;
   504  02AE  1283               	bcf	3,5	;RP0=0, select bank0
   505  02AF  1303               	bcf	3,6	;RP1=0, select bank0
   506  02B0  10CE               	bcf	_Fsys1,1	;volatile
   507                           
   508                           ;main.c: 505: switch (SEQmain)
   509  02B1  2AD0               	goto	l7833
   510  02B2                     l7823:	
   511                           
   512                           ;main.c: 508: FCTloop();
   513  02B2  120A  118A  220A  120A  118A  	fcall	_FCTloop
   514                           
   515                           ;main.c: 509: break;
   516  02B7  2AF0               	goto	l7835
   517  02B8                     l1918:	
   518                           ;main.c: 510: case 1:
   519                           
   520                           
   521                           ;main.c: 511: if(fctBits001.bits.bit_0 == 0)
   522  02B8  1879               	btfsc	_fctBits001,0	;volatile
   523  02B9  2AF0               	goto	l7835
   524                           
   525                           ;main.c: 512: {
   526                           ;main.c: 513: GsensorLoop();
   527  02BA  120A  118A  201F  120A  118A  	fcall	_GsensorLoop
   528  02BF  2AF0               	goto	l7835
   529  02C0                     l1922:	
   530                           ;main.c: 522: case 4:
   531                           
   532                           
   533                           ;main.c: 523: if(fctBits001.bits.bit_0 == 0)
   534  02C0  1879               	btfsc	_fctBits001,0	;volatile
   535  02C1  2AF0               	goto	l7835
   536                           
   537                           ;main.c: 524: {
   538                           ;main.c: 525: GflushLoop();
   539  02C2  120A  118A  2115  120A  118A  	fcall	_GflushLoop
   540  02C7  2AF0               	goto	l7835
   541  02C8                     l1927:	
   542                           ;main.c: 537: case 8:
   543                           
   544                           
   545                           ;main.c: 538: if(fctBits001.bits.bit_0 == 0)
   546  02C8  1879               	btfsc	_fctBits001,0	;volatile
   547  02C9  2AF0               	goto	l7835
   548                           
   549                           ;main.c: 539: {
   550                           ;main.c: 540: GledLoop();
   551  02CA  120A  118A  231D  120A  118A  	fcall	_GledLoop
   552  02CF  2AF0               	goto	l7835
   553  02D0                     l7833:	
   554  02D0  0848               	movf	_SEQmain,w	;volatile
   555                           
   556                           ; Switch size 1, requested type "space"
   557                           ; Number of cases is 10, Range of values is 0 to 9
   558                           ; switch strategies available:
   559                           ; Name         Instructions Cycles
   560                           ; simple_byte           31    16 (average)
   561                           ; direct_byte           38     8 (fixed)
   562                           ; jumptable            260     6 (fixed)
   563                           ;	Chosen strategy is simple_byte
   564  02D1  3A00               	xorlw	0	; case 0
   565  02D2  1903               	skipnz
   566  02D3  2AB2               	goto	l7823
   567  02D4  3A01               	xorlw	1	; case 1
   568  02D5  1903               	skipnz
   569  02D6  2AB8               	goto	l1918
   570  02D7  3A03               	xorlw	3	; case 2
   571  02D8  1903               	skipnz
   572  02D9  2AF0               	goto	l7835
   573  02DA  3A01               	xorlw	1	; case 3
   574  02DB  1903               	skipnz
   575  02DC  2AF0               	goto	l7835
   576  02DD  3A07               	xorlw	7	; case 4
   577  02DE  1903               	skipnz
   578  02DF  2AC0               	goto	l1922
   579  02E0  3A01               	xorlw	1	; case 5
   580  02E1  1903               	skipnz
   581  02E2  2AF0               	goto	l7835
   582  02E3  3A03               	xorlw	3	; case 6
   583  02E4  1903               	skipnz
   584  02E5  2AF0               	goto	l7835
   585  02E6  3A01               	xorlw	1	; case 7
   586  02E7  1903               	skipnz
   587  02E8  2AF0               	goto	l7835
   588  02E9  3A0F               	xorlw	15	; case 8
   589  02EA  1903               	skipnz
   590  02EB  2AC8               	goto	l1927
   591  02EC  3A01               	xorlw	1	; case 9
   592  02ED  1903               	skipnz
   593  02EE  2AF0               	goto	l7835
   594  02EF  2AF0               	goto	l7835
   595  02F0                     l7835:	
   596                           
   597                           ;main.c: 550: if (++SEQmain >= 10)
   598  02F0  300A               	movlw	10
   599  02F1  1283               	bcf	3,5	;RP0=0, select bank0
   600  02F2  1303               	bcf	3,6	;RP1=0, select bank0
   601  02F3  0AC8               	incf	_SEQmain,f	;volatile
   602  02F4  0248               	subwf	_SEQmain,w	;volatile
   603  02F5  1C03               	skipc
   604  02F6  2AAB               	goto	l7819
   605                           
   606                           ;main.c: 551: {
   607                           ;main.c: 552: SEQmain = 0;
   608  02F7  01C8               	clrf	_SEQmain	;volatile
   609  02F8  2AAB               	goto	l7819
   610  02F9                     __end_of_main:	
   611                           
   612                           	psect	text1
   613  0362                     __ptext1:	
   614 ;; *************** function _Init_TIMER2 *****************
   615 ;; Defined at:
   616 ;;		line 174 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\main.c"
   617 ;; Parameters:    Size  Location     Type
   618 ;;		None
   619 ;; Auto vars:     Size  Location     Type
   620 ;;		None
   621 ;; Return value:  Size  Location     Type
   622 ;;                  1    wreg      void 
   623 ;; Registers used:
   624 ;;		wreg
   625 ;; Tracked objects:
   626 ;;		On entry : 300/0
   627 ;;		On exit  : 300/0
   628 ;;		Unchanged: 0/0
   629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   630 ;;      Params:         0       0       0       0       0
   631 ;;      Locals:         0       0       0       0       0
   632 ;;      Temps:          0       0       0       0       0
   633 ;;      Totals:         0       0       0       0       0
   634 ;;Total ram usage:        0 bytes
   635 ;; Hardware stack levels used:    1
   636 ;; Hardware stack levels required when called:    2
   637 ;; This function calls:
   638 ;;		Nothing
   639 ;; This function is called by:
   640 ;;		_main
   641 ;; This function uses a non-reentrant model
   642 ;;
   643                           
   644                           
   645                           ;psect for function _Init_TIMER2
   646  0362                     _Init_TIMER2:	
   647                           
   648                           ;main.c: 176: PR2 = 24;
   649                           
   650                           ;incstack = 0
   651                           ; Regs used in _Init_TIMER2: [wreg]
   652  0362  3018               	movlw	24
   653  0363  1683               	bsf	3,5	;RP0=1, select bank1
   654  0364  0092               	movwf	18	;volatile
   655                           
   656                           ;main.c: 177: TMR2IF = 0;
   657  0365  1283               	bcf	3,5	;RP0=0, select bank0
   658  0366  108C               	bcf	12,1	;volatile
   659                           
   660                           ;main.c: 178: TMR2IE = 1;
   661  0367  1683               	bsf	3,5	;RP0=1, select bank1
   662  0368  148C               	bsf	12,1	;volatile
   663                           
   664                           ;main.c: 179: T2CON = 5;
   665  0369  3005               	movlw	5
   666  036A  1283               	bcf	3,5	;RP0=0, select bank0
   667  036B  0092               	movwf	18	;volatile
   668  036C  0008               	return
   669  036D                     __end_of_Init_TIMER2:	
   670                           
   671                           	psect	text2
   672  036D                     __ptext2:	
   673 ;; *************** function _Init_TIMER1 *****************
   674 ;; Defined at:
   675 ;;		line 152 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\main.c"
   676 ;; Parameters:    Size  Location     Type
   677 ;;		None
   678 ;; Auto vars:     Size  Location     Type
   679 ;;		None
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      void 
   682 ;; Registers used:
   683 ;;		wreg
   684 ;; Tracked objects:
   685 ;;		On entry : 300/0
   686 ;;		On exit  : 300/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   689 ;;      Params:         0       0       0       0       0
   690 ;;      Locals:         0       0       0       0       0
   691 ;;      Temps:          0       0       0       0       0
   692 ;;      Totals:         0       0       0       0       0
   693 ;;Total ram usage:        0 bytes
   694 ;; Hardware stack levels used:    1
   695 ;; Hardware stack levels required when called:    2
   696 ;; This function calls:
   697 ;;		Nothing
   698 ;; This function is called by:
   699 ;;		_main
   700 ;; This function uses a non-reentrant model
   701 ;;
   702                           
   703                           
   704                           ;psect for function _Init_TIMER1
   705  036D                     _Init_TIMER1:	
   706                           
   707                           ;main.c: 156: TMR1 = 0xE0C0;
   708                           
   709                           ;incstack = 0
   710                           ; Regs used in _Init_TIMER1: [wreg]
   711  036D  30E0               	movlw	224
   712  036E  008F               	movwf	15	;volatile
   713  036F  30C0               	movlw	192
   714  0370  008E               	movwf	14	;volatile
   715                           
   716                           ;main.c: 157: TMR1IF = 0;
   717  0371  100C               	bcf	12,0	;volatile
   718                           
   719                           ;main.c: 158: TMR1IE = 1;
   720  0372  1683               	bsf	3,5	;RP0=1, select bank1
   721  0373  140C               	bsf	12,0	;volatile
   722                           
   723                           ;main.c: 159: T1CON = 0x01;
   724  0374  3001               	movlw	1
   725  0375  1283               	bcf	3,5	;RP0=0, select bank0
   726  0376  0090               	movwf	16	;volatile
   727  0377  0008               	return
   728  0378                     __end_of_Init_TIMER1:	
   729                           
   730                           	psect	text3
   731  0350                     __ptext3:	
   732 ;; *************** function _Init_IC *****************
   733 ;; Defined at:
   734 ;;		line 96 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\main.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;		None
   737 ;; Auto vars:     Size  Location     Type
   738 ;;		None
   739 ;; Return value:  Size  Location     Type
   740 ;;                  1    wreg      void 
   741 ;; Registers used:
   742 ;;		wreg, status,2
   743 ;; Tracked objects:
   744 ;;		On entry : 300/300
   745 ;;		On exit  : 300/100
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   748 ;;      Params:         0       0       0       0       0
   749 ;;      Locals:         0       0       0       0       0
   750 ;;      Temps:          0       0       0       0       0
   751 ;;      Totals:         0       0       0       0       0
   752 ;;Total ram usage:        0 bytes
   753 ;; Hardware stack levels used:    1
   754 ;; Hardware stack levels required when called:    2
   755 ;; This function calls:
   756 ;;		Nothing
   757 ;; This function is called by:
   758 ;;		_main
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           
   763                           ;psect for function _Init_IC
   764  0350                     _Init_IC:	
   765                           
   766                           ;incstack = 0
   767                           ; Regs used in _Init_IC: [wreg+status,2]
   768  0350  0064               	clrwdt	;# 
   769                           
   770                           ;main.c: 103: INTCON = 0x00;
   771  0351  018B               	clrf	11	;volatile
   772                           
   773                           ;main.c: 108: PIR1 = 0;
   774  0352  1283               	bcf	3,5	;RP0=0, select bank0
   775  0353  1303               	bcf	3,6	;RP1=0, select bank0
   776  0354  018C               	clrf	12	;volatile
   777                           
   778                           ;main.c: 113: PIR2 = 0;
   779  0355  018D               	clrf	13	;volatile
   780                           
   781                           ;main.c: 118: WDTCON = 0x01;
   782  0356  3001               	movlw	1
   783  0357  1703               	bsf	3,6	;RP1=1, select bank2
   784  0358  0085               	movwf	5	;volatile
   785                           
   786                           ;main.c: 123: OPTION_REG = 0b00001110;
   787  0359  300E               	movlw	14
   788  035A  1683               	bsf	3,5	;RP0=1, select bank1
   789  035B  1303               	bcf	3,6	;RP1=0, select bank1
   790  035C  0081               	movwf	1	;volatile
   791                           
   792                           ;main.c: 128: OSCCON = 0x71;
   793  035D  3071               	movlw	113
   794  035E  008F               	movwf	15	;volatile
   795                           
   796                           ;main.c: 133: PIE1 = 0;
   797  035F  018C               	clrf	12	;volatile
   798                           
   799                           ;main.c: 138: PIE2 = 0;
   800  0360  018D               	clrf	13	;volatile
   801  0361  0008               	return
   802  0362                     __end_of_Init_IC:	
   803                           
   804                           	psect	text4
   805  033D                     __ptext4:	
   806 ;; *************** function _Init_GPIO *****************
   807 ;; Defined at:
   808 ;;		line 62 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\main.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;		None
   811 ;; Auto vars:     Size  Location     Type
   812 ;;		None
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg, status,2
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 300/300
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   822 ;;      Params:         0       0       0       0       0
   823 ;;      Locals:         0       0       0       0       0
   824 ;;      Temps:          0       0       0       0       0
   825 ;;      Totals:         0       0       0       0       0
   826 ;;Total ram usage:        0 bytes
   827 ;; Hardware stack levels used:    1
   828 ;; Hardware stack levels required when called:    2
   829 ;; This function calls:
   830 ;;		Nothing
   831 ;; This function is called by:
   832 ;;		_main
   833 ;; This function uses a non-reentrant model
   834 ;;
   835                           
   836                           
   837                           ;psect for function _Init_GPIO
   838  033D                     _Init_GPIO:	
   839                           
   840                           ;main.c: 66: PORTA = 0B00000000;
   841                           
   842                           ;incstack = 0
   843                           ; Regs used in _Init_GPIO: [wreg+status,2]
   844  033D  1283               	bcf	3,5	;RP0=0, select bank0
   845  033E  1303               	bcf	3,6	;RP1=0, select bank0
   846  033F  0185               	clrf	5	;volatile
   847                           
   848                           ;main.c: 67: PORTB = 0B00000000;
   849  0340  0186               	clrf	6	;volatile
   850                           
   851                           ;main.c: 68: PORTC = 0B00000000;
   852  0341  0187               	clrf	7	;volatile
   853                           
   854                           ;main.c: 71: TRISA = 0B01000000;
   855  0342  3040               	movlw	64
   856  0343  1683               	bsf	3,5	;RP0=1, select bank1
   857  0344  0085               	movwf	5	;volatile
   858                           
   859                           ;main.c: 72: TRISB = 0B00000111;
   860  0345  3007               	movlw	7
   861  0346  0086               	movwf	6	;volatile
   862                           
   863                           ;main.c: 73: TRISC = 0B00000000;
   864  0347  0187               	clrf	7	;volatile
   865                           
   866                           ;main.c: 76: WPUA = 0B00000000;
   867  0348  1703               	bsf	3,6	;RP1=1, select bank3
   868  0349  018E               	clrf	14	;volatile
   869                           
   870                           ;main.c: 77: WPUB = 0B00000010;
   871  034A  3002               	movlw	2
   872  034B  1303               	bcf	3,6	;RP1=0, select bank1
   873  034C  0095               	movwf	21	;volatile
   874                           
   875                           ;main.c: 78: WPUC = 0B00000000;
   876  034D  1703               	bsf	3,6	;RP1=1, select bank3
   877  034E  018F               	clrf	15	;volatile
   878  034F  0008               	return
   879  0350                     __end_of_Init_GPIO:	
   880                           
   881                           	psect	text5
   882  001F                     __ptext5:	
   883 ;; *************** function _GsensorLoop *****************
   884 ;; Defined at:
   885 ;;		line 19 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\sensor.c"
   886 ;; Parameters:    Size  Location     Type
   887 ;;		None
   888 ;; Auto vars:     Size  Location     Type
   889 ;;		None
   890 ;; Return value:  Size  Location     Type
   891 ;;                  1    wreg      void 
   892 ;; Registers used:
   893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   894 ;; Tracked objects:
   895 ;;		On entry : 300/0
   896 ;;		On exit  : 0/0
   897 ;;		Unchanged: 0/0
   898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   899 ;;      Params:         0       0       0       0       0
   900 ;;      Locals:         0       0       0       0       0
   901 ;;      Temps:          0       0       0       0       0
   902 ;;      Totals:         0       0       0       0       0
   903 ;;Total ram usage:        0 bytes
   904 ;; Hardware stack levels used:    1
   905 ;; Hardware stack levels required when called:    3
   906 ;; This function calls:
   907 ;;		_SensorControl
   908 ;;		_SensorJudge
   909 ;;		_SensorKey
   910 ;;		_SensorTime
   911 ;; This function is called by:
   912 ;;		_main
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           
   917                           ;psect for function _GsensorLoop
   918  001F                     _GsensorLoop:	
   919                           
   920                           ;sensor.c: 21: SensorKey();
   921                           
   922                           ;incstack = 0
   923                           ; Regs used in _GsensorLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   924  001F  2029  120A  118A   	fcall	_SensorKey
   925                           
   926                           ;sensor.c: 22: SensorTime();
   927  0022  202A  120A  118A   	fcall	_SensorTime
   928                           
   929                           ;sensor.c: 23: SensorJudge();
   930  0025  207D  120A  118A   	fcall	_SensorJudge
   931                           
   932                           ;sensor.c: 24: SensorControl();
   933  0028  2862               	ljmp	l7615
   934  0029                     __end_of_GsensorLoop:	
   935  0029                     __ptext7:	
   936 ;; *************** function _SensorKey *****************
   937 ;; Defined at:
   938 ;;		line 27 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\sensor.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;		None
   941 ;; Auto vars:     Size  Location     Type
   942 ;;		None
   943 ;; Return value:  Size  Location     Type
   944 ;;                  1    wreg      void 
   945 ;; Registers used:
   946 ;;		None
   947 ;; Tracked objects:
   948 ;;		On entry : 300/0
   949 ;;		On exit  : 300/0
   950 ;;		Unchanged: 300/0
   951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   952 ;;      Params:         0       0       0       0       0
   953 ;;      Locals:         0       0       0       0       0
   954 ;;      Temps:          0       0       0       0       0
   955 ;;      Totals:         0       0       0       0       0
   956 ;;Total ram usage:        0 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; Hardware stack levels required when called:    2
   959 ;; This function calls:
   960 ;;		Nothing
   961 ;; This function is called by:
   962 ;;		_GsensorLoop
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           
   967                           ;psect for function _SensorKey
   968  0029                     _SensorKey:	
   969                           
   970                           ;incstack = 0
   971                           ; Regs used in _SensorKey: []
   972  0029  0008               	return
   973  002A                     __end_of_SensorKey:	
   974  002A                     __ptext6:	
   975 ;; *************** function _SensorTime *****************
   976 ;; Defined at:
   977 ;;		line 33 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\sensor.c"
   978 ;; Parameters:    Size  Location     Type
   979 ;;		None
   980 ;; Auto vars:     Size  Location     Type
   981 ;;		None
   982 ;; Return value:  Size  Location     Type
   983 ;;                  1    wreg      void 
   984 ;; Registers used:
   985 ;;		wreg, status,2, status,0
   986 ;; Tracked objects:
   987 ;;		On entry : 300/0
   988 ;;		On exit  : 300/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   991 ;;      Params:         0       0       0       0       0
   992 ;;      Locals:         0       0       0       0       0
   993 ;;      Temps:          0       0       0       0       0
   994 ;;      Totals:         0       0       0       0       0
   995 ;;Total ram usage:        0 bytes
   996 ;; Hardware stack levels used:    1
   997 ;; Hardware stack levels required when called:    2
   998 ;; This function calls:
   999 ;;		Nothing
  1000 ;; This function is called by:
  1001 ;;		_GsensorLoop
  1002 ;; This function uses a non-reentrant model
  1003 ;;
  1004                           
  1005                           
  1006                           ;psect for function _SensorTime
  1007  002A                     _SensorTime:	
  1008                           
  1009                           ;sensor.c: 35: if(Fbodysensor.bits.bit_0 == 1)
  1010                           
  1011                           ;incstack = 0
  1012                           ; Regs used in _SensorTime: [wreg+status,2+status,0]
  1013  002A  1C7A               	btfss	_Fbodysensor,0	;volatile
  1014  002B  284E               	goto	l7549
  1015                           
  1016                           ;sensor.c: 36: {
  1017                           ;sensor.c: 37: Fbodysensor.bits.bit_5 = 0;
  1018  002C  12FA               	bcf	_Fbodysensor,5	;volatile
  1019                           
  1020                           ;sensor.c: 38: CNTbodyExitTime = 0;
  1021  002D  01AA               	clrf	_CNTbodyExitTime	;volatile
  1022  002E  01AB               	clrf	_CNTbodyExitTime+1	;volatile
  1023                           
  1024                           ;sensor.c: 39: if(FledBits01.bits.bit_2 == 0)
  1025  002F  194B               	btfsc	_FledBits01,2	;volatile
  1026  0030  2849               	goto	l3817
  1027                           
  1028                           ;sensor.c: 40: {
  1029                           ;sensor.c: 41: if(++CNTbodyInTime >= 6000)
  1030  0031  0AAC               	incf	_CNTbodyInTime,f	;volatile
  1031  0032  1903               	skipnz
  1032  0033  0AAD               	incf	_CNTbodyInTime+1,f	;volatile
  1033  0034  3017               	movlw	23
  1034  0035  022D               	subwf	_CNTbodyInTime+1,w	;volatile
  1035  0036  3070               	movlw	112
  1036  0037  1903               	skipnz
  1037  0038  022C               	subwf	_CNTbodyInTime,w	;volatile
  1038  0039  1C03               	skipc
  1039  003A  2841               	goto	l7543
  1040                           
  1041                           ;sensor.c: 42: {
  1042                           ;sensor.c: 43: CNTbodyInTime = 6000;
  1043  003B  3070               	movlw	112
  1044  003C  00AC               	movwf	_CNTbodyInTime	;volatile
  1045  003D  3017               	movlw	23
  1046  003E  00AD               	movwf	_CNTbodyInTime+1	;volatile
  1047                           
  1048                           ;sensor.c: 44: Fbodysensor.bits.bit_3 = 1;
  1049  003F  15FA               	bsf	_Fbodysensor,3	;volatile
  1050                           
  1051                           ;sensor.c: 45: }
  1052  0040  0008               	return
  1053  0041                     l7543:	
  1054                           
  1055                           ;sensor.c: 46: else if(CNTbodyInTime >= 500)
  1056  0041  3001               	movlw	1
  1057  0042  022D               	subwf	_CNTbodyInTime+1,w	;volatile
  1058  0043  30F4               	movlw	244
  1059  0044  1903               	skipnz
  1060  0045  022C               	subwf	_CNTbodyInTime,w	;volatile
  1061  0046  1803               	btfsc	3,0
  1062                           
  1063                           ;sensor.c: 47: {
  1064                           ;sensor.c: 48: Fbodysensor.bits.bit_4 = 1;
  1065  0047  167A               	bsf	_Fbodysensor,4	;volatile
  1066  0048  0008               	return
  1067  0049                     l3817:	
  1068                           
  1069                           ;sensor.c: 51: else
  1070                           ;sensor.c: 52: {
  1071                           ;sensor.c: 53: if(Fbodysensor.bits.bit_4 == 0)
  1072  0049  1A7A               	btfsc	_Fbodysensor,4	;volatile
  1073  004A  0008               	return
  1074                           
  1075                           ;sensor.c: 54: {
  1076                           ;sensor.c: 55: CNTbodyInTime = 0;
  1077  004B  01AC               	clrf	_CNTbodyInTime	;volatile
  1078  004C  01AD               	clrf	_CNTbodyInTime+1	;volatile
  1079                           
  1080                           ;sensor.c: 56: }
  1081                           ;sensor.c: 57: }
  1082                           ;sensor.c: 58: }
  1083  004D  0008               	return
  1084  004E                     l7549:	
  1085                           
  1086                           ;sensor.c: 59: else
  1087                           ;sensor.c: 60: {
  1088                           ;sensor.c: 61: CNTbodyInTime = 0;
  1089  004E  01AC               	clrf	_CNTbodyInTime	;volatile
  1090  004F  01AD               	clrf	_CNTbodyInTime+1	;volatile
  1091                           
  1092                           ;sensor.c: 62: Fbodysensor.bits.bit_4 = 0;
  1093  0050  127A               	bcf	_Fbodysensor,4	;volatile
  1094                           
  1095                           ;sensor.c: 63: Fbodysensor.bits.bit_3 = 0;
  1096  0051  11FA               	bcf	_Fbodysensor,3	;volatile
  1097                           
  1098                           ;sensor.c: 64: if(++CNTbodyExitTime >= 500)
  1099  0052  0AAA               	incf	_CNTbodyExitTime,f	;volatile
  1100  0053  1903               	skipnz
  1101  0054  0AAB               	incf	_CNTbodyExitTime+1,f	;volatile
  1102  0055  3001               	movlw	1
  1103  0056  022B               	subwf	_CNTbodyExitTime+1,w	;volatile
  1104  0057  30F4               	movlw	244
  1105  0058  1903               	skipnz
  1106  0059  022A               	subwf	_CNTbodyExitTime,w	;volatile
  1107  005A  1C03               	skipc
  1108  005B  0008               	return
  1109                           
  1110                           ;sensor.c: 65: {
  1111                           ;sensor.c: 66: CNTbodyExitTime = 500;
  1112  005C  30F4               	movlw	244
  1113  005D  00AA               	movwf	_CNTbodyExitTime	;volatile
  1114  005E  3001               	movlw	1
  1115  005F  00AB               	movwf	_CNTbodyExitTime+1	;volatile
  1116                           
  1117                           ;sensor.c: 67: Fbodysensor.bits.bit_5 = 1;
  1118  0060  16FA               	bsf	_Fbodysensor,5	;volatile
  1119  0061  0008               	return
  1120  0062                     __end_of_SensorTime:	
  1121  0062                     __ptext9:	
  1122 ;; *************** function _SensorControl *****************
  1123 ;; Defined at:
  1124 ;;		line 179 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\sensor.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;		None
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;		None
  1129 ;; Return value:  Size  Location     Type
  1130 ;;                  1    wreg      void 
  1131 ;; Registers used:
  1132 ;;		wreg
  1133 ;; Tracked objects:
  1134 ;;		On entry : 300/0
  1135 ;;		On exit  : 0/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1138 ;;      Params:         0       0       0       0       0
  1139 ;;      Locals:         0       0       0       0       0
  1140 ;;      Temps:          1       0       0       0       0
  1141 ;;      Totals:         1       0       0       0       0
  1142 ;;Total ram usage:        1 bytes
  1143 ;; Hardware stack levels used:    1
  1144 ;; Hardware stack levels required when called:    2
  1145 ;; This function calls:
  1146 ;;		Nothing
  1147 ;; This function is called by:
  1148 ;;		_GsensorLoop
  1149 ;; This function uses a non-reentrant model
  1150 ;;
  1151                           
  1152                           
  1153                           ;psect for function _SensorControl
  1154  0062                     _SensorControl:	
  1155  0062                     l7615:	
  1156                           ;incstack = 0
  1157                           ; Regs used in _SensorControl: [wreg]
  1158                           
  1159                           
  1160                           ;sensor.c: 181: Fbodysensor.bits.bit_1 = 0;
  1161  0062  10FA               	bcf	_Fbodysensor,1	;volatile
  1162                           
  1163                           ;sensor.c: 182: Fbodysensor.bits.bit_2 = 0;
  1164  0063  117A               	bcf	_Fbodysensor,2	;volatile
  1165                           
  1166                           ;sensor.c: 183: if(Fbodysensor.bits.bit_6 != Fbodysensor.bits.bit_0)
  1167  0064  1C7A               	btfss	_Fbodysensor,0	;volatile
  1168  0065  2868               	goto	u980
  1169  0066  3001               	movlw	1
  1170  0067  2869               	goto	u982
  1171  0068                     u980:	
  1172  0068  3000               	movlw	0
  1173  0069                     u982:	
  1174  0069  00F2               	movwf	??_SensorControl
  1175  006A  1F7A               	btfss	_Fbodysensor,6	;volatile
  1176  006B  286E               	goto	u990
  1177  006C  3001               	movlw	1
  1178  006D  286F               	goto	u992
  1179  006E                     u990:	
  1180  006E  3000               	movlw	0
  1181  006F                     u992:	
  1182  006F  0672               	xorwf	??_SensorControl,w
  1183  0070  1903               	skipnz
  1184  0071  0008               	return
  1185                           
  1186                           ;sensor.c: 184: {
  1187                           ;sensor.c: 185: if(Fbodysensor.bits.bit_0 == 1)
  1188  0072  1C7A               	btfss	_Fbodysensor,0	;volatile
  1189  0073  2876               	goto	l3854
  1190                           
  1191                           ;sensor.c: 186: {
  1192                           ;sensor.c: 187: Fbodysensor.bits.bit_1 = 1;
  1193  0074  14FA               	bsf	_Fbodysensor,1	;volatile
  1194                           
  1195                           ;sensor.c: 188: }
  1196  0075  2877               	goto	l3855
  1197  0076                     l3854:	
  1198                           
  1199                           ;sensor.c: 189: else
  1200                           ;sensor.c: 190: {
  1201                           ;sensor.c: 191: Fbodysensor.bits.bit_2 = 1;
  1202  0076  157A               	bsf	_Fbodysensor,2	;volatile
  1203  0077                     l3855:	
  1204                           
  1205                           ;sensor.c: 192: }
  1206                           ;sensor.c: 193: Fbodysensor.bits.bit_6 = Fbodysensor.bits.bit_0;
  1207  0077  1C7A               	btfss	_Fbodysensor,0	;volatile
  1208  0078  287B               	goto	u1020
  1209  0079  177A               	bsf	_Fbodysensor,6	;volatile
  1210  007A  0008               	return
  1211  007B                     u1020:	
  1212  007B  137A               	bcf	_Fbodysensor,6	;volatile
  1213  007C  0008               	return
  1214  007D                     __end_of_SensorControl:	
  1215  007D                     __ptext8:	
  1216 ;; *************** function _SensorJudge *****************
  1217 ;; Defined at:
  1218 ;;		line 73 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\sensor.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;		None
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;		None
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  1    wreg      void 
  1225 ;; Registers used:
  1226 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1227 ;; Tracked objects:
  1228 ;;		On entry : 300/0
  1229 ;;		On exit  : 300/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1232 ;;      Params:         0       0       0       0       0
  1233 ;;      Locals:         0       0       0       0       0
  1234 ;;      Temps:          0       0       0       0       0
  1235 ;;      Totals:         0       0       0       0       0
  1236 ;;Total ram usage:        0 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; Hardware stack levels required when called:    2
  1239 ;; This function calls:
  1240 ;;		Nothing
  1241 ;; This function is called by:
  1242 ;;		_GsensorLoop
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           
  1247                           ;psect for function _SensorJudge
  1248  007D                     _SensorJudge:	
  1249                           
  1250                           ;sensor.c: 75: switch (SEQbody)
  1251                           
  1252                           ;incstack = 0
  1253                           ; Regs used in _SensorJudge: [wreg-fsr0h+status,2+status,0]
  1254  007D  28FA               	goto	l7613
  1255  007E                     l3829:	
  1256                           ;sensor.c: 76: {
  1257                           ;sensor.c: 77: case 0:
  1258                           
  1259                           
  1260                           ;sensor.c: 78: Fbodysensor.bits.bit_0 = 0;
  1261  007E  107A               	bcf	_Fbodysensor,0	;volatile
  1262                           
  1263                           ;sensor.c: 79: FledBits01.bits.bit_2 = 0;
  1264  007F  114B               	bcf	_FledBits01,2	;volatile
  1265                           
  1266                           ;sensor.c: 110: }
  1267  0080  288F               	goto	l7563
  1268  0081                     l7575:	
  1269                           
  1270                           ;sensor.c: 111: else
  1271                           ;sensor.c: 112: {
  1272                           ;sensor.c: 113: if(++CNTbody_l >= 6)
  1273  0081  0AB0               	incf	_CNTbody_l,f	;volatile
  1274  0082  1903               	skipnz
  1275  0083  0AB1               	incf	_CNTbody_l+1,f	;volatile
  1276  0084  3000               	movlw	0
  1277  0085  0231               	subwf	_CNTbody_l+1,w	;volatile
  1278  0086  3006               	movlw	6
  1279  0087  1903               	skipnz
  1280  0088  0230               	subwf	_CNTbody_l,w	;volatile
  1281  0089  1C03               	skipc
  1282  008A  28B1               	goto	l7581
  1283                           
  1284                           ;sensor.c: 114: {
  1285                           ;sensor.c: 115: CNTbody_h = 0;
  1286  008B  01B2               	clrf	_CNTbody_h	;volatile
  1287  008C  01B3               	clrf	_CNTbody_h+1	;volatile
  1288                           
  1289                           ;sensor.c: 116: CNTbody_l = 0;
  1290  008D  01B0               	clrf	_CNTbody_l	;volatile
  1291  008E  01B1               	clrf	_CNTbody_l+1	;volatile
  1292  008F                     l7563:	
  1293                           
  1294                           ;sensor.c: 80: SEQbody = 1;
  1295  008F  3001               	movlw	1
  1296  0090  00C4               	movwf	_SEQbody	;volatile
  1297                           
  1298                           ;sensor.c: 81: break;
  1299  0091  0008               	return
  1300  0092                     l3831:	
  1301                           ;sensor.c: 84: case 1:
  1302                           
  1303                           
  1304                           ;sensor.c: 85: Fbodysensor.bits.bit_0 = 0;
  1305  0092  107A               	bcf	_Fbodysensor,0	;volatile
  1306                           
  1307                           ;sensor.c: 86: FledBits01.bits.bit_2 = 0;
  1308  0093  114B               	bcf	_FledBits01,2	;volatile
  1309                           
  1310                           ;sensor.c: 87: if(RB1 == 0)
  1311  0094  1886               	btfsc	6,1	;volatile
  1312  0095  28A7               	goto	l7571
  1313                           
  1314                           ;sensor.c: 88: {
  1315                           ;sensor.c: 89: if(++CNTbody_h >= 3)
  1316  0096  0AB2               	incf	_CNTbody_h,f	;volatile
  1317  0097  1903               	skipnz
  1318  0098  0AB3               	incf	_CNTbody_h+1,f	;volatile
  1319  0099  3000               	movlw	0
  1320  009A  0233               	subwf	_CNTbody_h+1,w	;volatile
  1321  009B  3003               	movlw	3
  1322  009C  1903               	skipnz
  1323  009D  0232               	subwf	_CNTbody_h,w	;volatile
  1324  009E  1C03               	skipc
  1325  009F  0008               	return
  1326                           
  1327                           ;sensor.c: 90: {
  1328                           ;sensor.c: 91: CNTbody_h = 0;
  1329  00A0  01B2               	clrf	_CNTbody_h	;volatile
  1330  00A1  01B3               	clrf	_CNTbody_h+1	;volatile
  1331                           
  1332                           ;sensor.c: 92: CNTbody_l = 0;
  1333  00A2  01B0               	clrf	_CNTbody_l	;volatile
  1334  00A3  01B1               	clrf	_CNTbody_l+1	;volatile
  1335                           
  1336                           ;sensor.c: 93: SEQbody = 2;
  1337  00A4  3002               	movlw	2
  1338  00A5  00C4               	movwf	_SEQbody	;volatile
  1339                           
  1340                           ;sensor.c: 94: break;
  1341  00A6  0008               	return
  1342  00A7                     l7571:	
  1343                           
  1344                           ;sensor.c: 97: else
  1345                           ;sensor.c: 98: {
  1346                           ;sensor.c: 99: CNTbody_h = 0;
  1347  00A7  01B2               	clrf	_CNTbody_h	;volatile
  1348  00A8  01B3               	clrf	_CNTbody_h+1	;volatile
  1349  00A9  0008               	return
  1350  00AA                     l3835:	
  1351                           ;sensor.c: 104: case 2:
  1352                           
  1353                           
  1354                           ;sensor.c: 105: Fbodysensor.bits.bit_0 = 0;
  1355  00AA  107A               	bcf	_Fbodysensor,0	;volatile
  1356                           
  1357                           ;sensor.c: 106: FledBits01.bits.bit_2 = 0;
  1358  00AB  114B               	bcf	_FledBits01,2	;volatile
  1359                           
  1360                           ;sensor.c: 107: if(RB1 == 0)
  1361  00AC  1886               	btfsc	6,1	;volatile
  1362  00AD  2881               	goto	l7575
  1363                           
  1364                           ;sensor.c: 108: {
  1365                           ;sensor.c: 109: ++CNTbody_h;
  1366  00AE  0AB2               	incf	_CNTbody_h,f	;volatile
  1367  00AF  1903               	skipnz
  1368  00B0  0AB3               	incf	_CNTbody_h+1,f	;volatile
  1369  00B1                     l7581:	
  1370                           
  1371                           ;sensor.c: 119: }
  1372                           ;sensor.c: 120: }
  1373                           ;sensor.c: 121: BufCntAdd = CNTbody_h +CNTbody_l;
  1374  00B1  210C  120A  118A   	fcall	PL6	;call to abstracted procedure
  1375                           
  1376                           ;sensor.c: 122: if(BufCntAdd >= 30)
  1377  00B4  3000               	movlw	0
  1378  00B5  022F               	subwf	_BufCntAdd+1,w	;volatile
  1379  00B6  301E               	movlw	30
  1380  00B7  1903               	skipnz
  1381  00B8  022E               	subwf	_BufCntAdd,w	;volatile
  1382  00B9  1C03               	skipc
  1383  00BA  0008               	return
  1384  00BB                     l7585:	
  1385                           
  1386                           ;sensor.c: 123: {
  1387                           ;sensor.c: 124: SEQbody = 3;
  1388  00BB  3003               	movlw	3
  1389  00BC  00C4               	movwf	_SEQbody	;volatile
  1390                           
  1391                           ;sensor.c: 125: break;
  1392  00BD  0008               	return
  1393  00BE                     l3840:	
  1394                           ;sensor.c: 129: case 3:
  1395                           
  1396                           
  1397                           ;sensor.c: 130: Fbodysensor.bits.bit_0 = 1;
  1398  00BE  147A               	bsf	_Fbodysensor,0	;volatile
  1399                           
  1400                           ;sensor.c: 131: FledBits01.bits.bit_2 = 0;
  1401  00BF  114B               	bcf	_FledBits01,2	;volatile
  1402                           
  1403                           ;sensor.c: 132: if(RB1 == 1)
  1404  00C0  1C86               	btfss	6,1	;volatile
  1405  00C1  28D3               	goto	l7593
  1406                           
  1407                           ;sensor.c: 133: {
  1408                           ;sensor.c: 134: if(++CNTbody_l >= 3)
  1409  00C2  0AB0               	incf	_CNTbody_l,f	;volatile
  1410  00C3  1903               	skipnz
  1411  00C4  0AB1               	incf	_CNTbody_l+1,f	;volatile
  1412  00C5  3000               	movlw	0
  1413  00C6  0231               	subwf	_CNTbody_l+1,w	;volatile
  1414  00C7  3003               	movlw	3
  1415  00C8  1903               	skipnz
  1416  00C9  0230               	subwf	_CNTbody_l,w	;volatile
  1417  00CA  1C03               	skipc
  1418  00CB  0008               	return
  1419                           
  1420                           ;sensor.c: 135: {
  1421                           ;sensor.c: 136: CNTbody_h = 0;
  1422  00CC  01B2               	clrf	_CNTbody_h	;volatile
  1423  00CD  01B3               	clrf	_CNTbody_h+1	;volatile
  1424                           
  1425                           ;sensor.c: 137: CNTbody_l = 0;
  1426  00CE  01B0               	clrf	_CNTbody_l	;volatile
  1427  00CF  01B1               	clrf	_CNTbody_l+1	;volatile
  1428                           
  1429                           ;sensor.c: 138: SEQbody = 4;
  1430  00D0  3004               	movlw	4
  1431  00D1  00C4               	movwf	_SEQbody	;volatile
  1432                           
  1433                           ;sensor.c: 139: break;
  1434  00D2  0008               	return
  1435  00D3                     l7593:	
  1436                           
  1437                           ;sensor.c: 142: else
  1438                           ;sensor.c: 143: {
  1439                           ;sensor.c: 144: CNTbody_l = 0;
  1440  00D3  01B0               	clrf	_CNTbody_l	;volatile
  1441  00D4  01B1               	clrf	_CNTbody_l+1	;volatile
  1442  00D5  0008               	return
  1443  00D6                     l3844:	
  1444                           ;sensor.c: 148: case 4:
  1445                           
  1446                           
  1447                           ;sensor.c: 149: Fbodysensor.bits.bit_0 = 1;
  1448  00D6  147A               	bsf	_Fbodysensor,0	;volatile
  1449                           
  1450                           ;sensor.c: 150: FledBits01.bits.bit_2 = 1;
  1451  00D7  154B               	bsf	_FledBits01,2	;volatile
  1452                           
  1453                           ;sensor.c: 151: if(RB1 == 0)
  1454  00D8  1886               	btfsc	6,1	;volatile
  1455  00D9  28E9               	goto	l7601
  1456                           
  1457                           ;sensor.c: 152: {
  1458                           ;sensor.c: 153: if(++CNTbody_h >= 6)
  1459  00DA  0AB2               	incf	_CNTbody_h,f	;volatile
  1460  00DB  1903               	skipnz
  1461  00DC  0AB3               	incf	_CNTbody_h+1,f	;volatile
  1462  00DD  3000               	movlw	0
  1463  00DE  0233               	subwf	_CNTbody_h+1,w	;volatile
  1464  00DF  3006               	movlw	6
  1465  00E0  1903               	skipnz
  1466  00E1  0232               	subwf	_CNTbody_h,w	;volatile
  1467  00E2  1C03               	skipc
  1468  00E3  28EC               	goto	l7603
  1469                           
  1470                           ;sensor.c: 154: {
  1471                           ;sensor.c: 155: CNTbody_h = 0;
  1472  00E4  01B2               	clrf	_CNTbody_h	;volatile
  1473  00E5  01B3               	clrf	_CNTbody_h+1	;volatile
  1474                           
  1475                           ;sensor.c: 156: CNTbody_l = 0;
  1476  00E6  01B0               	clrf	_CNTbody_l	;volatile
  1477  00E7  01B1               	clrf	_CNTbody_l+1	;volatile
  1478  00E8  28BB               	goto	l7585
  1479  00E9                     l7601:	
  1480                           
  1481                           ;sensor.c: 161: else
  1482                           ;sensor.c: 162: {
  1483                           ;sensor.c: 163: ++CNTbody_l;
  1484  00E9  0AB0               	incf	_CNTbody_l,f	;volatile
  1485  00EA  1903               	skipnz
  1486  00EB  0AB1               	incf	_CNTbody_l+1,f	;volatile
  1487  00EC                     l7603:	
  1488                           
  1489                           ;sensor.c: 164: }
  1490                           ;sensor.c: 165: BufCntAdd = CNTbody_h +CNTbody_l;
  1491  00EC  210C  120A  118A   	fcall	PL6	;call to abstracted procedure
  1492                           
  1493                           ;sensor.c: 166: if(BufCntAdd >= 500)
  1494  00EF  3001               	movlw	1
  1495  00F0  022F               	subwf	_BufCntAdd+1,w	;volatile
  1496  00F1  30F4               	movlw	244
  1497  00F2  1903               	skipnz
  1498  00F3  022E               	subwf	_BufCntAdd,w	;volatile
  1499  00F4  1C03               	skipc
  1500  00F5  0008               	return
  1501  00F6  288F               	goto	l7563
  1502  00F7                     l7607:	
  1503                           
  1504                           ;sensor.c: 173: SEQbody = 0;
  1505  00F7  01C4               	clrf	_SEQbody	;volatile
  1506                           
  1507                           ;sensor.c: 174: FledBits01.bits.bit_2 = 0;
  1508  00F8  114B               	bcf	_FledBits01,2	;volatile
  1509                           
  1510                           ;sensor.c: 175: break;
  1511  00F9  0008               	return
  1512  00FA                     l7613:	
  1513  00FA  0844               	movf	_SEQbody,w	;volatile
  1514                           
  1515                           ; Switch size 1, requested type "space"
  1516                           ; Number of cases is 5, Range of values is 0 to 4
  1517                           ; switch strategies available:
  1518                           ; Name         Instructions Cycles
  1519                           ; simple_byte           16     9 (average)
  1520                           ; direct_byte           23     8 (fixed)
  1521                           ; jumptable            260     6 (fixed)
  1522                           ;	Chosen strategy is simple_byte
  1523  00FB  3A00               	xorlw	0	; case 0
  1524  00FC  1903               	skipnz
  1525  00FD  287E               	goto	l3829
  1526  00FE  3A01               	xorlw	1	; case 1
  1527  00FF  1903               	skipnz
  1528  0100  2892               	goto	l3831
  1529  0101  3A03               	xorlw	3	; case 2
  1530  0102  1903               	skipnz
  1531  0103  28AA               	goto	l3835
  1532  0104  3A01               	xorlw	1	; case 3
  1533  0105  1903               	skipnz
  1534  0106  28BE               	goto	l3840
  1535  0107  3A07               	xorlw	7	; case 4
  1536  0108  1903               	skipnz
  1537  0109  28D6               	goto	l3844
  1538  010A  28F7               	goto	l7607
  1539  010B  0008               	return
  1540  010C                     __end_of_SensorJudge:	
  1541  010C                     PL6:	
  1542  010C  0830               	movf	_CNTbody_l,w	;volatile
  1543  010D  0732               	addwf	_CNTbody_h,w	;volatile
  1544  010E  00AE               	movwf	_BufCntAdd	;volatile
  1545  010F  0831               	movf	_CNTbody_l+1,w	;volatile
  1546  0110  1803               	skipnc
  1547  0111  0A31               	incf	_CNTbody_l+1,w	;volatile
  1548  0112  0733               	addwf	_CNTbody_h+1,w	;volatile
  1549  0113  00AF               	movwf	_BufCntAdd+1	;volatile
  1550  0114  0008               	return
  1551  0115                     __end_ofPL6:	
  1552                           
  1553                           	psect	text10
  1554  031D                     __ptext10:	
  1555 ;; *************** function _GledLoop *****************
  1556 ;; Defined at:
  1557 ;;		line 16 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\light.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;		None
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;		None
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  1    wreg      void 
  1564 ;; Registers used:
  1565 ;;		status,2, status,0, pclath, cstack
  1566 ;; Tracked objects:
  1567 ;;		On entry : 300/0
  1568 ;;		On exit  : 300/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1571 ;;      Params:         0       0       0       0       0
  1572 ;;      Locals:         0       0       0       0       0
  1573 ;;      Temps:          0       0       0       0       0
  1574 ;;      Totals:         0       0       0       0       0
  1575 ;;Total ram usage:        0 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; Hardware stack levels required when called:    3
  1578 ;; This function calls:
  1579 ;;		_LED_Con
  1580 ;;		_LED_Judge
  1581 ;;		_LED_Key
  1582 ;;		_LED_Time
  1583 ;; This function is called by:
  1584 ;;		_main
  1585 ;; This function uses a non-reentrant model
  1586 ;;
  1587                           
  1588                           
  1589                           ;psect for function _GledLoop
  1590  031D                     _GledLoop:	
  1591                           
  1592                           ;light.c: 18: LED_Time();
  1593                           
  1594                           ;incstack = 0
  1595                           ; Regs used in _GledLoop: [status,2+status,0+pclath+cstack]
  1596  031D  2328  120A  118A   	fcall	_LED_Time
  1597                           
  1598                           ;light.c: 19: LED_Key();
  1599  0320  2327  120A  118A   	fcall	_LED_Key
  1600                           
  1601                           ;light.c: 20: LED_Judge();
  1602  0323  2335  120A  118A   	fcall	_LED_Judge
  1603                           
  1604                           ;light.c: 21: LED_Con();
  1605  0326  2B2B               	ljmp	l7433
  1606  0327                     __end_of_GledLoop:	
  1607  0327                     __ptext12:	
  1608 ;; *************** function _LED_Key *****************
  1609 ;; Defined at:
  1610 ;;		line 24 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\light.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;		None
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;		None
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      void 
  1617 ;; Registers used:
  1618 ;;		None
  1619 ;; Tracked objects:
  1620 ;;		On entry : 300/0
  1621 ;;		On exit  : 300/0
  1622 ;;		Unchanged: 300/0
  1623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1624 ;;      Params:         0       0       0       0       0
  1625 ;;      Locals:         0       0       0       0       0
  1626 ;;      Temps:          0       0       0       0       0
  1627 ;;      Totals:         0       0       0       0       0
  1628 ;;Total ram usage:        0 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:    2
  1631 ;; This function calls:
  1632 ;;		Nothing
  1633 ;; This function is called by:
  1634 ;;		_GledLoop
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           
  1639                           ;psect for function _LED_Key
  1640  0327                     _LED_Key:	
  1641                           
  1642                           ;incstack = 0
  1643                           ; Regs used in _LED_Key: []
  1644  0327  0008               	return
  1645  0328                     __end_of_LED_Key:	
  1646  0328                     __ptext11:	
  1647 ;; *************** function _LED_Time *****************
  1648 ;; Defined at:
  1649 ;;		line 45 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\light.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;		None
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;		None
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  1    wreg      void 
  1656 ;; Registers used:
  1657 ;;		None
  1658 ;; Tracked objects:
  1659 ;;		On entry : 300/0
  1660 ;;		On exit  : 300/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1663 ;;      Params:         0       0       0       0       0
  1664 ;;      Locals:         0       0       0       0       0
  1665 ;;      Temps:          0       0       0       0       0
  1666 ;;      Totals:         0       0       0       0       0
  1667 ;;Total ram usage:        0 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    2
  1670 ;; This function calls:
  1671 ;;		Nothing
  1672 ;; This function is called by:
  1673 ;;		_GledLoop
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           
  1678                           ;psect for function _LED_Time
  1679  0328                     _LED_Time:	
  1680                           
  1681                           ;light.c: 47: if(Fsys1m.bits.bit_0 == 1)
  1682                           
  1683                           ;incstack = 0
  1684                           ; Regs used in _LED_Time: []
  1685  0328  184C               	btfsc	_Fsys1m,0	;volatile
  1686                           
  1687                           ;light.c: 48: {
  1688                           ;light.c: 49: Fsys1m.bits.bit_0 = 0;
  1689  0329  104C               	bcf	_Fsys1m,0	;volatile
  1690  032A  0008               	return
  1691  032B                     __end_of_LED_Time:	
  1692  032B                     __ptext14:	
  1693 ;; *************** function _LED_Con *****************
  1694 ;; Defined at:
  1695 ;;		line 84 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\light.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;		None
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;		None
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  1    wreg      void 
  1702 ;; Registers used:
  1703 ;;		None
  1704 ;; Tracked objects:
  1705 ;;		On entry : 300/0
  1706 ;;		On exit  : 300/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1709 ;;      Params:         0       0       0       0       0
  1710 ;;      Locals:         0       0       0       0       0
  1711 ;;      Temps:          0       0       0       0       0
  1712 ;;      Totals:         0       0       0       0       0
  1713 ;;Total ram usage:        0 bytes
  1714 ;; Hardware stack levels used:    1
  1715 ;; Hardware stack levels required when called:    2
  1716 ;; This function calls:
  1717 ;;		Nothing
  1718 ;; This function is called by:
  1719 ;;		_GledLoop
  1720 ;; This function uses a non-reentrant model
  1721 ;;
  1722                           
  1723                           
  1724                           ;psect for function _LED_Con
  1725  032B                     _LED_Con:	
  1726  032B                     l7433:	
  1727                           ;incstack = 0
  1728                           ; Regs used in _LED_Con: []
  1729                           
  1730                           
  1731                           ;light.c: 86: RA5 = FledBits01.bits.bit_0;
  1732  032B  1C4B               	btfss	_FledBits01,0	;volatile
  1733  032C  2B31               	goto	u600
  1734  032D  1283               	bcf	3,5	;RP0=0, select bank0
  1735  032E  1303               	bcf	3,6	;RP1=0, select bank0
  1736  032F  1685               	bsf	5,5	;volatile
  1737  0330  0008               	return
  1738  0331                     u600:	
  1739  0331  1283               	bcf	3,5	;RP0=0, select bank0
  1740  0332  1303               	bcf	3,6	;RP1=0, select bank0
  1741  0333  1285               	bcf	5,5	;volatile
  1742  0334  0008               	return
  1743  0335                     __end_of_LED_Con:	
  1744  0335                     __ptext13:	
  1745 ;; *************** function _LED_Judge *****************
  1746 ;; Defined at:
  1747 ;;		line 53 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\light.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;		None
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;		None
  1752 ;; Return value:  Size  Location     Type
  1753 ;;                  1    wreg      void 
  1754 ;; Registers used:
  1755 ;;		None
  1756 ;; Tracked objects:
  1757 ;;		On entry : 300/0
  1758 ;;		On exit  : 300/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1761 ;;      Params:         0       0       0       0       0
  1762 ;;      Locals:         0       0       0       0       0
  1763 ;;      Temps:          0       0       0       0       0
  1764 ;;      Totals:         0       0       0       0       0
  1765 ;;Total ram usage:        0 bytes
  1766 ;; Hardware stack levels used:    1
  1767 ;; Hardware stack levels required when called:    2
  1768 ;; This function calls:
  1769 ;;		Nothing
  1770 ;; This function is called by:
  1771 ;;		_GledLoop
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           
  1776                           ;psect for function _LED_Judge
  1777  0335                     _LED_Judge:	
  1778                           
  1779                           ;light.c: 55: if(Fbodysensor.bits.bit_0 == 1)
  1780                           
  1781                           ;incstack = 0
  1782                           ; Regs used in _LED_Judge: []
  1783  0335  1C7A               	btfss	_Fbodysensor,0	;volatile
  1784  0336  2B3B               	goto	l7431
  1785                           
  1786                           ;light.c: 56: {
  1787                           ;light.c: 57: FledBits01.bits.bit_0 = 1;
  1788  0337  144B               	bsf	_FledBits01,0	;volatile
  1789                           
  1790                           ;light.c: 58: if(Fbodysensor.bits.bit_4 == 0)
  1791  0338  1E7A               	btfss	_Fbodysensor,4	;volatile
  1792                           
  1793                           ;light.c: 59: {
  1794                           ;light.c: 60: if(FledBits01.bits.bit_2 == 1)
  1795  0339  1D4B               	btfss	_FledBits01,2	;volatile
  1796  033A  0008               	return
  1797  033B                     l7431:	
  1798                           
  1799                           ;light.c: 61: {
  1800                           ;light.c: 62: FledBits01.bits.bit_0 = 0;
  1801  033B  104B               	bcf	_FledBits01,0	;volatile
  1802  033C  0008               	return
  1803  033D                     __end_of_LED_Judge:	
  1804                           
  1805                           	psect	text15
  1806  0115                     __ptext15:	
  1807 ;; *************** function _GflushLoop *****************
  1808 ;; Defined at:
  1809 ;;		line 15 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\flush.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;		None
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;		None
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  1    wreg      void 
  1816 ;; Registers used:
  1817 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 300/0
  1820 ;;		On exit  : 300/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1823 ;;      Params:         0       0       0       0       0
  1824 ;;      Locals:         0       0       0       0       0
  1825 ;;      Temps:          0       0       0       0       0
  1826 ;;      Totals:         0       0       0       0       0
  1827 ;;Total ram usage:        0 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; Hardware stack levels required when called:    3
  1830 ;; This function calls:
  1831 ;;		_FlushCon
  1832 ;;		_FlushJudge
  1833 ;;		_FlushTime
  1834 ;; This function is called by:
  1835 ;;		_main
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           
  1840                           ;psect for function _GflushLoop
  1841  0115                     _GflushLoop:	
  1842                           
  1843                           ;flush.c: 17: FlushTime();
  1844                           
  1845                           ;incstack = 0
  1846                           ; Regs used in _GflushLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1847  0115  211C  120A  118A   	fcall	_FlushTime
  1848                           
  1849                           ;flush.c: 18: FlushJudge();
  1850  0118  21DD  120A  118A   	fcall	_FlushJudge
  1851                           
  1852                           ;flush.c: 19: FlushCon();
  1853  011B  291D               	ljmp	l7449
  1854  011C                     __end_of_GflushLoop:	
  1855  011C                     __ptext16:	
  1856 ;; *************** function _FlushTime *****************
  1857 ;; Defined at:
  1858 ;;		line 22 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\flush.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;		None
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;		None
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		None
  1867 ;; Tracked objects:
  1868 ;;		On entry : 300/0
  1869 ;;		On exit  : 300/0
  1870 ;;		Unchanged: 300/0
  1871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1872 ;;      Params:         0       0       0       0       0
  1873 ;;      Locals:         0       0       0       0       0
  1874 ;;      Temps:          0       0       0       0       0
  1875 ;;      Totals:         0       0       0       0       0
  1876 ;;Total ram usage:        0 bytes
  1877 ;; Hardware stack levels used:    1
  1878 ;; Hardware stack levels required when called:    2
  1879 ;; This function calls:
  1880 ;;		Nothing
  1881 ;; This function is called by:
  1882 ;;		_GflushLoop
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           
  1887                           ;psect for function _FlushTime
  1888  011C                     _FlushTime:	
  1889                           
  1890                           ;incstack = 0
  1891                           ; Regs used in _FlushTime: []
  1892  011C  0008               	return
  1893  011D                     __end_of_FlushTime:	
  1894  011D                     __ptext18:	
  1895 ;; *************** function _FlushCon *****************
  1896 ;; Defined at:
  1897 ;;		line 92 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\flush.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;		None
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;		None
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  1    wreg      void 
  1904 ;; Registers used:
  1905 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1906 ;; Tracked objects:
  1907 ;;		On entry : 300/0
  1908 ;;		On exit  : 300/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1911 ;;      Params:         0       0       0       0       0
  1912 ;;      Locals:         0       0       0       0       0
  1913 ;;      Temps:          0       0       0       0       0
  1914 ;;      Totals:         0       0       0       0       0
  1915 ;;Total ram usage:        0 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:    2
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_GflushLoop
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           
  1926                           ;psect for function _FlushCon
  1927  011D                     _FlushCon:	
  1928  011D                     l7449:	
  1929                           ;incstack = 0
  1930                           ; Regs used in _FlushCon: [wreg-fsr0h+status,2+status,0]
  1931                           
  1932                           
  1933                           ;flush.c: 94: switch (SEQflsuh)
  1934  011D  29B9               	goto	l7527
  1935  011E                     l2864:	
  1936                           ;flush.c: 95: {
  1937                           ;flush.c: 96: case FLUSH_INIT_0:
  1938                           
  1939                           
  1940                           ;flush.c: 97: Fflush1.bits.bit_6 = 0;
  1941  011E  1378               	bcf	_Fflush1,6	;volatile
  1942                           
  1943                           ;flush.c: 98: RA2 = 0;
  1944  011F  1105               	bcf	5,2	;volatile
  1945                           
  1946                           ;flush.c: 99: RA4 = 0;
  1947  0120  1205               	bcf	5,4	;volatile
  1948                           
  1949                           ;flush.c: 100: if((Fflush1.bits.bit_1 == 1) || (Fflush1.bits.bit_3 == 1))
  1950  0121  18F8               	btfsc	_Fflush1,1	;volatile
  1951  0122  2925               	goto	l7453
  1952  0123  1DF8               	btfss	_Fflush1,3	;volatile
  1953  0124  0008               	return
  1954  0125                     l7453:	
  1955                           
  1956                           ;flush.c: 101: {
  1957                           ;flush.c: 102: SEQflsuh = FLUSH_INIT_1;
  1958  0125  3001               	movlw	1
  1959  0126  2928               	goto	L2
  1960  0127                     l7457:	
  1961                           
  1962                           ;flush.c: 111: {
  1963                           ;flush.c: 112: SEQflsuh = FLUSH_END_0;
  1964  0127  3009               	movlw	9
  1965  0128                     L2:	
  1966  0128  00C6               	movwf	_SEQflsuh	;volatile
  1967                           
  1968                           ;flush.c: 103: CNTflush = 0;
  1969  0129  01F6               	clrf	_CNTflush	;volatile
  1970  012A  01F7               	clrf	_CNTflush+1	;volatile
  1971  012B  0008               	return
  1972  012C                     l2869:	
  1973                           ;flush.c: 106: case FLUSH_INIT_1:
  1974                           
  1975                           
  1976                           ;flush.c: 107: Fflush1.bits.bit_6 = 1;
  1977  012C  1778               	bsf	_Fflush1,6	;volatile
  1978                           
  1979                           ;flush.c: 108: RA2 = 0;
  1980  012D  1105               	bcf	5,2	;volatile
  1981                           
  1982                           ;flush.c: 109: RA4 = 0;
  1983  012E  1205               	bcf	5,4	;volatile
  1984                           
  1985                           ;flush.c: 110: if(Fbodysensor.bits.bit_0 == 1)
  1986  012F  187A               	btfsc	_Fbodysensor,0	;volatile
  1987  0130  2927               	goto	l7457
  1988                           
  1989                           ;flush.c: 115: }
  1990                           ;flush.c: 116: if(++CNTflush >= 5)
  1991  0131  0AF6               	incf	_CNTflush,f	;volatile
  1992  0132  1903               	skipnz
  1993  0133  0AF7               	incf	_CNTflush+1,f	;volatile
  1994  0134  3000               	movlw	0
  1995  0135  0277               	subwf	_CNTflush+1,w	;volatile
  1996  0136  3005               	movlw	5
  1997  0137  1903               	skipnz
  1998  0138  0276               	subwf	_CNTflush,w	;volatile
  1999  0139  1C03               	skipc
  2000  013A  0008               	return
  2001                           
  2002                           ;flush.c: 117: {
  2003                           ;flush.c: 118: CNTflush = 0;
  2004  013B  01F6               	clrf	_CNTflush	;volatile
  2005  013C  01F7               	clrf	_CNTflush+1	;volatile
  2006                           
  2007                           ;flush.c: 119: SEQflsuh = FLUSH_INIT_2;
  2008  013D  3002               	movlw	2
  2009  013E  00C6               	movwf	_SEQflsuh	;volatile
  2010  013F  0008               	return
  2011  0140                     l2872:	
  2012                           ;flush.c: 122: case FLUSH_INIT_2:
  2013                           
  2014                           
  2015                           ;flush.c: 123: Fflush1.bits.bit_6 = 1;
  2016  0140  1778               	bsf	_Fflush1,6	;volatile
  2017                           
  2018                           ;flush.c: 124: RA2 = 0;
  2019  0141  1105               	bcf	5,2	;volatile
  2020                           
  2021                           ;flush.c: 125: RA4 = 0;
  2022  0142  1205               	bcf	5,4	;volatile
  2023                           
  2024                           ;flush.c: 126: if(Fbodysensor.bits.bit_0 == 1)
  2025  0143  187A               	btfsc	_Fbodysensor,0	;volatile
  2026  0144  2927               	goto	l7457
  2027                           
  2028                           ;flush.c: 131: }
  2029                           ;flush.c: 133: if(Fflush1.bits.bit_1 == 1)
  2030  0145  1CF8               	btfss	_Fflush1,1	;volatile
  2031  0146  294A               	goto	l2874
  2032                           
  2033                           ;flush.c: 134: {
  2034                           ;flush.c: 135: SEQflsuh = FLUSH_BIG_0;
  2035  0147  3003               	movlw	3
  2036  0148  00C6               	movwf	_SEQflsuh	;volatile
  2037                           
  2038                           ;flush.c: 136: }
  2039  0149  0008               	return
  2040  014A                     l2874:	
  2041                           
  2042                           ;flush.c: 137: else if(Fflush1.bits.bit_3 == 1)
  2043  014A  1DF8               	btfss	_Fflush1,3	;volatile
  2044  014B  0008               	return
  2045                           
  2046                           ;flush.c: 138: {
  2047                           ;flush.c: 139: SEQflsuh = FLUSH_SML_0;
  2048  014C  3006               	movlw	6
  2049  014D  00C6               	movwf	_SEQflsuh	;volatile
  2050  014E  0008               	return
  2051  014F                     l2877:	
  2052                           ;flush.c: 142: case FLUSH_BIG_0:
  2053                           
  2054                           
  2055                           ;flush.c: 143: Fflush1.bits.bit_6 = 1;
  2056                           
  2057                           ;flush.c: 144: RA2 = 0;
  2058                           
  2059                           ;flush.c: 145: RA4 = 1;
  2060                           
  2061                           ;flush.c: 146: if(++CNTflush >= 10)
  2062  014F  2201  120A  118A   	fcall	PL4	;call to abstracted procedure
  2063  0152  1903               	skipnz
  2064  0153  0276               	subwf	_CNTflush,w	;volatile
  2065  0154  1C03               	skipc
  2066  0155  0008               	return
  2067                           
  2068                           ;flush.c: 147: {
  2069                           ;flush.c: 148: CNTflush = 0;
  2070  0156  01F6               	clrf	_CNTflush	;volatile
  2071  0157  01F7               	clrf	_CNTflush+1	;volatile
  2072                           
  2073                           ;flush.c: 149: SEQflsuh = FLUSH_BIG_1;
  2074  0158  3004               	movlw	4
  2075  0159  00C6               	movwf	_SEQflsuh	;volatile
  2076  015A  0008               	return
  2077  015B                     l2879:	
  2078                           ;flush.c: 152: case FLUSH_BIG_1:
  2079                           
  2080                           
  2081                           ;flush.c: 153: Fflush1.bits.bit_6 = 1;
  2082  015B  1778               	bsf	_Fflush1,6	;volatile
  2083                           
  2084                           ;flush.c: 154: RA2 = 1;
  2085  015C  1505               	bsf	5,2	;volatile
  2086                           
  2087                           ;flush.c: 155: RA4 = 1;
  2088  015D  1605               	bsf	5,4	;volatile
  2089                           
  2090                           ;flush.c: 157: if(++CNTflush >= 100)
  2091  015E  0AF6               	incf	_CNTflush,f	;volatile
  2092  015F  1903               	skipnz
  2093  0160  0AF7               	incf	_CNTflush+1,f	;volatile
  2094  0161  3000               	movlw	0
  2095  0162  0277               	subwf	_CNTflush+1,w	;volatile
  2096  0163  3064               	movlw	100
  2097  0164  1903               	skipnz
  2098  0165  0276               	subwf	_CNTflush,w	;volatile
  2099  0166  1C03               	skipc
  2100  0167  0008               	return
  2101                           
  2102                           ;flush.c: 158: {
  2103                           ;flush.c: 159: CNTflush = 0;
  2104  0168  01F6               	clrf	_CNTflush	;volatile
  2105  0169  01F7               	clrf	_CNTflush+1	;volatile
  2106                           
  2107                           ;flush.c: 160: SEQflsuh = FLUSH_BIG_2;
  2108  016A  3005               	movlw	5
  2109  016B  00C6               	movwf	_SEQflsuh	;volatile
  2110  016C  0008               	return
  2111  016D                     l2881:	
  2112                           ;flush.c: 170: case FLUSH_BIG_2:
  2113                           
  2114                           
  2115                           ;flush.c: 171: Fflush1.bits.bit_6 = 1;
  2116                           
  2117                           ;flush.c: 172: RA2 = 0;
  2118                           
  2119                           ;flush.c: 173: RA4 = 1;
  2120                           
  2121                           ;flush.c: 174: if(++CNTflush >= 10)
  2122  016D  2201  120A  118A   	fcall	PL4	;call to abstracted procedure
  2123  0170                     L1:	
  2124  0170  1903               	skipnz
  2125  0171  0276               	subwf	_CNTflush,w	;volatile
  2126  0172  1C03               	skipc
  2127  0173  0008               	return
  2128                           
  2129                           ;flush.c: 175: {
  2130                           ;flush.c: 176: CNTflush = 0;
  2131  0174  01F6               	clrf	_CNTflush	;volatile
  2132  0175  01F7               	clrf	_CNTflush+1	;volatile
  2133                           
  2134                           ;flush.c: 177: SEQflsuh = FLUSH_END_0;
  2135  0176  3009               	movlw	9
  2136  0177  00C6               	movwf	_SEQflsuh	;volatile
  2137  0178  0008               	return
  2138  0179                     l2883:	
  2139                           ;flush.c: 181: case FLUSH_SML_0:
  2140                           
  2141                           
  2142                           ;flush.c: 182: Fflush1.bits.bit_6 = 1;
  2143                           
  2144                           ;flush.c: 183: RA2 = 0;
  2145                           
  2146                           ;flush.c: 184: RA4 = 0;
  2147                           
  2148                           ;flush.c: 185: if(++CNTflush >= 5)
  2149  0179  21F8  120A  118A   	fcall	PL2	;call to abstracted procedure
  2150  017C  1903               	skipnz
  2151  017D  0276               	subwf	_CNTflush,w	;volatile
  2152  017E  1C03               	skipc
  2153  017F  0008               	return
  2154                           
  2155                           ;flush.c: 186: {
  2156                           ;flush.c: 187: CNTflush = 0;
  2157  0180  01F6               	clrf	_CNTflush	;volatile
  2158  0181  01F7               	clrf	_CNTflush+1	;volatile
  2159                           
  2160                           ;flush.c: 188: SEQflsuh = FLUSH_SML_1;
  2161  0182  3007               	movlw	7
  2162  0183  00C6               	movwf	_SEQflsuh	;volatile
  2163  0184  0008               	return
  2164  0185                     l2885:	
  2165                           ;flush.c: 191: case FLUSH_SML_1:
  2166                           
  2167                           
  2168                           ;flush.c: 192: Fflush1.bits.bit_6 = 1;
  2169  0185  1778               	bsf	_Fflush1,6	;volatile
  2170                           
  2171                           ;flush.c: 193: RA2 = 1;
  2172  0186  1505               	bsf	5,2	;volatile
  2173                           
  2174                           ;flush.c: 194: RA4 = 0;
  2175  0187  1205               	bcf	5,4	;volatile
  2176                           
  2177                           ;flush.c: 195: if(++CNTflush >= 200)
  2178  0188  0AF6               	incf	_CNTflush,f	;volatile
  2179  0189  1903               	skipnz
  2180  018A  0AF7               	incf	_CNTflush+1,f	;volatile
  2181  018B  3000               	movlw	0
  2182  018C  0277               	subwf	_CNTflush+1,w	;volatile
  2183  018D  30C8               	movlw	200
  2184  018E  1903               	skipnz
  2185  018F  0276               	subwf	_CNTflush,w	;volatile
  2186  0190  1C03               	skipc
  2187  0191  0008               	return
  2188                           
  2189                           ;flush.c: 196: {
  2190                           ;flush.c: 197: CNTflush = 0;
  2191  0192  01F6               	clrf	_CNTflush	;volatile
  2192  0193  01F7               	clrf	_CNTflush+1	;volatile
  2193                           
  2194                           ;flush.c: 198: SEQflsuh = FLUSH_SML_2;
  2195  0194  3008               	movlw	8
  2196  0195  00C6               	movwf	_SEQflsuh	;volatile
  2197  0196  0008               	return
  2198  0197                     l2887:	
  2199                           ;flush.c: 201: case FLUSH_SML_2:
  2200                           
  2201                           
  2202                           ;flush.c: 202: Fflush1.bits.bit_6 = 1;
  2203                           
  2204                           ;flush.c: 203: RA2 = 0;
  2205                           
  2206                           ;flush.c: 204: RA4 = 0;
  2207                           
  2208                           ;flush.c: 205: if(++CNTflush >= 5)
  2209  0197  21F8  120A  118A   	fcall	PL2	;call to abstracted procedure
  2210  019A  2970               	goto	L1
  2211  019B                     l2889:	
  2212                           ;flush.c: 212: case FLUSH_END_0:
  2213                           
  2214                           
  2215                           ;flush.c: 213: Fflush1.bits.bit_6 = 1;
  2216                           
  2217                           ;flush.c: 214: RA2 = 0;
  2218                           
  2219                           ;flush.c: 215: RA4 = 0;
  2220                           
  2221                           ;flush.c: 216: if(++CNTflush >= 5)
  2222  019B  21F8  120A  118A   	fcall	PL2	;call to abstracted procedure
  2223  019E  1903               	skipnz
  2224  019F  0276               	subwf	_CNTflush,w	;volatile
  2225  01A0  1C03               	skipc
  2226  01A1  0008               	return
  2227                           
  2228                           ;flush.c: 217: {
  2229                           ;flush.c: 218: CNTflush = 0;
  2230  01A2  01F6               	clrf	_CNTflush	;volatile
  2231  01A3  01F7               	clrf	_CNTflush+1	;volatile
  2232                           
  2233                           ;flush.c: 219: SEQflsuh = FLUSH_END_1;
  2234  01A4  300A               	movlw	10
  2235  01A5  00C6               	movwf	_SEQflsuh	;volatile
  2236  01A6  0008               	return
  2237  01A7                     l2891:	
  2238                           ;flush.c: 222: case FLUSH_END_1:
  2239                           
  2240                           
  2241                           ;flush.c: 223: Fflush1.bits.bit_6 = 0;
  2242  01A7  1378               	bcf	_Fflush1,6	;volatile
  2243                           
  2244                           ;flush.c: 224: RA2 = 0;
  2245  01A8  1105               	bcf	5,2	;volatile
  2246                           
  2247                           ;flush.c: 225: RA4 = 0;
  2248  01A9  1205               	bcf	5,4	;volatile
  2249                           
  2250                           ;flush.c: 226: SEQflsuh = FLUSH_INIT_0;
  2251  01AA  01C6               	clrf	_SEQflsuh	;volatile
  2252                           
  2253                           ;flush.c: 227: CNTflush = 0;
  2254  01AB  01F6               	clrf	_CNTflush	;volatile
  2255  01AC  01F7               	clrf	_CNTflush+1	;volatile
  2256                           
  2257                           ;flush.c: 228: Fflush1.bits.bit_1 = 0;
  2258  01AD  10F8               	bcf	_Fflush1,1	;volatile
  2259                           
  2260                           ;flush.c: 229: Fflush1.bits.bit_3 = 0;
  2261  01AE  11F8               	bcf	_Fflush1,3	;volatile
  2262                           
  2263                           ;flush.c: 230: break;
  2264  01AF  0008               	return
  2265  01B0                     l2892:	
  2266                           ;flush.c: 231: default:
  2267                           
  2268                           
  2269                           ;flush.c: 232: Fflush1.bits.bit_6 = 0;
  2270  01B0  1378               	bcf	_Fflush1,6	;volatile
  2271                           
  2272                           ;flush.c: 233: RA2 = 0;
  2273  01B1  1105               	bcf	5,2	;volatile
  2274                           
  2275                           ;flush.c: 234: RA4 = 0;
  2276  01B2  1205               	bcf	5,4	;volatile
  2277                           
  2278                           ;flush.c: 235: Fflush1.bits.bit_1 = 0;
  2279  01B3  10F8               	bcf	_Fflush1,1	;volatile
  2280                           
  2281                           ;flush.c: 236: Fflush1.bits.bit_3 = 0;
  2282  01B4  11F8               	bcf	_Fflush1,3	;volatile
  2283                           
  2284                           ;flush.c: 237: SEQflsuh = FLUSH_INIT_0;
  2285  01B5  01C6               	clrf	_SEQflsuh	;volatile
  2286                           
  2287                           ;flush.c: 238: CNTflush = 0;
  2288  01B6  01F6               	clrf	_CNTflush	;volatile
  2289  01B7  01F7               	clrf	_CNTflush+1	;volatile
  2290                           
  2291                           ;flush.c: 239: break;
  2292  01B8  0008               	return
  2293  01B9                     l7527:	
  2294  01B9  0846               	movf	_SEQflsuh,w	;volatile
  2295                           
  2296                           ; Switch size 1, requested type "space"
  2297                           ; Number of cases is 11, Range of values is 0 to 10
  2298                           ; switch strategies available:
  2299                           ; Name         Instructions Cycles
  2300                           ; simple_byte           34    18 (average)
  2301                           ; direct_byte           41     8 (fixed)
  2302                           ; jumptable            260     6 (fixed)
  2303                           ;	Chosen strategy is simple_byte
  2304  01BA  3A00               	xorlw	0	; case 0
  2305  01BB  1903               	skipnz
  2306  01BC  291E               	goto	l2864
  2307  01BD  3A01               	xorlw	1	; case 1
  2308  01BE  1903               	skipnz
  2309  01BF  292C               	goto	l2869
  2310  01C0  3A03               	xorlw	3	; case 2
  2311  01C1  1903               	skipnz
  2312  01C2  2940               	goto	l2872
  2313  01C3  3A01               	xorlw	1	; case 3
  2314  01C4  1903               	skipnz
  2315  01C5  294F               	goto	l2877
  2316  01C6  3A07               	xorlw	7	; case 4
  2317  01C7  1903               	skipnz
  2318  01C8  295B               	goto	l2879
  2319  01C9  3A01               	xorlw	1	; case 5
  2320  01CA  1903               	skipnz
  2321  01CB  296D               	goto	l2881
  2322  01CC  3A03               	xorlw	3	; case 6
  2323  01CD  1903               	skipnz
  2324  01CE  2979               	goto	l2883
  2325  01CF  3A01               	xorlw	1	; case 7
  2326  01D0  1903               	skipnz
  2327  01D1  2985               	goto	l2885
  2328  01D2  3A0F               	xorlw	15	; case 8
  2329  01D3  1903               	skipnz
  2330  01D4  2997               	goto	l2887
  2331  01D5  3A01               	xorlw	1	; case 9
  2332  01D6  1903               	skipnz
  2333  01D7  299B               	goto	l2889
  2334  01D8  3A03               	xorlw	3	; case 10
  2335  01D9  1903               	skipnz
  2336  01DA  29A7               	goto	l2891
  2337  01DB  29B0               	goto	l2892
  2338  01DC  0008               	return
  2339  01DD                     __end_of_FlushCon:	
  2340  01DD                     __ptext17:	
  2341 ;; *************** function _FlushJudge *****************
  2342 ;; Defined at:
  2343 ;;		line 26 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\flush.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;		None
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;		None
  2348 ;; Return value:  Size  Location     Type
  2349 ;;                  1    wreg      void 
  2350 ;; Registers used:
  2351 ;;		None
  2352 ;; Tracked objects:
  2353 ;;		On entry : 300/0
  2354 ;;		On exit  : 300/0
  2355 ;;		Unchanged: 300/0
  2356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2357 ;;      Params:         0       0       0       0       0
  2358 ;;      Locals:         0       0       0       0       0
  2359 ;;      Temps:          0       0       0       0       0
  2360 ;;      Totals:         0       0       0       0       0
  2361 ;;Total ram usage:        0 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; Hardware stack levels required when called:    2
  2364 ;; This function calls:
  2365 ;;		Nothing
  2366 ;; This function is called by:
  2367 ;;		_GflushLoop
  2368 ;; This function uses a non-reentrant model
  2369 ;;
  2370                           
  2371                           
  2372                           ;psect for function _FlushJudge
  2373  01DD                     _FlushJudge:	
  2374                           
  2375                           ;flush.c: 46: if(Fbodysensor.bits.bit_4 == 1)
  2376                           
  2377                           ;incstack = 0
  2378                           ; Regs used in _FlushJudge: []
  2379  01DD  1E7A               	btfss	_Fbodysensor,4	;volatile
  2380  01DE  29E2               	goto	l2853
  2381                           
  2382                           ;flush.c: 47: {
  2383                           ;flush.c: 50: Fflush1.bits.bit_2 = 0;
  2384  01DF  1178               	bcf	_Fflush1,2	;volatile
  2385                           
  2386                           ;flush.c: 51: Fflush1.bits.bit_0 = 1;
  2387  01E0  1478               	bsf	_Fflush1,0	;volatile
  2388                           
  2389                           ;flush.c: 52: }
  2390  01E1  29E4               	goto	l2854
  2391  01E2                     l2853:	
  2392                           
  2393                           ;flush.c: 53: else
  2394                           ;flush.c: 54: {
  2395                           ;flush.c: 55: Fflush1.bits.bit_2 = 0;
  2396  01E2  1178               	bcf	_Fflush1,2	;volatile
  2397                           
  2398                           ;flush.c: 56: Fflush1.bits.bit_0 = 0;
  2399  01E3  1078               	bcf	_Fflush1,0	;volatile
  2400  01E4                     l2854:	
  2401                           
  2402                           ;flush.c: 57: }
  2403                           ;flush.c: 61: if (Fbodysensor.bits.bit_2 == 1)
  2404  01E4  197A               	btfsc	_Fbodysensor,2	;volatile
  2405                           
  2406                           ;flush.c: 62: {
  2407                           ;flush.c: 63: Fflush1.bits.bit_7 = 1;
  2408  01E5  17F8               	bsf	_Fflush1,7	;volatile
  2409                           
  2410                           ;flush.c: 64: }
  2411                           ;flush.c: 65: if (Fflush1.bits.bit_7 == 1)
  2412  01E6  1FF8               	btfss	_Fflush1,7	;volatile
  2413  01E7  0008               	return
  2414                           
  2415                           ;flush.c: 66: {
  2416                           ;flush.c: 67: if (Fflush1.bits.bit_6 == 1)
  2417  01E8  1F78               	btfss	_Fflush1,6	;volatile
  2418  01E9  29ED               	goto	l2857
  2419                           
  2420                           ;flush.c: 68: {
  2421                           ;flush.c: 69: Fflush1.bits.bit_2 = 0;
  2422  01EA  1178               	bcf	_Fflush1,2	;volatile
  2423                           
  2424                           ;flush.c: 70: Fflush1.bits.bit_0 = 0;
  2425  01EB  1078               	bcf	_Fflush1,0	;volatile
  2426                           
  2427                           ;flush.c: 71: return;
  2428  01EC  0008               	return
  2429  01ED                     l2857:	
  2430                           
  2431                           ;flush.c: 72: }
  2432                           ;flush.c: 73: Fflush1.bits.bit_7 = 0;
  2433  01ED  13F8               	bcf	_Fflush1,7	;volatile
  2434                           
  2435                           ;flush.c: 74: if(Fflush1.bits.bit_0 == 1)
  2436  01EE  1C78               	btfss	_Fflush1,0	;volatile
  2437  01EF  29F3               	goto	l2859
  2438                           
  2439                           ;flush.c: 75: {
  2440                           ;flush.c: 76: Fflush1.bits.bit_0 = 0;
  2441  01F0  1078               	bcf	_Fflush1,0	;volatile
  2442                           
  2443                           ;flush.c: 77: Fflush1.bits.bit_1 = 1;
  2444  01F1  14F8               	bsf	_Fflush1,1	;volatile
  2445                           
  2446                           ;flush.c: 78: return;
  2447  01F2  0008               	return
  2448  01F3                     l2859:	
  2449                           
  2450                           ;flush.c: 79: }
  2451                           ;flush.c: 80: if(Fflush1.bits.bit_2 == 1)
  2452  01F3  1D78               	btfss	_Fflush1,2	;volatile
  2453  01F4  0008               	return
  2454                           
  2455                           ;flush.c: 81: {
  2456                           ;flush.c: 82: Fflush1.bits.bit_2 = 0;
  2457  01F5  1178               	bcf	_Fflush1,2	;volatile
  2458                           
  2459                           ;flush.c: 83: Fflush1.bits.bit_3 = 1;
  2460  01F6  15F8               	bsf	_Fflush1,3	;volatile
  2461  01F7  0008               	return
  2462  01F8                     __end_of_FlushJudge:	
  2463  01F8                     PL2:	
  2464  01F8  1778               	bsf	_Fflush1,6	;volatile
  2465  01F9  1105               	bcf	5,2	;volatile
  2466  01FA  1205               	bcf	5,4	;volatile
  2467  01FB  0AF6               	incf	_CNTflush,f	;volatile
  2468  01FC  1903               	skipnz
  2469  01FD  0AF7               	incf	_CNTflush+1,f	;volatile
  2470  01FE  3000               	movlw	0
  2471  01FF  0277               	subwf	_CNTflush+1,w	;volatile
  2472  0200  3405               	retlw	5
  2473  0201                     __end_ofPL2:	
  2474  0201                     PL4:	
  2475  0201  1778               	bsf	_Fflush1,6	;volatile
  2476  0202  1105               	bcf	5,2	;volatile
  2477  0203  1605               	bsf	5,4	;volatile
  2478  0204  0AF6               	incf	_CNTflush,f	;volatile
  2479  0205  1903               	skipnz
  2480  0206  0AF7               	incf	_CNTflush+1,f	;volatile
  2481  0207  3000               	movlw	0
  2482  0208  0277               	subwf	_CNTflush+1,w	;volatile
  2483  0209  340A               	retlw	10
  2484  020A                     __end_ofPL4:	
  2485                           
  2486                           	psect	text19
  2487  020A                     __ptext19:	
  2488 ;; *************** function _FCTloop *****************
  2489 ;; Defined at:
  2490 ;;		line 21 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\fct.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;		None
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;		None
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  1    wreg      void 
  2497 ;; Registers used:
  2498 ;;		wreg, status,2, status,0, pclath, cstack
  2499 ;; Tracked objects:
  2500 ;;		On entry : 300/0
  2501 ;;		On exit  : 300/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2504 ;;      Params:         0       0       0       0       0
  2505 ;;      Locals:         0       0       0       0       0
  2506 ;;      Temps:          0       0       0       0       0
  2507 ;;      Totals:         0       0       0       0       0
  2508 ;;Total ram usage:        0 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    5
  2511 ;; This function calls:
  2512 ;;		_FCTjudge
  2513 ;;		_FCTkey
  2514 ;; This function is called by:
  2515 ;;		_main
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519                           
  2520                           ;psect for function _FCTloop
  2521  020A                     _FCTloop:	
  2522                           
  2523                           ;fct.c: 23: FCTkey();
  2524                           
  2525                           ;incstack = 0
  2526                           ; Regs used in _FCTloop: [wreg+status,2+status,0+pclath+cstack]
  2527  020A  2244  120A  118A   	fcall	_FCTkey
  2528                           
  2529                           ;fct.c: 24: FCTjudge();
  2530  020D  2A0E               	ljmp	l7639
  2531  020E                     __end_of_FCTloop:	
  2532  020E                     __ptext23:	
  2533 ;; *************** function _FCTjudge *****************
  2534 ;; Defined at:
  2535 ;;		line 107 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\fct.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;		None
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;		None
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      void 
  2542 ;; Registers used:
  2543 ;;		wreg, status,2, status,0, pclath, cstack
  2544 ;; Tracked objects:
  2545 ;;		On entry : 300/0
  2546 ;;		On exit  : 300/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2549 ;;      Params:         0       0       0       0       0
  2550 ;;      Locals:         0       0       0       0       0
  2551 ;;      Temps:          0       0       0       0       0
  2552 ;;      Totals:         0       0       0       0       0
  2553 ;;Total ram usage:        0 bytes
  2554 ;; Hardware stack levels used:    1
  2555 ;; Hardware stack levels required when called:    3
  2556 ;; This function calls:
  2557 ;;		_G_KEY
  2558 ;;		_R_KEY
  2559 ;;		_key1
  2560 ;;		_key2
  2561 ;; This function is called by:
  2562 ;;		_FCTloop
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566                           
  2567                           ;psect for function _FCTjudge
  2568  020E                     _FCTjudge:	
  2569  020E                     l7639:	
  2570                           ;incstack = 0
  2571                           ; Regs used in _FCTjudge: [wreg+status,2+status,0+pclath+cstack]
  2572                           
  2573                           
  2574                           ;fct.c: 109: if(fctBits001.bits.bit_0 == 1)
  2575  020E  1C79               	btfss	_fctBits001,0	;volatile
  2576  020F  2A27               	goto	l4794
  2577                           
  2578                           ;fct.c: 110: {
  2579                           ;fct.c: 111: if(++flag_time == 1500)
  2580  0210  0AA0               	incf	_flag_time,f	;volatile
  2581  0211  1903               	skipnz
  2582  0212  0AA1               	incf	_flag_time+1,f	;volatile
  2583  0213  30DC               	movlw	220
  2584  0214  0620               	xorwf	_flag_time,w	;volatile
  2585  0215  3005               	movlw	5
  2586  0216  1903               	skipnz
  2587  0217  0621               	xorwf	_flag_time+1,w	;volatile
  2588  0218  1D03               	btfss	3,2
  2589  0219  2A1D               	goto	l7647
  2590                           
  2591                           ;fct.c: 112: {
  2592                           ;fct.c: 113: fctBits001.bits.bit_0 = 0;
  2593  021A  1079               	bcf	_fctBits001,0	;volatile
  2594                           
  2595                           ;fct.c: 114: flag_time = 0;
  2596  021B  01A0               	clrf	_flag_time	;volatile
  2597  021C  01A1               	clrf	_flag_time+1	;volatile
  2598  021D                     l7647:	
  2599                           
  2600                           ;fct.c: 115: }
  2601                           ;fct.c: 116: if(RB1 == 0)
  2602  021D  1886               	btfsc	6,1	;volatile
  2603  021E  2A20               	goto	l4796
  2604                           
  2605                           ;fct.c: 117: {
  2606                           ;fct.c: 118: R_KEY();
  2607  021F  2A35               	ljmp	l7415
  2608  0220                     l4796:	
  2609                           ;fct.c: 119: }
  2610                           
  2611                           
  2612                           ;fct.c: 120: else
  2613                           ;fct.c: 121: {
  2614                           ;fct.c: 122: if(RA6 == 0)
  2615  0220  1B05               	btfsc	5,6	;volatile
  2616  0221  2A23               	goto	l4798
  2617                           
  2618                           ;fct.c: 123: {
  2619                           ;fct.c: 124: key1();
  2620  0222  2A3A               	ljmp	l7417
  2621  0223                     l4798:	
  2622                           ;fct.c: 125: }
  2623                           
  2624                           
  2625                           ;fct.c: 126: else
  2626                           ;fct.c: 127: {
  2627                           ;fct.c: 128: if(RB0 == 0)
  2628  0223  1806               	btfsc	6,0	;volatile
  2629  0224  2A26               	goto	l7655
  2630                           
  2631                           ;fct.c: 129: {
  2632                           ;fct.c: 130: key2();
  2633  0225  2A3F               	ljmp	l7419
  2634  0226                     l7655:	
  2635                           ;fct.c: 131: }
  2636                           
  2637                           
  2638                           ;fct.c: 132: else
  2639                           ;fct.c: 133: {
  2640                           ;fct.c: 134: G_KEY();
  2641  0226  2A30               	ljmp	l7413
  2642  0227                     l4794:	
  2643                           
  2644                           ;fct.c: 139: else if(fctBits001.bits.bit_0 == 0)
  2645  0227  1879               	btfsc	_fctBits001,0	;volatile
  2646  0228  0008               	return
  2647                           
  2648                           ;fct.c: 140: {
  2649                           ;fct.c: 141: RA5 = 0;
  2650  0229  1285               	bcf	5,5	;volatile
  2651                           
  2652                           ;fct.c: 142: RA2 = 0;
  2653  022A  1105               	bcf	5,2	;volatile
  2654                           
  2655                           ;fct.c: 143: RA4 = 0;
  2656  022B  1205               	bcf	5,4	;volatile
  2657                           
  2658                           ;fct.c: 144: RA1 = 0;
  2659  022C  1085               	bcf	5,1	;volatile
  2660                           
  2661                           ;fct.c: 145: flag_time = 0;
  2662  022D  01A0               	clrf	_flag_time	;volatile
  2663  022E  01A1               	clrf	_flag_time+1	;volatile
  2664  022F  0008               	return
  2665  0230                     __end_of_FCTjudge:	
  2666  0230                     __ptext27:	
  2667 ;; *************** function _G_KEY *****************
  2668 ;; Defined at:
  2669 ;;		line 75 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\fct.c"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;		None
  2672 ;; Auto vars:     Size  Location     Type
  2673 ;;		None
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  1    wreg      void 
  2676 ;; Registers used:
  2677 ;;		None
  2678 ;; Tracked objects:
  2679 ;;		On entry : 300/0
  2680 ;;		On exit  : 300/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2683 ;;      Params:         0       0       0       0       0
  2684 ;;      Locals:         0       0       0       0       0
  2685 ;;      Temps:          0       0       0       0       0
  2686 ;;      Totals:         0       0       0       0       0
  2687 ;;Total ram usage:        0 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    2
  2690 ;; This function calls:
  2691 ;;		Nothing
  2692 ;; This function is called by:
  2693 ;;		_FCTjudge
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           
  2698                           ;psect for function _G_KEY
  2699  0230                     _G_KEY:	
  2700  0230                     l7413:	
  2701                           ;incstack = 0
  2702                           ; Regs used in _G_KEY: []
  2703                           
  2704                           
  2705                           ;fct.c: 77: RA5 = 0;
  2706  0230  1285               	bcf	5,5	;volatile
  2707                           
  2708                           ;fct.c: 78: RA2 = 0;
  2709  0231  1105               	bcf	5,2	;volatile
  2710                           
  2711                           ;fct.c: 79: RA4 = 1;
  2712  0232  1605               	bsf	5,4	;volatile
  2713                           
  2714                           ;fct.c: 80: RA1 = 0;
  2715  0233  1085               	bcf	5,1	;volatile
  2716  0234  0008               	return
  2717  0235                     __end_of_G_KEY:	
  2718  0235                     __ptext26:	
  2719 ;; *************** function _R_KEY *****************
  2720 ;; Defined at:
  2721 ;;		line 83 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\fct.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;		None
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;		None
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      void 
  2728 ;; Registers used:
  2729 ;;		None
  2730 ;; Tracked objects:
  2731 ;;		On entry : 300/0
  2732 ;;		On exit  : 300/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2735 ;;      Params:         0       0       0       0       0
  2736 ;;      Locals:         0       0       0       0       0
  2737 ;;      Temps:          0       0       0       0       0
  2738 ;;      Totals:         0       0       0       0       0
  2739 ;;Total ram usage:        0 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; Hardware stack levels required when called:    2
  2742 ;; This function calls:
  2743 ;;		Nothing
  2744 ;; This function is called by:
  2745 ;;		_FCTjudge
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           
  2750                           ;psect for function _R_KEY
  2751  0235                     _R_KEY:	
  2752  0235                     l7415:	
  2753                           ;incstack = 0
  2754                           ; Regs used in _R_KEY: []
  2755                           
  2756                           
  2757                           ;fct.c: 85: RA5 = 0;
  2758  0235  1285               	bcf	5,5	;volatile
  2759                           
  2760                           ;fct.c: 86: RA2 = 1;
  2761  0236  1505               	bsf	5,2	;volatile
  2762                           
  2763                           ;fct.c: 87: RA4 = 1;
  2764  0237  1605               	bsf	5,4	;volatile
  2765                           
  2766                           ;fct.c: 88: RA1 = 0;
  2767  0238  1085               	bcf	5,1	;volatile
  2768  0239  0008               	return
  2769  023A                     __end_of_R_KEY:	
  2770  023A                     __ptext25:	
  2771 ;; *************** function _key1 *****************
  2772 ;; Defined at:
  2773 ;;		line 91 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\fct.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;		None
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		None
  2782 ;; Tracked objects:
  2783 ;;		On entry : 300/0
  2784 ;;		On exit  : 300/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2787 ;;      Params:         0       0       0       0       0
  2788 ;;      Locals:         0       0       0       0       0
  2789 ;;      Temps:          0       0       0       0       0
  2790 ;;      Totals:         0       0       0       0       0
  2791 ;;Total ram usage:        0 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; Hardware stack levels required when called:    2
  2794 ;; This function calls:
  2795 ;;		Nothing
  2796 ;; This function is called by:
  2797 ;;		_FCTjudge
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           
  2802                           ;psect for function _key1
  2803  023A                     _key1:	
  2804  023A                     l7417:	
  2805                           ;incstack = 0
  2806                           ; Regs used in _key1: []
  2807                           
  2808                           
  2809                           ;fct.c: 93: RA5 = 1;
  2810  023A  1685               	bsf	5,5	;volatile
  2811                           
  2812                           ;fct.c: 94: RA2 = 0;
  2813  023B  1105               	bcf	5,2	;volatile
  2814                           
  2815                           ;fct.c: 95: RA4 = 1;
  2816  023C  1605               	bsf	5,4	;volatile
  2817                           
  2818                           ;fct.c: 96: RA1 = 0;
  2819  023D  1085               	bcf	5,1	;volatile
  2820  023E  0008               	return
  2821  023F                     __end_of_key1:	
  2822  023F                     __ptext24:	
  2823 ;; *************** function _key2 *****************
  2824 ;; Defined at:
  2825 ;;		line 99 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\fct.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;		None
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;		None
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  1    wreg      void 
  2832 ;; Registers used:
  2833 ;;		None
  2834 ;; Tracked objects:
  2835 ;;		On entry : 300/0
  2836 ;;		On exit  : 300/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2839 ;;      Params:         0       0       0       0       0
  2840 ;;      Locals:         0       0       0       0       0
  2841 ;;      Temps:          0       0       0       0       0
  2842 ;;      Totals:         0       0       0       0       0
  2843 ;;Total ram usage:        0 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; Hardware stack levels required when called:    2
  2846 ;; This function calls:
  2847 ;;		Nothing
  2848 ;; This function is called by:
  2849 ;;		_FCTjudge
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           
  2854                           ;psect for function _key2
  2855  023F                     _key2:	
  2856  023F                     l7419:	
  2857                           ;incstack = 0
  2858                           ; Regs used in _key2: []
  2859                           
  2860                           
  2861                           ;fct.c: 101: RA5 = 0;
  2862  023F  1285               	bcf	5,5	;volatile
  2863                           
  2864                           ;fct.c: 102: RA2 = 0;
  2865  0240  1105               	bcf	5,2	;volatile
  2866                           
  2867                           ;fct.c: 103: RA4 = 1;
  2868  0241  1605               	bsf	5,4	;volatile
  2869                           
  2870                           ;fct.c: 104: RA1 = 1;
  2871  0242  1485               	bsf	5,1	;volatile
  2872  0243  0008               	return
  2873  0244                     __end_of_key2:	
  2874  0244                     __ptext20:	
  2875 ;; *************** function _FCTkey *****************
  2876 ;; Defined at:
  2877 ;;		line 50 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\fct.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;		None
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;		None
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  1    wreg      void 
  2884 ;; Registers used:
  2885 ;;		wreg, status,2, status,0, pclath, cstack
  2886 ;; Tracked objects:
  2887 ;;		On entry : 300/0
  2888 ;;		On exit  : 300/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2891 ;;      Params:         0       0       0       0       0
  2892 ;;      Locals:         0       0       0       0       0
  2893 ;;      Temps:          0       0       0       0       0
  2894 ;;      Totals:         0       0       0       0       0
  2895 ;;Total ram usage:        0 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    4
  2898 ;; This function calls:
  2899 ;;		_Delay_nms
  2900 ;; This function is called by:
  2901 ;;		_FCTloop
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           
  2906                           ;psect for function _FCTkey
  2907  0244                     _FCTkey:	
  2908                           
  2909                           ;fct.c: 52: if(fctBits001.bits.bit_0 == 1)
  2910                           
  2911                           ;incstack = 0
  2912                           ; Regs used in _FCTkey: [wreg+status,2+status,0+pclath+cstack]
  2913  0244  1879               	btfsc	_fctBits001,0	;volatile
  2914                           
  2915                           ;fct.c: 53: {
  2916                           ;fct.c: 54: if(RB2 == 1)
  2917  0245  1D06               	btfss	6,2	;volatile
  2918  0246  2A52               	goto	l4774
  2919                           
  2920                           ;fct.c: 55: {
  2921                           ;fct.c: 56: Delay_nms(1000);
  2922  0247  30E8               	movlw	232
  2923  0248  00F4               	movwf	Delay_nms@inittempl
  2924  0249  3003               	movlw	3
  2925  024A  00F5               	movwf	Delay_nms@inittempl+1
  2926  024B  225C  120A  118A   	fcall	_Delay_nms
  2927                           
  2928                           ;fct.c: 57: if(RB2 == 1)
  2929  024E  1D06               	btfss	6,2	;volatile
  2930  024F  2A52               	goto	l4774
  2931                           
  2932                           ;fct.c: 58: {
  2933                           ;fct.c: 59: fctBits001.bits.bit_0 = 0;
  2934  0250  1079               	bcf	_fctBits001,0	;volatile
  2935                           
  2936                           ;fct.c: 60: return;
  2937  0251  0008               	return
  2938  0252                     l4774:	
  2939                           
  2940                           ;fct.c: 61: }
  2941                           ;fct.c: 62: }
  2942                           ;fct.c: 63: }
  2943                           ;fct.c: 64: if(RB2 == 1)
  2944  0252  1D06               	btfss	6,2	;volatile
  2945  0253  0008               	return
  2946                           
  2947                           ;fct.c: 65: {
  2948                           ;fct.c: 66: Delay_nms(1000);
  2949  0254  30E8               	movlw	232
  2950  0255  00F4               	movwf	Delay_nms@inittempl
  2951  0256  3003               	movlw	3
  2952  0257  00F5               	movwf	Delay_nms@inittempl+1
  2953  0258  225C               	fcall	_Delay_nms
  2954                           
  2955                           ;fct.c: 67: if(RB2 == 1)
  2956  0259  1906               	btfsc	6,2	;volatile
  2957                           
  2958                           ;fct.c: 68: {
  2959                           ;fct.c: 69: fctBits001.bits.bit_0 = 1;
  2960  025A  1479               	bsf	_fctBits001,0	;volatile
  2961                           
  2962                           ;fct.c: 70: return;
  2963  025B  0008               	return
  2964  025C                     __end_of_FCTkey:	
  2965  025C                     __ptext21:	
  2966 ;; *************** function _Delay_nms *****************
  2967 ;; Defined at:
  2968 ;;		line 35 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\main.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;  inittempl       2    4[COMMON] unsigned int 
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;  i               2    0[BANK0 ] unsigned int 
  2973 ;;  gtemp           1    2[BANK0 ] unsigned char 
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  1    wreg      void 
  2976 ;; Registers used:
  2977 ;;		wreg, status,2, status,0, pclath, cstack
  2978 ;; Tracked objects:
  2979 ;;		On entry : 200/100
  2980 ;;		On exit  : 300/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2983 ;;      Params:         2       0       0       0       0
  2984 ;;      Locals:         0       3       0       0       0
  2985 ;;      Temps:          0       0       0       0       0
  2986 ;;      Totals:         2       3       0       0       0
  2987 ;;Total ram usage:        5 bytes
  2988 ;; Hardware stack levels used:    1
  2989 ;; Hardware stack levels required when called:    3
  2990 ;; This function calls:
  2991 ;;		_Delay
  2992 ;; This function is called by:
  2993 ;;		_main
  2994 ;;		_FCTkey
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           
  2999                           ;psect for function _Delay_nms
  3000  025C                     _Delay_nms:	
  3001                           
  3002                           ;main.c: 37: unsigned int i;
  3003                           ;main.c: 38: unsigned char gtemp;
  3004                           ;main.c: 40: gtemp = 0;
  3005                           
  3006                           ;incstack = 0
  3007                           ; Regs used in _Delay_nms: [wreg+status,2+status,0+pclath+cstack]
  3008  025C  1283               	bcf	3,5	;RP0=0, select bank0
  3009  025D  01D9               	clrf	Delay_nms@gtemp
  3010                           
  3011                           ;main.c: 41: if (GIE == 1)
  3012  025E  1F8B               	btfss	11,7	;volatile
  3013  025F  2A63               	goto	l7773
  3014                           
  3015                           ;main.c: 42: {
  3016                           ;main.c: 43: gtemp = 1;
  3017  0260  01D9               	clrf	Delay_nms@gtemp
  3018  0261  0AD9               	incf	Delay_nms@gtemp,f
  3019                           
  3020                           ;main.c: 44: GIE = 0;
  3021  0262  138B               	bcf	11,7	;volatile
  3022  0263                     l7773:	
  3023                           
  3024                           ;main.c: 45: }
  3025                           ;main.c: 46: for (i = 0; i < inittempl; i++)
  3026  0263  01D7               	clrf	Delay_nms@i
  3027  0264  01D8               	clrf	Delay_nms@i+1
  3028  0265                     l7779:	
  3029  0265  0875               	movf	Delay_nms@inittempl+1,w
  3030  0266  0258               	subwf	Delay_nms@i+1,w
  3031  0267  1D03               	skipz
  3032  0268  2A6B               	goto	u1255
  3033  0269  0874               	movf	Delay_nms@inittempl,w
  3034  026A  0257               	subwf	Delay_nms@i,w
  3035  026B                     u1255:	
  3036  026B  1803               	btfsc	3,0
  3037  026C  2A7A               	goto	l7781
  3038                           
  3039                           ;main.c: 47: {
  3040                           ;main.c: 48: Delay(154);
  3041  026D  309A               	movlw	154
  3042  026E  00F2               	movwf	Delay@dtemp
  3043  026F  01F3               	clrf	Delay@dtemp+1
  3044  0270  227E  120A  118A   	fcall	_Delay
  3045  0273  0064               	clrwdt	;# 
  3046  0274  1283               	bcf	3,5	;RP0=0, select bank0
  3047  0275  1303               	bcf	3,6	;RP1=0, select bank0
  3048  0276  0AD7               	incf	Delay_nms@i,f
  3049  0277  1903               	skipnz
  3050  0278  0AD8               	incf	Delay_nms@i+1,f
  3051  0279  2A65               	goto	l7779
  3052  027A                     l7781:	
  3053                           
  3054                           ;main.c: 50: }
  3055                           ;main.c: 51: if (gtemp == 1)
  3056  027A  0B59               	decfsz	Delay_nms@gtemp,w
  3057  027B  0008               	return
  3058                           
  3059                           ;main.c: 52: GIE = 1;
  3060  027C  178B               	bsf	11,7	;volatile
  3061  027D  0008               	return
  3062  027E                     __end_of_Delay_nms:	
  3063  027E                     __ptext22:	
  3064 ;; *************** function _Delay *****************
  3065 ;; Defined at:
  3066 ;;		line 27 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\main.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;  dtemp           2    2[COMMON] unsigned int 
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;		None
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  1    wreg      void 
  3073 ;; Registers used:
  3074 ;;		wreg, status,2, status,0
  3075 ;; Tracked objects:
  3076 ;;		On entry : 200/0
  3077 ;;		On exit  : 200/0
  3078 ;;		Unchanged: 200/0
  3079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3080 ;;      Params:         2       0       0       0       0
  3081 ;;      Locals:         0       0       0       0       0
  3082 ;;      Temps:          0       0       0       0       0
  3083 ;;      Totals:         2       0       0       0       0
  3084 ;;Total ram usage:        2 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; Hardware stack levels required when called:    2
  3087 ;; This function calls:
  3088 ;;		Nothing
  3089 ;; This function is called by:
  3090 ;;		_Delay_nms
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           
  3095                           ;psect for function _Delay
  3096  027E                     _Delay:	
  3097  027E                     l7765:	
  3098                           ;main.c: 29: while (dtemp--)
  3099                           
  3100                           ;incstack = 0
  3101                           ; Regs used in _Delay: [wreg+status,2+status,0]
  3102                           
  3103  027E  3001               	movlw	1
  3104  027F  02F2               	subwf	Delay@dtemp,f
  3105  0280  3000               	movlw	0
  3106  0281  1C03               	skipc
  3107  0282  03F3               	decf	Delay@dtemp+1,f
  3108  0283  02F3               	subwf	Delay@dtemp+1,f
  3109  0284  0F72               	incfsz	Delay@dtemp,w
  3110  0285  2A7E               	goto	l7765
  3111  0286  0A73               	incf	Delay@dtemp+1,w
  3112  0287  1903               	btfsc	3,2
  3113  0288  0008               	return
  3114  0289  2A7E               	goto	l7765
  3115  028A                     __end_of_Delay:	
  3116                           
  3117                           	psect	text28
  3118  02F9                     __ptext28:	
  3119 ;; *************** function _Int_ALL *****************
  3120 ;; Defined at:
  3121 ;;		line 562 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\main.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;		None
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;		None
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      void 
  3128 ;; Registers used:
  3129 ;;		wreg, status,2, status,0, pclath, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 300/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3135 ;;      Params:         0       0       0       0       0
  3136 ;;      Locals:         0       0       0       0       0
  3137 ;;      Temps:          2       0       0       0       0
  3138 ;;      Totals:         2       0       0       0       0
  3139 ;;Total ram usage:        2 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    1
  3142 ;; This function calls:
  3143 ;;		_INT_LED_SHOW
  3144 ;; This function is called by:
  3145 ;;		Interrupt level 1
  3146 ;; This function uses a non-reentrant model
  3147 ;;
  3148                           
  3149                           
  3150                           ;psect for function _Int_ALL
  3151  02F9                     _Int_ALL:	
  3152                           
  3153                           ;main.c: 565: if (TMR1IF)
  3154  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  3155  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  3156  02FB  1C0C               	btfss	12,0	;volatile
  3157  02FC  2B11               	goto	i1l7757
  3158                           
  3159                           ;main.c: 566: {
  3160                           ;main.c: 572: TMR1 = 0xE0C0;
  3161  02FD  30E0               	movlw	224
  3162  02FE  008F               	movwf	15	;volatile
  3163  02FF  30C0               	movlw	192
  3164  0300  008E               	movwf	14	;volatile
  3165                           
  3166                           ;main.c: 573: TMR1IF = 0;
  3167  0301  100C               	bcf	12,0	;volatile
  3168                           
  3169                           ;main.c: 576: Fsys1.bits.bit_1 = 1;
  3170  0302  14CE               	bsf	_Fsys1,1	;volatile
  3171                           
  3172                           ;main.c: 579: if (++MainTime_1s >= 1000)
  3173  0303  0AB6               	incf	_MainTime_1s,f	;volatile
  3174  0304  1903               	skipnz
  3175  0305  0AB7               	incf	_MainTime_1s+1,f	;volatile
  3176  0306  3003               	movlw	3
  3177  0307  0237               	subwf	_MainTime_1s+1,w	;volatile
  3178  0308  30E8               	movlw	232
  3179  0309  1903               	skipnz
  3180  030A  0236               	subwf	_MainTime_1s,w	;volatile
  3181  030B  1C03               	skipc
  3182  030C  2B11               	goto	i1l7757
  3183                           
  3184                           ;main.c: 580: {
  3185                           ;main.c: 581: MainTime_1s = 0;
  3186  030D  01B6               	clrf	_MainTime_1s	;volatile
  3187  030E  01B7               	clrf	_MainTime_1s+1	;volatile
  3188                           
  3189                           ;main.c: 582: Fsys1s.byte = 0xFF;
  3190  030F  30FF               	movlw	255
  3191  0310  00CD               	movwf	_Fsys1s	;volatile
  3192  0311                     i1l7757:	
  3193                           
  3194                           ;main.c: 590: }
  3195                           ;main.c: 591: }
  3196                           ;main.c: 594: if (TMR2IF)
  3197  0311  1C8C               	btfss	12,1	;volatile
  3198  0312  2B15               	goto	i1l1942
  3199                           
  3200                           ;main.c: 595: {
  3201                           ;main.c: 596: TMR2IF = 0;
  3202  0313  108C               	bcf	12,1	;volatile
  3203                           
  3204                           ;main.c: 597: INT_LED_SHOW();
  3205  0314  231C               	fcall	_INT_LED_SHOW
  3206  0315                     i1l1942:	
  3207  0315  0871               	movf	??_Int_ALL+1,w
  3208  0316  008A               	movwf	10
  3209  0317  0E70               	swapf	??_Int_ALL^(0+-128),w
  3210  0318  0083               	movwf	3
  3211  0319  0EFE               	swapf	126,f
  3212  031A  0E7E               	swapf	126,w
  3213  031B  0009               	retfie
  3214  031C                     __end_of_Int_ALL:	
  3215  031C                     __ptext29:	
  3216 ;; *************** function _INT_LED_SHOW *****************
  3217 ;; Defined at:
  3218 ;;		line 193 in file "C:\Users\ÍôÇ¿Éý\Desktop\3\ABM007_FM3(1)\ABM007_FM3\ABM007_FM3\source\light.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;		None
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;		None
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      void 
  3225 ;; Registers used:
  3226 ;;		None
  3227 ;; Tracked objects:
  3228 ;;		On entry : 300/0
  3229 ;;		On exit  : 300/0
  3230 ;;		Unchanged: 300/0
  3231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3232 ;;      Params:         0       0       0       0       0
  3233 ;;      Locals:         0       0       0       0       0
  3234 ;;      Temps:          0       0       0       0       0
  3235 ;;      Totals:         0       0       0       0       0
  3236 ;;Total ram usage:        0 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; This function calls:
  3239 ;;		Nothing
  3240 ;; This function is called by:
  3241 ;;		_Int_ALL
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           
  3246                           ;psect for function _INT_LED_SHOW
  3247  031C                     _INT_LED_SHOW:	
  3248                           
  3249                           ;incstack = 0
  3250                           ; Regs used in _INT_LED_SHOW: []
  3251  031C  0008               	return
  3252  031D                     __end_of_INT_LED_SHOW:	
  3253  007E                     btemp	set	126	;btemp
  3254  007E                     wtemp0	set	126
  3255                           
  3256                           	psect	intentry
  3257  0004                     __pintentry:	
  3258                           ;incstack = 0
  3259                           ; Regs used in _Int_ALL: [wreg+status,2+status,0+pclath+cstack]
  3260                           
  3261  0004                     interrupt_function:	
  3262  007E                     saved_w	set	btemp
  3263  0004  00FE               	movwf	btemp
  3264  0005  0E03               	swapf	3,w
  3265  0006  00F0               	movwf	??_Int_ALL
  3266  0007  080A               	movf	10,w
  3267  0008  00F1               	movwf	??_Int_ALL+1
  3268  0009  120A  118A  2AF9   	ljmp	_Int_ALL


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      11
    BANK0            80      3      58
    BANK1            80      0       0
    BANK3            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Delay_nms
    _GsensorLoop->_SensorControl
    _FCTkey->_Delay_nms
    _Delay_nms->_Delay

Critical Paths under _Int_ALL in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Delay_nms
    _FCTkey->_Delay_nms

Critical Paths under _Int_ALL in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Int_ALL in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Int_ALL in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Int_ALL in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     888
                          _Delay_nms
                            _FCTloop
                         _GflushLoop
                           _GledLoop
                        _GsensorLoop
                          _Init_GPIO
                            _Init_IC
                        _Init_TIMER1
                        _Init_TIMER2
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_IC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_GPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GsensorLoop                                          0     0      0       0
                      _SensorControl
                        _SensorJudge
                          _SensorKey
                         _SensorTime
 ---------------------------------------------------------------------------------
 (2) _SensorTime                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorKey                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorJudge                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorControl                                        1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GledLoop                                             0     0      0       0
                            _LED_Con
                          _LED_Judge
                            _LED_Key
                           _LED_Time
 ---------------------------------------------------------------------------------
 (2) _LED_Time                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Key                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Judge                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Con                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GflushLoop                                           0     0      0       0
                           _FlushCon
                         _FlushJudge
                          _FlushTime
 ---------------------------------------------------------------------------------
 (2) _FlushTime                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FlushJudge                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FlushCon                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FCTloop                                              0     0      0     444
                           _FCTjudge
                             _FCTkey
 ---------------------------------------------------------------------------------
 (2) _FCTkey                                               0     0      0     444
                          _Delay_nms
 ---------------------------------------------------------------------------------
 (3) _Delay_nms                                            5     3      2     444
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _Delay                                                2     0      2     108
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _FCTjudge                                             0     0      0       0
                              _G_KEY
                              _R_KEY
                               _key1
                               _key2
 ---------------------------------------------------------------------------------
 (3) _key2                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _key1                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _R_KEY                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _G_KEY                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Int_ALL                                              2     2      0       0
                                              0 COMMON     2     2      0
                       _INT_LED_SHOW
 ---------------------------------------------------------------------------------
 (6) _INT_LED_SHOW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_nms
     _Delay
   _FCTloop
     _FCTjudge
       _G_KEY
       _R_KEY
       _key1
       _key2
     _FCTkey
       _Delay_nms
         _Delay
   _GflushLoop
     _FlushCon
     _FlushJudge
     _FlushTime
   _GledLoop
     _LED_Con
     _LED_Judge
     _LED_Key
     _LED_Time
   _GsensorLoop
     _SensorControl
     _SensorJudge
     _SensorKey
     _SensorTime
   _Init_GPIO
   _Init_IC
   _Init_TIMER1
   _Init_TIMER2

 _Int_ALL (ROOT)
   _INT_LED_SHOW

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      3      3A       4       72.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BITBANK3            50      0       0       7        0.0%
BANK3               50      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
ABS                  0      0      45      11        0.0%
DATA                 0      0      45      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 03 17:38:06 2024

                     PL2 01F8                       PL4 0201                       PL6 010C  
                     fsr 0004                      _GIE 005F                      _RA1 0029  
                    _RA2 002A                      _RB0 0030                      _RB1 0031  
                    _RA4 002C                      _RB2 0032                      _RA5 002D  
                    _RA6 002E                      _PR2 0092                      u600 0331  
                    u980 0068                      u990 006E                      u982 0069  
                    u992 006F                      indf 0000          __end_of_LED_Con 0335  
        __end_of_LED_Key 0328          __end_of_FCTloop 020E                     l1922 02C0  
                   l1918 02B8                     l1927 02C8                     l2853 01E2  
                   l2854 01E4                     l3831 0092                     l2872 0140  
                   l2864 011E                     l3840 00BE                     l2881 016D  
                   l2857 01ED                     l3817 0049                     l2874 014A  
                   l2891 01A7                     l2883 0179                     l2859 01F3  
                   l3835 00AA                     l2892 01B0                     l3844 00D6  
                   l2885 0185                     l2877 014F                     l2869 012C  
                   l3829 007E                     l3854 0076                     l2887 0197  
                   l2879 015B                     l3855 0077                     l2889 019B  
                   l7413 0230                     l4774 0252                     l7415 0235  
                   l7431 033B                     l7417 023A                     l7433 032B  
                   l7601 00E9                     l4794 0227                     l7419 023F  
                   l7603 00EC                     l4796 0220                     l7453 0125  
                   l7613 00FA                     l4798 0223                     l7527 01B9  
                   l7615 0062                     l7607 00F7                     l7543 0041  
                   l7457 0127                     l7449 011D                     l7571 00A7  
                   l7563 008F                     l7581 00B1                     l7549 004E  
                   l7655 0226                     l7647 021D                     l7639 020E  
                   l7575 0081                     l7823 02B2                     l7593 00D3  
                   l7585 00BB                     l7833 02D0                     l7835 02F0  
                   l7819 02AB                     l7765 027E                     l7781 027A  
                   l7773 0263                     l7779 0265                     u1020 007B  
                   u1255 026B                     _PIE1 008C                     _PIE2 008D  
                   _PIR1 000C                     _PIR2 000D                     _TMR1 000E  
                   _WPUA 018E                     _WPUB 0095                     _WPUC 018F  
                   _key1 023A                     _key2 023F                     _main 028A  
          ??_Init_TIMER1 0072            ??_Init_TIMER2 0072                     btemp 007E  
                   start 000C       __size_of_LED_Judge 0008               _FledBits01 004B  
        __end_of_Int_ALL 031C          __end_of_Init_IC 0362         __end_of_LED_Time 032B  
       __end_of_FCTjudge 0230            ??_GsensorLoop 0073                    ?_key1 0070  
                  ?_key2 0070                    ?_main 0070                    _T1CON 0010  
                  _T2CON 0012                    _G_KEY 0230                    _PORTA 0005  
                  _PORTB 0006                    _PORTC 0007                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _R_KEY 0235  
                  _Delay 027E                    _Fsys1 004E               _GflushLoop 0115  
                  _templ 0049                    pclath 000A                    status 0003  
                  wtemp0 007E               _FlushJudge 01DD         __end_of_GledLoop 0327  
        __initialization 000F             __end_of_key1 023F             __end_of_key2 0244  
           __end_of_main 02F9      __end_of_Init_TIMER1 0378      __end_of_Init_TIMER2 036D  
       __end_of_FlushCon 01DD       __size_of_Delay_nms 0022                   ??_key1 0072  
                 ??_key2 0072                   ??_main 0076              _Fbodysensor 007A  
                 ?_G_KEY 0070                ??_LED_Con 0072                ??_LED_Key 0072  
              ??_FCTloop 0076                   ?_R_KEY 0070                   ?_Delay 0072  
      __end_of_LED_Judge 033D    __end_of_SensorControl 007D      __end_of_GsensorLoop 0029  
                 i1l1942 0315                   _FCTkey 0244                   i1l7757 0311  
                 _INTCON 000B                   _CNTfct 0026       __size_of_Init_GPIO 0013  
                 _OSCCON 008F                   _TMR1IE 0460                   _TMR1IF 0060  
                 _TMR2IE 0461                   _TMR2IF 0061       __size_of_FlushTime 0001  
          ?_INT_LED_SHOW 0070                   _WDTCON 0105                ??_Int_ALL 0070  
              ??_Init_IC 0072                   _RX_Buf 004A            _CNTfctSensior 0043  
          _CNTbodyInTime 002C                   _Fsys1m 004C                   _Fsys1s 004D  
          _CNTbreath_Led 003E               _SensorTime 002A            ??_SensorJudge 0072  
            _MainTime_1s 0036       __size_of_SensorKey 0001                   saved_w 007E  
     Delay_nms@inittempl 0074              ?_GflushLoop 0070           ??_INT_LED_SHOW 0070  
      __end_of_Delay_nms 027E  __end_of__initialization 001B                ?_LED_Time 0070  
              ?_FCTjudge 0070              _Init_TIMER1 036D              _Init_TIMER2 0362  
          __end_of_G_KEY 0235              ?_FlushJudge 0070            __end_of_R_KEY 023A  
          __end_of_Delay 028A           __pcstackCOMMON 0070               __end_ofPL2 0201  
             __end_ofPL4 020A               __end_ofPL6 0115        __end_of_Init_GPIO 0350  
      __end_of_FlushTime 011D              _GsensorLoop 001F                  ??_G_KEY 0072  
    __end_of_SensorJudge 010C                  ??_R_KEY 0072                  ??_Delay 0074  
              ?_GledLoop 0070               __pbssBANK0 0020                  ?_FCTkey 0070  
             _fctBits001 0079                ?_FlushCon 0070               ??_LED_Time 0072  
             ??_FCTjudge 0072        __end_of_SensorKey 002A               __pmaintext 028A  
            ?_SensorTime 0070               __pintentry 0004      __size_of_GflushLoop 0007  
         _CNTfctFlashLed 0042                  _LED_Con 032B                  _LED_Key 0327  
                _FCTloop 020A                  _CNTkey1 0024                  _CNTkey2 0022  
    __size_of_FlushJudge 001B               ??_GledLoop 0072              _SeletedLine 0040  
                _SEQbody 0044                  _SEQmain 0048               ??_FlushCon 0072  
        __size_of_FCTkey 0018                  _Fflush1 0078                  _Int_ALL 02F9  
                _Init_IC 0350           _CNTbreath_Led1 003C           _CNTbreath_Led2 003A  
         _CNTbreath_Led3 0038              _SensorJudge 007D     __end_of_INT_LED_SHOW 031D  
                __ptext0 0000                  __ptext1 0362                  __ptext2 036D  
                __ptext3 0350                  __ptext4 033D                  __ptext5 001F  
                __ptext6 002A                  __ptext7 0029                  __ptext8 007D  
                __ptext9 0062                _AD_Result 0034                  clrloop0 0379  
              _LED_Judge 0335     end_of_initialization 001B      __size_of_SensorTime 0038  
              _CNTbody_h 0032                _CNTbody_l 0030           Delay_nms@gtemp 0059  
           ??_GflushLoop 0072               ?_LED_Judge 0070           __end_of_FCTkey 025C  
           ?_Init_TIMER1 0070             ?_Init_TIMER2 0070             ??_FlushJudge 0072  
              _BufCntAdd 002E                _Delay_nms 025C        __size_of_LED_Time 0003  
      __size_of_FCTjudge 0022   __size_of_SensorControl 001B       __end_of_GflushLoop 011C  
           ?_GsensorLoop 0070      start_initialization 000F                _Init_GPIO 033D  
              _FlushTime 011C                _CurrentIO 0041       __end_of_FlushJudge 01F8  
               ??_FCTkey 0076        __size_of_GledLoop 000A        __size_of_FlushCon 00C0  
             ?_Delay_nms 0074                _SensorKey 0029    __size_of_INT_LED_SHOW 0001  
           ??_SensorTime 0072                 ?_LED_Con 0070                 ?_LED_Key 0070  
               ?_FCTloop 0070              __pbssCOMMON 0076               ?_Init_GPIO 0070  
              ___latbits 0002            __pcstackBANK0 0057               ?_FlushTime 0070  
          _SensorControl 0062              ??_LED_Judge 0072       __end_of_SensorTime 0062  
           _INT_LED_SHOW 031C                 ?_Int_ALL 0070                 ?_Init_IC 0070  
             ?_SensorKey 0070                _flag_time 0020             ?_SensorJudge 0070  
         __size_of_G_KEY 0005           __size_of_R_KEY 0005           __size_of_Delay 000C  
         ?_SensorControl 0070        interrupt_function 0004                 _LED_Time 0328  
               _FCTjudge 020E                clear_ram0 0378                 _CNTflush 0076  
            ??_Delay_nms 0076     __size_of_Init_TIMER1 000B     __size_of_Init_TIMER2 000B  
               _SEQflsuh 0046     __size_of_GsensorLoop 000A              ??_Init_GPIO 0072  
       __size_of_LED_Con 000A         __size_of_LED_Key 0001              ??_FlushTime 0072  
       __size_of_FCTloop 0004                 _GledLoop 031D                 _KeyLines 004F  
               _FlushCon 011D         __size_of_Int_ALL 0023         __size_of_Init_IC 0012  
        _CNTbodyExitTime 002A              _CNTfctStart 0028              ??_SensorKey 0072  
        ??_SensorControl 0072                 __ptext10 031D                 __ptext11 0328  
               __ptext20 0244                 __ptext12 0327                 __ptext21 025C  
               __ptext13 0335                 __ptext22 027E                 __ptext14 032B  
               __ptext23 020E                 __ptext15 0115                 __ptext24 023F  
               __ptext16 011C                 __ptext25 023A                 __ptext17 01DD  
               __ptext26 0235                 __ptext18 011D                 __ptext27 0230  
               __ptext19 020A                 __ptext28 02F9                 __ptext29 031C  
          __size_of_key1 0005            __size_of_key2 0005            __size_of_main 006F  
        _u8stsBodySensor 0045            _MainTime_1min 0047               Delay@dtemp 0072  
   __size_of_SensorJudge 008F               Delay_nms@i 0057                 intlevel1 0000  
             _OPTION_REG 0081  
