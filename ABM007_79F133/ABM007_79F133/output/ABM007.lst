

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Dec 07 11:16:54 2023

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	79F133
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text10,local,class=CODE,merge=1,delta=2
    18                           	psect	text15,local,class=CODE,merge=1,delta=2
    19                           	psect	text19,local,class=CODE,merge=1,delta=2
    20                           	psect	text21,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	pa_nodes0,global,class=CODE,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 1.45
    26                           ; Generated 16/11/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F887 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	text0
    61  0000                     __ptext0:	
    62  000E                     _TMR1	set	14
    63  0012                     _T2CON	set	18
    64  0010                     _T1CON	set	16
    65  000D                     _PIR2	set	13
    66  000C                     _PIR1	set	12
    67  000B                     _INTCON	set	11
    68  0007                     _PORTC	set	7
    69  0006                     _PORTB	set	6
    70  0005                     _PORTA	set	5
    71  0060                     _TMR1IF	set	96
    72  0061                     _TMR2IF	set	97
    73  005F                     _GIE	set	95
    74  0031                     _RB1	set	49
    75  002A                     _RA2	set	42
    76  002C                     _RA4	set	44
    77  002D                     _RA5	set	45
    78  0095                     _WPUB	set	149
    79  0092                     _PR2	set	146
    80  008F                     _OSCCON	set	143
    81  008D                     _PIE2	set	141
    82  008C                     _PIE1	set	140
    83  0087                     _TRISC	set	135
    84  0086                     _TRISB	set	134
    85  0085                     _TRISA	set	133
    86  0081                     _OPTION_REG	set	129
    87  0460                     _TMR1IE	set	1120
    88  0461                     _TMR2IE	set	1121
    89  0105                     _WDTCON	set	261
    90  018F                     _WPUC	set	399
    91  018E                     _WPUA	set	398
    92                           
    93                           	psect	cinit
    94  000F                     start_initialization:	
    95                           ; #config settings
    96                           
    97  000F                     __initialization:	
    98  000F  3020               	movlw	low __pbssBANK0
    99                           
   100                           ; Clear objects allocated to COMMON
   101  0010  01F6               	clrf	__pbssCOMMON& (0+127)
   102  0011  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   103  0012  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   104  0013  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   105  0014  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
   106                           
   107                           ; Clear objects allocated to BANK0
   108  0015  1383               	bcf	3,7	;select IRP bank0
   109  0016  0084               	movwf	4
   110  0017  3044               	movlw	low (__pbssBANK0+36)
   111  0018  120A  118A  23D7   	fcall	clear_ram0
   112  001B                     end_of_initialization:	
   113                           ;End of C runtime variable initialization code
   114                           
   115  001B                     __end_of__initialization:	
   116  001B  0183               	clrf	3
   117  001C  120A  118A  2AD1   	ljmp	_main	;jump to C main() function
   118                           
   119                           	psect	bssCOMMON
   120  0076                     __pbssCOMMON:	
   121  0076                     _CNTbreath_Led2:	
   122  0076                     	ds	2
   123  0078                     _Fflush1:	
   124  0078                     	ds	1
   125  0079                     _FledBits01:	
   126  0079                     	ds	1
   127  007A                     _Fbodysensor:	
   128  007A                     	ds	1
   129                           
   130                           	psect	bssBANK0
   131  0020                     __pbssBANK0:	
   132  0020                     _CNTfct:	
   133  0020                     	ds	2
   134  0022                     _CNTbodyExitTime:	
   135  0022                     	ds	2
   136  0024                     _CNTbodyInTime:	
   137  0024                     	ds	2
   138  0026                     _BufCntAdd:	
   139  0026                     	ds	2
   140  0028                     _CNTbody_l:	
   141  0028                     	ds	2
   142  002A                     _CNTbody_h:	
   143  002A                     	ds	2
   144  002C                     _CNTflush:	
   145  002C                     	ds	2
   146  002E                     _AD_Result:	
   147  002E                     	ds	2
   148  0030                     _MainTime_1s:	
   149  0030                     	ds	2
   150  0032                     _CNTbreath_Led3:	
   151  0032                     	ds	2
   152  0034                     _CNTbreath_Led1:	
   153  0034                     	ds	2
   154  0036                     _CNTbreath_Led:	
   155  0036                     	ds	2
   156  0038                     _CNTfctStart:	
   157  0038                     	ds	1
   158  0039                     _fctBits001:	
   159  0039                     	ds	1
   160  003A                     _SEQbody:	
   161  003A                     	ds	1
   162  003B                     _u8stsBodySensor:	
   163  003B                     	ds	1
   164  003C                     _SEQflsuh:	
   165  003C                     	ds	1
   166  003D                     _MainTime_1min:	
   167  003D                     	ds	1
   168  003E                     _SEQmain:	
   169  003E                     	ds	1
   170  003F                     _templ:	
   171  003F                     	ds	1
   172  0040                     _RX_Buf:	
   173  0040                     	ds	1
   174  0041                     _Fsys1m:	
   175  0041                     	ds	1
   176  0042                     _Fsys1s:	
   177  0042                     	ds	1
   178  0043                     _Fsys1:	
   179  0043                     	ds	1
   180                           
   181                           	psect	clrtext
   182  03D7                     clear_ram0:	
   183                           ;	Called with FSR containing the base address, and
   184                           ;	W with the last address+1
   185                           
   186  03D7  0064               	clrwdt	;clear the watchdog before getting into this loop
   187  03D8                     clrloop0:	
   188  03D8  0180               	clrf	0	;clear RAM location pointed to by FSR
   189  03D9  0A84               	incf	4,f	;increment pointer
   190  03DA  0604               	xorwf	4,w	;XOR with final address
   191  03DB  1903               	btfsc	3,2	;have we reached the end yet?
   192  03DC  3400               	retlw	0	;all done for this memory range, return
   193  03DD  0604               	xorwf	4,w	;XOR again to restore value
   194  03DE  2BD8               	goto	clrloop0	;do the next byte
   195                           
   196                           	psect	cstackCOMMON
   197  0070                     __pcstackCOMMON:	
   198  0070                     ?_LED_Time:	
   199  0070                     ?_LED_Key:	
   200                           ; 1 bytes @ 0x0
   201                           
   202  0070                     ?_LED_Judge:	
   203                           ; 1 bytes @ 0x0
   204                           
   205  0070                     ?_LED_Con:	
   206                           ; 1 bytes @ 0x0
   207                           
   208  0070                     ?_GsensorLoop:	
   209                           ; 1 bytes @ 0x0
   210                           
   211  0070                     ?_GflushLoop:	
   212                           ; 1 bytes @ 0x0
   213                           
   214  0070                     ?_FlushTime:	
   215                           ; 1 bytes @ 0x0
   216                           
   217  0070                     ?_FlushJudge:	
   218                           ; 1 bytes @ 0x0
   219                           
   220  0070                     ?_FlushCon:	
   221                           ; 1 bytes @ 0x0
   222                           
   223  0070                     ?_SensorKey:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0070                     ?_SensorTime:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ?_SensorJudge:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     ?_SensorControl:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ?_GledLoop:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0070                     ?_INT_LED_SHOW:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ??_INT_LED_SHOW:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_Init_GPIO:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_Init_IC:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_Init_TIMER1:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_Init_TIMER2:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?_main:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_Int_ALL:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ??_Int_ALL:	
   263                           ; 1 bytes @ 0x0
   264                           
   265                           
   266                           ; 1 bytes @ 0x0
   267  0070                     	ds	2
   268  0072                     ??_LED_Time:	
   269  0072                     ??_LED_Key:	
   270                           ; 1 bytes @ 0x2
   271                           
   272  0072                     ??_LED_Judge:	
   273                           ; 1 bytes @ 0x2
   274                           
   275  0072                     ??_LED_Con:	
   276                           ; 1 bytes @ 0x2
   277                           
   278  0072                     ??_GflushLoop:	
   279                           ; 1 bytes @ 0x2
   280                           
   281  0072                     ??_FlushTime:	
   282                           ; 1 bytes @ 0x2
   283                           
   284  0072                     ??_FlushJudge:	
   285                           ; 1 bytes @ 0x2
   286                           
   287  0072                     ??_FlushCon:	
   288                           ; 1 bytes @ 0x2
   289                           
   290  0072                     ??_SensorKey:	
   291                           ; 1 bytes @ 0x2
   292                           
   293  0072                     ??_SensorTime:	
   294                           ; 1 bytes @ 0x2
   295                           
   296  0072                     ??_SensorJudge:	
   297                           ; 1 bytes @ 0x2
   298                           
   299  0072                     ??_SensorControl:	
   300                           ; 1 bytes @ 0x2
   301                           
   302  0072                     ??_GledLoop:	
   303                           ; 1 bytes @ 0x2
   304                           
   305  0072                     ?_Delay:	
   306                           ; 1 bytes @ 0x2
   307                           
   308  0072                     ??_Init_GPIO:	
   309                           ; 1 bytes @ 0x2
   310                           
   311  0072                     ??_Init_IC:	
   312                           ; 1 bytes @ 0x2
   313                           
   314  0072                     ??_Init_TIMER1:	
   315                           ; 1 bytes @ 0x2
   316                           
   317  0072                     ??_Init_TIMER2:	
   318                           ; 1 bytes @ 0x2
   319                           
   320  0072                     Delay@dtemp:	
   321                           ; 1 bytes @ 0x2
   322                           
   323                           
   324                           ; 2 bytes @ 0x2
   325  0072                     	ds	1
   326  0073                     ??_GsensorLoop:	
   327                           
   328                           ; 1 bytes @ 0x3
   329  0073                     	ds	1
   330  0074                     ??_Delay:	
   331  0074                     ?_Delay_nms:	
   332                           ; 1 bytes @ 0x4
   333                           
   334  0074                     Delay_nms@inittempl:	
   335                           ; 1 bytes @ 0x4
   336                           
   337                           
   338                           ; 2 bytes @ 0x4
   339  0074                     	ds	2
   340  0076                     ??_Delay_nms:	
   341  0076                     ??_main:	
   342                           ; 1 bytes @ 0x6
   343                           
   344                           
   345                           	psect	cstackBANK0
   346  0044                     __pcstackBANK0:	
   347                           ; 1 bytes @ 0x6
   348                           
   349  0044                     Delay_nms@i:	
   350                           
   351                           ; 2 bytes @ 0x0
   352  0044                     	ds	2
   353  0046                     Delay_nms@gtemp:	
   354                           
   355                           ; 1 bytes @ 0x2
   356  0046                     	ds	1
   357                           
   358                           	psect	maintext
   359  02D1                     __pmaintext:	
   360 ;;
   361 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   362 ;;
   363 ;; *************** function _main *****************
   364 ;; Defined at:
   365 ;;		line 476 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\main.c"
   366 ;; Parameters:    Size  Location     Type
   367 ;;		None
   368 ;; Auto vars:     Size  Location     Type
   369 ;;		None
   370 ;; Return value:  Size  Location     Type
   371 ;;                  1    wreg      void 
   372 ;; Registers used:
   373 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   374 ;; Tracked objects:
   375 ;;		On entry : B00/0
   376 ;;		On exit  : 300/0
   377 ;;		Unchanged: 0/0
   378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   379 ;;      Params:         0       0       0       0       0
   380 ;;      Locals:         0       0       0       0       0
   381 ;;      Temps:          0       0       0       0       0
   382 ;;      Totals:         0       0       0       0       0
   383 ;;Total ram usage:        0 bytes
   384 ;; Hardware stack levels required when called:    4
   385 ;; This function calls:
   386 ;;		_Delay_nms
   387 ;;		_GflushLoop
   388 ;;		_GledLoop
   389 ;;		_GsensorLoop
   390 ;;		_Init_GPIO
   391 ;;		_Init_IC
   392 ;;		_Init_TIMER1
   393 ;;		_Init_TIMER2
   394 ;; This function is called by:
   395 ;;		Startup code after reset
   396 ;; This function uses a non-reentrant model
   397 ;;
   398                           
   399                           
   400                           ;psect for function _main
   401  02D1                     _main:	
   402                           
   403                           ;incstack = 0
   404                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   405  02D1  0000               	nop	;# 
   406  02D2  0064               	clrwdt	;# 
   407                           
   408                           ;main.c: 481: INTCON = 0;
   409  02D3  018B               	clrf	11	;volatile
   410                           
   411                           ;main.c: 483: Init_GPIO();
   412  02D4  120A  118A  23B0  120A  118A  	fcall	_Init_GPIO
   413                           
   414                           ;main.c: 484: Init_IC();
   415  02D9  120A  118A  239E  120A  118A  	fcall	_Init_IC
   416                           
   417                           ;main.c: 485: Delay_nms(200);
   418  02DE  30C8               	movlw	200
   419  02DF  00F4               	movwf	Delay_nms@inittempl
   420  02E0  01F5               	clrf	Delay_nms@inittempl+1
   421  02E1  120A  118A  2370  120A  118A  	fcall	_Delay_nms
   422                           
   423                           ;main.c: 486: Init_TIMER1();
   424  02E6  120A  118A  23CC  120A  118A  	fcall	_Init_TIMER1
   425                           
   426                           ;main.c: 487: Init_TIMER2();
   427  02EB  120A  118A  23C1  120A  118A  	fcall	_Init_TIMER2
   428                           
   429                           ;main.c: 498: INTCON = 0XC0;
   430  02F0  30C0               	movlw	192
   431  02F1  008B               	movwf	11	;volatile
   432  02F2                     l6074:	
   433                           
   434                           ;main.c: 502: {
   435                           ;main.c: 504: if (Fsys1.bits.bit_1 == 1)
   436  02F2  1CC3               	btfss	_Fsys1,1	;volatile
   437  02F3  2AF2               	goto	l6074
   438  02F4  0064               	clrwdt	;# 
   439                           
   440                           ;main.c: 507: Fsys1.bits.bit_1 = 0;
   441  02F5  1283               	bcf	3,5	;RP0=0, select bank0
   442  02F6  1303               	bcf	3,6	;RP1=0, select bank0
   443  02F7  10C3               	bcf	_Fsys1,1	;volatile
   444                           
   445                           ;main.c: 508: switch (SEQmain)
   446  02F8  2B0B               	goto	l6086
   447  02F9                     l6078:	
   448                           
   449                           ;main.c: 516: GsensorLoop();
   450  02F9  120A  118A  2118  120A  118A  	fcall	_GsensorLoop
   451                           
   452                           ;main.c: 517: break;
   453  02FE  2B2B               	goto	l6088
   454  02FF                     l6080:	
   455                           
   456                           ;main.c: 528: GflushLoop();
   457  02FF  120A  118A  201F  120A  118A  	fcall	_GflushLoop
   458                           
   459                           ;main.c: 529: break;
   460  0304  2B2B               	goto	l6088
   461  0305                     l6082:	
   462                           
   463                           ;main.c: 540: GledLoop();
   464  0305  120A  118A  220E  120A  118A  	fcall	_GledLoop
   465                           
   466                           ;main.c: 541: break;
   467  030A  2B2B               	goto	l6088
   468  030B                     l6086:	
   469  030B  083E               	movf	_SEQmain,w	;volatile
   470                           
   471                           ; Switch size 1, requested type "space"
   472                           ; Number of cases is 10, Range of values is 0 to 9
   473                           ; switch strategies available:
   474                           ; Name         Instructions Cycles
   475                           ; simple_byte           31    16 (average)
   476                           ; direct_byte           38     8 (fixed)
   477                           ; jumptable            260     6 (fixed)
   478                           ;	Chosen strategy is simple_byte
   479  030C  3A00               	xorlw	0	; case 0
   480  030D  1903               	skipnz
   481  030E  2AF9               	goto	l6078
   482  030F  3A01               	xorlw	1	; case 1
   483  0310  1903               	skipnz
   484  0311  2B2B               	goto	l6088
   485  0312  3A03               	xorlw	3	; case 2
   486  0313  1903               	skipnz
   487  0314  2B2B               	goto	l6088
   488  0315  3A01               	xorlw	1	; case 3
   489  0316  1903               	skipnz
   490  0317  2B2B               	goto	l6088
   491  0318  3A07               	xorlw	7	; case 4
   492  0319  1903               	skipnz
   493  031A  2AFF               	goto	l6080
   494  031B  3A01               	xorlw	1	; case 5
   495  031C  1903               	skipnz
   496  031D  2B2B               	goto	l6088
   497  031E  3A03               	xorlw	3	; case 6
   498  031F  1903               	skipnz
   499  0320  2B2B               	goto	l6088
   500  0321  3A01               	xorlw	1	; case 7
   501  0322  1903               	skipnz
   502  0323  2B2B               	goto	l6088
   503  0324  3A0F               	xorlw	15	; case 8
   504  0325  1903               	skipnz
   505  0326  2B05               	goto	l6082
   506  0327  3A01               	xorlw	1	; case 9
   507  0328  1903               	skipnz
   508  0329  2B2B               	goto	l6088
   509  032A  2B2B               	goto	l6088
   510  032B                     l6088:	
   511                           
   512                           ;main.c: 550: if (++SEQmain >= 10)
   513  032B  300A               	movlw	10
   514  032C  1283               	bcf	3,5	;RP0=0, select bank0
   515  032D  1303               	bcf	3,6	;RP1=0, select bank0
   516  032E  0ABE               	incf	_SEQmain,f	;volatile
   517  032F  023E               	subwf	_SEQmain,w	;volatile
   518  0330  1C03               	skipc
   519  0331  2AF2               	goto	l6074
   520                           
   521                           ;main.c: 551: {
   522                           ;main.c: 552: SEQmain = 0;
   523  0332  01BE               	clrf	_SEQmain	;volatile
   524  0333  2AF2               	goto	l6074
   525  0334                     __end_of_main:	
   526                           
   527                           	psect	text1
   528  03C1                     __ptext1:	
   529 ;; *************** function _Init_TIMER2 *****************
   530 ;; Defined at:
   531 ;;		line 177 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\main.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;		None
   534 ;; Auto vars:     Size  Location     Type
   535 ;;		None
   536 ;; Return value:  Size  Location     Type
   537 ;;                  1    wreg      void 
   538 ;; Registers used:
   539 ;;		wreg
   540 ;; Tracked objects:
   541 ;;		On entry : 300/0
   542 ;;		On exit  : 300/0
   543 ;;		Unchanged: 0/0
   544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   545 ;;      Params:         0       0       0       0       0
   546 ;;      Locals:         0       0       0       0       0
   547 ;;      Temps:          0       0       0       0       0
   548 ;;      Totals:         0       0       0       0       0
   549 ;;Total ram usage:        0 bytes
   550 ;; Hardware stack levels used:    1
   551 ;; Hardware stack levels required when called:    2
   552 ;; This function calls:
   553 ;;		Nothing
   554 ;; This function is called by:
   555 ;;		_main
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559                           
   560                           ;psect for function _Init_TIMER2
   561  03C1                     _Init_TIMER2:	
   562                           
   563                           ;main.c: 179: PR2 = 24;
   564                           
   565                           ;incstack = 0
   566                           ; Regs used in _Init_TIMER2: [wreg]
   567  03C1  3018               	movlw	24
   568  03C2  1683               	bsf	3,5	;RP0=1, select bank1
   569  03C3  0092               	movwf	18	;volatile
   570                           
   571                           ;main.c: 180: TMR2IF = 0;
   572  03C4  1283               	bcf	3,5	;RP0=0, select bank0
   573  03C5  108C               	bcf	12,1	;volatile
   574                           
   575                           ;main.c: 181: TMR2IE = 1;
   576  03C6  1683               	bsf	3,5	;RP0=1, select bank1
   577  03C7  148C               	bsf	12,1	;volatile
   578                           
   579                           ;main.c: 182: T2CON = 5;
   580  03C8  3005               	movlw	5
   581  03C9  1283               	bcf	3,5	;RP0=0, select bank0
   582  03CA  0092               	movwf	18	;volatile
   583  03CB  0008               	return
   584  03CC                     __end_of_Init_TIMER2:	
   585                           
   586                           	psect	text2
   587  03CC                     __ptext2:	
   588 ;; *************** function _Init_TIMER1 *****************
   589 ;; Defined at:
   590 ;;		line 155 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\main.c"
   591 ;; Parameters:    Size  Location     Type
   592 ;;		None
   593 ;; Auto vars:     Size  Location     Type
   594 ;;		None
   595 ;; Return value:  Size  Location     Type
   596 ;;                  1    wreg      void 
   597 ;; Registers used:
   598 ;;		wreg
   599 ;; Tracked objects:
   600 ;;		On entry : 300/0
   601 ;;		On exit  : 300/0
   602 ;;		Unchanged: 0/0
   603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   604 ;;      Params:         0       0       0       0       0
   605 ;;      Locals:         0       0       0       0       0
   606 ;;      Temps:          0       0       0       0       0
   607 ;;      Totals:         0       0       0       0       0
   608 ;;Total ram usage:        0 bytes
   609 ;; Hardware stack levels used:    1
   610 ;; Hardware stack levels required when called:    2
   611 ;; This function calls:
   612 ;;		Nothing
   613 ;; This function is called by:
   614 ;;		_main
   615 ;; This function uses a non-reentrant model
   616 ;;
   617                           
   618                           
   619                           ;psect for function _Init_TIMER1
   620  03CC                     _Init_TIMER1:	
   621                           
   622                           ;main.c: 159: TMR1 = 0xE0C0;
   623                           
   624                           ;incstack = 0
   625                           ; Regs used in _Init_TIMER1: [wreg]
   626  03CC  30E0               	movlw	224
   627  03CD  008F               	movwf	15	;volatile
   628  03CE  30C0               	movlw	192
   629  03CF  008E               	movwf	14	;volatile
   630                           
   631                           ;main.c: 160: TMR1IF = 0;
   632  03D0  100C               	bcf	12,0	;volatile
   633                           
   634                           ;main.c: 161: TMR1IE = 1;
   635  03D1  1683               	bsf	3,5	;RP0=1, select bank1
   636  03D2  140C               	bsf	12,0	;volatile
   637                           
   638                           ;main.c: 162: T1CON = 0x01;
   639  03D3  3001               	movlw	1
   640  03D4  1283               	bcf	3,5	;RP0=0, select bank0
   641  03D5  0090               	movwf	16	;volatile
   642  03D6  0008               	return
   643  03D7                     __end_of_Init_TIMER1:	
   644                           
   645                           	psect	text3
   646  039E                     __ptext3:	
   647 ;; *************** function _Init_IC *****************
   648 ;; Defined at:
   649 ;;		line 99 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\main.c"
   650 ;; Parameters:    Size  Location     Type
   651 ;;		None
   652 ;; Auto vars:     Size  Location     Type
   653 ;;		None
   654 ;; Return value:  Size  Location     Type
   655 ;;                  1    wreg      void 
   656 ;; Registers used:
   657 ;;		wreg, status,2
   658 ;; Tracked objects:
   659 ;;		On entry : 300/300
   660 ;;		On exit  : 300/100
   661 ;;		Unchanged: 0/0
   662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   663 ;;      Params:         0       0       0       0       0
   664 ;;      Locals:         0       0       0       0       0
   665 ;;      Temps:          0       0       0       0       0
   666 ;;      Totals:         0       0       0       0       0
   667 ;;Total ram usage:        0 bytes
   668 ;; Hardware stack levels used:    1
   669 ;; Hardware stack levels required when called:    2
   670 ;; This function calls:
   671 ;;		Nothing
   672 ;; This function is called by:
   673 ;;		_main
   674 ;; This function uses a non-reentrant model
   675 ;;
   676                           
   677                           
   678                           ;psect for function _Init_IC
   679  039E                     _Init_IC:	
   680                           
   681                           ;incstack = 0
   682                           ; Regs used in _Init_IC: [wreg+status,2]
   683  039E  0064               	clrwdt	;# 
   684                           
   685                           ;main.c: 106: INTCON = 0x00;
   686  039F  018B               	clrf	11	;volatile
   687                           
   688                           ;main.c: 111: PIR1 = 0;
   689  03A0  1283               	bcf	3,5	;RP0=0, select bank0
   690  03A1  1303               	bcf	3,6	;RP1=0, select bank0
   691  03A2  018C               	clrf	12	;volatile
   692                           
   693                           ;main.c: 116: PIR2 = 0;
   694  03A3  018D               	clrf	13	;volatile
   695                           
   696                           ;main.c: 121: WDTCON = 0x01;
   697  03A4  3001               	movlw	1
   698  03A5  1703               	bsf	3,6	;RP1=1, select bank2
   699  03A6  0085               	movwf	5	;volatile
   700                           
   701                           ;main.c: 126: OPTION_REG = 0b00001110;
   702  03A7  300E               	movlw	14
   703  03A8  1683               	bsf	3,5	;RP0=1, select bank1
   704  03A9  1303               	bcf	3,6	;RP1=0, select bank1
   705  03AA  0081               	movwf	1	;volatile
   706                           
   707                           ;main.c: 131: OSCCON = 0x71;
   708  03AB  3071               	movlw	113
   709  03AC  008F               	movwf	15	;volatile
   710                           
   711                           ;main.c: 136: PIE1 = 0;
   712  03AD  018C               	clrf	12	;volatile
   713                           
   714                           ;main.c: 141: PIE2 = 0;
   715  03AE  018D               	clrf	13	;volatile
   716  03AF  0008               	return
   717  03B0                     __end_of_Init_IC:	
   718                           
   719                           	psect	text4
   720  03B0                     __ptext4:	
   721 ;; *************** function _Init_GPIO *****************
   722 ;; Defined at:
   723 ;;		line 65 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\main.c"
   724 ;; Parameters:    Size  Location     Type
   725 ;;		None
   726 ;; Auto vars:     Size  Location     Type
   727 ;;		None
   728 ;; Return value:  Size  Location     Type
   729 ;;                  1    wreg      void 
   730 ;; Registers used:
   731 ;;		wreg, status,2
   732 ;; Tracked objects:
   733 ;;		On entry : 0/0
   734 ;;		On exit  : 300/300
   735 ;;		Unchanged: 0/0
   736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   737 ;;      Params:         0       0       0       0       0
   738 ;;      Locals:         0       0       0       0       0
   739 ;;      Temps:          0       0       0       0       0
   740 ;;      Totals:         0       0       0       0       0
   741 ;;Total ram usage:        0 bytes
   742 ;; Hardware stack levels used:    1
   743 ;; Hardware stack levels required when called:    2
   744 ;; This function calls:
   745 ;;		Nothing
   746 ;; This function is called by:
   747 ;;		_main
   748 ;; This function uses a non-reentrant model
   749 ;;
   750                           
   751                           
   752                           ;psect for function _Init_GPIO
   753  03B0                     _Init_GPIO:	
   754                           
   755                           ;main.c: 69: PORTA = 0B00000000;
   756                           
   757                           ;incstack = 0
   758                           ; Regs used in _Init_GPIO: [wreg+status,2]
   759  03B0  1283               	bcf	3,5	;RP0=0, select bank0
   760  03B1  1303               	bcf	3,6	;RP1=0, select bank0
   761  03B2  0185               	clrf	5	;volatile
   762                           
   763                           ;main.c: 70: PORTB = 0B00000000;
   764  03B3  0186               	clrf	6	;volatile
   765                           
   766                           ;main.c: 71: PORTC = 0B00000000;
   767  03B4  0187               	clrf	7	;volatile
   768                           
   769                           ;main.c: 74: TRISA = 0B00000000;
   770  03B5  1683               	bsf	3,5	;RP0=1, select bank1
   771  03B6  0185               	clrf	5	;volatile
   772                           
   773                           ;main.c: 75: TRISB = 0B00000010;
   774  03B7  3002               	movlw	2
   775  03B8  0086               	movwf	6	;volatile
   776                           
   777                           ;main.c: 76: TRISC = 0B00000000;
   778  03B9  0187               	clrf	7	;volatile
   779                           
   780                           ;main.c: 79: WPUA = 0B00000000;
   781  03BA  1703               	bsf	3,6	;RP1=1, select bank3
   782  03BB  018E               	clrf	14	;volatile
   783                           
   784                           ;main.c: 80: WPUB = 0B00000010;
   785  03BC  1303               	bcf	3,6	;RP1=0, select bank1
   786  03BD  0095               	movwf	21	;volatile
   787                           
   788                           ;main.c: 81: WPUC = 0B00000000;
   789  03BE  1703               	bsf	3,6	;RP1=1, select bank3
   790  03BF  018F               	clrf	15	;volatile
   791  03C0  0008               	return
   792  03C1                     __end_of_Init_GPIO:	
   793                           
   794                           	psect	text5
   795  0118                     __ptext5:	
   796 ;; *************** function _GsensorLoop *****************
   797 ;; Defined at:
   798 ;;		line 19 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\sensor.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;		None
   801 ;; Auto vars:     Size  Location     Type
   802 ;;		None
   803 ;; Return value:  Size  Location     Type
   804 ;;                  1    wreg      void 
   805 ;; Registers used:
   806 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   807 ;; Tracked objects:
   808 ;;		On entry : 300/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   812 ;;      Params:         0       0       0       0       0
   813 ;;      Locals:         0       0       0       0       0
   814 ;;      Temps:          0       0       0       0       0
   815 ;;      Totals:         0       0       0       0       0
   816 ;;Total ram usage:        0 bytes
   817 ;; Hardware stack levels used:    1
   818 ;; Hardware stack levels required when called:    3
   819 ;; This function calls:
   820 ;;		_SensorControl
   821 ;;		_SensorJudge
   822 ;;		_SensorKey
   823 ;;		_SensorTime
   824 ;; This function is called by:
   825 ;;		_main
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           
   830                           ;psect for function _GsensorLoop
   831  0118                     _GsensorLoop:	
   832                           
   833                           ;sensor.c: 21: SensorKey();
   834                           
   835                           ;incstack = 0
   836                           ; Regs used in _GsensorLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   837  0118  2122  120A  118A   	fcall	_SensorKey
   838                           
   839                           ;sensor.c: 22: SensorTime();
   840  011B  2123  120A  118A   	fcall	_SensorTime
   841                           
   842                           ;sensor.c: 23: SensorJudge();
   843  011E  2176  120A  118A   	fcall	_SensorJudge
   844                           
   845                           ;sensor.c: 24: SensorControl();
   846  0121  295B               	ljmp	l5898
   847  0122                     __end_of_GsensorLoop:	
   848  0122                     __ptext7:	
   849 ;; *************** function _SensorKey *****************
   850 ;; Defined at:
   851 ;;		line 27 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\sensor.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;		None
   854 ;; Auto vars:     Size  Location     Type
   855 ;;		None
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		None
   860 ;; Tracked objects:
   861 ;;		On entry : 300/0
   862 ;;		On exit  : 300/0
   863 ;;		Unchanged: 300/0
   864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   865 ;;      Params:         0       0       0       0       0
   866 ;;      Locals:         0       0       0       0       0
   867 ;;      Temps:          0       0       0       0       0
   868 ;;      Totals:         0       0       0       0       0
   869 ;;Total ram usage:        0 bytes
   870 ;; Hardware stack levels used:    1
   871 ;; Hardware stack levels required when called:    2
   872 ;; This function calls:
   873 ;;		Nothing
   874 ;; This function is called by:
   875 ;;		_GsensorLoop
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           
   880                           ;psect for function _SensorKey
   881  0122                     _SensorKey:	
   882                           
   883                           ;incstack = 0
   884                           ; Regs used in _SensorKey: []
   885  0122  0008               	return
   886  0123                     __end_of_SensorKey:	
   887  0123                     __ptext6:	
   888 ;; *************** function _SensorTime *****************
   889 ;; Defined at:
   890 ;;		line 33 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\sensor.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;		None
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      void 
   897 ;; Registers used:
   898 ;;		wreg, status,2, status,0
   899 ;; Tracked objects:
   900 ;;		On entry : 300/0
   901 ;;		On exit  : 300/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   904 ;;      Params:         0       0       0       0       0
   905 ;;      Locals:         0       0       0       0       0
   906 ;;      Temps:          0       0       0       0       0
   907 ;;      Totals:         0       0       0       0       0
   908 ;;Total ram usage:        0 bytes
   909 ;; Hardware stack levels used:    1
   910 ;; Hardware stack levels required when called:    2
   911 ;; This function calls:
   912 ;;		Nothing
   913 ;; This function is called by:
   914 ;;		_GsensorLoop
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918                           
   919                           ;psect for function _SensorTime
   920  0123                     _SensorTime:	
   921                           
   922                           ;sensor.c: 35: if(Fbodysensor.bits.bit_0 == 1)
   923                           
   924                           ;incstack = 0
   925                           ; Regs used in _SensorTime: [wreg+status,2+status,0]
   926  0123  1C7A               	btfss	_Fbodysensor,0	;volatile
   927  0124  2947               	goto	l5832
   928                           
   929                           ;sensor.c: 36: {
   930                           ;sensor.c: 37: Fbodysensor.bits.bit_5 = 0;
   931  0125  12FA               	bcf	_Fbodysensor,5	;volatile
   932                           
   933                           ;sensor.c: 38: CNTbodyExitTime = 0;
   934  0126  01A2               	clrf	_CNTbodyExitTime	;volatile
   935  0127  01A3               	clrf	_CNTbodyExitTime+1	;volatile
   936                           
   937                           ;sensor.c: 39: if(FledBits01.bits.bit_2 == 0)
   938  0128  1979               	btfsc	_FledBits01,2	;volatile
   939  0129  2942               	goto	l3848
   940                           
   941                           ;sensor.c: 40: {
   942                           ;sensor.c: 41: if(++CNTbodyInTime >= 6000)
   943  012A  0AA4               	incf	_CNTbodyInTime,f	;volatile
   944  012B  1903               	skipnz
   945  012C  0AA5               	incf	_CNTbodyInTime+1,f	;volatile
   946  012D  3017               	movlw	23
   947  012E  0225               	subwf	_CNTbodyInTime+1,w	;volatile
   948  012F  3070               	movlw	112
   949  0130  1903               	skipnz
   950  0131  0224               	subwf	_CNTbodyInTime,w	;volatile
   951  0132  1C03               	skipc
   952  0133  293A               	goto	l5826
   953                           
   954                           ;sensor.c: 42: {
   955                           ;sensor.c: 43: CNTbodyInTime = 6000;
   956  0134  3070               	movlw	112
   957  0135  00A4               	movwf	_CNTbodyInTime	;volatile
   958  0136  3017               	movlw	23
   959  0137  00A5               	movwf	_CNTbodyInTime+1	;volatile
   960                           
   961                           ;sensor.c: 44: Fbodysensor.bits.bit_3 = 1;
   962  0138  15FA               	bsf	_Fbodysensor,3	;volatile
   963                           
   964                           ;sensor.c: 45: }
   965  0139  0008               	return
   966  013A                     l5826:	
   967                           
   968                           ;sensor.c: 46: else if(CNTbodyInTime >= 500)
   969  013A  3001               	movlw	1
   970  013B  0225               	subwf	_CNTbodyInTime+1,w	;volatile
   971  013C  30F4               	movlw	244
   972  013D  1903               	skipnz
   973  013E  0224               	subwf	_CNTbodyInTime,w	;volatile
   974  013F  1803               	btfsc	3,0
   975                           
   976                           ;sensor.c: 47: {
   977                           ;sensor.c: 48: Fbodysensor.bits.bit_4 = 1;
   978  0140  167A               	bsf	_Fbodysensor,4	;volatile
   979  0141  0008               	return
   980  0142                     l3848:	
   981                           
   982                           ;sensor.c: 51: else
   983                           ;sensor.c: 52: {
   984                           ;sensor.c: 53: if(Fbodysensor.bits.bit_4 == 0)
   985  0142  1A7A               	btfsc	_Fbodysensor,4	;volatile
   986  0143  0008               	return
   987                           
   988                           ;sensor.c: 54: {
   989                           ;sensor.c: 55: CNTbodyInTime = 0;
   990  0144  01A4               	clrf	_CNTbodyInTime	;volatile
   991  0145  01A5               	clrf	_CNTbodyInTime+1	;volatile
   992                           
   993                           ;sensor.c: 56: }
   994                           ;sensor.c: 57: }
   995                           ;sensor.c: 58: }
   996  0146  0008               	return
   997  0147                     l5832:	
   998                           
   999                           ;sensor.c: 59: else
  1000                           ;sensor.c: 60: {
  1001                           ;sensor.c: 61: CNTbodyInTime = 0;
  1002  0147  01A4               	clrf	_CNTbodyInTime	;volatile
  1003  0148  01A5               	clrf	_CNTbodyInTime+1	;volatile
  1004                           
  1005                           ;sensor.c: 62: Fbodysensor.bits.bit_4 = 0;
  1006  0149  127A               	bcf	_Fbodysensor,4	;volatile
  1007                           
  1008                           ;sensor.c: 63: Fbodysensor.bits.bit_3 = 0;
  1009  014A  11FA               	bcf	_Fbodysensor,3	;volatile
  1010                           
  1011                           ;sensor.c: 64: if(++CNTbodyExitTime >= 500)
  1012  014B  0AA2               	incf	_CNTbodyExitTime,f	;volatile
  1013  014C  1903               	skipnz
  1014  014D  0AA3               	incf	_CNTbodyExitTime+1,f	;volatile
  1015  014E  3001               	movlw	1
  1016  014F  0223               	subwf	_CNTbodyExitTime+1,w	;volatile
  1017  0150  30F4               	movlw	244
  1018  0151  1903               	skipnz
  1019  0152  0222               	subwf	_CNTbodyExitTime,w	;volatile
  1020  0153  1C03               	skipc
  1021  0154  0008               	return
  1022                           
  1023                           ;sensor.c: 65: {
  1024                           ;sensor.c: 66: CNTbodyExitTime = 500;
  1025  0155  30F4               	movlw	244
  1026  0156  00A2               	movwf	_CNTbodyExitTime	;volatile
  1027  0157  3001               	movlw	1
  1028  0158  00A3               	movwf	_CNTbodyExitTime+1	;volatile
  1029                           
  1030                           ;sensor.c: 67: Fbodysensor.bits.bit_5 = 1;
  1031  0159  16FA               	bsf	_Fbodysensor,5	;volatile
  1032  015A  0008               	return
  1033  015B                     __end_of_SensorTime:	
  1034  015B                     __ptext9:	
  1035 ;; *************** function _SensorControl *****************
  1036 ;; Defined at:
  1037 ;;		line 179 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\sensor.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;		None
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;		None
  1042 ;; Return value:  Size  Location     Type
  1043 ;;                  1    wreg      void 
  1044 ;; Registers used:
  1045 ;;		wreg
  1046 ;; Tracked objects:
  1047 ;;		On entry : 300/0
  1048 ;;		On exit  : 0/0
  1049 ;;		Unchanged: 0/0
  1050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1051 ;;      Params:         0       0       0       0       0
  1052 ;;      Locals:         0       0       0       0       0
  1053 ;;      Temps:          1       0       0       0       0
  1054 ;;      Totals:         1       0       0       0       0
  1055 ;;Total ram usage:        1 bytes
  1056 ;; Hardware stack levels used:    1
  1057 ;; Hardware stack levels required when called:    2
  1058 ;; This function calls:
  1059 ;;		Nothing
  1060 ;; This function is called by:
  1061 ;;		_GsensorLoop
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065                           
  1066                           ;psect for function _SensorControl
  1067  015B                     _SensorControl:	
  1068  015B                     l5898:	
  1069                           ;incstack = 0
  1070                           ; Regs used in _SensorControl: [wreg]
  1071                           
  1072                           
  1073                           ;sensor.c: 181: Fbodysensor.bits.bit_1 = 0;
  1074  015B  10FA               	bcf	_Fbodysensor,1	;volatile
  1075                           
  1076                           ;sensor.c: 182: Fbodysensor.bits.bit_2 = 0;
  1077  015C  117A               	bcf	_Fbodysensor,2	;volatile
  1078                           
  1079                           ;sensor.c: 183: if(Fbodysensor.bits.bit_6 != Fbodysensor.bits.bit_0)
  1080  015D  1C7A               	btfss	_Fbodysensor,0	;volatile
  1081  015E  2961               	goto	u1290
  1082  015F  3001               	movlw	1
  1083  0160  2962               	goto	u1292
  1084  0161                     u1290:	
  1085  0161  3000               	movlw	0
  1086  0162                     u1292:	
  1087  0162  00F2               	movwf	??_SensorControl
  1088  0163  1F7A               	btfss	_Fbodysensor,6	;volatile
  1089  0164  2967               	goto	u1300
  1090  0165  3001               	movlw	1
  1091  0166  2968               	goto	u1302
  1092  0167                     u1300:	
  1093  0167  3000               	movlw	0
  1094  0168                     u1302:	
  1095  0168  0672               	xorwf	??_SensorControl,w
  1096  0169  1903               	skipnz
  1097  016A  0008               	return
  1098                           
  1099                           ;sensor.c: 184: {
  1100                           ;sensor.c: 185: if(Fbodysensor.bits.bit_0 == 1)
  1101  016B  1C7A               	btfss	_Fbodysensor,0	;volatile
  1102  016C  296F               	goto	l3885
  1103                           
  1104                           ;sensor.c: 186: {
  1105                           ;sensor.c: 187: Fbodysensor.bits.bit_1 = 1;
  1106  016D  14FA               	bsf	_Fbodysensor,1	;volatile
  1107                           
  1108                           ;sensor.c: 188: }
  1109  016E  2970               	goto	l3886
  1110  016F                     l3885:	
  1111                           
  1112                           ;sensor.c: 189: else
  1113                           ;sensor.c: 190: {
  1114                           ;sensor.c: 191: Fbodysensor.bits.bit_2 = 1;
  1115  016F  157A               	bsf	_Fbodysensor,2	;volatile
  1116  0170                     l3886:	
  1117                           
  1118                           ;sensor.c: 192: }
  1119                           ;sensor.c: 193: Fbodysensor.bits.bit_6 = Fbodysensor.bits.bit_0;
  1120  0170  1C7A               	btfss	_Fbodysensor,0	;volatile
  1121  0171  2974               	goto	u1330
  1122  0172  177A               	bsf	_Fbodysensor,6	;volatile
  1123  0173  0008               	return
  1124  0174                     u1330:	
  1125  0174  137A               	bcf	_Fbodysensor,6	;volatile
  1126  0175  0008               	return
  1127  0176                     __end_of_SensorControl:	
  1128  0176                     __ptext8:	
  1129 ;; *************** function _SensorJudge *****************
  1130 ;; Defined at:
  1131 ;;		line 73 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\sensor.c"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;		None
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;		None
  1136 ;; Return value:  Size  Location     Type
  1137 ;;                  1    wreg      void 
  1138 ;; Registers used:
  1139 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1140 ;; Tracked objects:
  1141 ;;		On entry : 300/0
  1142 ;;		On exit  : 300/0
  1143 ;;		Unchanged: 0/0
  1144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1145 ;;      Params:         0       0       0       0       0
  1146 ;;      Locals:         0       0       0       0       0
  1147 ;;      Temps:          0       0       0       0       0
  1148 ;;      Totals:         0       0       0       0       0
  1149 ;;Total ram usage:        0 bytes
  1150 ;; Hardware stack levels used:    1
  1151 ;; Hardware stack levels required when called:    2
  1152 ;; This function calls:
  1153 ;;		Nothing
  1154 ;; This function is called by:
  1155 ;;		_GsensorLoop
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           
  1160                           ;psect for function _SensorJudge
  1161  0176                     _SensorJudge:	
  1162                           
  1163                           ;sensor.c: 75: switch (SEQbody)
  1164                           
  1165                           ;incstack = 0
  1166                           ; Regs used in _SensorJudge: [wreg-fsr0h+status,2+status,0]
  1167  0176  29F3               	goto	l5896
  1168  0177                     l3860:	
  1169                           ;sensor.c: 76: {
  1170                           ;sensor.c: 77: case 0:
  1171                           
  1172                           
  1173                           ;sensor.c: 78: Fbodysensor.bits.bit_0 = 0;
  1174  0177  107A               	bcf	_Fbodysensor,0	;volatile
  1175                           
  1176                           ;sensor.c: 79: FledBits01.bits.bit_2 = 0;
  1177  0178  1179               	bcf	_FledBits01,2	;volatile
  1178                           
  1179                           ;sensor.c: 110: }
  1180  0179  2988               	goto	l5846
  1181  017A                     l5858:	
  1182                           
  1183                           ;sensor.c: 111: else
  1184                           ;sensor.c: 112: {
  1185                           ;sensor.c: 113: if(++CNTbody_l >= 6)
  1186  017A  0AA8               	incf	_CNTbody_l,f	;volatile
  1187  017B  1903               	skipnz
  1188  017C  0AA9               	incf	_CNTbody_l+1,f	;volatile
  1189  017D  3000               	movlw	0
  1190  017E  0229               	subwf	_CNTbody_l+1,w	;volatile
  1191  017F  3006               	movlw	6
  1192  0180  1903               	skipnz
  1193  0181  0228               	subwf	_CNTbody_l,w	;volatile
  1194  0182  1C03               	skipc
  1195  0183  29AA               	goto	l5864
  1196                           
  1197                           ;sensor.c: 114: {
  1198                           ;sensor.c: 115: CNTbody_h = 0;
  1199  0184  01AA               	clrf	_CNTbody_h	;volatile
  1200  0185  01AB               	clrf	_CNTbody_h+1	;volatile
  1201                           
  1202                           ;sensor.c: 116: CNTbody_l = 0;
  1203  0186  01A8               	clrf	_CNTbody_l	;volatile
  1204  0187  01A9               	clrf	_CNTbody_l+1	;volatile
  1205  0188                     l5846:	
  1206                           
  1207                           ;sensor.c: 80: SEQbody = 1;
  1208  0188  3001               	movlw	1
  1209  0189  00BA               	movwf	_SEQbody	;volatile
  1210                           
  1211                           ;sensor.c: 81: break;
  1212  018A  0008               	return
  1213  018B                     l3862:	
  1214                           ;sensor.c: 84: case 1:
  1215                           
  1216                           
  1217                           ;sensor.c: 85: Fbodysensor.bits.bit_0 = 0;
  1218  018B  107A               	bcf	_Fbodysensor,0	;volatile
  1219                           
  1220                           ;sensor.c: 86: FledBits01.bits.bit_2 = 0;
  1221  018C  1179               	bcf	_FledBits01,2	;volatile
  1222                           
  1223                           ;sensor.c: 87: if(RB1 == 0)
  1224  018D  1886               	btfsc	6,1	;volatile
  1225  018E  29A0               	goto	l5854
  1226                           
  1227                           ;sensor.c: 88: {
  1228                           ;sensor.c: 89: if(++CNTbody_h >= 3)
  1229  018F  0AAA               	incf	_CNTbody_h,f	;volatile
  1230  0190  1903               	skipnz
  1231  0191  0AAB               	incf	_CNTbody_h+1,f	;volatile
  1232  0192  3000               	movlw	0
  1233  0193  022B               	subwf	_CNTbody_h+1,w	;volatile
  1234  0194  3003               	movlw	3
  1235  0195  1903               	skipnz
  1236  0196  022A               	subwf	_CNTbody_h,w	;volatile
  1237  0197  1C03               	skipc
  1238  0198  0008               	return
  1239                           
  1240                           ;sensor.c: 90: {
  1241                           ;sensor.c: 91: CNTbody_h = 0;
  1242  0199  01AA               	clrf	_CNTbody_h	;volatile
  1243  019A  01AB               	clrf	_CNTbody_h+1	;volatile
  1244                           
  1245                           ;sensor.c: 92: CNTbody_l = 0;
  1246  019B  01A8               	clrf	_CNTbody_l	;volatile
  1247  019C  01A9               	clrf	_CNTbody_l+1	;volatile
  1248                           
  1249                           ;sensor.c: 93: SEQbody = 2;
  1250  019D  3002               	movlw	2
  1251  019E  00BA               	movwf	_SEQbody	;volatile
  1252                           
  1253                           ;sensor.c: 94: break;
  1254  019F  0008               	return
  1255  01A0                     l5854:	
  1256                           
  1257                           ;sensor.c: 97: else
  1258                           ;sensor.c: 98: {
  1259                           ;sensor.c: 99: CNTbody_h = 0;
  1260  01A0  01AA               	clrf	_CNTbody_h	;volatile
  1261  01A1  01AB               	clrf	_CNTbody_h+1	;volatile
  1262  01A2  0008               	return
  1263  01A3                     l3866:	
  1264                           ;sensor.c: 104: case 2:
  1265                           
  1266                           
  1267                           ;sensor.c: 105: Fbodysensor.bits.bit_0 = 0;
  1268  01A3  107A               	bcf	_Fbodysensor,0	;volatile
  1269                           
  1270                           ;sensor.c: 106: FledBits01.bits.bit_2 = 0;
  1271  01A4  1179               	bcf	_FledBits01,2	;volatile
  1272                           
  1273                           ;sensor.c: 107: if(RB1 == 0)
  1274  01A5  1886               	btfsc	6,1	;volatile
  1275  01A6  297A               	goto	l5858
  1276                           
  1277                           ;sensor.c: 108: {
  1278                           ;sensor.c: 109: ++CNTbody_h;
  1279  01A7  0AAA               	incf	_CNTbody_h,f	;volatile
  1280  01A8  1903               	skipnz
  1281  01A9  0AAB               	incf	_CNTbody_h+1,f	;volatile
  1282  01AA                     l5864:	
  1283                           
  1284                           ;sensor.c: 119: }
  1285                           ;sensor.c: 120: }
  1286                           ;sensor.c: 121: BufCntAdd = CNTbody_h +CNTbody_l;
  1287  01AA  2205  120A  118A   	fcall	PL6	;call to abstracted procedure
  1288                           
  1289                           ;sensor.c: 122: if(BufCntAdd >= 30)
  1290  01AD  3000               	movlw	0
  1291  01AE  0227               	subwf	_BufCntAdd+1,w	;volatile
  1292  01AF  301E               	movlw	30
  1293  01B0  1903               	skipnz
  1294  01B1  0226               	subwf	_BufCntAdd,w	;volatile
  1295  01B2  1C03               	skipc
  1296  01B3  0008               	return
  1297  01B4                     l5868:	
  1298                           
  1299                           ;sensor.c: 123: {
  1300                           ;sensor.c: 124: SEQbody = 3;
  1301  01B4  3003               	movlw	3
  1302  01B5  00BA               	movwf	_SEQbody	;volatile
  1303                           
  1304                           ;sensor.c: 125: break;
  1305  01B6  0008               	return
  1306  01B7                     l3871:	
  1307                           ;sensor.c: 129: case 3:
  1308                           
  1309                           
  1310                           ;sensor.c: 130: Fbodysensor.bits.bit_0 = 1;
  1311  01B7  147A               	bsf	_Fbodysensor,0	;volatile
  1312                           
  1313                           ;sensor.c: 131: FledBits01.bits.bit_2 = 0;
  1314  01B8  1179               	bcf	_FledBits01,2	;volatile
  1315                           
  1316                           ;sensor.c: 132: if(RB1 == 1)
  1317  01B9  1C86               	btfss	6,1	;volatile
  1318  01BA  29CC               	goto	l5876
  1319                           
  1320                           ;sensor.c: 133: {
  1321                           ;sensor.c: 134: if(++CNTbody_l >= 3)
  1322  01BB  0AA8               	incf	_CNTbody_l,f	;volatile
  1323  01BC  1903               	skipnz
  1324  01BD  0AA9               	incf	_CNTbody_l+1,f	;volatile
  1325  01BE  3000               	movlw	0
  1326  01BF  0229               	subwf	_CNTbody_l+1,w	;volatile
  1327  01C0  3003               	movlw	3
  1328  01C1  1903               	skipnz
  1329  01C2  0228               	subwf	_CNTbody_l,w	;volatile
  1330  01C3  1C03               	skipc
  1331  01C4  0008               	return
  1332                           
  1333                           ;sensor.c: 135: {
  1334                           ;sensor.c: 136: CNTbody_h = 0;
  1335  01C5  01AA               	clrf	_CNTbody_h	;volatile
  1336  01C6  01AB               	clrf	_CNTbody_h+1	;volatile
  1337                           
  1338                           ;sensor.c: 137: CNTbody_l = 0;
  1339  01C7  01A8               	clrf	_CNTbody_l	;volatile
  1340  01C8  01A9               	clrf	_CNTbody_l+1	;volatile
  1341                           
  1342                           ;sensor.c: 138: SEQbody = 4;
  1343  01C9  3004               	movlw	4
  1344  01CA  00BA               	movwf	_SEQbody	;volatile
  1345                           
  1346                           ;sensor.c: 139: break;
  1347  01CB  0008               	return
  1348  01CC                     l5876:	
  1349                           
  1350                           ;sensor.c: 142: else
  1351                           ;sensor.c: 143: {
  1352                           ;sensor.c: 144: CNTbody_l = 0;
  1353  01CC  01A8               	clrf	_CNTbody_l	;volatile
  1354  01CD  01A9               	clrf	_CNTbody_l+1	;volatile
  1355  01CE  0008               	return
  1356  01CF                     l3875:	
  1357                           ;sensor.c: 148: case 4:
  1358                           
  1359                           
  1360                           ;sensor.c: 149: Fbodysensor.bits.bit_0 = 1;
  1361  01CF  147A               	bsf	_Fbodysensor,0	;volatile
  1362                           
  1363                           ;sensor.c: 150: FledBits01.bits.bit_2 = 1;
  1364  01D0  1579               	bsf	_FledBits01,2	;volatile
  1365                           
  1366                           ;sensor.c: 151: if(RB1 == 0)
  1367  01D1  1886               	btfsc	6,1	;volatile
  1368  01D2  29E2               	goto	l5884
  1369                           
  1370                           ;sensor.c: 152: {
  1371                           ;sensor.c: 153: if(++CNTbody_h >= 6)
  1372  01D3  0AAA               	incf	_CNTbody_h,f	;volatile
  1373  01D4  1903               	skipnz
  1374  01D5  0AAB               	incf	_CNTbody_h+1,f	;volatile
  1375  01D6  3000               	movlw	0
  1376  01D7  022B               	subwf	_CNTbody_h+1,w	;volatile
  1377  01D8  3006               	movlw	6
  1378  01D9  1903               	skipnz
  1379  01DA  022A               	subwf	_CNTbody_h,w	;volatile
  1380  01DB  1C03               	skipc
  1381  01DC  29E5               	goto	l5886
  1382                           
  1383                           ;sensor.c: 154: {
  1384                           ;sensor.c: 155: CNTbody_h = 0;
  1385  01DD  01AA               	clrf	_CNTbody_h	;volatile
  1386  01DE  01AB               	clrf	_CNTbody_h+1	;volatile
  1387                           
  1388                           ;sensor.c: 156: CNTbody_l = 0;
  1389  01DF  01A8               	clrf	_CNTbody_l	;volatile
  1390  01E0  01A9               	clrf	_CNTbody_l+1	;volatile
  1391  01E1  29B4               	goto	l5868
  1392  01E2                     l5884:	
  1393                           
  1394                           ;sensor.c: 161: else
  1395                           ;sensor.c: 162: {
  1396                           ;sensor.c: 163: ++CNTbody_l;
  1397  01E2  0AA8               	incf	_CNTbody_l,f	;volatile
  1398  01E3  1903               	skipnz
  1399  01E4  0AA9               	incf	_CNTbody_l+1,f	;volatile
  1400  01E5                     l5886:	
  1401                           
  1402                           ;sensor.c: 164: }
  1403                           ;sensor.c: 165: BufCntAdd = CNTbody_h +CNTbody_l;
  1404  01E5  2205  120A  118A   	fcall	PL6	;call to abstracted procedure
  1405                           
  1406                           ;sensor.c: 166: if(BufCntAdd >= 500)
  1407  01E8  3001               	movlw	1
  1408  01E9  0227               	subwf	_BufCntAdd+1,w	;volatile
  1409  01EA  30F4               	movlw	244
  1410  01EB  1903               	skipnz
  1411  01EC  0226               	subwf	_BufCntAdd,w	;volatile
  1412  01ED  1C03               	skipc
  1413  01EE  0008               	return
  1414  01EF  2988               	goto	l5846
  1415  01F0                     l5890:	
  1416                           
  1417                           ;sensor.c: 173: SEQbody = 0;
  1418  01F0  01BA               	clrf	_SEQbody	;volatile
  1419                           
  1420                           ;sensor.c: 174: FledBits01.bits.bit_2 = 0;
  1421  01F1  1179               	bcf	_FledBits01,2	;volatile
  1422                           
  1423                           ;sensor.c: 175: break;
  1424  01F2  0008               	return
  1425  01F3                     l5896:	
  1426  01F3  083A               	movf	_SEQbody,w	;volatile
  1427                           
  1428                           ; Switch size 1, requested type "space"
  1429                           ; Number of cases is 5, Range of values is 0 to 4
  1430                           ; switch strategies available:
  1431                           ; Name         Instructions Cycles
  1432                           ; simple_byte           16     9 (average)
  1433                           ; direct_byte           23     8 (fixed)
  1434                           ; jumptable            260     6 (fixed)
  1435                           ;	Chosen strategy is simple_byte
  1436  01F4  3A00               	xorlw	0	; case 0
  1437  01F5  1903               	skipnz
  1438  01F6  2977               	goto	l3860
  1439  01F7  3A01               	xorlw	1	; case 1
  1440  01F8  1903               	skipnz
  1441  01F9  298B               	goto	l3862
  1442  01FA  3A03               	xorlw	3	; case 2
  1443  01FB  1903               	skipnz
  1444  01FC  29A3               	goto	l3866
  1445  01FD  3A01               	xorlw	1	; case 3
  1446  01FE  1903               	skipnz
  1447  01FF  29B7               	goto	l3871
  1448  0200  3A07               	xorlw	7	; case 4
  1449  0201  1903               	skipnz
  1450  0202  29CF               	goto	l3875
  1451  0203  29F0               	goto	l5890
  1452  0204  0008               	return
  1453  0205                     __end_of_SensorJudge:	
  1454  0205                     PL6:	
  1455  0205  0828               	movf	_CNTbody_l,w	;volatile
  1456  0206  072A               	addwf	_CNTbody_h,w	;volatile
  1457  0207  00A6               	movwf	_BufCntAdd	;volatile
  1458  0208  0829               	movf	_CNTbody_l+1,w	;volatile
  1459  0209  1803               	skipnc
  1460  020A  0A29               	incf	_CNTbody_l+1,w	;volatile
  1461  020B  072B               	addwf	_CNTbody_h+1,w	;volatile
  1462  020C  00A7               	movwf	_BufCntAdd+1	;volatile
  1463  020D  0008               	return
  1464  020E                     __end_ofPL6:	
  1465                           
  1466                           	psect	text10
  1467  020E                     __ptext10:	
  1468 ;; *************** function _GledLoop *****************
  1469 ;; Defined at:
  1470 ;;		line 16 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\light.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;		None
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;		None
  1475 ;; Return value:  Size  Location     Type
  1476 ;;                  1    wreg      void 
  1477 ;; Registers used:
  1478 ;;		wreg, status,2, status,0, pclath, cstack
  1479 ;; Tracked objects:
  1480 ;;		On entry : 300/0
  1481 ;;		On exit  : 300/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1484 ;;      Params:         0       0       0       0       0
  1485 ;;      Locals:         0       0       0       0       0
  1486 ;;      Temps:          0       0       0       0       0
  1487 ;;      Totals:         0       0       0       0       0
  1488 ;;Total ram usage:        0 bytes
  1489 ;; Hardware stack levels used:    1
  1490 ;; Hardware stack levels required when called:    3
  1491 ;; This function calls:
  1492 ;;		_LED_Con
  1493 ;;		_LED_Judge
  1494 ;;		_LED_Key
  1495 ;;		_LED_Time
  1496 ;; This function is called by:
  1497 ;;		_main
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           
  1502                           ;psect for function _GledLoop
  1503  020E                     _GledLoop:	
  1504                           
  1505                           ;light.c: 18: LED_Time();
  1506                           
  1507                           ;incstack = 0
  1508                           ; Regs used in _GledLoop: [wreg+status,2+status,0+pclath+cstack]
  1509  020E  2219  120A  118A   	fcall	_LED_Time
  1510                           
  1511                           ;light.c: 19: LED_Key();
  1512  0211  2218  120A  118A   	fcall	_LED_Key
  1513                           
  1514                           ;light.c: 20: LED_Judge();
  1515  0214  22BD  120A  118A   	fcall	_LED_Judge
  1516                           
  1517                           ;light.c: 21: LED_Con();
  1518  0217  2A1C               	ljmp	l5620
  1519  0218                     __end_of_GledLoop:	
  1520  0218                     __ptext12:	
  1521 ;; *************** function _LED_Key *****************
  1522 ;; Defined at:
  1523 ;;		line 24 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\light.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;		None
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;		None
  1528 ;; Return value:  Size  Location     Type
  1529 ;;                  1    wreg      void 
  1530 ;; Registers used:
  1531 ;;		None
  1532 ;; Tracked objects:
  1533 ;;		On entry : 300/0
  1534 ;;		On exit  : 300/0
  1535 ;;		Unchanged: 300/0
  1536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1537 ;;      Params:         0       0       0       0       0
  1538 ;;      Locals:         0       0       0       0       0
  1539 ;;      Temps:          0       0       0       0       0
  1540 ;;      Totals:         0       0       0       0       0
  1541 ;;Total ram usage:        0 bytes
  1542 ;; Hardware stack levels used:    1
  1543 ;; Hardware stack levels required when called:    2
  1544 ;; This function calls:
  1545 ;;		Nothing
  1546 ;; This function is called by:
  1547 ;;		_GledLoop
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551                           
  1552                           ;psect for function _LED_Key
  1553  0218                     _LED_Key:	
  1554                           
  1555                           ;incstack = 0
  1556                           ; Regs used in _LED_Key: []
  1557  0218  0008               	return
  1558  0219                     __end_of_LED_Key:	
  1559  0219                     __ptext11:	
  1560 ;; *************** function _LED_Time *****************
  1561 ;; Defined at:
  1562 ;;		line 45 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\light.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;		None
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;		None
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  1    wreg      void 
  1569 ;; Registers used:
  1570 ;;		None
  1571 ;; Tracked objects:
  1572 ;;		On entry : 300/0
  1573 ;;		On exit  : 300/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1576 ;;      Params:         0       0       0       0       0
  1577 ;;      Locals:         0       0       0       0       0
  1578 ;;      Temps:          0       0       0       0       0
  1579 ;;      Totals:         0       0       0       0       0
  1580 ;;Total ram usage:        0 bytes
  1581 ;; Hardware stack levels used:    1
  1582 ;; Hardware stack levels required when called:    2
  1583 ;; This function calls:
  1584 ;;		Nothing
  1585 ;; This function is called by:
  1586 ;;		_GledLoop
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           
  1591                           ;psect for function _LED_Time
  1592  0219                     _LED_Time:	
  1593                           
  1594                           ;light.c: 47: if(Fsys1m.bits.bit_0 == 1)
  1595                           
  1596                           ;incstack = 0
  1597                           ; Regs used in _LED_Time: []
  1598  0219  1841               	btfsc	_Fsys1m,0	;volatile
  1599                           
  1600                           ;light.c: 48: {
  1601                           ;light.c: 49: Fsys1m.bits.bit_0 = 0;
  1602  021A  1041               	bcf	_Fsys1m,0	;volatile
  1603  021B  0008               	return
  1604  021C                     __end_of_LED_Time:	
  1605  021C                     __ptext14:	
  1606 ;; *************** function _LED_Con *****************
  1607 ;; Defined at:
  1608 ;;		line 84 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\light.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;		None
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;		None
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  1    wreg      void 
  1615 ;; Registers used:
  1616 ;;		wreg, status,2, status,0
  1617 ;; Tracked objects:
  1618 ;;		On entry : 300/0
  1619 ;;		On exit  : 300/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1622 ;;      Params:         0       0       0       0       0
  1623 ;;      Locals:         0       0       0       0       0
  1624 ;;      Temps:          0       0       0       0       0
  1625 ;;      Totals:         0       0       0       0       0
  1626 ;;Total ram usage:        0 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; Hardware stack levels required when called:    2
  1629 ;; This function calls:
  1630 ;;		Nothing
  1631 ;; This function is called by:
  1632 ;;		_GledLoop
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           
  1637                           ;psect for function _LED_Con
  1638  021C                     _LED_Con:	
  1639  021C                     l5620:	
  1640                           ;incstack = 0
  1641                           ; Regs used in _LED_Con: [wreg+status,2+status,0]
  1642                           
  1643                           
  1644                           ;light.c: 88: if (FledBits01.bits.bit_0 == 1)
  1645  021C  1C79               	btfss	_FledBits01,0	;volatile
  1646  021D  2AB6               	goto	l5708
  1647                           
  1648                           ;light.c: 89: {
  1649                           ;light.c: 90: if (FledBits01.bits.bit_3 == 0)
  1650  021E  19F9               	btfsc	_FledBits01,3	;volatile
  1651  021F  2A6C               	goto	l5664
  1652                           
  1653                           ;light.c: 91: {
  1654                           ;light.c: 92: if (CNTbreath_Led2 >= 80)
  1655  0220  3000               	movlw	0
  1656  0221  0277               	subwf	_CNTbreath_Led2+1,w	;volatile
  1657  0222  3050               	movlw	80
  1658  0223  1903               	skipnz
  1659  0224  0276               	subwf	_CNTbreath_Led2,w	;volatile
  1660  0225  1C03               	skipc
  1661  0226  2A38               	goto	l5634
  1662                           
  1663                           ;light.c: 93: {
  1664                           ;light.c: 94: CNTbreath_Led2 = 80;
  1665  0227  3050               	movlw	80
  1666  0228  00F6               	movwf	_CNTbreath_Led2	;volatile
  1667  0229  01F7               	clrf	_CNTbreath_Led2+1	;volatile
  1668                           
  1669                           ;light.c: 95: if (++CNTbreath_Led3 > 10)
  1670  022A  0AB2               	incf	_CNTbreath_Led3,f	;volatile
  1671  022B  1903               	skipnz
  1672  022C  0AB3               	incf	_CNTbreath_Led3+1,f	;volatile
  1673  022D  3000               	movlw	0
  1674  022E  0233               	subwf	_CNTbreath_Led3+1,w	;volatile
  1675  022F  300B               	movlw	11
  1676  0230  1903               	skipnz
  1677  0231  0232               	subwf	_CNTbreath_Led3,w	;volatile
  1678  0232  1C03               	skipc
  1679  0233  0008               	return
  1680                           
  1681                           ;light.c: 96: {
  1682                           ;light.c: 97: FledBits01.bits.bit_3 = 1;
  1683  0234  15F9               	bsf	_FledBits01,3	;volatile
  1684                           
  1685                           ;light.c: 98: CNTbreath_Led3 = 0;
  1686  0235  01B2               	clrf	_CNTbreath_Led3	;volatile
  1687  0236  01B3               	clrf	_CNTbreath_Led3+1	;volatile
  1688  0237  0008               	return
  1689  0238                     l5634:	
  1690                           
  1691                           ;light.c: 101: else if (CNTbreath_Led2 > 45)
  1692  0238  3000               	movlw	0
  1693  0239  0277               	subwf	_CNTbreath_Led2+1,w	;volatile
  1694  023A  302E               	movlw	46
  1695  023B  1903               	skipnz
  1696  023C  0276               	subwf	_CNTbreath_Led2,w	;volatile
  1697  023D  1C03               	skipc
  1698  023E  2A57               	goto	l5642
  1699                           
  1700                           ;light.c: 102: {
  1701                           ;light.c: 103: if (++CNTbreath_Led1 >= 3)
  1702  023F  22CB  120A  118A   	fcall	PL10	;call to abstracted procedure
  1703  0242  2A4D               	goto	L3
  1704  0243                     l5644:	
  1705                           
  1706                           ;light.c: 110: {
  1707                           ;light.c: 111: if (++CNTbreath_Led1 >= 8)
  1708  0243  22C5  120A  118A   	fcall	PL8	;call to abstracted procedure
  1709  0246  2A4D               	goto	L3
  1710  0247                     l5652:	
  1711                           
  1712                           ;light.c: 118: {
  1713                           ;light.c: 119: if (++CNTbreath_Led1 >= 5)
  1714  0247  0AB4               	incf	_CNTbreath_Led1,f	;volatile
  1715  0248  1903               	skipnz
  1716  0249  0AB5               	incf	_CNTbreath_Led1+1,f	;volatile
  1717  024A  3000               	movlw	0
  1718  024B  0235               	subwf	_CNTbreath_Led1+1,w	;volatile
  1719  024C  3005               	movlw	5
  1720  024D                     L3:	
  1721  024D  1903               	skipnz
  1722  024E  0234               	subwf	_CNTbreath_Led1,w	;volatile
  1723  024F  1C03               	skipc
  1724  0250  0008               	return
  1725                           
  1726                           ;light.c: 104: {
  1727                           ;light.c: 105: CNTbreath_Led1 = 0;
  1728  0251  01B4               	clrf	_CNTbreath_Led1	;volatile
  1729  0252  01B5               	clrf	_CNTbreath_Led1+1	;volatile
  1730                           
  1731                           ;light.c: 106: CNTbreath_Led2++;
  1732  0253  0AF6               	incf	_CNTbreath_Led2,f	;volatile
  1733  0254  1903               	skipnz
  1734  0255  0AF7               	incf	_CNTbreath_Led2+1,f	;volatile
  1735  0256  0008               	return
  1736  0257                     l5642:	
  1737                           
  1738                           ;light.c: 109: else if (CNTbreath_Led2 > 30)
  1739  0257  3000               	movlw	0
  1740  0258  0277               	subwf	_CNTbreath_Led2+1,w	;volatile
  1741  0259  301F               	movlw	31
  1742  025A  1903               	skipnz
  1743  025B  0276               	subwf	_CNTbreath_Led2,w	;volatile
  1744  025C  1803               	btfsc	3,0
  1745  025D  2A43               	goto	l5644
  1746                           
  1747                           ;light.c: 117: else if (CNTbreath_Led2 > 10)
  1748  025E  3000               	movlw	0
  1749  025F  0277               	subwf	_CNTbreath_Led2+1,w	;volatile
  1750  0260  300B               	movlw	11
  1751  0261  1903               	skipnz
  1752  0262  0276               	subwf	_CNTbreath_Led2,w	;volatile
  1753  0263  1803               	btfsc	3,0
  1754  0264  2A47               	goto	l5652
  1755                           
  1756                           ;light.c: 125: else
  1757                           ;light.c: 126: {
  1758                           ;light.c: 127: if (++CNTbreath_Led1 >= 11)
  1759  0265  0AB4               	incf	_CNTbreath_Led1,f	;volatile
  1760  0266  1903               	skipnz
  1761  0267  0AB5               	incf	_CNTbreath_Led1+1,f	;volatile
  1762  0268  3000               	movlw	0
  1763  0269  0235               	subwf	_CNTbreath_Led1+1,w	;volatile
  1764  026A  300B               	movlw	11
  1765  026B  2A4D               	goto	L3
  1766  026C                     l5664:	
  1767                           ;light.c: 131: }
  1768                           ;light.c: 132: }
  1769                           ;light.c: 133: }
  1770                           
  1771                           
  1772                           ;light.c: 134: else
  1773                           ;light.c: 135: {
  1774                           ;light.c: 136: if (CNTbreath_Led2 < 5)
  1775  026C  3000               	movlw	0
  1776  026D  0277               	subwf	_CNTbreath_Led2+1,w	;volatile
  1777  026E  3005               	movlw	5
  1778  026F  1903               	skipnz
  1779  0270  0276               	subwf	_CNTbreath_Led2,w	;volatile
  1780  0271  1803               	skipnc
  1781  0272  2A78               	goto	l5670
  1782                           
  1783                           ;light.c: 137: {
  1784                           ;light.c: 138: CNTbreath_Led2 = 5;
  1785  0273  3005               	movlw	5
  1786  0274  00F6               	movwf	_CNTbreath_Led2	;volatile
  1787  0275  01F7               	clrf	_CNTbreath_Led2+1	;volatile
  1788  0276                     l5668:	
  1789                           
  1790                           ;light.c: 139: FledBits01.bits.bit_3 = 0;
  1791  0276  11F9               	bcf	_FledBits01,3	;volatile
  1792                           
  1793                           ;light.c: 140: }
  1794  0277  0008               	return
  1795  0278                     l5670:	
  1796                           
  1797                           ;light.c: 141: else if (CNTbreath_Led2 < 10)
  1798  0278  3000               	movlw	0
  1799  0279  0277               	subwf	_CNTbreath_Led2+1,w	;volatile
  1800  027A  300A               	movlw	10
  1801  027B  1903               	skipnz
  1802  027C  0276               	subwf	_CNTbreath_Led2,w	;volatile
  1803  027D  1803               	skipnc
  1804  027E  2A9D               	goto	l5678
  1805  027F                     l5680:	
  1806                           ;light.c: 142: {
  1807                           ;light.c: 143: if (++CNTbreath_Led1 >= 6)
  1808                           
  1809                           
  1810                           ;light.c: 150: {
  1811                           ;light.c: 151: if (++CNTbreath_Led1 >= 6)
  1812  027F  0AB4               	incf	_CNTbreath_Led1,f	;volatile
  1813  0280  1903               	skipnz
  1814  0281  0AB5               	incf	_CNTbreath_Led1+1,f	;volatile
  1815  0282  3000               	movlw	0
  1816  0283  0235               	subwf	_CNTbreath_Led1+1,w	;volatile
  1817  0284  3006               	movlw	6
  1818  0285  2A90               	goto	L1
  1819  0286                     l5688:	
  1820                           
  1821                           ;light.c: 158: {
  1822                           ;light.c: 159: if (++CNTbreath_Led1 >= 8)
  1823  0286  22C5  120A  118A   	fcall	PL8	;call to abstracted procedure
  1824  0289  2A90               	goto	L1
  1825  028A                     l5696:	
  1826                           
  1827                           ;light.c: 166: {
  1828                           ;light.c: 167: if (++CNTbreath_Led1 >= 4)
  1829  028A  0AB4               	incf	_CNTbreath_Led1,f	;volatile
  1830  028B  1903               	skipnz
  1831  028C  0AB5               	incf	_CNTbreath_Led1+1,f	;volatile
  1832  028D  3000               	movlw	0
  1833  028E  0235               	subwf	_CNTbreath_Led1+1,w	;volatile
  1834  028F  3004               	movlw	4
  1835  0290                     L1:	
  1836  0290  1903               	skipnz
  1837  0291  0234               	subwf	_CNTbreath_Led1,w	;volatile
  1838  0292  1C03               	skipc
  1839  0293  0008               	return
  1840                           
  1841                           ;light.c: 144: {
  1842                           ;light.c: 145: CNTbreath_Led1 = 0;
  1843  0294  01B4               	clrf	_CNTbreath_Led1	;volatile
  1844  0295  01B5               	clrf	_CNTbreath_Led1+1	;volatile
  1845                           
  1846                           ;light.c: 146: CNTbreath_Led2--;
  1847  0296  3001               	movlw	1
  1848  0297  02F6               	subwf	_CNTbreath_Led2,f	;volatile
  1849  0298  3000               	movlw	0
  1850  0299  1C03               	skipc
  1851  029A  03F7               	decf	_CNTbreath_Led2+1,f	;volatile
  1852  029B  02F7               	subwf	_CNTbreath_Led2+1,f	;volatile
  1853  029C  0008               	return
  1854  029D                     l5678:	
  1855                           
  1856                           ;light.c: 149: else if (CNTbreath_Led2 < 40)
  1857  029D  3000               	movlw	0
  1858  029E  0277               	subwf	_CNTbreath_Led2+1,w	;volatile
  1859  029F  3028               	movlw	40
  1860  02A0  1903               	skipnz
  1861  02A1  0276               	subwf	_CNTbreath_Led2,w	;volatile
  1862  02A2  1C03               	btfss	3,0
  1863  02A3  2A7F               	goto	l5680
  1864                           
  1865                           ;light.c: 157: else if (CNTbreath_Led2 < 60)
  1866  02A4  3000               	movlw	0
  1867  02A5  0277               	subwf	_CNTbreath_Led2+1,w	;volatile
  1868  02A6  303C               	movlw	60
  1869  02A7  1903               	skipnz
  1870  02A8  0276               	subwf	_CNTbreath_Led2,w	;volatile
  1871  02A9  1C03               	btfss	3,0
  1872  02AA  2A86               	goto	l5688
  1873                           
  1874                           ;light.c: 165: else if (CNTbreath_Led2 < 70)
  1875  02AB  3000               	movlw	0
  1876  02AC  0277               	subwf	_CNTbreath_Led2+1,w	;volatile
  1877  02AD  3046               	movlw	70
  1878  02AE  1903               	skipnz
  1879  02AF  0276               	subwf	_CNTbreath_Led2,w	;volatile
  1880  02B0  1C03               	btfss	3,0
  1881  02B1  2A8A               	goto	l5696
  1882                           
  1883                           ;light.c: 173: else
  1884                           ;light.c: 174: {
  1885                           ;light.c: 175: if (++CNTbreath_Led1 >= 3)
  1886  02B2  22CB  120A  118A   	fcall	PL10	;call to abstracted procedure
  1887  02B5  2A90               	goto	L1
  1888  02B6                     l5708:	
  1889                           
  1890                           ;light.c: 183: else
  1891                           ;light.c: 184: {
  1892                           ;light.c: 185: CNTbreath_Led1 = 0;
  1893  02B6  01B4               	clrf	_CNTbreath_Led1	;volatile
  1894  02B7  01B5               	clrf	_CNTbreath_Led1+1	;volatile
  1895                           
  1896                           ;light.c: 186: CNTbreath_Led2 = 0;
  1897  02B8  01F6               	clrf	_CNTbreath_Led2	;volatile
  1898  02B9  01F7               	clrf	_CNTbreath_Led2+1	;volatile
  1899                           
  1900                           ;light.c: 187: CNTbreath_Led3 = 0;
  1901  02BA  01B2               	clrf	_CNTbreath_Led3	;volatile
  1902  02BB  01B3               	clrf	_CNTbreath_Led3+1	;volatile
  1903  02BC  2A76               	goto	l5668
  1904  02BD                     __end_of_LED_Con:	
  1905  02BD                     __ptext13:	
  1906 ;; *************** function _LED_Judge *****************
  1907 ;; Defined at:
  1908 ;;		line 53 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\light.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;		None
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;		None
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  1    wreg      void 
  1915 ;; Registers used:
  1916 ;;		None
  1917 ;; Tracked objects:
  1918 ;;		On entry : 300/0
  1919 ;;		On exit  : 300/0
  1920 ;;		Unchanged: 300/0
  1921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1922 ;;      Params:         0       0       0       0       0
  1923 ;;      Locals:         0       0       0       0       0
  1924 ;;      Temps:          0       0       0       0       0
  1925 ;;      Totals:         0       0       0       0       0
  1926 ;;Total ram usage:        0 bytes
  1927 ;; Hardware stack levels used:    1
  1928 ;; Hardware stack levels required when called:    2
  1929 ;; This function calls:
  1930 ;;		Nothing
  1931 ;; This function is called by:
  1932 ;;		_GledLoop
  1933 ;; This function uses a non-reentrant model
  1934 ;;
  1935                           
  1936                           
  1937                           ;psect for function _LED_Judge
  1938  02BD                     _LED_Judge:	
  1939                           
  1940                           ;light.c: 55: if(Fbodysensor.bits.bit_0 == 1)
  1941                           
  1942                           ;incstack = 0
  1943                           ; Regs used in _LED_Judge: []
  1944  02BD  1C7A               	btfss	_Fbodysensor,0	;volatile
  1945  02BE  2AC3               	goto	l5618
  1946                           
  1947                           ;light.c: 56: {
  1948                           ;light.c: 57: FledBits01.bits.bit_0 = 1;
  1949  02BF  1479               	bsf	_FledBits01,0	;volatile
  1950                           
  1951                           ;light.c: 58: if(Fbodysensor.bits.bit_4 == 0)
  1952  02C0  1E7A               	btfss	_Fbodysensor,4	;volatile
  1953                           
  1954                           ;light.c: 59: {
  1955                           ;light.c: 60: if(FledBits01.bits.bit_2 == 1)
  1956  02C1  1D79               	btfss	_FledBits01,2	;volatile
  1957  02C2  0008               	return
  1958  02C3                     l5618:	
  1959                           
  1960                           ;light.c: 61: {
  1961                           ;light.c: 62: FledBits01.bits.bit_0 = 0;
  1962  02C3  1079               	bcf	_FledBits01,0	;volatile
  1963  02C4  0008               	return
  1964  02C5                     __end_of_LED_Judge:	
  1965  02C5                     PL8:	
  1966  02C5  0AB4               	incf	_CNTbreath_Led1,f	;volatile
  1967  02C6  1903               	skipnz
  1968  02C7  0AB5               	incf	_CNTbreath_Led1+1,f	;volatile
  1969  02C8  3000               	movlw	0
  1970  02C9  0235               	subwf	_CNTbreath_Led1+1,w	;volatile
  1971  02CA  3408               	retlw	8
  1972  02CB                     __end_ofPL8:	
  1973  02CB                     PL10:	
  1974  02CB  0AB4               	incf	_CNTbreath_Led1,f	;volatile
  1975  02CC  1903               	skipnz
  1976  02CD  0AB5               	incf	_CNTbreath_Led1+1,f	;volatile
  1977  02CE  3000               	movlw	0
  1978  02CF  0235               	subwf	_CNTbreath_Led1+1,w	;volatile
  1979  02D0  3403               	retlw	3
  1980  02D1                     __end_ofPL10:	
  1981                           
  1982                           	psect	text15
  1983  001F                     __ptext15:	
  1984 ;; *************** function _GflushLoop *****************
  1985 ;; Defined at:
  1986 ;;		line 28 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\flush.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;		None
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;		None
  1991 ;; Return value:  Size  Location     Type
  1992 ;;                  1    wreg      void 
  1993 ;; Registers used:
  1994 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1995 ;; Tracked objects:
  1996 ;;		On entry : 300/0
  1997 ;;		On exit  : 300/0
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2000 ;;      Params:         0       0       0       0       0
  2001 ;;      Locals:         0       0       0       0       0
  2002 ;;      Temps:          0       0       0       0       0
  2003 ;;      Totals:         0       0       0       0       0
  2004 ;;Total ram usage:        0 bytes
  2005 ;; Hardware stack levels used:    1
  2006 ;; Hardware stack levels required when called:    3
  2007 ;; This function calls:
  2008 ;;		_FlushCon
  2009 ;;		_FlushJudge
  2010 ;;		_FlushTime
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           
  2017                           ;psect for function _GflushLoop
  2018  001F                     _GflushLoop:	
  2019                           
  2020                           ;flush.c: 30: FlushTime();
  2021                           
  2022                           ;incstack = 0
  2023                           ; Regs used in _GflushLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2024  001F  2026  120A  118A   	fcall	_FlushTime
  2025                           
  2026                           ;flush.c: 31: FlushJudge();
  2027  0022  20E7  120A  118A   	fcall	_FlushJudge
  2028                           
  2029                           ;flush.c: 32: FlushCon();
  2030  0025  2827               	ljmp	l5732
  2031  0026                     __end_of_GflushLoop:	
  2032  0026                     __ptext16:	
  2033 ;; *************** function _FlushTime *****************
  2034 ;; Defined at:
  2035 ;;		line 35 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\flush.c"
  2036 ;; Parameters:    Size  Location     Type
  2037 ;;		None
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;		None
  2040 ;; Return value:  Size  Location     Type
  2041 ;;                  1    wreg      void 
  2042 ;; Registers used:
  2043 ;;		None
  2044 ;; Tracked objects:
  2045 ;;		On entry : 300/0
  2046 ;;		On exit  : 300/0
  2047 ;;		Unchanged: 300/0
  2048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2049 ;;      Params:         0       0       0       0       0
  2050 ;;      Locals:         0       0       0       0       0
  2051 ;;      Temps:          0       0       0       0       0
  2052 ;;      Totals:         0       0       0       0       0
  2053 ;;Total ram usage:        0 bytes
  2054 ;; Hardware stack levels used:    1
  2055 ;; Hardware stack levels required when called:    2
  2056 ;; This function calls:
  2057 ;;		Nothing
  2058 ;; This function is called by:
  2059 ;;		_GflushLoop
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           
  2064                           ;psect for function _FlushTime
  2065  0026                     _FlushTime:	
  2066                           
  2067                           ;incstack = 0
  2068                           ; Regs used in _FlushTime: []
  2069  0026  0008               	return
  2070  0027                     __end_of_FlushTime:	
  2071  0027                     __ptext18:	
  2072 ;; *************** function _FlushCon *****************
  2073 ;; Defined at:
  2074 ;;		line 105 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\flush.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;		None
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;		None
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  1    wreg      void 
  2081 ;; Registers used:
  2082 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2083 ;; Tracked objects:
  2084 ;;		On entry : 300/0
  2085 ;;		On exit  : 300/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2088 ;;      Params:         0       0       0       0       0
  2089 ;;      Locals:         0       0       0       0       0
  2090 ;;      Temps:          0       0       0       0       0
  2091 ;;      Totals:         0       0       0       0       0
  2092 ;;Total ram usage:        0 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:    2
  2095 ;; This function calls:
  2096 ;;		Nothing
  2097 ;; This function is called by:
  2098 ;;		_GflushLoop
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           
  2103                           ;psect for function _FlushCon
  2104  0027                     _FlushCon:	
  2105  0027                     l5732:	
  2106                           ;incstack = 0
  2107                           ; Regs used in _FlushCon: [wreg-fsr0h+status,2+status,0]
  2108                           
  2109                           
  2110                           ;flush.c: 107: switch (SEQflsuh)
  2111  0027  28C3               	goto	l5810
  2112  0028                     l2895:	
  2113                           ;flush.c: 108: {
  2114                           ;flush.c: 109: case FLUSH_INIT_0:
  2115                           
  2116                           
  2117                           ;flush.c: 110: Fflush1.bits.bit_6 = 0;
  2118  0028  1378               	bcf	_Fflush1,6	;volatile
  2119                           
  2120                           ;flush.c: 111: RA2 = 0;
  2121  0029  1105               	bcf	5,2	;volatile
  2122                           
  2123                           ;flush.c: 112: RA4 = 0;
  2124  002A  1205               	bcf	5,4	;volatile
  2125                           
  2126                           ;flush.c: 113: if((Fflush1.bits.bit_1 == 1) || (Fflush1.bits.bit_3 == 1))
  2127  002B  18F8               	btfsc	_Fflush1,1	;volatile
  2128  002C  282F               	goto	l5736
  2129  002D  1DF8               	btfss	_Fflush1,3	;volatile
  2130  002E  0008               	return
  2131  002F                     l5736:	
  2132                           
  2133                           ;flush.c: 114: {
  2134                           ;flush.c: 115: SEQflsuh = FLUSH_INIT_1;
  2135  002F  3001               	movlw	1
  2136  0030  2832               	goto	L6
  2137  0031                     l5740:	
  2138                           
  2139                           ;flush.c: 124: {
  2140                           ;flush.c: 125: SEQflsuh = FLUSH_END_0;
  2141  0031  3009               	movlw	9
  2142  0032                     L6:	
  2143  0032  00BC               	movwf	_SEQflsuh	;volatile
  2144                           
  2145                           ;flush.c: 116: CNTflush = 0;
  2146  0033  01AC               	clrf	_CNTflush	;volatile
  2147  0034  01AD               	clrf	_CNTflush+1	;volatile
  2148  0035  0008               	return
  2149  0036                     l2900:	
  2150                           ;flush.c: 119: case FLUSH_INIT_1:
  2151                           
  2152                           
  2153                           ;flush.c: 120: Fflush1.bits.bit_6 = 1;
  2154  0036  1778               	bsf	_Fflush1,6	;volatile
  2155                           
  2156                           ;flush.c: 121: RA2 = 0;
  2157  0037  1105               	bcf	5,2	;volatile
  2158                           
  2159                           ;flush.c: 122: RA4 = 0;
  2160  0038  1205               	bcf	5,4	;volatile
  2161                           
  2162                           ;flush.c: 123: if(Fbodysensor.bits.bit_0 == 1)
  2163  0039  187A               	btfsc	_Fbodysensor,0	;volatile
  2164  003A  2831               	goto	l5740
  2165                           
  2166                           ;flush.c: 128: }
  2167                           ;flush.c: 129: if(++CNTflush >= 5)
  2168  003B  0AAC               	incf	_CNTflush,f	;volatile
  2169  003C  1903               	skipnz
  2170  003D  0AAD               	incf	_CNTflush+1,f	;volatile
  2171  003E  3000               	movlw	0
  2172  003F  022D               	subwf	_CNTflush+1,w	;volatile
  2173  0040  3005               	movlw	5
  2174  0041  1903               	skipnz
  2175  0042  022C               	subwf	_CNTflush,w	;volatile
  2176  0043  1C03               	skipc
  2177  0044  0008               	return
  2178                           
  2179                           ;flush.c: 130: {
  2180                           ;flush.c: 131: CNTflush = 0;
  2181  0045  01AC               	clrf	_CNTflush	;volatile
  2182  0046  01AD               	clrf	_CNTflush+1	;volatile
  2183                           
  2184                           ;flush.c: 132: SEQflsuh = FLUSH_INIT_2;
  2185  0047  3002               	movlw	2
  2186  0048  00BC               	movwf	_SEQflsuh	;volatile
  2187  0049  0008               	return
  2188  004A                     l2903:	
  2189                           ;flush.c: 135: case FLUSH_INIT_2:
  2190                           
  2191                           
  2192                           ;flush.c: 136: Fflush1.bits.bit_6 = 1;
  2193  004A  1778               	bsf	_Fflush1,6	;volatile
  2194                           
  2195                           ;flush.c: 137: RA2 = 0;
  2196  004B  1105               	bcf	5,2	;volatile
  2197                           
  2198                           ;flush.c: 138: RA4 = 0;
  2199  004C  1205               	bcf	5,4	;volatile
  2200                           
  2201                           ;flush.c: 139: if(Fbodysensor.bits.bit_0 == 1)
  2202  004D  187A               	btfsc	_Fbodysensor,0	;volatile
  2203  004E  2831               	goto	l5740
  2204                           
  2205                           ;flush.c: 144: }
  2206                           ;flush.c: 146: if(Fflush1.bits.bit_1 == 1)
  2207  004F  1CF8               	btfss	_Fflush1,1	;volatile
  2208  0050  2854               	goto	l2905
  2209                           
  2210                           ;flush.c: 147: {
  2211                           ;flush.c: 148: SEQflsuh = FLUSH_BIG_0;
  2212  0051  3003               	movlw	3
  2213  0052  00BC               	movwf	_SEQflsuh	;volatile
  2214                           
  2215                           ;flush.c: 149: }
  2216  0053  0008               	return
  2217  0054                     l2905:	
  2218                           
  2219                           ;flush.c: 150: else if(Fflush1.bits.bit_3 == 1)
  2220  0054  1DF8               	btfss	_Fflush1,3	;volatile
  2221  0055  0008               	return
  2222                           
  2223                           ;flush.c: 151: {
  2224                           ;flush.c: 152: SEQflsuh = FLUSH_SML_0;
  2225  0056  3006               	movlw	6
  2226  0057  00BC               	movwf	_SEQflsuh	;volatile
  2227  0058  0008               	return
  2228  0059                     l2908:	
  2229                           ;flush.c: 155: case FLUSH_BIG_0:
  2230                           
  2231                           
  2232                           ;flush.c: 156: Fflush1.bits.bit_6 = 1;
  2233                           
  2234                           ;flush.c: 157: RA2 = 0;
  2235                           
  2236                           ;flush.c: 158: RA4 = 1;
  2237                           
  2238                           ;flush.c: 159: if(++CNTflush >= 10)
  2239  0059  210F  120A  118A   	fcall	PL4	;call to abstracted procedure
  2240  005C  1903               	skipnz
  2241  005D  022C               	subwf	_CNTflush,w	;volatile
  2242  005E  1C03               	skipc
  2243  005F  0008               	return
  2244                           
  2245                           ;flush.c: 160: {
  2246                           ;flush.c: 161: CNTflush = 0;
  2247  0060  01AC               	clrf	_CNTflush	;volatile
  2248  0061  01AD               	clrf	_CNTflush+1	;volatile
  2249                           
  2250                           ;flush.c: 162: SEQflsuh = FLUSH_BIG_1;
  2251  0062  3004               	movlw	4
  2252  0063  00BC               	movwf	_SEQflsuh	;volatile
  2253  0064  0008               	return
  2254  0065                     l2910:	
  2255                           ;flush.c: 165: case FLUSH_BIG_1:
  2256                           
  2257                           
  2258                           ;flush.c: 166: Fflush1.bits.bit_6 = 1;
  2259  0065  1778               	bsf	_Fflush1,6	;volatile
  2260                           
  2261                           ;flush.c: 167: RA2 = 1;
  2262  0066  1505               	bsf	5,2	;volatile
  2263                           
  2264                           ;flush.c: 168: RA4 = 1;
  2265  0067  1605               	bsf	5,4	;volatile
  2266                           
  2267                           ;flush.c: 170: if(++CNTflush >= 100)
  2268  0068  0AAC               	incf	_CNTflush,f	;volatile
  2269  0069  1903               	skipnz
  2270  006A  0AAD               	incf	_CNTflush+1,f	;volatile
  2271  006B  3000               	movlw	0
  2272  006C  022D               	subwf	_CNTflush+1,w	;volatile
  2273  006D  3064               	movlw	100
  2274  006E  1903               	skipnz
  2275  006F  022C               	subwf	_CNTflush,w	;volatile
  2276  0070  1C03               	skipc
  2277  0071  0008               	return
  2278                           
  2279                           ;flush.c: 171: {
  2280                           ;flush.c: 172: CNTflush = 0;
  2281  0072  01AC               	clrf	_CNTflush	;volatile
  2282  0073  01AD               	clrf	_CNTflush+1	;volatile
  2283                           
  2284                           ;flush.c: 173: SEQflsuh = FLUSH_BIG_2;
  2285  0074  3005               	movlw	5
  2286  0075  00BC               	movwf	_SEQflsuh	;volatile
  2287  0076  0008               	return
  2288  0077                     l2912:	
  2289                           ;flush.c: 183: case FLUSH_BIG_2:
  2290                           
  2291                           
  2292                           ;flush.c: 184: Fflush1.bits.bit_6 = 1;
  2293                           
  2294                           ;flush.c: 185: RA2 = 0;
  2295                           
  2296                           ;flush.c: 186: RA4 = 1;
  2297                           
  2298                           ;flush.c: 187: if(++CNTflush >= 10)
  2299  0077  210F  120A  118A   	fcall	PL4	;call to abstracted procedure
  2300  007A                     L5:	
  2301  007A  1903               	skipnz
  2302  007B  022C               	subwf	_CNTflush,w	;volatile
  2303  007C  1C03               	skipc
  2304  007D  0008               	return
  2305                           
  2306                           ;flush.c: 188: {
  2307                           ;flush.c: 189: CNTflush = 0;
  2308  007E  01AC               	clrf	_CNTflush	;volatile
  2309  007F  01AD               	clrf	_CNTflush+1	;volatile
  2310                           
  2311                           ;flush.c: 190: SEQflsuh = FLUSH_END_0;
  2312  0080  3009               	movlw	9
  2313  0081  00BC               	movwf	_SEQflsuh	;volatile
  2314  0082  0008               	return
  2315  0083                     l2914:	
  2316                           ;flush.c: 194: case FLUSH_SML_0:
  2317                           
  2318                           
  2319                           ;flush.c: 195: Fflush1.bits.bit_6 = 1;
  2320                           
  2321                           ;flush.c: 196: RA2 = 0;
  2322                           
  2323                           ;flush.c: 197: RA4 = 0;
  2324                           
  2325                           ;flush.c: 198: if(++CNTflush >= 5)
  2326  0083  2106  120A  118A   	fcall	PL2	;call to abstracted procedure
  2327  0086  1903               	skipnz
  2328  0087  022C               	subwf	_CNTflush,w	;volatile
  2329  0088  1C03               	skipc
  2330  0089  0008               	return
  2331                           
  2332                           ;flush.c: 199: {
  2333                           ;flush.c: 200: CNTflush = 0;
  2334  008A  01AC               	clrf	_CNTflush	;volatile
  2335  008B  01AD               	clrf	_CNTflush+1	;volatile
  2336                           
  2337                           ;flush.c: 201: SEQflsuh = FLUSH_SML_1;
  2338  008C  3007               	movlw	7
  2339  008D  00BC               	movwf	_SEQflsuh	;volatile
  2340  008E  0008               	return
  2341  008F                     l2916:	
  2342                           ;flush.c: 204: case FLUSH_SML_1:
  2343                           
  2344                           
  2345                           ;flush.c: 205: Fflush1.bits.bit_6 = 1;
  2346  008F  1778               	bsf	_Fflush1,6	;volatile
  2347                           
  2348                           ;flush.c: 206: RA2 = 1;
  2349  0090  1505               	bsf	5,2	;volatile
  2350                           
  2351                           ;flush.c: 207: RA4 = 0;
  2352  0091  1205               	bcf	5,4	;volatile
  2353                           
  2354                           ;flush.c: 208: if(++CNTflush >= 200)
  2355  0092  0AAC               	incf	_CNTflush,f	;volatile
  2356  0093  1903               	skipnz
  2357  0094  0AAD               	incf	_CNTflush+1,f	;volatile
  2358  0095  3000               	movlw	0
  2359  0096  022D               	subwf	_CNTflush+1,w	;volatile
  2360  0097  30C8               	movlw	200
  2361  0098  1903               	skipnz
  2362  0099  022C               	subwf	_CNTflush,w	;volatile
  2363  009A  1C03               	skipc
  2364  009B  0008               	return
  2365                           
  2366                           ;flush.c: 209: {
  2367                           ;flush.c: 210: CNTflush = 0;
  2368  009C  01AC               	clrf	_CNTflush	;volatile
  2369  009D  01AD               	clrf	_CNTflush+1	;volatile
  2370                           
  2371                           ;flush.c: 211: SEQflsuh = FLUSH_SML_2;
  2372  009E  3008               	movlw	8
  2373  009F  00BC               	movwf	_SEQflsuh	;volatile
  2374  00A0  0008               	return
  2375  00A1                     l2918:	
  2376                           ;flush.c: 214: case FLUSH_SML_2:
  2377                           
  2378                           
  2379                           ;flush.c: 215: Fflush1.bits.bit_6 = 1;
  2380                           
  2381                           ;flush.c: 216: RA2 = 0;
  2382                           
  2383                           ;flush.c: 217: RA4 = 0;
  2384                           
  2385                           ;flush.c: 218: if(++CNTflush >= 5)
  2386  00A1  2106  120A  118A   	fcall	PL2	;call to abstracted procedure
  2387  00A4  287A               	goto	L5
  2388  00A5                     l2920:	
  2389                           ;flush.c: 225: case FLUSH_END_0:
  2390                           
  2391                           
  2392                           ;flush.c: 226: Fflush1.bits.bit_6 = 1;
  2393                           
  2394                           ;flush.c: 227: RA2 = 0;
  2395                           
  2396                           ;flush.c: 228: RA4 = 0;
  2397                           
  2398                           ;flush.c: 229: if(++CNTflush >= 5)
  2399  00A5  2106  120A  118A   	fcall	PL2	;call to abstracted procedure
  2400  00A8  1903               	skipnz
  2401  00A9  022C               	subwf	_CNTflush,w	;volatile
  2402  00AA  1C03               	skipc
  2403  00AB  0008               	return
  2404                           
  2405                           ;flush.c: 230: {
  2406                           ;flush.c: 231: CNTflush = 0;
  2407  00AC  01AC               	clrf	_CNTflush	;volatile
  2408  00AD  01AD               	clrf	_CNTflush+1	;volatile
  2409                           
  2410                           ;flush.c: 232: SEQflsuh = FLUSH_END_1;
  2411  00AE  300A               	movlw	10
  2412  00AF  00BC               	movwf	_SEQflsuh	;volatile
  2413  00B0  0008               	return
  2414  00B1                     l2922:	
  2415                           ;flush.c: 235: case FLUSH_END_1:
  2416                           
  2417                           
  2418                           ;flush.c: 236: Fflush1.bits.bit_6 = 0;
  2419  00B1  1378               	bcf	_Fflush1,6	;volatile
  2420                           
  2421                           ;flush.c: 237: RA2 = 0;
  2422  00B2  1105               	bcf	5,2	;volatile
  2423                           
  2424                           ;flush.c: 238: RA4 = 0;
  2425  00B3  1205               	bcf	5,4	;volatile
  2426                           
  2427                           ;flush.c: 239: SEQflsuh = FLUSH_INIT_0;
  2428  00B4  01BC               	clrf	_SEQflsuh	;volatile
  2429                           
  2430                           ;flush.c: 240: CNTflush = 0;
  2431  00B5  01AC               	clrf	_CNTflush	;volatile
  2432  00B6  01AD               	clrf	_CNTflush+1	;volatile
  2433                           
  2434                           ;flush.c: 241: Fflush1.bits.bit_1 = 0;
  2435  00B7  10F8               	bcf	_Fflush1,1	;volatile
  2436                           
  2437                           ;flush.c: 242: Fflush1.bits.bit_3 = 0;
  2438  00B8  11F8               	bcf	_Fflush1,3	;volatile
  2439                           
  2440                           ;flush.c: 243: break;
  2441  00B9  0008               	return
  2442  00BA                     l2923:	
  2443                           ;flush.c: 244: default:
  2444                           
  2445                           
  2446                           ;flush.c: 245: Fflush1.bits.bit_6 = 0;
  2447  00BA  1378               	bcf	_Fflush1,6	;volatile
  2448                           
  2449                           ;flush.c: 246: RA2 = 0;
  2450  00BB  1105               	bcf	5,2	;volatile
  2451                           
  2452                           ;flush.c: 247: RA4 = 0;
  2453  00BC  1205               	bcf	5,4	;volatile
  2454                           
  2455                           ;flush.c: 248: Fflush1.bits.bit_1 = 0;
  2456  00BD  10F8               	bcf	_Fflush1,1	;volatile
  2457                           
  2458                           ;flush.c: 249: Fflush1.bits.bit_3 = 0;
  2459  00BE  11F8               	bcf	_Fflush1,3	;volatile
  2460                           
  2461                           ;flush.c: 250: SEQflsuh = FLUSH_INIT_0;
  2462  00BF  01BC               	clrf	_SEQflsuh	;volatile
  2463                           
  2464                           ;flush.c: 251: CNTflush = 0;
  2465  00C0  01AC               	clrf	_CNTflush	;volatile
  2466  00C1  01AD               	clrf	_CNTflush+1	;volatile
  2467                           
  2468                           ;flush.c: 252: break;
  2469  00C2  0008               	return
  2470  00C3                     l5810:	
  2471  00C3  083C               	movf	_SEQflsuh,w	;volatile
  2472                           
  2473                           ; Switch size 1, requested type "space"
  2474                           ; Number of cases is 11, Range of values is 0 to 10
  2475                           ; switch strategies available:
  2476                           ; Name         Instructions Cycles
  2477                           ; simple_byte           34    18 (average)
  2478                           ; direct_byte           41     8 (fixed)
  2479                           ; jumptable            260     6 (fixed)
  2480                           ;	Chosen strategy is simple_byte
  2481  00C4  3A00               	xorlw	0	; case 0
  2482  00C5  1903               	skipnz
  2483  00C6  2828               	goto	l2895
  2484  00C7  3A01               	xorlw	1	; case 1
  2485  00C8  1903               	skipnz
  2486  00C9  2836               	goto	l2900
  2487  00CA  3A03               	xorlw	3	; case 2
  2488  00CB  1903               	skipnz
  2489  00CC  284A               	goto	l2903
  2490  00CD  3A01               	xorlw	1	; case 3
  2491  00CE  1903               	skipnz
  2492  00CF  2859               	goto	l2908
  2493  00D0  3A07               	xorlw	7	; case 4
  2494  00D1  1903               	skipnz
  2495  00D2  2865               	goto	l2910
  2496  00D3  3A01               	xorlw	1	; case 5
  2497  00D4  1903               	skipnz
  2498  00D5  2877               	goto	l2912
  2499  00D6  3A03               	xorlw	3	; case 6
  2500  00D7  1903               	skipnz
  2501  00D8  2883               	goto	l2914
  2502  00D9  3A01               	xorlw	1	; case 7
  2503  00DA  1903               	skipnz
  2504  00DB  288F               	goto	l2916
  2505  00DC  3A0F               	xorlw	15	; case 8
  2506  00DD  1903               	skipnz
  2507  00DE  28A1               	goto	l2918
  2508  00DF  3A01               	xorlw	1	; case 9
  2509  00E0  1903               	skipnz
  2510  00E1  28A5               	goto	l2920
  2511  00E2  3A03               	xorlw	3	; case 10
  2512  00E3  1903               	skipnz
  2513  00E4  28B1               	goto	l2922
  2514  00E5  28BA               	goto	l2923
  2515  00E6  0008               	return
  2516  00E7                     __end_of_FlushCon:	
  2517  00E7                     __ptext17:	
  2518 ;; *************** function _FlushJudge *****************
  2519 ;; Defined at:
  2520 ;;		line 39 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\flush.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;		None
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;		None
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  1    wreg      void 
  2527 ;; Registers used:
  2528 ;;		None
  2529 ;; Tracked objects:
  2530 ;;		On entry : 300/0
  2531 ;;		On exit  : 300/0
  2532 ;;		Unchanged: 300/0
  2533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2534 ;;      Params:         0       0       0       0       0
  2535 ;;      Locals:         0       0       0       0       0
  2536 ;;      Temps:          0       0       0       0       0
  2537 ;;      Totals:         0       0       0       0       0
  2538 ;;Total ram usage:        0 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    2
  2541 ;; This function calls:
  2542 ;;		Nothing
  2543 ;; This function is called by:
  2544 ;;		_GflushLoop
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           
  2549                           ;psect for function _FlushJudge
  2550  00E7                     _FlushJudge:	
  2551                           
  2552                           ;flush.c: 43: if(Fbodysensor.bits.bit_3 == 1)
  2553                           
  2554                           ;incstack = 0
  2555                           ; Regs used in _FlushJudge: []
  2556  00E7  1DFA               	btfss	_Fbodysensor,3	;volatile
  2557  00E8  28EC               	goto	l2882
  2558                           
  2559                           ;flush.c: 44: {
  2560                           ;flush.c: 45: Fflush1.bits.bit_0 = 1;
  2561  00E9  1478               	bsf	_Fflush1,0	;volatile
  2562                           
  2563                           ;flush.c: 46: Fflush1.bits.bit_2 = 0;
  2564  00EA  1178               	bcf	_Fflush1,2	;volatile
  2565                           
  2566                           ;flush.c: 47: }
  2567  00EB  28F2               	goto	l2883
  2568  00EC                     l2882:	
  2569                           
  2570                           ;flush.c: 48: else if(Fbodysensor.bits.bit_4 == 1)
  2571  00EC  1E7A               	btfss	_Fbodysensor,4	;volatile
  2572  00ED  28F0               	goto	l2884
  2573                           
  2574                           ;flush.c: 49: {
  2575                           ;flush.c: 50: Fflush1.bits.bit_2 = 1;
  2576  00EE  1578               	bsf	_Fflush1,2	;volatile
  2577  00EF  28F1               	goto	L4
  2578  00F0                     l2884:	
  2579                           ;flush.c: 52: }
  2580                           
  2581                           ;flush.c: 51: Fflush1.bits.bit_0 = 0;
  2582                           
  2583                           
  2584                           ;flush.c: 53: else
  2585                           ;flush.c: 54: {
  2586                           ;flush.c: 55: Fflush1.bits.bit_2 = 0;
  2587  00F0  1178               	bcf	_Fflush1,2	;volatile
  2588  00F1                     L4:	
  2589                           
  2590                           ;flush.c: 56: Fflush1.bits.bit_0 = 0;
  2591  00F1  1078               	bcf	_Fflush1,0	;volatile
  2592  00F2                     l2883:	
  2593                           
  2594                           ;flush.c: 57: }
  2595                           ;flush.c: 74: if (Fbodysensor.bits.bit_2 == 1)
  2596  00F2  197A               	btfsc	_Fbodysensor,2	;volatile
  2597                           
  2598                           ;flush.c: 75: {
  2599                           ;flush.c: 76: Fflush1.bits.bit_7 = 1;
  2600  00F3  17F8               	bsf	_Fflush1,7	;volatile
  2601                           
  2602                           ;flush.c: 77: }
  2603                           ;flush.c: 78: if (Fflush1.bits.bit_7 == 1)
  2604  00F4  1FF8               	btfss	_Fflush1,7	;volatile
  2605  00F5  0008               	return
  2606                           
  2607                           ;flush.c: 79: {
  2608                           ;flush.c: 80: if (Fflush1.bits.bit_6 == 1)
  2609  00F6  1F78               	btfss	_Fflush1,6	;volatile
  2610  00F7  28FB               	goto	l2888
  2611                           
  2612                           ;flush.c: 81: {
  2613                           ;flush.c: 82: Fflush1.bits.bit_2 = 0;
  2614  00F8  1178               	bcf	_Fflush1,2	;volatile
  2615                           
  2616                           ;flush.c: 83: Fflush1.bits.bit_0 = 0;
  2617  00F9  1078               	bcf	_Fflush1,0	;volatile
  2618                           
  2619                           ;flush.c: 84: return;
  2620  00FA  0008               	return
  2621  00FB                     l2888:	
  2622                           
  2623                           ;flush.c: 85: }
  2624                           ;flush.c: 86: Fflush1.bits.bit_7 = 0;
  2625  00FB  13F8               	bcf	_Fflush1,7	;volatile
  2626                           
  2627                           ;flush.c: 87: if(Fflush1.bits.bit_0 == 1)
  2628  00FC  1C78               	btfss	_Fflush1,0	;volatile
  2629  00FD  2901               	goto	l2890
  2630                           
  2631                           ;flush.c: 88: {
  2632                           ;flush.c: 89: Fflush1.bits.bit_0 = 0;
  2633  00FE  1078               	bcf	_Fflush1,0	;volatile
  2634                           
  2635                           ;flush.c: 90: Fflush1.bits.bit_1 = 1;
  2636  00FF  14F8               	bsf	_Fflush1,1	;volatile
  2637                           
  2638                           ;flush.c: 91: return;
  2639  0100  0008               	return
  2640  0101                     l2890:	
  2641                           
  2642                           ;flush.c: 92: }
  2643                           ;flush.c: 93: if(Fflush1.bits.bit_2 == 1)
  2644  0101  1D78               	btfss	_Fflush1,2	;volatile
  2645  0102  0008               	return
  2646                           
  2647                           ;flush.c: 94: {
  2648                           ;flush.c: 95: Fflush1.bits.bit_2 = 0;
  2649  0103  1178               	bcf	_Fflush1,2	;volatile
  2650                           
  2651                           ;flush.c: 96: Fflush1.bits.bit_3 = 1;
  2652  0104  15F8               	bsf	_Fflush1,3	;volatile
  2653  0105  0008               	return
  2654  0106                     __end_of_FlushJudge:	
  2655  0106                     PL2:	
  2656  0106  1778               	bsf	_Fflush1,6	;volatile
  2657  0107  1105               	bcf	5,2	;volatile
  2658  0108  1205               	bcf	5,4	;volatile
  2659  0109  0AAC               	incf	_CNTflush,f	;volatile
  2660  010A  1903               	skipnz
  2661  010B  0AAD               	incf	_CNTflush+1,f	;volatile
  2662  010C  3000               	movlw	0
  2663  010D  022D               	subwf	_CNTflush+1,w	;volatile
  2664  010E  3405               	retlw	5
  2665  010F                     __end_ofPL2:	
  2666  010F                     PL4:	
  2667  010F  1778               	bsf	_Fflush1,6	;volatile
  2668  0110  1105               	bcf	5,2	;volatile
  2669  0111  1605               	bsf	5,4	;volatile
  2670  0112  0AAC               	incf	_CNTflush,f	;volatile
  2671  0113  1903               	skipnz
  2672  0114  0AAD               	incf	_CNTflush+1,f	;volatile
  2673  0115  3000               	movlw	0
  2674  0116  022D               	subwf	_CNTflush+1,w	;volatile
  2675  0117  340A               	retlw	10
  2676  0118                     __end_ofPL4:	
  2677                           
  2678                           	psect	text19
  2679  0370                     __ptext19:	
  2680 ;; *************** function _Delay_nms *****************
  2681 ;; Defined at:
  2682 ;;		line 38 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\main.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;  inittempl       2    4[COMMON] unsigned int 
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;  i               2    0[BANK0 ] unsigned int 
  2687 ;;  gtemp           1    2[BANK0 ] unsigned char 
  2688 ;; Return value:  Size  Location     Type
  2689 ;;                  1    wreg      void 
  2690 ;; Registers used:
  2691 ;;		wreg, status,2, status,0, pclath, cstack
  2692 ;; Tracked objects:
  2693 ;;		On entry : 300/100
  2694 ;;		On exit  : 300/0
  2695 ;;		Unchanged: 0/0
  2696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2697 ;;      Params:         2       0       0       0       0
  2698 ;;      Locals:         0       3       0       0       0
  2699 ;;      Temps:          0       0       0       0       0
  2700 ;;      Totals:         2       3       0       0       0
  2701 ;;Total ram usage:        5 bytes
  2702 ;; Hardware stack levels used:    1
  2703 ;; Hardware stack levels required when called:    3
  2704 ;; This function calls:
  2705 ;;		_Delay
  2706 ;; This function is called by:
  2707 ;;		_main
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           
  2712                           ;psect for function _Delay_nms
  2713  0370                     _Delay_nms:	
  2714                           
  2715                           ;main.c: 40: unsigned int i;
  2716                           ;main.c: 41: unsigned char gtemp;
  2717                           ;main.c: 43: gtemp = 0;
  2718                           
  2719                           ;incstack = 0
  2720                           ; Regs used in _Delay_nms: [wreg+status,2+status,0+pclath+cstack]
  2721  0370  1283               	bcf	3,5	;RP0=0, select bank0
  2722  0371  01C6               	clrf	Delay_nms@gtemp
  2723                           
  2724                           ;main.c: 44: if (GIE == 1)
  2725  0372  1F8B               	btfss	11,7	;volatile
  2726  0373  2B77               	goto	l6046
  2727                           
  2728                           ;main.c: 45: {
  2729                           ;main.c: 46: gtemp = 1;
  2730  0374  01C6               	clrf	Delay_nms@gtemp
  2731  0375  0AC6               	incf	Delay_nms@gtemp,f
  2732                           
  2733                           ;main.c: 47: GIE = 0;
  2734  0376  138B               	bcf	11,7	;volatile
  2735  0377                     l6046:	
  2736                           
  2737                           ;main.c: 48: }
  2738                           ;main.c: 49: for (i = 0; i < inittempl; i++)
  2739  0377  01C4               	clrf	Delay_nms@i
  2740  0378  01C5               	clrf	Delay_nms@i+1
  2741  0379                     l6052:	
  2742  0379  0875               	movf	Delay_nms@inittempl+1,w
  2743  037A  0245               	subwf	Delay_nms@i+1,w
  2744  037B  1D03               	skipz
  2745  037C  2B7F               	goto	u1485
  2746  037D  0874               	movf	Delay_nms@inittempl,w
  2747  037E  0244               	subwf	Delay_nms@i,w
  2748  037F                     u1485:	
  2749  037F  1803               	btfsc	3,0
  2750  0380  2B8E               	goto	l6054
  2751                           
  2752                           ;main.c: 50: {
  2753                           ;main.c: 51: Delay(154);
  2754  0381  309A               	movlw	154
  2755  0382  00F2               	movwf	Delay@dtemp
  2756  0383  01F3               	clrf	Delay@dtemp+1
  2757  0384  2392  120A  118A   	fcall	_Delay
  2758  0387  0064               	clrwdt	;# 
  2759  0388  1283               	bcf	3,5	;RP0=0, select bank0
  2760  0389  1303               	bcf	3,6	;RP1=0, select bank0
  2761  038A  0AC4               	incf	Delay_nms@i,f
  2762  038B  1903               	skipnz
  2763  038C  0AC5               	incf	Delay_nms@i+1,f
  2764  038D  2B79               	goto	l6052
  2765  038E                     l6054:	
  2766                           
  2767                           ;main.c: 53: }
  2768                           ;main.c: 54: if (gtemp == 1)
  2769  038E  0B46               	decfsz	Delay_nms@gtemp,w
  2770  038F  0008               	return
  2771                           
  2772                           ;main.c: 55: GIE = 1;
  2773  0390  178B               	bsf	11,7	;volatile
  2774  0391  0008               	return
  2775  0392                     __end_of_Delay_nms:	
  2776  0392                     __ptext20:	
  2777 ;; *************** function _Delay *****************
  2778 ;; Defined at:
  2779 ;;		line 30 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\main.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  dtemp           2    2[COMMON] unsigned int 
  2782 ;; Auto vars:     Size  Location     Type
  2783 ;;		None
  2784 ;; Return value:  Size  Location     Type
  2785 ;;                  1    wreg      void 
  2786 ;; Registers used:
  2787 ;;		wreg, status,2, status,0
  2788 ;; Tracked objects:
  2789 ;;		On entry : 200/0
  2790 ;;		On exit  : 200/0
  2791 ;;		Unchanged: 200/0
  2792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2793 ;;      Params:         2       0       0       0       0
  2794 ;;      Locals:         0       0       0       0       0
  2795 ;;      Temps:          0       0       0       0       0
  2796 ;;      Totals:         2       0       0       0       0
  2797 ;;Total ram usage:        2 bytes
  2798 ;; Hardware stack levels used:    1
  2799 ;; Hardware stack levels required when called:    2
  2800 ;; This function calls:
  2801 ;;		Nothing
  2802 ;; This function is called by:
  2803 ;;		_Delay_nms
  2804 ;; This function uses a non-reentrant model
  2805 ;;
  2806                           
  2807                           
  2808                           ;psect for function _Delay
  2809  0392                     _Delay:	
  2810  0392                     l6038:	
  2811                           ;main.c: 32: while (dtemp--)
  2812                           
  2813                           ;incstack = 0
  2814                           ; Regs used in _Delay: [wreg+status,2+status,0]
  2815                           
  2816  0392  3001               	movlw	1
  2817  0393  02F2               	subwf	Delay@dtemp,f
  2818  0394  3000               	movlw	0
  2819  0395  1C03               	skipc
  2820  0396  03F3               	decf	Delay@dtemp+1,f
  2821  0397  02F3               	subwf	Delay@dtemp+1,f
  2822  0398  0F72               	incfsz	Delay@dtemp,w
  2823  0399  2B92               	goto	l6038
  2824  039A  0A73               	incf	Delay@dtemp+1,w
  2825  039B  1903               	btfsc	3,2
  2826  039C  0008               	return
  2827  039D  2B92               	goto	l6038
  2828  039E                     __end_of_Delay:	
  2829                           
  2830                           	psect	text21
  2831  0334                     __ptext21:	
  2832 ;; *************** function _Int_ALL *****************
  2833 ;; Defined at:
  2834 ;;		line 562 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\main.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;		None
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;		None
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  1    wreg      void 
  2841 ;; Registers used:
  2842 ;;		wreg, status,2, status,0, pclath, cstack
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 300/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2848 ;;      Params:         0       0       0       0       0
  2849 ;;      Locals:         0       0       0       0       0
  2850 ;;      Temps:          2       0       0       0       0
  2851 ;;      Totals:         2       0       0       0       0
  2852 ;;Total ram usage:        2 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; Hardware stack levels required when called:    1
  2855 ;; This function calls:
  2856 ;;		_INT_LED_SHOW
  2857 ;; This function is called by:
  2858 ;;		Interrupt level 1
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           
  2863                           ;psect for function _Int_ALL
  2864  0334                     _Int_ALL:	
  2865                           
  2866                           ;main.c: 565: if (TMR1IF)
  2867  0334  1283               	bcf	3,5	;RP0=0, select bank0
  2868  0335  1303               	bcf	3,6	;RP1=0, select bank0
  2869  0336  1C0C               	btfss	12,0	;volatile
  2870  0337  2B4C               	goto	i1l6030
  2871                           
  2872                           ;main.c: 566: {
  2873                           ;main.c: 572: TMR1 = 0xE0C0;
  2874  0338  30E0               	movlw	224
  2875  0339  008F               	movwf	15	;volatile
  2876  033A  30C0               	movlw	192
  2877  033B  008E               	movwf	14	;volatile
  2878                           
  2879                           ;main.c: 573: TMR1IF = 0;
  2880  033C  100C               	bcf	12,0	;volatile
  2881                           
  2882                           ;main.c: 576: Fsys1.bits.bit_1 = 1;
  2883  033D  14C3               	bsf	_Fsys1,1	;volatile
  2884                           
  2885                           ;main.c: 579: if (++MainTime_1s >= 1000)
  2886  033E  0AB0               	incf	_MainTime_1s,f	;volatile
  2887  033F  1903               	skipnz
  2888  0340  0AB1               	incf	_MainTime_1s+1,f	;volatile
  2889  0341  3003               	movlw	3
  2890  0342  0231               	subwf	_MainTime_1s+1,w	;volatile
  2891  0343  30E8               	movlw	232
  2892  0344  1903               	skipnz
  2893  0345  0230               	subwf	_MainTime_1s,w	;volatile
  2894  0346  1C03               	skipc
  2895  0347  2B4C               	goto	i1l6030
  2896                           
  2897                           ;main.c: 580: {
  2898                           ;main.c: 581: MainTime_1s = 0;
  2899  0348  01B0               	clrf	_MainTime_1s	;volatile
  2900  0349  01B1               	clrf	_MainTime_1s+1	;volatile
  2901                           
  2902                           ;main.c: 582: Fsys1s.byte = 0xFF;
  2903  034A  30FF               	movlw	255
  2904  034B  00C2               	movwf	_Fsys1s	;volatile
  2905  034C                     i1l6030:	
  2906                           
  2907                           ;main.c: 590: }
  2908                           ;main.c: 591: }
  2909                           ;main.c: 594: if (TMR2IF)
  2910  034C  1C8C               	btfss	12,1	;volatile
  2911  034D  2B50               	goto	i1l1971
  2912                           
  2913                           ;main.c: 595: {
  2914                           ;main.c: 596: TMR2IF = 0;
  2915  034E  108C               	bcf	12,1	;volatile
  2916                           
  2917                           ;main.c: 597: INT_LED_SHOW();
  2918  034F  2357               	fcall	_INT_LED_SHOW
  2919  0350                     i1l1971:	
  2920  0350  0871               	movf	??_Int_ALL+1,w
  2921  0351  008A               	movwf	10
  2922  0352  0E70               	swapf	??_Int_ALL^(0+-128),w
  2923  0353  0083               	movwf	3
  2924  0354  0EFE               	swapf	126,f
  2925  0355  0E7E               	swapf	126,w
  2926  0356  0009               	retfie
  2927  0357                     __end_of_Int_ALL:	
  2928  0357                     __ptext22:	
  2929 ;; *************** function _INT_LED_SHOW *****************
  2930 ;; Defined at:
  2931 ;;		line 192 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133(2)\ABM007_79F133\source\light.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;		None
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;		None
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      void 
  2938 ;; Registers used:
  2939 ;;		wreg, status,2, status,0
  2940 ;; Tracked objects:
  2941 ;;		On entry : 300/0
  2942 ;;		On exit  : 300/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2945 ;;      Params:         0       0       0       0       0
  2946 ;;      Locals:         0       0       0       0       0
  2947 ;;      Temps:          0       0       0       0       0
  2948 ;;      Totals:         0       0       0       0       0
  2949 ;;Total ram usage:        0 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; This function calls:
  2952 ;;		Nothing
  2953 ;; This function is called by:
  2954 ;;		_Int_ALL
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           
  2959                           ;psect for function _INT_LED_SHOW
  2960  0357                     _INT_LED_SHOW:	
  2961                           
  2962                           ;light.c: 194: if(FledBits01.bits.bit_0 == 1)
  2963                           
  2964                           ;incstack = 0
  2965                           ; Regs used in _INT_LED_SHOW: [wreg+status,2+status,0]
  2966  0357  1C79               	btfss	_FledBits01,0	;volatile
  2967  0358  0008               	return
  2968                           
  2969                           ;light.c: 195: {
  2970                           ;light.c: 196: if (++CNTbreath_Led == 80)
  2971  0359  0AB6               	incf	_CNTbreath_Led,f	;volatile
  2972  035A  1903               	skipnz
  2973  035B  0AB7               	incf	_CNTbreath_Led+1,f	;volatile
  2974  035C  3050               	movlw	80
  2975  035D  0636               	xorwf	_CNTbreath_Led,w	;volatile
  2976  035E  0437               	iorwf	_CNTbreath_Led+1,w	;volatile
  2977  035F  1D03               	btfss	3,2
  2978  0360  2B64               	goto	i1l5918
  2979                           
  2980                           ;light.c: 197: {
  2981                           ;light.c: 198: CNTbreath_Led = 0;
  2982  0361  01B6               	clrf	_CNTbreath_Led	;volatile
  2983  0362  01B7               	clrf	_CNTbreath_Led+1	;volatile
  2984                           
  2985                           ;light.c: 199: RA5 = 0;
  2986  0363  1285               	bcf	5,5	;volatile
  2987  0364                     i1l5918:	
  2988                           
  2989                           ;light.c: 200: }
  2990                           ;light.c: 201: if (CNTbreath_Led >= CNTbreath_Led2)
  2991  0364  0877               	movf	_CNTbreath_Led2+1,w	;volatile
  2992  0365  0237               	subwf	_CNTbreath_Led+1,w	;volatile
  2993  0366  1D03               	skipz
  2994  0367  2B6A               	goto	u137_25
  2995  0368  0876               	movf	_CNTbreath_Led2,w	;volatile
  2996  0369  0236               	subwf	_CNTbreath_Led,w	;volatile
  2997  036A                     u137_25:	
  2998  036A  1C03               	skipc
  2999  036B  2B6E               	goto	i1l965
  3000                           
  3001                           ;light.c: 202: {
  3002                           ;light.c: 203: RA5 = 1;
  3003  036C  1685               	bsf	5,5	;volatile
  3004                           
  3005                           ;light.c: 204: }
  3006  036D  0008               	return
  3007  036E                     i1l965:	
  3008                           
  3009                           ;light.c: 205: else
  3010                           ;light.c: 206: {
  3011                           ;light.c: 207: RA5 = 0;
  3012  036E  1285               	bcf	5,5	;volatile
  3013  036F  0008               	return
  3014  0370                     __end_of_INT_LED_SHOW:	
  3015  007E                     btemp	set	126	;btemp
  3016  007E                     wtemp0	set	126
  3017                           
  3018                           	psect	intentry
  3019  0004                     __pintentry:	
  3020                           ;incstack = 0
  3021                           ; Regs used in _Int_ALL: [wreg+status,2+status,0+pclath+cstack]
  3022                           
  3023  0004                     interrupt_function:	
  3024  007E                     saved_w	set	btemp
  3025  0004  00FE               	movwf	btemp
  3026  0005  0E03               	swapf	3,w
  3027  0006  00F0               	movwf	??_Int_ALL
  3028  0007  080A               	movf	10,w
  3029  0008  00F1               	movwf	??_Int_ALL+1
  3030  0009  120A  118A  2B34   	ljmp	_Int_ALL


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      11
    BANK0            80      3      39
    BANK1            80      0       0
    BANK3            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Delay_nms
    _GsensorLoop->_SensorControl
    _Delay_nms->_Delay

Critical Paths under _Int_ALL in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Delay_nms

Critical Paths under _Int_ALL in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Int_ALL in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Int_ALL in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Int_ALL in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     244
                          _Delay_nms
                         _GflushLoop
                           _GledLoop
                        _GsensorLoop
                          _Init_GPIO
                            _Init_IC
                        _Init_TIMER1
                        _Init_TIMER2
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_IC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_GPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GsensorLoop                                          0     0      0       0
                      _SensorControl
                        _SensorJudge
                          _SensorKey
                         _SensorTime
 ---------------------------------------------------------------------------------
 (2) _SensorTime                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorKey                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorJudge                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorControl                                        1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GledLoop                                             0     0      0       0
                            _LED_Con
                          _LED_Judge
                            _LED_Key
                           _LED_Time
 ---------------------------------------------------------------------------------
 (2) _LED_Time                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Key                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Judge                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Con                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GflushLoop                                           0     0      0       0
                           _FlushCon
                         _FlushJudge
                          _FlushTime
 ---------------------------------------------------------------------------------
 (2) _FlushTime                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FlushJudge                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FlushCon                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay_nms                                            5     3      2     244
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _Delay                                                2     0      2      85
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Int_ALL                                              2     2      0       0
                                              0 COMMON     2     2      0
                       _INT_LED_SHOW
 ---------------------------------------------------------------------------------
 (4) _INT_LED_SHOW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_nms
     _Delay
   _GflushLoop
     _FlushCon
     _FlushJudge
     _FlushTime
   _GledLoop
     _LED_Con
     _LED_Judge
     _LED_Key
     _LED_Time
   _GsensorLoop
     _SensorControl
     _SensorJudge
     _SensorKey
     _SensorTime
   _Init_GPIO
   _Init_IC
   _Init_TIMER1
   _Init_TIMER2

 _Int_ALL (ROOT)
   _INT_LED_SHOW

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      3      27       4       48.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BITBANK3            50      0       0       7        0.0%
BANK3               50      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
ABS                  0      0      32      11        0.0%
DATA                 0      0      32      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Dec 07 11:16:54 2023

                     PL2 0106                       PL4 010F                       PL6 0205  
                     PL8 02C5                       fsr 0004                      PL10 02CB  
                    _GIE 005F                      _RA2 002A                      _RB1 0031  
                    _RA4 002C                      _RA5 002D                      _PR2 0092  
                    indf 0000          __end_of_LED_Con 02BD          __end_of_LED_Key 0219  
                   l2900 0036                     l2910 0065                     l2903 004A  
                   l2920 00A5                     l2912 0077                     l2905 0054  
                   l2922 00B1                     l2914 0083                     l2923 00BA  
                   l6052 0379                     l2916 008F                     l2908 0059  
                   l6038 0392                     l6054 038E                     l6046 0377  
                   l2918 00A1                     l6080 02FF                     l2890 0101  
                   l2882 00EC                     l6082 0305                     l6074 02F2  
                   l2883 00F2                     l2884 00F0                     l5620 021C  
                   l3860 0177                     l3862 018B                     l6078 02F9  
                   l6086 030B                     l2895 0028                     l3871 01B7  
                   l2888 00FB                     l3848 0142                     l6088 032B  
                   l5810 00C3                     l5642 0257                     l5634 0238  
                   l5618 02C3                     l3866 01A3                     l3875 01CF  
                   l5740 0031                     l5732 0027                     l5652 0247  
                   l5644 0243                     l5708 02B6                     l3885 016F  
                   l5670 0278                     l3886 0170                     l5736 002F  
                   l5680 027F                     l5664 026C                     l5832 0147  
                   l5826 013A                     l5668 0276                     l5678 029D  
                   l5854 01A0                     l5846 0188                     l5696 028A  
                   l5688 0286                     l5864 01AA                     l5890 01F0  
                   l5858 017A                     l5884 01E2                     l5876 01CC  
                   l5868 01B4                     l5886 01E5                     l5896 01F3  
                   l5898 015B                     u1300 0167                     u1302 0168  
                   u1330 0174                     u1290 0161                     u1292 0162  
                   u1485 037F                     _PIE1 008C                     _PIE2 008D  
                   _PIR1 000C                     _PIR2 000D                     _TMR1 000E  
                   _WPUA 018E                     _WPUB 0095                     _WPUC 018F  
                   _main 02D1            ??_Init_TIMER1 0072            ??_Init_TIMER2 0072  
                   btemp 007E                     start 000C       __size_of_LED_Judge 0008  
             _FledBits01 0079          __end_of_Int_ALL 0357          __end_of_Init_IC 03B0  
       __end_of_LED_Time 021C            ??_GsensorLoop 0073                    ?_main 0070  
                  _T1CON 0010                    _T2CON 0012                    i1l965 036E  
                  _PORTA 0005                    _PORTB 0006                    _PORTC 0007  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _Delay 0392                    _Fsys1 0043               _GflushLoop 001F  
                  _templ 003F                    pclath 000A                    status 0003  
                  wtemp0 007E               _FlushJudge 00E7         __end_of_GledLoop 0218  
        __initialization 000F             __end_of_main 0334      __end_of_Init_TIMER1 03D7  
    __end_of_Init_TIMER2 03CC         __end_of_FlushCon 00E7       __size_of_Delay_nms 0022  
                 ??_main 0076              _Fbodysensor 007A                ??_LED_Con 0072  
              ??_LED_Key 0072                   ?_Delay 0072        __end_of_LED_Judge 02C5  
  __end_of_SensorControl 0176      __end_of_GsensorLoop 0122                   i1l6030 034C  
                 i1l1971 0350                   i1l5918 0364                   _INTCON 000B  
                 u137_25 036A                   _CNTfct 0020       __size_of_Init_GPIO 0011  
                 _OSCCON 008F                   _TMR1IE 0460                   _TMR1IF 0060  
                 _TMR2IE 0461                   _TMR2IF 0061       __size_of_FlushTime 0001  
          ?_INT_LED_SHOW 0070                   _WDTCON 0105                ??_Int_ALL 0070  
              ??_Init_IC 0072                   _RX_Buf 0040            _CNTbodyInTime 0024  
                 _Fsys1m 0041                   _Fsys1s 0042            _CNTbreath_Led 0036  
             _SensorTime 0123            ??_SensorJudge 0072              _MainTime_1s 0030  
     __size_of_SensorKey 0001                   saved_w 007E       Delay_nms@inittempl 0074  
            ?_GflushLoop 0070           ??_INT_LED_SHOW 0070        __end_of_Delay_nms 0392  
__end_of__initialization 001B                ?_LED_Time 0070              _Init_TIMER1 03CC  
            _Init_TIMER2 03C1              ?_FlushJudge 0070            __end_of_Delay 039E  
         __pcstackCOMMON 0070               __end_ofPL2 010F               __end_ofPL4 0118  
             __end_ofPL6 020E               __end_ofPL8 02CB        __end_of_Init_GPIO 03C1  
      __end_of_FlushTime 0027              _GsensorLoop 0118      __end_of_SensorJudge 0205  
                ??_Delay 0074                ?_GledLoop 0070               __pbssBANK0 0020  
             _fctBits001 0039                ?_FlushCon 0070               ??_LED_Time 0072  
      __end_of_SensorKey 0123               __pmaintext 02D1              ?_SensorTime 0070  
             __pintentry 0004      __size_of_GflushLoop 0007                  _LED_Con 021C  
                _LED_Key 0218      __size_of_FlushJudge 001F               ??_GledLoop 0072  
                _SEQbody 003A                  _SEQmain 003E               ??_FlushCon 0072  
                _Fflush1 0078                  _Int_ALL 0334                  _Init_IC 039E  
         _CNTbreath_Led1 0034           _CNTbreath_Led2 0076           _CNTbreath_Led3 0032  
            _SensorJudge 0176     __end_of_INT_LED_SHOW 0370                  __ptext0 0000  
                __ptext1 03C1                  __ptext2 03CC                  __ptext3 039E  
                __ptext4 03B0                  __ptext5 0118                  __ptext6 0123  
                __ptext7 0122                  __ptext8 0176                  __ptext9 015B  
              _AD_Result 002E                  clrloop0 03D8                _LED_Judge 02BD  
   end_of_initialization 001B      __size_of_SensorTime 0038                _CNTbody_h 002A  
              _CNTbody_l 0028           Delay_nms@gtemp 0046             ??_GflushLoop 0072  
             ?_LED_Judge 0070             ?_Init_TIMER1 0070             ?_Init_TIMER2 0070  
           ??_FlushJudge 0072                _BufCntAdd 0026                _Delay_nms 0370  
      __size_of_LED_Time 0003   __size_of_SensorControl 001B       __end_of_GflushLoop 0026  
           ?_GsensorLoop 0070              __end_ofPL10 02D1      start_initialization 000F  
              _Init_GPIO 03B0                _FlushTime 0026       __end_of_FlushJudge 0106  
      __size_of_GledLoop 000A        __size_of_FlushCon 00C0               ?_Delay_nms 0074  
              _SensorKey 0122    __size_of_INT_LED_SHOW 0019             ??_SensorTime 0072  
               ?_LED_Con 0070                 ?_LED_Key 0070              __pbssCOMMON 0076  
             ?_Init_GPIO 0070                ___latbits 0002            __pcstackBANK0 0044  
             ?_FlushTime 0070            _SensorControl 015B              ??_LED_Judge 0072  
     __end_of_SensorTime 015B             _INT_LED_SHOW 0357                 ?_Int_ALL 0070  
               ?_Init_IC 0070               ?_SensorKey 0070             ?_SensorJudge 0070  
         __size_of_Delay 000C           ?_SensorControl 0070        interrupt_function 0004  
               _LED_Time 0219                clear_ram0 03D7                 _CNTflush 002C  
            ??_Delay_nms 0076     __size_of_Init_TIMER1 000B     __size_of_Init_TIMER2 000B  
               _SEQflsuh 003C     __size_of_GsensorLoop 000A              ??_Init_GPIO 0072  
       __size_of_LED_Con 00A1         __size_of_LED_Key 0001              ??_FlushTime 0072  
               _GledLoop 020E                 _FlushCon 0027         __size_of_Int_ALL 0023  
       __size_of_Init_IC 0012          _CNTbodyExitTime 0022              _CNTfctStart 0038  
            ??_SensorKey 0072          ??_SensorControl 0072                 __ptext10 020E  
               __ptext11 0219                 __ptext20 0392                 __ptext12 0218  
               __ptext21 0334                 __ptext13 02BD                 __ptext22 0357  
               __ptext14 021C                 __ptext15 001F                 __ptext16 0026  
               __ptext17 00E7                 __ptext18 0027                 __ptext19 0370  
          __size_of_main 0063          _u8stsBodySensor 003B            _MainTime_1min 003D  
             Delay@dtemp 0072     __size_of_SensorJudge 008F               Delay_nms@i 0044  
               intlevel1 0000               _OPTION_REG 0081  
