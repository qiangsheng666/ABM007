

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sun Apr 28 17:54:25 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	79F133
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text10,local,class=CODE,merge=1,delta=2
    18                           	psect	text15,local,class=CODE,merge=1,delta=2
    19                           	psect	text19,local,class=CODE,merge=1,delta=2
    20                           	psect	text22,local,class=CODE,merge=1,delta=2
    21                           	psect	text24,local,class=CODE,merge=1,delta=2
    22                           	psect	intentry,global,class=CODE,delta=2
    23                           	psect	pa_nodes0,global,class=CODE,delta=2
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F887 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	text0
    62  0000                     __ptext0:	
    63  000E                     _TMR1	set	14
    64  0012                     _T2CON	set	18
    65  0010                     _T1CON	set	16
    66  000D                     _PIR2	set	13
    67  000C                     _PIR1	set	12
    68  000B                     _INTCON	set	11
    69  0007                     _PORTC	set	7
    70  0006                     _PORTB	set	6
    71  0005                     _PORTA	set	5
    72  0060                     _TMR1IF	set	96
    73  0061                     _TMR2IF	set	97
    74  005F                     _GIE	set	95
    75  0030                     _RB0	set	48
    76  0031                     _RB1	set	49
    77  002A                     _RA2	set	42
    78  002C                     _RA4	set	44
    79  002D                     _RA5	set	45
    80  0095                     _WPUB	set	149
    81  0092                     _PR2	set	146
    82  008F                     _OSCCON	set	143
    83  008D                     _PIE2	set	141
    84  008C                     _PIE1	set	140
    85  0087                     _TRISC	set	135
    86  0086                     _TRISB	set	134
    87  0085                     _TRISA	set	133
    88  0081                     _OPTION_REG	set	129
    89  0460                     _TMR1IE	set	1120
    90  0461                     _TMR2IE	set	1121
    91  0105                     _WDTCON	set	261
    92  018F                     _WPUC	set	399
    93  018E                     _WPUA	set	398
    94                           
    95                           	psect	cinit
    96  000F                     start_initialization:	
    97                           ; #config settings
    98                           
    99  000F                     __initialization:	
   100  000F  3020               	movlw	low __pbssBANK0
   101                           
   102                           ; Clear objects allocated to COMMON
   103  0010  01F6               	clrf	__pbssCOMMON& (0+127)
   104  0011  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   105  0012  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   106  0013  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   107  0014  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
   108                           
   109                           ; Clear objects allocated to BANK0
   110  0015  1383               	bcf	3,7	;select IRP bank0
   111  0016  0084               	movwf	4
   112  0017  3046               	movlw	low (__pbssBANK0+38)
   113  0018  120A  118A  2388   	fcall	clear_ram0
   114  001B                     end_of_initialization:	
   115                           ;End of C runtime variable initialization code
   116                           
   117  001B                     __end_of__initialization:	
   118  001B  0183               	clrf	3
   119  001C  120A  118A  2A0A   	ljmp	_main	;jump to C main() function
   120                           
   121                           	psect	bssCOMMON
   122  0076                     __pbssCOMMON:	
   123  0076                     _CNTflush:	
   124  0076                     	ds	2
   125  0078                     _Fflush1:	
   126  0078                     	ds	1
   127  0079                     _fctBits001:	
   128  0079                     	ds	1
   129  007A                     _Fbodysensor:	
   130  007A                     	ds	1
   131                           
   132                           	psect	bssBANK0
   133  0020                     __pbssBANK0:	
   134  0020                     _CNTfct:	
   135  0020                     	ds	2
   136  0022                     _CNTbodyExitTime:	
   137  0022                     	ds	2
   138  0024                     _CNTbodyInTime:	
   139  0024                     	ds	2
   140  0026                     _BufCntAdd:	
   141  0026                     	ds	2
   142  0028                     _CNTbody_l:	
   143  0028                     	ds	2
   144  002A                     _CNTbody_h:	
   145  002A                     	ds	2
   146  002C                     _AD_Result:	
   147  002C                     	ds	2
   148  002E                     _MainTime_1s:	
   149  002E                     	ds	2
   150  0030                     _CNTbreath_Led3:	
   151  0030                     	ds	2
   152  0032                     _CNTbreath_Led2:	
   153  0032                     	ds	2
   154  0034                     _CNTbreath_Led1:	
   155  0034                     	ds	2
   156  0036                     _CNTbreath_Led:	
   157  0036                     	ds	2
   158  0038                     _CNTfctFlashLed:	
   159  0038                     	ds	1
   160  0039                     _CNTfctSensior:	
   161  0039                     	ds	1
   162  003A                     _CNTfctStart:	
   163  003A                     	ds	1
   164  003B                     _SEQbody:	
   165  003B                     	ds	1
   166  003C                     _u8stsBodySensor:	
   167  003C                     	ds	1
   168  003D                     _SEQflsuh:	
   169  003D                     	ds	1
   170  003E                     _MainTime_1min:	
   171  003E                     	ds	1
   172  003F                     _SEQmain:	
   173  003F                     	ds	1
   174  0040                     _templ:	
   175  0040                     	ds	1
   176  0041                     _RX_Buf:	
   177  0041                     	ds	1
   178  0042                     _FledBits01:	
   179  0042                     	ds	1
   180  0043                     _Fsys1m:	
   181  0043                     	ds	1
   182  0044                     _Fsys1s:	
   183  0044                     	ds	1
   184  0045                     _Fsys1:	
   185  0045                     	ds	1
   186                           
   187                           	psect	clrtext
   188  0388                     clear_ram0:	
   189                           ;	Called with FSR containing the base address, and
   190                           ;	W with the last address+1
   191                           
   192  0388  0064               	clrwdt	;clear the watchdog before getting into this loop
   193  0389                     clrloop0:	
   194  0389  0180               	clrf	0	;clear RAM location pointed to by FSR
   195  038A  0A84               	incf	4,f	;increment pointer
   196  038B  0604               	xorwf	4,w	;XOR with final address
   197  038C  1903               	btfsc	3,2	;have we reached the end yet?
   198  038D  3400               	retlw	0	;all done for this memory range, return
   199  038E  0604               	xorwf	4,w	;XOR again to restore value
   200  038F  2B89               	goto	clrloop0	;do the next byte
   201                           
   202                           	psect	cstackCOMMON
   203  0070                     __pcstackCOMMON:	
   204  0070                     ?_LED_Time:	
   205  0070                     ?_LED_Key:	
   206                           ; 1 bytes @ 0x0
   207                           
   208  0070                     ?_LED_Judge:	
   209                           ; 1 bytes @ 0x0
   210                           
   211  0070                     ?_LED_Con:	
   212                           ; 1 bytes @ 0x0
   213                           
   214  0070                     ?_FCTloop:	
   215                           ; 1 bytes @ 0x0
   216                           
   217  0070                     ?_GsensorLoop:	
   218                           ; 1 bytes @ 0x0
   219                           
   220  0070                     ?_GflushLoop:	
   221                           ; 1 bytes @ 0x0
   222                           
   223  0070                     ?_FlushTime:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0070                     ?_FlushJudge:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ?_FlushCon:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     ?_SensorKey:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ?_SensorTime:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0070                     ?_SensorJudge:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ?_SensorControl:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_FCTkey:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_FCTjudge:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_GledLoop:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_INT_LED_SHOW:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ??_INT_LED_SHOW:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_Init_GPIO:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ?_Init_IC:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ?_Init_TIMER1:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_Init_TIMER2:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ?_main:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ?_Int_ALL:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ??_Int_ALL:	
   278                           ; 1 bytes @ 0x0
   279                           
   280                           
   281                           ; 1 bytes @ 0x0
   282  0070                     	ds	2
   283  0072                     ??_LED_Time:	
   284  0072                     ??_LED_Key:	
   285                           ; 1 bytes @ 0x2
   286                           
   287  0072                     ??_LED_Judge:	
   288                           ; 1 bytes @ 0x2
   289                           
   290  0072                     ??_LED_Con:	
   291                           ; 1 bytes @ 0x2
   292                           
   293  0072                     ??_FCTloop:	
   294                           ; 1 bytes @ 0x2
   295                           
   296  0072                     ??_GflushLoop:	
   297                           ; 1 bytes @ 0x2
   298                           
   299  0072                     ??_FlushTime:	
   300                           ; 1 bytes @ 0x2
   301                           
   302  0072                     ??_FlushJudge:	
   303                           ; 1 bytes @ 0x2
   304                           
   305  0072                     ??_FlushCon:	
   306                           ; 1 bytes @ 0x2
   307                           
   308  0072                     ??_SensorKey:	
   309                           ; 1 bytes @ 0x2
   310                           
   311  0072                     ??_SensorTime:	
   312                           ; 1 bytes @ 0x2
   313                           
   314  0072                     ??_SensorJudge:	
   315                           ; 1 bytes @ 0x2
   316                           
   317  0072                     ??_SensorControl:	
   318                           ; 1 bytes @ 0x2
   319                           
   320  0072                     ??_FCTkey:	
   321                           ; 1 bytes @ 0x2
   322                           
   323  0072                     ??_FCTjudge:	
   324                           ; 1 bytes @ 0x2
   325                           
   326  0072                     ??_GledLoop:	
   327                           ; 1 bytes @ 0x2
   328                           
   329  0072                     ?_Delay:	
   330                           ; 1 bytes @ 0x2
   331                           
   332  0072                     ??_Init_GPIO:	
   333                           ; 1 bytes @ 0x2
   334                           
   335  0072                     ??_Init_IC:	
   336                           ; 1 bytes @ 0x2
   337                           
   338  0072                     ??_Init_TIMER1:	
   339                           ; 1 bytes @ 0x2
   340                           
   341  0072                     ??_Init_TIMER2:	
   342                           ; 1 bytes @ 0x2
   343                           
   344  0072                     Delay@dtemp:	
   345                           ; 1 bytes @ 0x2
   346                           
   347                           
   348                           ; 2 bytes @ 0x2
   349  0072                     	ds	1
   350  0073                     ??_GsensorLoop:	
   351                           
   352                           ; 1 bytes @ 0x3
   353  0073                     	ds	1
   354  0074                     ??_Delay:	
   355  0074                     ?_Delay_nms:	
   356                           ; 1 bytes @ 0x4
   357                           
   358  0074                     Delay_nms@inittempl:	
   359                           ; 1 bytes @ 0x4
   360                           
   361                           
   362                           ; 2 bytes @ 0x4
   363  0074                     	ds	2
   364  0076                     ??_Delay_nms:	
   365  0076                     ??_main:	
   366                           ; 1 bytes @ 0x6
   367                           
   368                           
   369                           	psect	cstackBANK0
   370  0046                     __pcstackBANK0:	
   371                           ; 1 bytes @ 0x6
   372                           
   373  0046                     Delay_nms@i:	
   374                           
   375                           ; 2 bytes @ 0x0
   376  0046                     	ds	2
   377  0048                     Delay_nms@gtemp:	
   378                           
   379                           ; 1 bytes @ 0x2
   380  0048                     	ds	1
   381                           
   382                           	psect	maintext
   383  020A                     __pmaintext:	
   384 ;;
   385 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   386 ;;
   387 ;; *************** function _main *****************
   388 ;; Defined at:
   389 ;;		line 473 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\main.c"
   390 ;; Parameters:    Size  Location     Type
   391 ;;		None
   392 ;; Auto vars:     Size  Location     Type
   393 ;;		None
   394 ;; Return value:  Size  Location     Type
   395 ;;                  1    wreg      void 
   396 ;; Registers used:
   397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   398 ;; Tracked objects:
   399 ;;		On entry : B00/0
   400 ;;		On exit  : 300/0
   401 ;;		Unchanged: 0/0
   402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   403 ;;      Params:         0       0       0       0       0
   404 ;;      Locals:         0       0       0       0       0
   405 ;;      Temps:          0       0       0       0       0
   406 ;;      Totals:         0       0       0       0       0
   407 ;;Total ram usage:        0 bytes
   408 ;; Hardware stack levels required when called:    4
   409 ;; This function calls:
   410 ;;		_Delay_nms
   411 ;;		_FCTloop
   412 ;;		_GflushLoop
   413 ;;		_GledLoop
   414 ;;		_GsensorLoop
   415 ;;		_Init_GPIO
   416 ;;		_Init_IC
   417 ;;		_Init_TIMER1
   418 ;;		_Init_TIMER2
   419 ;; This function is called by:
   420 ;;		Startup code after reset
   421 ;; This function uses a non-reentrant model
   422 ;;
   423                           
   424                           
   425                           ;psect for function _main
   426  020A                     _main:	
   427                           
   428                           ;incstack = 0
   429                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   430  020A  0000               	nop	;# 
   431  020B  0064               	clrwdt	;# 
   432                           
   433                           ;main.c: 478: INTCON = 0;
   434  020C  018B               	clrf	11	;volatile
   435                           
   436                           ;main.c: 480: Init_GPIO();
   437  020D  120A  118A  2360  120A  118A  	fcall	_Init_GPIO
   438                           
   439                           ;main.c: 481: Init_IC();
   440  0212  120A  118A  234E  120A  118A  	fcall	_Init_IC
   441                           
   442                           ;main.c: 482: Delay_nms(200);
   443  0217  30C8               	movlw	200
   444  0218  00F4               	movwf	Delay_nms@inittempl
   445  0219  01F5               	clrf	Delay_nms@inittempl+1
   446  021A  120A  118A  22DC  120A  118A  	fcall	_Delay_nms
   447                           
   448                           ;main.c: 483: Init_TIMER1();
   449  021F  120A  118A  237D  120A  118A  	fcall	_Init_TIMER1
   450                           
   451                           ;main.c: 484: Init_TIMER2();
   452  0224  120A  118A  2372  120A  118A  	fcall	_Init_TIMER2
   453                           
   454                           ;main.c: 495: INTCON = 0XC0;
   455  0229  30C0               	movlw	192
   456  022A  008B               	movwf	11	;volatile
   457  022B                     l5967:	
   458                           
   459                           ;main.c: 499: {
   460                           ;main.c: 501: if (Fsys1.bits.bit_1 == 1)
   461  022B  1CC5               	btfss	_Fsys1,1	;volatile
   462  022C  2A2B               	goto	l5967
   463  022D  0064               	clrwdt	;# 
   464                           
   465                           ;main.c: 504: Fsys1.bits.bit_1 = 0;
   466  022E  1283               	bcf	3,5	;RP0=0, select bank0
   467  022F  1303               	bcf	3,6	;RP1=0, select bank0
   468  0230  10C5               	bcf	_Fsys1,1	;volatile
   469                           
   470                           ;main.c: 505: switch (SEQmain)
   471  0231  2A50               	goto	l5981
   472  0232                     l5971:	
   473                           
   474                           ;main.c: 508: FCTloop();
   475  0232  120A  118A  2279  120A  118A  	fcall	_FCTloop
   476                           
   477                           ;main.c: 509: break;
   478  0237  2A70               	goto	l5983
   479  0238                     l1918:	
   480                           ;main.c: 510: case 1:
   481                           
   482                           
   483                           ;main.c: 511: if(fctBits001.bits.bit_0 == 0)
   484  0238  1879               	btfsc	_fctBits001,0	;volatile
   485  0239  2A70               	goto	l5983
   486                           
   487                           ;main.c: 512: {
   488                           ;main.c: 513: GsensorLoop();
   489  023A  120A  118A  201F  120A  118A  	fcall	_GsensorLoop
   490  023F  2A70               	goto	l5983
   491  0240                     l1922:	
   492                           ;main.c: 522: case 4:
   493                           
   494                           
   495                           ;main.c: 523: if(fctBits001.bits.bit_0 == 0)
   496  0240  1879               	btfsc	_fctBits001,0	;volatile
   497  0241  2A70               	goto	l5983
   498                           
   499                           ;main.c: 524: {
   500                           ;main.c: 525: GflushLoop();
   501  0242  120A  118A  2115  120A  118A  	fcall	_GflushLoop
   502  0247  2A70               	goto	l5983
   503  0248                     l1927:	
   504                           ;main.c: 537: case 8:
   505                           
   506                           
   507                           ;main.c: 538: if(fctBits001.bits.bit_0 == 0)
   508  0248  1879               	btfsc	_fctBits001,0	;volatile
   509  0249  2A70               	goto	l5983
   510                           
   511                           ;main.c: 539: {
   512                           ;main.c: 540: GledLoop();
   513  024A  120A  118A  232E  120A  118A  	fcall	_GledLoop
   514  024F  2A70               	goto	l5983
   515  0250                     l5981:	
   516  0250  083F               	movf	_SEQmain,w	;volatile
   517                           
   518                           ; Switch size 1, requested type "space"
   519                           ; Number of cases is 10, Range of values is 0 to 9
   520                           ; switch strategies available:
   521                           ; Name         Instructions Cycles
   522                           ; simple_byte           31    16 (average)
   523                           ; direct_byte           38     8 (fixed)
   524                           ; jumptable            260     6 (fixed)
   525                           ;	Chosen strategy is simple_byte
   526  0251  3A00               	xorlw	0	; case 0
   527  0252  1903               	skipnz
   528  0253  2A32               	goto	l5971
   529  0254  3A01               	xorlw	1	; case 1
   530  0255  1903               	skipnz
   531  0256  2A38               	goto	l1918
   532  0257  3A03               	xorlw	3	; case 2
   533  0258  1903               	skipnz
   534  0259  2A70               	goto	l5983
   535  025A  3A01               	xorlw	1	; case 3
   536  025B  1903               	skipnz
   537  025C  2A70               	goto	l5983
   538  025D  3A07               	xorlw	7	; case 4
   539  025E  1903               	skipnz
   540  025F  2A40               	goto	l1922
   541  0260  3A01               	xorlw	1	; case 5
   542  0261  1903               	skipnz
   543  0262  2A70               	goto	l5983
   544  0263  3A03               	xorlw	3	; case 6
   545  0264  1903               	skipnz
   546  0265  2A70               	goto	l5983
   547  0266  3A01               	xorlw	1	; case 7
   548  0267  1903               	skipnz
   549  0268  2A70               	goto	l5983
   550  0269  3A0F               	xorlw	15	; case 8
   551  026A  1903               	skipnz
   552  026B  2A48               	goto	l1927
   553  026C  3A01               	xorlw	1	; case 9
   554  026D  1903               	skipnz
   555  026E  2A70               	goto	l5983
   556  026F  2A70               	goto	l5983
   557  0270                     l5983:	
   558                           
   559                           ;main.c: 550: if (++SEQmain >= 10)
   560  0270  300A               	movlw	10
   561  0271  1283               	bcf	3,5	;RP0=0, select bank0
   562  0272  1303               	bcf	3,6	;RP1=0, select bank0
   563  0273  0ABF               	incf	_SEQmain,f	;volatile
   564  0274  023F               	subwf	_SEQmain,w	;volatile
   565  0275  1C03               	skipc
   566  0276  2A2B               	goto	l5967
   567                           
   568                           ;main.c: 551: {
   569                           ;main.c: 552: SEQmain = 0;
   570  0277  01BF               	clrf	_SEQmain	;volatile
   571  0278  2A2B               	goto	l5967
   572  0279                     __end_of_main:	
   573                           
   574                           	psect	text1
   575  0372                     __ptext1:	
   576 ;; *************** function _Init_TIMER2 *****************
   577 ;; Defined at:
   578 ;;		line 174 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\main.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;		None
   581 ;; Auto vars:     Size  Location     Type
   582 ;;		None
   583 ;; Return value:  Size  Location     Type
   584 ;;                  1    wreg      void 
   585 ;; Registers used:
   586 ;;		wreg
   587 ;; Tracked objects:
   588 ;;		On entry : 300/0
   589 ;;		On exit  : 300/0
   590 ;;		Unchanged: 0/0
   591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   592 ;;      Params:         0       0       0       0       0
   593 ;;      Locals:         0       0       0       0       0
   594 ;;      Temps:          0       0       0       0       0
   595 ;;      Totals:         0       0       0       0       0
   596 ;;Total ram usage:        0 bytes
   597 ;; Hardware stack levels used:    1
   598 ;; Hardware stack levels required when called:    2
   599 ;; This function calls:
   600 ;;		Nothing
   601 ;; This function is called by:
   602 ;;		_main
   603 ;; This function uses a non-reentrant model
   604 ;;
   605                           
   606                           
   607                           ;psect for function _Init_TIMER2
   608  0372                     _Init_TIMER2:	
   609                           
   610                           ;main.c: 176: PR2 = 24;
   611                           
   612                           ;incstack = 0
   613                           ; Regs used in _Init_TIMER2: [wreg]
   614  0372  3018               	movlw	24
   615  0373  1683               	bsf	3,5	;RP0=1, select bank1
   616  0374  0092               	movwf	18	;volatile
   617                           
   618                           ;main.c: 177: TMR2IF = 0;
   619  0375  1283               	bcf	3,5	;RP0=0, select bank0
   620  0376  108C               	bcf	12,1	;volatile
   621                           
   622                           ;main.c: 178: TMR2IE = 1;
   623  0377  1683               	bsf	3,5	;RP0=1, select bank1
   624  0378  148C               	bsf	12,1	;volatile
   625                           
   626                           ;main.c: 179: T2CON = 5;
   627  0379  3005               	movlw	5
   628  037A  1283               	bcf	3,5	;RP0=0, select bank0
   629  037B  0092               	movwf	18	;volatile
   630  037C  0008               	return
   631  037D                     __end_of_Init_TIMER2:	
   632                           
   633                           	psect	text2
   634  037D                     __ptext2:	
   635 ;; *************** function _Init_TIMER1 *****************
   636 ;; Defined at:
   637 ;;		line 152 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\main.c"
   638 ;; Parameters:    Size  Location     Type
   639 ;;		None
   640 ;; Auto vars:     Size  Location     Type
   641 ;;		None
   642 ;; Return value:  Size  Location     Type
   643 ;;                  1    wreg      void 
   644 ;; Registers used:
   645 ;;		wreg
   646 ;; Tracked objects:
   647 ;;		On entry : 300/0
   648 ;;		On exit  : 300/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   651 ;;      Params:         0       0       0       0       0
   652 ;;      Locals:         0       0       0       0       0
   653 ;;      Temps:          0       0       0       0       0
   654 ;;      Totals:         0       0       0       0       0
   655 ;;Total ram usage:        0 bytes
   656 ;; Hardware stack levels used:    1
   657 ;; Hardware stack levels required when called:    2
   658 ;; This function calls:
   659 ;;		Nothing
   660 ;; This function is called by:
   661 ;;		_main
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665                           
   666                           ;psect for function _Init_TIMER1
   667  037D                     _Init_TIMER1:	
   668                           
   669                           ;main.c: 156: TMR1 = 0xE0C0;
   670                           
   671                           ;incstack = 0
   672                           ; Regs used in _Init_TIMER1: [wreg]
   673  037D  30E0               	movlw	224
   674  037E  008F               	movwf	15	;volatile
   675  037F  30C0               	movlw	192
   676  0380  008E               	movwf	14	;volatile
   677                           
   678                           ;main.c: 157: TMR1IF = 0;
   679  0381  100C               	bcf	12,0	;volatile
   680                           
   681                           ;main.c: 158: TMR1IE = 1;
   682  0382  1683               	bsf	3,5	;RP0=1, select bank1
   683  0383  140C               	bsf	12,0	;volatile
   684                           
   685                           ;main.c: 159: T1CON = 0x01;
   686  0384  3001               	movlw	1
   687  0385  1283               	bcf	3,5	;RP0=0, select bank0
   688  0386  0090               	movwf	16	;volatile
   689  0387  0008               	return
   690  0388                     __end_of_Init_TIMER1:	
   691                           
   692                           	psect	text3
   693  034E                     __ptext3:	
   694 ;; *************** function _Init_IC *****************
   695 ;; Defined at:
   696 ;;		line 96 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\main.c"
   697 ;; Parameters:    Size  Location     Type
   698 ;;		None
   699 ;; Auto vars:     Size  Location     Type
   700 ;;		None
   701 ;; Return value:  Size  Location     Type
   702 ;;                  1    wreg      void 
   703 ;; Registers used:
   704 ;;		wreg, status,2
   705 ;; Tracked objects:
   706 ;;		On entry : 300/300
   707 ;;		On exit  : 300/100
   708 ;;		Unchanged: 0/0
   709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   710 ;;      Params:         0       0       0       0       0
   711 ;;      Locals:         0       0       0       0       0
   712 ;;      Temps:          0       0       0       0       0
   713 ;;      Totals:         0       0       0       0       0
   714 ;;Total ram usage:        0 bytes
   715 ;; Hardware stack levels used:    1
   716 ;; Hardware stack levels required when called:    2
   717 ;; This function calls:
   718 ;;		Nothing
   719 ;; This function is called by:
   720 ;;		_main
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           
   725                           ;psect for function _Init_IC
   726  034E                     _Init_IC:	
   727                           
   728                           ;incstack = 0
   729                           ; Regs used in _Init_IC: [wreg+status,2]
   730  034E  0064               	clrwdt	;# 
   731                           
   732                           ;main.c: 103: INTCON = 0x00;
   733  034F  018B               	clrf	11	;volatile
   734                           
   735                           ;main.c: 108: PIR1 = 0;
   736  0350  1283               	bcf	3,5	;RP0=0, select bank0
   737  0351  1303               	bcf	3,6	;RP1=0, select bank0
   738  0352  018C               	clrf	12	;volatile
   739                           
   740                           ;main.c: 113: PIR2 = 0;
   741  0353  018D               	clrf	13	;volatile
   742                           
   743                           ;main.c: 118: WDTCON = 0x01;
   744  0354  3001               	movlw	1
   745  0355  1703               	bsf	3,6	;RP1=1, select bank2
   746  0356  0085               	movwf	5	;volatile
   747                           
   748                           ;main.c: 123: OPTION_REG = 0b00001110;
   749  0357  300E               	movlw	14
   750  0358  1683               	bsf	3,5	;RP0=1, select bank1
   751  0359  1303               	bcf	3,6	;RP1=0, select bank1
   752  035A  0081               	movwf	1	;volatile
   753                           
   754                           ;main.c: 128: OSCCON = 0x71;
   755  035B  3071               	movlw	113
   756  035C  008F               	movwf	15	;volatile
   757                           
   758                           ;main.c: 133: PIE1 = 0;
   759  035D  018C               	clrf	12	;volatile
   760                           
   761                           ;main.c: 138: PIE2 = 0;
   762  035E  018D               	clrf	13	;volatile
   763  035F  0008               	return
   764  0360                     __end_of_Init_IC:	
   765                           
   766                           	psect	text4
   767  0360                     __ptext4:	
   768 ;; *************** function _Init_GPIO *****************
   769 ;; Defined at:
   770 ;;		line 62 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\main.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;		None
   773 ;; Auto vars:     Size  Location     Type
   774 ;;		None
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      void 
   777 ;; Registers used:
   778 ;;		wreg, status,2
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 300/300
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   784 ;;      Params:         0       0       0       0       0
   785 ;;      Locals:         0       0       0       0       0
   786 ;;      Temps:          0       0       0       0       0
   787 ;;      Totals:         0       0       0       0       0
   788 ;;Total ram usage:        0 bytes
   789 ;; Hardware stack levels used:    1
   790 ;; Hardware stack levels required when called:    2
   791 ;; This function calls:
   792 ;;		Nothing
   793 ;; This function is called by:
   794 ;;		_main
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           
   799                           ;psect for function _Init_GPIO
   800  0360                     _Init_GPIO:	
   801                           
   802                           ;main.c: 66: PORTA = 0B00000000;
   803                           
   804                           ;incstack = 0
   805                           ; Regs used in _Init_GPIO: [wreg+status,2]
   806  0360  1283               	bcf	3,5	;RP0=0, select bank0
   807  0361  1303               	bcf	3,6	;RP1=0, select bank0
   808  0362  0185               	clrf	5	;volatile
   809                           
   810                           ;main.c: 67: PORTB = 0B00000000;
   811  0363  0186               	clrf	6	;volatile
   812                           
   813                           ;main.c: 68: PORTC = 0B00000000;
   814  0364  0187               	clrf	7	;volatile
   815                           
   816                           ;main.c: 71: TRISA = 0B00000000;
   817  0365  1683               	bsf	3,5	;RP0=1, select bank1
   818  0366  0185               	clrf	5	;volatile
   819                           
   820                           ;main.c: 72: TRISB = 0B00000011;
   821  0367  3003               	movlw	3
   822  0368  0086               	movwf	6	;volatile
   823                           
   824                           ;main.c: 73: TRISC = 0B00000000;
   825  0369  0187               	clrf	7	;volatile
   826                           
   827                           ;main.c: 76: WPUA = 0B00000000;
   828  036A  1703               	bsf	3,6	;RP1=1, select bank3
   829  036B  018E               	clrf	14	;volatile
   830                           
   831                           ;main.c: 77: WPUB = 0B00000010;
   832  036C  3002               	movlw	2
   833  036D  1303               	bcf	3,6	;RP1=0, select bank1
   834  036E  0095               	movwf	21	;volatile
   835                           
   836                           ;main.c: 78: WPUC = 0B00000000;
   837  036F  1703               	bsf	3,6	;RP1=1, select bank3
   838  0370  018F               	clrf	15	;volatile
   839  0371  0008               	return
   840  0372                     __end_of_Init_GPIO:	
   841                           
   842                           	psect	text5
   843  001F                     __ptext5:	
   844 ;; *************** function _GsensorLoop *****************
   845 ;; Defined at:
   846 ;;		line 19 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\sensor.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;		None
   849 ;; Auto vars:     Size  Location     Type
   850 ;;		None
   851 ;; Return value:  Size  Location     Type
   852 ;;                  1    wreg      void 
   853 ;; Registers used:
   854 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   855 ;; Tracked objects:
   856 ;;		On entry : 300/0
   857 ;;		On exit  : 0/0
   858 ;;		Unchanged: 0/0
   859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   860 ;;      Params:         0       0       0       0       0
   861 ;;      Locals:         0       0       0       0       0
   862 ;;      Temps:          0       0       0       0       0
   863 ;;      Totals:         0       0       0       0       0
   864 ;;Total ram usage:        0 bytes
   865 ;; Hardware stack levels used:    1
   866 ;; Hardware stack levels required when called:    3
   867 ;; This function calls:
   868 ;;		_SensorControl
   869 ;;		_SensorJudge
   870 ;;		_SensorKey
   871 ;;		_SensorTime
   872 ;; This function is called by:
   873 ;;		_main
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877                           
   878                           ;psect for function _GsensorLoop
   879  001F                     _GsensorLoop:	
   880                           
   881                           ;sensor.c: 21: SensorKey();
   882                           
   883                           ;incstack = 0
   884                           ; Regs used in _GsensorLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   885  001F  2029  120A  118A   	fcall	_SensorKey
   886                           
   887                           ;sensor.c: 22: SensorTime();
   888  0022  202A  120A  118A   	fcall	_SensorTime
   889                           
   890                           ;sensor.c: 23: SensorJudge();
   891  0025  207D  120A  118A   	fcall	_SensorJudge
   892                           
   893                           ;sensor.c: 24: SensorControl();
   894  0028  2862               	ljmp	l5743
   895  0029                     __end_of_GsensorLoop:	
   896  0029                     __ptext7:	
   897 ;; *************** function _SensorKey *****************
   898 ;; Defined at:
   899 ;;		line 27 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\sensor.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;		None
   902 ;; Auto vars:     Size  Location     Type
   903 ;;		None
   904 ;; Return value:  Size  Location     Type
   905 ;;                  1    wreg      void 
   906 ;; Registers used:
   907 ;;		None
   908 ;; Tracked objects:
   909 ;;		On entry : 300/0
   910 ;;		On exit  : 300/0
   911 ;;		Unchanged: 300/0
   912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   913 ;;      Params:         0       0       0       0       0
   914 ;;      Locals:         0       0       0       0       0
   915 ;;      Temps:          0       0       0       0       0
   916 ;;      Totals:         0       0       0       0       0
   917 ;;Total ram usage:        0 bytes
   918 ;; Hardware stack levels used:    1
   919 ;; Hardware stack levels required when called:    2
   920 ;; This function calls:
   921 ;;		Nothing
   922 ;; This function is called by:
   923 ;;		_GsensorLoop
   924 ;; This function uses a non-reentrant model
   925 ;;
   926                           
   927                           
   928                           ;psect for function _SensorKey
   929  0029                     _SensorKey:	
   930                           
   931                           ;incstack = 0
   932                           ; Regs used in _SensorKey: []
   933  0029  0008               	return
   934  002A                     __end_of_SensorKey:	
   935  002A                     __ptext6:	
   936 ;; *************** function _SensorTime *****************
   937 ;; Defined at:
   938 ;;		line 33 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\sensor.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;		None
   941 ;; Auto vars:     Size  Location     Type
   942 ;;		None
   943 ;; Return value:  Size  Location     Type
   944 ;;                  1    wreg      void 
   945 ;; Registers used:
   946 ;;		wreg, status,2, status,0
   947 ;; Tracked objects:
   948 ;;		On entry : 300/0
   949 ;;		On exit  : 300/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   952 ;;      Params:         0       0       0       0       0
   953 ;;      Locals:         0       0       0       0       0
   954 ;;      Temps:          0       0       0       0       0
   955 ;;      Totals:         0       0       0       0       0
   956 ;;Total ram usage:        0 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; Hardware stack levels required when called:    2
   959 ;; This function calls:
   960 ;;		Nothing
   961 ;; This function is called by:
   962 ;;		_GsensorLoop
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           
   967                           ;psect for function _SensorTime
   968  002A                     _SensorTime:	
   969                           
   970                           ;sensor.c: 35: if(Fbodysensor.bits.bit_0 == 1)
   971                           
   972                           ;incstack = 0
   973                           ; Regs used in _SensorTime: [wreg+status,2+status,0]
   974  002A  1C7A               	btfss	_Fbodysensor,0	;volatile
   975  002B  284E               	goto	l5677
   976                           
   977                           ;sensor.c: 36: {
   978                           ;sensor.c: 37: Fbodysensor.bits.bit_5 = 0;
   979  002C  12FA               	bcf	_Fbodysensor,5	;volatile
   980                           
   981                           ;sensor.c: 38: CNTbodyExitTime = 0;
   982  002D  01A2               	clrf	_CNTbodyExitTime	;volatile
   983  002E  01A3               	clrf	_CNTbodyExitTime+1	;volatile
   984                           
   985                           ;sensor.c: 39: if(FledBits01.bits.bit_2 == 0)
   986  002F  1942               	btfsc	_FledBits01,2	;volatile
   987  0030  2849               	goto	l3817
   988                           
   989                           ;sensor.c: 40: {
   990                           ;sensor.c: 41: if(++CNTbodyInTime >= 6000)
   991  0031  0AA4               	incf	_CNTbodyInTime,f	;volatile
   992  0032  1903               	skipnz
   993  0033  0AA5               	incf	_CNTbodyInTime+1,f	;volatile
   994  0034  3017               	movlw	23
   995  0035  0225               	subwf	_CNTbodyInTime+1,w	;volatile
   996  0036  3070               	movlw	112
   997  0037  1903               	skipnz
   998  0038  0224               	subwf	_CNTbodyInTime,w	;volatile
   999  0039  1C03               	skipc
  1000  003A  2841               	goto	l5671
  1001                           
  1002                           ;sensor.c: 42: {
  1003                           ;sensor.c: 43: CNTbodyInTime = 6000;
  1004  003B  3070               	movlw	112
  1005  003C  00A4               	movwf	_CNTbodyInTime	;volatile
  1006  003D  3017               	movlw	23
  1007  003E  00A5               	movwf	_CNTbodyInTime+1	;volatile
  1008                           
  1009                           ;sensor.c: 44: Fbodysensor.bits.bit_3 = 1;
  1010  003F  15FA               	bsf	_Fbodysensor,3	;volatile
  1011                           
  1012                           ;sensor.c: 45: }
  1013  0040  0008               	return
  1014  0041                     l5671:	
  1015                           
  1016                           ;sensor.c: 46: else if(CNTbodyInTime >= 500)
  1017  0041  3001               	movlw	1
  1018  0042  0225               	subwf	_CNTbodyInTime+1,w	;volatile
  1019  0043  30F4               	movlw	244
  1020  0044  1903               	skipnz
  1021  0045  0224               	subwf	_CNTbodyInTime,w	;volatile
  1022  0046  1803               	btfsc	3,0
  1023                           
  1024                           ;sensor.c: 47: {
  1025                           ;sensor.c: 48: Fbodysensor.bits.bit_4 = 1;
  1026  0047  167A               	bsf	_Fbodysensor,4	;volatile
  1027  0048  0008               	return
  1028  0049                     l3817:	
  1029                           
  1030                           ;sensor.c: 51: else
  1031                           ;sensor.c: 52: {
  1032                           ;sensor.c: 53: if(Fbodysensor.bits.bit_4 == 0)
  1033  0049  1A7A               	btfsc	_Fbodysensor,4	;volatile
  1034  004A  0008               	return
  1035                           
  1036                           ;sensor.c: 54: {
  1037                           ;sensor.c: 55: CNTbodyInTime = 0;
  1038  004B  01A4               	clrf	_CNTbodyInTime	;volatile
  1039  004C  01A5               	clrf	_CNTbodyInTime+1	;volatile
  1040                           
  1041                           ;sensor.c: 56: }
  1042                           ;sensor.c: 57: }
  1043                           ;sensor.c: 58: }
  1044  004D  0008               	return
  1045  004E                     l5677:	
  1046                           
  1047                           ;sensor.c: 59: else
  1048                           ;sensor.c: 60: {
  1049                           ;sensor.c: 61: CNTbodyInTime = 0;
  1050  004E  01A4               	clrf	_CNTbodyInTime	;volatile
  1051  004F  01A5               	clrf	_CNTbodyInTime+1	;volatile
  1052                           
  1053                           ;sensor.c: 62: Fbodysensor.bits.bit_4 = 0;
  1054  0050  127A               	bcf	_Fbodysensor,4	;volatile
  1055                           
  1056                           ;sensor.c: 63: Fbodysensor.bits.bit_3 = 0;
  1057  0051  11FA               	bcf	_Fbodysensor,3	;volatile
  1058                           
  1059                           ;sensor.c: 64: if(++CNTbodyExitTime >= 500)
  1060  0052  0AA2               	incf	_CNTbodyExitTime,f	;volatile
  1061  0053  1903               	skipnz
  1062  0054  0AA3               	incf	_CNTbodyExitTime+1,f	;volatile
  1063  0055  3001               	movlw	1
  1064  0056  0223               	subwf	_CNTbodyExitTime+1,w	;volatile
  1065  0057  30F4               	movlw	244
  1066  0058  1903               	skipnz
  1067  0059  0222               	subwf	_CNTbodyExitTime,w	;volatile
  1068  005A  1C03               	skipc
  1069  005B  0008               	return
  1070                           
  1071                           ;sensor.c: 65: {
  1072                           ;sensor.c: 66: CNTbodyExitTime = 500;
  1073  005C  30F4               	movlw	244
  1074  005D  00A2               	movwf	_CNTbodyExitTime	;volatile
  1075  005E  3001               	movlw	1
  1076  005F  00A3               	movwf	_CNTbodyExitTime+1	;volatile
  1077                           
  1078                           ;sensor.c: 67: Fbodysensor.bits.bit_5 = 1;
  1079  0060  16FA               	bsf	_Fbodysensor,5	;volatile
  1080  0061  0008               	return
  1081  0062                     __end_of_SensorTime:	
  1082  0062                     __ptext9:	
  1083 ;; *************** function _SensorControl *****************
  1084 ;; Defined at:
  1085 ;;		line 179 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\sensor.c"
  1086 ;; Parameters:    Size  Location     Type
  1087 ;;		None
  1088 ;; Auto vars:     Size  Location     Type
  1089 ;;		None
  1090 ;; Return value:  Size  Location     Type
  1091 ;;                  1    wreg      void 
  1092 ;; Registers used:
  1093 ;;		wreg
  1094 ;; Tracked objects:
  1095 ;;		On entry : 300/0
  1096 ;;		On exit  : 0/0
  1097 ;;		Unchanged: 0/0
  1098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1099 ;;      Params:         0       0       0       0       0
  1100 ;;      Locals:         0       0       0       0       0
  1101 ;;      Temps:          1       0       0       0       0
  1102 ;;      Totals:         1       0       0       0       0
  1103 ;;Total ram usage:        1 bytes
  1104 ;; Hardware stack levels used:    1
  1105 ;; Hardware stack levels required when called:    2
  1106 ;; This function calls:
  1107 ;;		Nothing
  1108 ;; This function is called by:
  1109 ;;		_GsensorLoop
  1110 ;; This function uses a non-reentrant model
  1111 ;;
  1112                           
  1113                           
  1114                           ;psect for function _SensorControl
  1115  0062                     _SensorControl:	
  1116  0062                     l5743:	
  1117                           ;incstack = 0
  1118                           ; Regs used in _SensorControl: [wreg]
  1119                           
  1120                           
  1121                           ;sensor.c: 181: Fbodysensor.bits.bit_1 = 0;
  1122  0062  10FA               	bcf	_Fbodysensor,1	;volatile
  1123                           
  1124                           ;sensor.c: 182: Fbodysensor.bits.bit_2 = 0;
  1125  0063  117A               	bcf	_Fbodysensor,2	;volatile
  1126                           
  1127                           ;sensor.c: 183: if(Fbodysensor.bits.bit_6 != Fbodysensor.bits.bit_0)
  1128  0064  1C7A               	btfss	_Fbodysensor,0	;volatile
  1129  0065  2868               	goto	u980
  1130  0066  3001               	movlw	1
  1131  0067  2869               	goto	u982
  1132  0068                     u980:	
  1133  0068  3000               	movlw	0
  1134  0069                     u982:	
  1135  0069  00F2               	movwf	??_SensorControl
  1136  006A  1F7A               	btfss	_Fbodysensor,6	;volatile
  1137  006B  286E               	goto	u990
  1138  006C  3001               	movlw	1
  1139  006D  286F               	goto	u992
  1140  006E                     u990:	
  1141  006E  3000               	movlw	0
  1142  006F                     u992:	
  1143  006F  0672               	xorwf	??_SensorControl,w
  1144  0070  1903               	skipnz
  1145  0071  0008               	return
  1146                           
  1147                           ;sensor.c: 184: {
  1148                           ;sensor.c: 185: if(Fbodysensor.bits.bit_0 == 1)
  1149  0072  1C7A               	btfss	_Fbodysensor,0	;volatile
  1150  0073  2876               	goto	l3854
  1151                           
  1152                           ;sensor.c: 186: {
  1153                           ;sensor.c: 187: Fbodysensor.bits.bit_1 = 1;
  1154  0074  14FA               	bsf	_Fbodysensor,1	;volatile
  1155                           
  1156                           ;sensor.c: 188: }
  1157  0075  2877               	goto	l3855
  1158  0076                     l3854:	
  1159                           
  1160                           ;sensor.c: 189: else
  1161                           ;sensor.c: 190: {
  1162                           ;sensor.c: 191: Fbodysensor.bits.bit_2 = 1;
  1163  0076  157A               	bsf	_Fbodysensor,2	;volatile
  1164  0077                     l3855:	
  1165                           
  1166                           ;sensor.c: 192: }
  1167                           ;sensor.c: 193: Fbodysensor.bits.bit_6 = Fbodysensor.bits.bit_0;
  1168  0077  1C7A               	btfss	_Fbodysensor,0	;volatile
  1169  0078  287B               	goto	u1020
  1170  0079  177A               	bsf	_Fbodysensor,6	;volatile
  1171  007A  0008               	return
  1172  007B                     u1020:	
  1173  007B  137A               	bcf	_Fbodysensor,6	;volatile
  1174  007C  0008               	return
  1175  007D                     __end_of_SensorControl:	
  1176  007D                     __ptext8:	
  1177 ;; *************** function _SensorJudge *****************
  1178 ;; Defined at:
  1179 ;;		line 73 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\sensor.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;		None
  1182 ;; Auto vars:     Size  Location     Type
  1183 ;;		None
  1184 ;; Return value:  Size  Location     Type
  1185 ;;                  1    wreg      void 
  1186 ;; Registers used:
  1187 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1188 ;; Tracked objects:
  1189 ;;		On entry : 300/0
  1190 ;;		On exit  : 300/0
  1191 ;;		Unchanged: 0/0
  1192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1193 ;;      Params:         0       0       0       0       0
  1194 ;;      Locals:         0       0       0       0       0
  1195 ;;      Temps:          0       0       0       0       0
  1196 ;;      Totals:         0       0       0       0       0
  1197 ;;Total ram usage:        0 bytes
  1198 ;; Hardware stack levels used:    1
  1199 ;; Hardware stack levels required when called:    2
  1200 ;; This function calls:
  1201 ;;		Nothing
  1202 ;; This function is called by:
  1203 ;;		_GsensorLoop
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207                           
  1208                           ;psect for function _SensorJudge
  1209  007D                     _SensorJudge:	
  1210                           
  1211                           ;sensor.c: 75: switch (SEQbody)
  1212                           
  1213                           ;incstack = 0
  1214                           ; Regs used in _SensorJudge: [wreg-fsr0h+status,2+status,0]
  1215  007D  28FA               	goto	l5741
  1216  007E                     l3829:	
  1217                           ;sensor.c: 76: {
  1218                           ;sensor.c: 77: case 0:
  1219                           
  1220                           
  1221                           ;sensor.c: 78: Fbodysensor.bits.bit_0 = 0;
  1222  007E  107A               	bcf	_Fbodysensor,0	;volatile
  1223                           
  1224                           ;sensor.c: 79: FledBits01.bits.bit_2 = 0;
  1225  007F  1142               	bcf	_FledBits01,2	;volatile
  1226                           
  1227                           ;sensor.c: 110: }
  1228  0080  288F               	goto	l5691
  1229  0081                     l5703:	
  1230                           
  1231                           ;sensor.c: 111: else
  1232                           ;sensor.c: 112: {
  1233                           ;sensor.c: 113: if(++CNTbody_l >= 6)
  1234  0081  0AA8               	incf	_CNTbody_l,f	;volatile
  1235  0082  1903               	skipnz
  1236  0083  0AA9               	incf	_CNTbody_l+1,f	;volatile
  1237  0084  3000               	movlw	0
  1238  0085  0229               	subwf	_CNTbody_l+1,w	;volatile
  1239  0086  3006               	movlw	6
  1240  0087  1903               	skipnz
  1241  0088  0228               	subwf	_CNTbody_l,w	;volatile
  1242  0089  1C03               	skipc
  1243  008A  28B1               	goto	l5709
  1244                           
  1245                           ;sensor.c: 114: {
  1246                           ;sensor.c: 115: CNTbody_h = 0;
  1247  008B  01AA               	clrf	_CNTbody_h	;volatile
  1248  008C  01AB               	clrf	_CNTbody_h+1	;volatile
  1249                           
  1250                           ;sensor.c: 116: CNTbody_l = 0;
  1251  008D  01A8               	clrf	_CNTbody_l	;volatile
  1252  008E  01A9               	clrf	_CNTbody_l+1	;volatile
  1253  008F                     l5691:	
  1254                           
  1255                           ;sensor.c: 80: SEQbody = 1;
  1256  008F  3001               	movlw	1
  1257  0090  00BB               	movwf	_SEQbody	;volatile
  1258                           
  1259                           ;sensor.c: 81: break;
  1260  0091  0008               	return
  1261  0092                     l3831:	
  1262                           ;sensor.c: 84: case 1:
  1263                           
  1264                           
  1265                           ;sensor.c: 85: Fbodysensor.bits.bit_0 = 0;
  1266  0092  107A               	bcf	_Fbodysensor,0	;volatile
  1267                           
  1268                           ;sensor.c: 86: FledBits01.bits.bit_2 = 0;
  1269  0093  1142               	bcf	_FledBits01,2	;volatile
  1270                           
  1271                           ;sensor.c: 87: if(RB1 == 0)
  1272  0094  1886               	btfsc	6,1	;volatile
  1273  0095  28A7               	goto	l5699
  1274                           
  1275                           ;sensor.c: 88: {
  1276                           ;sensor.c: 89: if(++CNTbody_h >= 3)
  1277  0096  0AAA               	incf	_CNTbody_h,f	;volatile
  1278  0097  1903               	skipnz
  1279  0098  0AAB               	incf	_CNTbody_h+1,f	;volatile
  1280  0099  3000               	movlw	0
  1281  009A  022B               	subwf	_CNTbody_h+1,w	;volatile
  1282  009B  3003               	movlw	3
  1283  009C  1903               	skipnz
  1284  009D  022A               	subwf	_CNTbody_h,w	;volatile
  1285  009E  1C03               	skipc
  1286  009F  0008               	return
  1287                           
  1288                           ;sensor.c: 90: {
  1289                           ;sensor.c: 91: CNTbody_h = 0;
  1290  00A0  01AA               	clrf	_CNTbody_h	;volatile
  1291  00A1  01AB               	clrf	_CNTbody_h+1	;volatile
  1292                           
  1293                           ;sensor.c: 92: CNTbody_l = 0;
  1294  00A2  01A8               	clrf	_CNTbody_l	;volatile
  1295  00A3  01A9               	clrf	_CNTbody_l+1	;volatile
  1296                           
  1297                           ;sensor.c: 93: SEQbody = 2;
  1298  00A4  3002               	movlw	2
  1299  00A5  00BB               	movwf	_SEQbody	;volatile
  1300                           
  1301                           ;sensor.c: 94: break;
  1302  00A6  0008               	return
  1303  00A7                     l5699:	
  1304                           
  1305                           ;sensor.c: 97: else
  1306                           ;sensor.c: 98: {
  1307                           ;sensor.c: 99: CNTbody_h = 0;
  1308  00A7  01AA               	clrf	_CNTbody_h	;volatile
  1309  00A8  01AB               	clrf	_CNTbody_h+1	;volatile
  1310  00A9  0008               	return
  1311  00AA                     l3835:	
  1312                           ;sensor.c: 104: case 2:
  1313                           
  1314                           
  1315                           ;sensor.c: 105: Fbodysensor.bits.bit_0 = 0;
  1316  00AA  107A               	bcf	_Fbodysensor,0	;volatile
  1317                           
  1318                           ;sensor.c: 106: FledBits01.bits.bit_2 = 0;
  1319  00AB  1142               	bcf	_FledBits01,2	;volatile
  1320                           
  1321                           ;sensor.c: 107: if(RB1 == 0)
  1322  00AC  1886               	btfsc	6,1	;volatile
  1323  00AD  2881               	goto	l5703
  1324                           
  1325                           ;sensor.c: 108: {
  1326                           ;sensor.c: 109: ++CNTbody_h;
  1327  00AE  0AAA               	incf	_CNTbody_h,f	;volatile
  1328  00AF  1903               	skipnz
  1329  00B0  0AAB               	incf	_CNTbody_h+1,f	;volatile
  1330  00B1                     l5709:	
  1331                           
  1332                           ;sensor.c: 119: }
  1333                           ;sensor.c: 120: }
  1334                           ;sensor.c: 121: BufCntAdd = CNTbody_h +CNTbody_l;
  1335  00B1  210C  120A  118A   	fcall	PL6	;call to abstracted procedure
  1336                           
  1337                           ;sensor.c: 122: if(BufCntAdd >= 30)
  1338  00B4  3000               	movlw	0
  1339  00B5  0227               	subwf	_BufCntAdd+1,w	;volatile
  1340  00B6  301E               	movlw	30
  1341  00B7  1903               	skipnz
  1342  00B8  0226               	subwf	_BufCntAdd,w	;volatile
  1343  00B9  1C03               	skipc
  1344  00BA  0008               	return
  1345  00BB                     l5713:	
  1346                           
  1347                           ;sensor.c: 123: {
  1348                           ;sensor.c: 124: SEQbody = 3;
  1349  00BB  3003               	movlw	3
  1350  00BC  00BB               	movwf	_SEQbody	;volatile
  1351                           
  1352                           ;sensor.c: 125: break;
  1353  00BD  0008               	return
  1354  00BE                     l3840:	
  1355                           ;sensor.c: 129: case 3:
  1356                           
  1357                           
  1358                           ;sensor.c: 130: Fbodysensor.bits.bit_0 = 1;
  1359  00BE  147A               	bsf	_Fbodysensor,0	;volatile
  1360                           
  1361                           ;sensor.c: 131: FledBits01.bits.bit_2 = 0;
  1362  00BF  1142               	bcf	_FledBits01,2	;volatile
  1363                           
  1364                           ;sensor.c: 132: if(RB1 == 1)
  1365  00C0  1C86               	btfss	6,1	;volatile
  1366  00C1  28D3               	goto	l5721
  1367                           
  1368                           ;sensor.c: 133: {
  1369                           ;sensor.c: 134: if(++CNTbody_l >= 3)
  1370  00C2  0AA8               	incf	_CNTbody_l,f	;volatile
  1371  00C3  1903               	skipnz
  1372  00C4  0AA9               	incf	_CNTbody_l+1,f	;volatile
  1373  00C5  3000               	movlw	0
  1374  00C6  0229               	subwf	_CNTbody_l+1,w	;volatile
  1375  00C7  3003               	movlw	3
  1376  00C8  1903               	skipnz
  1377  00C9  0228               	subwf	_CNTbody_l,w	;volatile
  1378  00CA  1C03               	skipc
  1379  00CB  0008               	return
  1380                           
  1381                           ;sensor.c: 135: {
  1382                           ;sensor.c: 136: CNTbody_h = 0;
  1383  00CC  01AA               	clrf	_CNTbody_h	;volatile
  1384  00CD  01AB               	clrf	_CNTbody_h+1	;volatile
  1385                           
  1386                           ;sensor.c: 137: CNTbody_l = 0;
  1387  00CE  01A8               	clrf	_CNTbody_l	;volatile
  1388  00CF  01A9               	clrf	_CNTbody_l+1	;volatile
  1389                           
  1390                           ;sensor.c: 138: SEQbody = 4;
  1391  00D0  3004               	movlw	4
  1392  00D1  00BB               	movwf	_SEQbody	;volatile
  1393                           
  1394                           ;sensor.c: 139: break;
  1395  00D2  0008               	return
  1396  00D3                     l5721:	
  1397                           
  1398                           ;sensor.c: 142: else
  1399                           ;sensor.c: 143: {
  1400                           ;sensor.c: 144: CNTbody_l = 0;
  1401  00D3  01A8               	clrf	_CNTbody_l	;volatile
  1402  00D4  01A9               	clrf	_CNTbody_l+1	;volatile
  1403  00D5  0008               	return
  1404  00D6                     l3844:	
  1405                           ;sensor.c: 148: case 4:
  1406                           
  1407                           
  1408                           ;sensor.c: 149: Fbodysensor.bits.bit_0 = 1;
  1409  00D6  147A               	bsf	_Fbodysensor,0	;volatile
  1410                           
  1411                           ;sensor.c: 150: FledBits01.bits.bit_2 = 1;
  1412  00D7  1542               	bsf	_FledBits01,2	;volatile
  1413                           
  1414                           ;sensor.c: 151: if(RB1 == 0)
  1415  00D8  1886               	btfsc	6,1	;volatile
  1416  00D9  28E9               	goto	l5729
  1417                           
  1418                           ;sensor.c: 152: {
  1419                           ;sensor.c: 153: if(++CNTbody_h >= 6)
  1420  00DA  0AAA               	incf	_CNTbody_h,f	;volatile
  1421  00DB  1903               	skipnz
  1422  00DC  0AAB               	incf	_CNTbody_h+1,f	;volatile
  1423  00DD  3000               	movlw	0
  1424  00DE  022B               	subwf	_CNTbody_h+1,w	;volatile
  1425  00DF  3006               	movlw	6
  1426  00E0  1903               	skipnz
  1427  00E1  022A               	subwf	_CNTbody_h,w	;volatile
  1428  00E2  1C03               	skipc
  1429  00E3  28EC               	goto	l5731
  1430                           
  1431                           ;sensor.c: 154: {
  1432                           ;sensor.c: 155: CNTbody_h = 0;
  1433  00E4  01AA               	clrf	_CNTbody_h	;volatile
  1434  00E5  01AB               	clrf	_CNTbody_h+1	;volatile
  1435                           
  1436                           ;sensor.c: 156: CNTbody_l = 0;
  1437  00E6  01A8               	clrf	_CNTbody_l	;volatile
  1438  00E7  01A9               	clrf	_CNTbody_l+1	;volatile
  1439  00E8  28BB               	goto	l5713
  1440  00E9                     l5729:	
  1441                           
  1442                           ;sensor.c: 161: else
  1443                           ;sensor.c: 162: {
  1444                           ;sensor.c: 163: ++CNTbody_l;
  1445  00E9  0AA8               	incf	_CNTbody_l,f	;volatile
  1446  00EA  1903               	skipnz
  1447  00EB  0AA9               	incf	_CNTbody_l+1,f	;volatile
  1448  00EC                     l5731:	
  1449                           
  1450                           ;sensor.c: 164: }
  1451                           ;sensor.c: 165: BufCntAdd = CNTbody_h +CNTbody_l;
  1452  00EC  210C  120A  118A   	fcall	PL6	;call to abstracted procedure
  1453                           
  1454                           ;sensor.c: 166: if(BufCntAdd >= 500)
  1455  00EF  3001               	movlw	1
  1456  00F0  0227               	subwf	_BufCntAdd+1,w	;volatile
  1457  00F1  30F4               	movlw	244
  1458  00F2  1903               	skipnz
  1459  00F3  0226               	subwf	_BufCntAdd,w	;volatile
  1460  00F4  1C03               	skipc
  1461  00F5  0008               	return
  1462  00F6  288F               	goto	l5691
  1463  00F7                     l5735:	
  1464                           
  1465                           ;sensor.c: 173: SEQbody = 0;
  1466  00F7  01BB               	clrf	_SEQbody	;volatile
  1467                           
  1468                           ;sensor.c: 174: FledBits01.bits.bit_2 = 0;
  1469  00F8  1142               	bcf	_FledBits01,2	;volatile
  1470                           
  1471                           ;sensor.c: 175: break;
  1472  00F9  0008               	return
  1473  00FA                     l5741:	
  1474  00FA  083B               	movf	_SEQbody,w	;volatile
  1475                           
  1476                           ; Switch size 1, requested type "space"
  1477                           ; Number of cases is 5, Range of values is 0 to 4
  1478                           ; switch strategies available:
  1479                           ; Name         Instructions Cycles
  1480                           ; simple_byte           16     9 (average)
  1481                           ; direct_byte           23     8 (fixed)
  1482                           ; jumptable            260     6 (fixed)
  1483                           ;	Chosen strategy is simple_byte
  1484  00FB  3A00               	xorlw	0	; case 0
  1485  00FC  1903               	skipnz
  1486  00FD  287E               	goto	l3829
  1487  00FE  3A01               	xorlw	1	; case 1
  1488  00FF  1903               	skipnz
  1489  0100  2892               	goto	l3831
  1490  0101  3A03               	xorlw	3	; case 2
  1491  0102  1903               	skipnz
  1492  0103  28AA               	goto	l3835
  1493  0104  3A01               	xorlw	1	; case 3
  1494  0105  1903               	skipnz
  1495  0106  28BE               	goto	l3840
  1496  0107  3A07               	xorlw	7	; case 4
  1497  0108  1903               	skipnz
  1498  0109  28D6               	goto	l3844
  1499  010A  28F7               	goto	l5735
  1500  010B  0008               	return
  1501  010C                     __end_of_SensorJudge:	
  1502  010C                     PL6:	
  1503  010C  0828               	movf	_CNTbody_l,w	;volatile
  1504  010D  072A               	addwf	_CNTbody_h,w	;volatile
  1505  010E  00A6               	movwf	_BufCntAdd	;volatile
  1506  010F  0829               	movf	_CNTbody_l+1,w	;volatile
  1507  0110  1803               	skipnc
  1508  0111  0A29               	incf	_CNTbody_l+1,w	;volatile
  1509  0112  072B               	addwf	_CNTbody_h+1,w	;volatile
  1510  0113  00A7               	movwf	_BufCntAdd+1	;volatile
  1511  0114  0008               	return
  1512  0115                     __end_ofPL6:	
  1513                           
  1514                           	psect	text10
  1515  032E                     __ptext10:	
  1516 ;; *************** function _GledLoop *****************
  1517 ;; Defined at:
  1518 ;;		line 16 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\light.c"
  1519 ;; Parameters:    Size  Location     Type
  1520 ;;		None
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;		None
  1523 ;; Return value:  Size  Location     Type
  1524 ;;                  1    wreg      void 
  1525 ;; Registers used:
  1526 ;;		status,2, status,0, pclath, cstack
  1527 ;; Tracked objects:
  1528 ;;		On entry : 300/0
  1529 ;;		On exit  : 300/0
  1530 ;;		Unchanged: 0/0
  1531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1532 ;;      Params:         0       0       0       0       0
  1533 ;;      Locals:         0       0       0       0       0
  1534 ;;      Temps:          0       0       0       0       0
  1535 ;;      Totals:         0       0       0       0       0
  1536 ;;Total ram usage:        0 bytes
  1537 ;; Hardware stack levels used:    1
  1538 ;; Hardware stack levels required when called:    3
  1539 ;; This function calls:
  1540 ;;		_LED_Con
  1541 ;;		_LED_Judge
  1542 ;;		_LED_Key
  1543 ;;		_LED_Time
  1544 ;; This function is called by:
  1545 ;;		_main
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           
  1550                           ;psect for function _GledLoop
  1551  032E                     _GledLoop:	
  1552                           
  1553                           ;light.c: 18: LED_Time();
  1554                           
  1555                           ;incstack = 0
  1556                           ; Regs used in _GledLoop: [status,2+status,0+pclath+cstack]
  1557  032E  2339  120A  118A   	fcall	_LED_Time
  1558                           
  1559                           ;light.c: 19: LED_Key();
  1560  0331  2338  120A  118A   	fcall	_LED_Key
  1561                           
  1562                           ;light.c: 20: LED_Judge();
  1563  0334  2346  120A  118A   	fcall	_LED_Judge
  1564                           
  1565                           ;light.c: 21: LED_Con();
  1566  0337  2B3C               	ljmp	l5557
  1567  0338                     __end_of_GledLoop:	
  1568  0338                     __ptext12:	
  1569 ;; *************** function _LED_Key *****************
  1570 ;; Defined at:
  1571 ;;		line 24 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\light.c"
  1572 ;; Parameters:    Size  Location     Type
  1573 ;;		None
  1574 ;; Auto vars:     Size  Location     Type
  1575 ;;		None
  1576 ;; Return value:  Size  Location     Type
  1577 ;;                  1    wreg      void 
  1578 ;; Registers used:
  1579 ;;		None
  1580 ;; Tracked objects:
  1581 ;;		On entry : 300/0
  1582 ;;		On exit  : 300/0
  1583 ;;		Unchanged: 300/0
  1584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1585 ;;      Params:         0       0       0       0       0
  1586 ;;      Locals:         0       0       0       0       0
  1587 ;;      Temps:          0       0       0       0       0
  1588 ;;      Totals:         0       0       0       0       0
  1589 ;;Total ram usage:        0 bytes
  1590 ;; Hardware stack levels used:    1
  1591 ;; Hardware stack levels required when called:    2
  1592 ;; This function calls:
  1593 ;;		Nothing
  1594 ;; This function is called by:
  1595 ;;		_GledLoop
  1596 ;; This function uses a non-reentrant model
  1597 ;;
  1598                           
  1599                           
  1600                           ;psect for function _LED_Key
  1601  0338                     _LED_Key:	
  1602                           
  1603                           ;incstack = 0
  1604                           ; Regs used in _LED_Key: []
  1605  0338  0008               	return
  1606  0339                     __end_of_LED_Key:	
  1607  0339                     __ptext11:	
  1608 ;; *************** function _LED_Time *****************
  1609 ;; Defined at:
  1610 ;;		line 45 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\light.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;		None
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;		None
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      void 
  1617 ;; Registers used:
  1618 ;;		None
  1619 ;; Tracked objects:
  1620 ;;		On entry : 300/0
  1621 ;;		On exit  : 300/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1624 ;;      Params:         0       0       0       0       0
  1625 ;;      Locals:         0       0       0       0       0
  1626 ;;      Temps:          0       0       0       0       0
  1627 ;;      Totals:         0       0       0       0       0
  1628 ;;Total ram usage:        0 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:    2
  1631 ;; This function calls:
  1632 ;;		Nothing
  1633 ;; This function is called by:
  1634 ;;		_GledLoop
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           
  1639                           ;psect for function _LED_Time
  1640  0339                     _LED_Time:	
  1641                           
  1642                           ;light.c: 47: if(Fsys1m.bits.bit_0 == 1)
  1643                           
  1644                           ;incstack = 0
  1645                           ; Regs used in _LED_Time: []
  1646  0339  1843               	btfsc	_Fsys1m,0	;volatile
  1647                           
  1648                           ;light.c: 48: {
  1649                           ;light.c: 49: Fsys1m.bits.bit_0 = 0;
  1650  033A  1043               	bcf	_Fsys1m,0	;volatile
  1651  033B  0008               	return
  1652  033C                     __end_of_LED_Time:	
  1653  033C                     __ptext14:	
  1654 ;; *************** function _LED_Con *****************
  1655 ;; Defined at:
  1656 ;;		line 84 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\light.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;		None
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;		None
  1661 ;; Return value:  Size  Location     Type
  1662 ;;                  1    wreg      void 
  1663 ;; Registers used:
  1664 ;;		None
  1665 ;; Tracked objects:
  1666 ;;		On entry : 300/0
  1667 ;;		On exit  : 300/0
  1668 ;;		Unchanged: 0/0
  1669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1670 ;;      Params:         0       0       0       0       0
  1671 ;;      Locals:         0       0       0       0       0
  1672 ;;      Temps:          0       0       0       0       0
  1673 ;;      Totals:         0       0       0       0       0
  1674 ;;Total ram usage:        0 bytes
  1675 ;; Hardware stack levels used:    1
  1676 ;; Hardware stack levels required when called:    2
  1677 ;; This function calls:
  1678 ;;		Nothing
  1679 ;; This function is called by:
  1680 ;;		_GledLoop
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           
  1685                           ;psect for function _LED_Con
  1686  033C                     _LED_Con:	
  1687  033C                     l5557:	
  1688                           ;incstack = 0
  1689                           ; Regs used in _LED_Con: []
  1690                           
  1691                           
  1692                           ;light.c: 86: RA5 = FledBits01.bits.bit_0;
  1693  033C  1C42               	btfss	_FledBits01,0	;volatile
  1694  033D  2B42               	goto	u590
  1695  033E  1283               	bcf	3,5	;RP0=0, select bank0
  1696  033F  1303               	bcf	3,6	;RP1=0, select bank0
  1697  0340  1685               	bsf	5,5	;volatile
  1698  0341  0008               	return
  1699  0342                     u590:	
  1700  0342  1283               	bcf	3,5	;RP0=0, select bank0
  1701  0343  1303               	bcf	3,6	;RP1=0, select bank0
  1702  0344  1285               	bcf	5,5	;volatile
  1703  0345  0008               	return
  1704  0346                     __end_of_LED_Con:	
  1705  0346                     __ptext13:	
  1706 ;; *************** function _LED_Judge *****************
  1707 ;; Defined at:
  1708 ;;		line 53 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\light.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;		None
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;		None
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      void 
  1715 ;; Registers used:
  1716 ;;		None
  1717 ;; Tracked objects:
  1718 ;;		On entry : 300/0
  1719 ;;		On exit  : 300/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1722 ;;      Params:         0       0       0       0       0
  1723 ;;      Locals:         0       0       0       0       0
  1724 ;;      Temps:          0       0       0       0       0
  1725 ;;      Totals:         0       0       0       0       0
  1726 ;;Total ram usage:        0 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    2
  1729 ;; This function calls:
  1730 ;;		Nothing
  1731 ;; This function is called by:
  1732 ;;		_GledLoop
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           
  1737                           ;psect for function _LED_Judge
  1738  0346                     _LED_Judge:	
  1739                           
  1740                           ;light.c: 55: if(Fbodysensor.bits.bit_0 == 1)
  1741                           
  1742                           ;incstack = 0
  1743                           ; Regs used in _LED_Judge: []
  1744  0346  1C7A               	btfss	_Fbodysensor,0	;volatile
  1745  0347  2B4C               	goto	l5555
  1746                           
  1747                           ;light.c: 56: {
  1748                           ;light.c: 57: FledBits01.bits.bit_0 = 1;
  1749  0348  1442               	bsf	_FledBits01,0	;volatile
  1750                           
  1751                           ;light.c: 58: if(Fbodysensor.bits.bit_4 == 0)
  1752  0349  1E7A               	btfss	_Fbodysensor,4	;volatile
  1753                           
  1754                           ;light.c: 59: {
  1755                           ;light.c: 60: if(FledBits01.bits.bit_2 == 1)
  1756  034A  1D42               	btfss	_FledBits01,2	;volatile
  1757  034B  0008               	return
  1758  034C                     l5555:	
  1759                           
  1760                           ;light.c: 61: {
  1761                           ;light.c: 62: FledBits01.bits.bit_0 = 0;
  1762  034C  1042               	bcf	_FledBits01,0	;volatile
  1763  034D  0008               	return
  1764  034E                     __end_of_LED_Judge:	
  1765                           
  1766                           	psect	text15
  1767  0115                     __ptext15:	
  1768 ;; *************** function _GflushLoop *****************
  1769 ;; Defined at:
  1770 ;;		line 28 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\flush.c"
  1771 ;; Parameters:    Size  Location     Type
  1772 ;;		None
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;		None
  1775 ;; Return value:  Size  Location     Type
  1776 ;;                  1    wreg      void 
  1777 ;; Registers used:
  1778 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1779 ;; Tracked objects:
  1780 ;;		On entry : 300/0
  1781 ;;		On exit  : 300/0
  1782 ;;		Unchanged: 0/0
  1783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1784 ;;      Params:         0       0       0       0       0
  1785 ;;      Locals:         0       0       0       0       0
  1786 ;;      Temps:          0       0       0       0       0
  1787 ;;      Totals:         0       0       0       0       0
  1788 ;;Total ram usage:        0 bytes
  1789 ;; Hardware stack levels used:    1
  1790 ;; Hardware stack levels required when called:    3
  1791 ;; This function calls:
  1792 ;;		_FlushCon
  1793 ;;		_FlushJudge
  1794 ;;		_FlushTime
  1795 ;; This function is called by:
  1796 ;;		_main
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           
  1801                           ;psect for function _GflushLoop
  1802  0115                     _GflushLoop:	
  1803                           
  1804                           ;flush.c: 30: FlushTime();
  1805                           
  1806                           ;incstack = 0
  1807                           ; Regs used in _GflushLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1808  0115  211C  120A  118A   	fcall	_FlushTime
  1809                           
  1810                           ;flush.c: 31: FlushJudge();
  1811  0118  21DD  120A  118A   	fcall	_FlushJudge
  1812                           
  1813                           ;flush.c: 32: FlushCon();
  1814  011B  291D               	ljmp	l5577
  1815  011C                     __end_of_GflushLoop:	
  1816  011C                     __ptext16:	
  1817 ;; *************** function _FlushTime *****************
  1818 ;; Defined at:
  1819 ;;		line 35 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\flush.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;		None
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;		None
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  1    wreg      void 
  1826 ;; Registers used:
  1827 ;;		None
  1828 ;; Tracked objects:
  1829 ;;		On entry : 300/0
  1830 ;;		On exit  : 300/0
  1831 ;;		Unchanged: 300/0
  1832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1833 ;;      Params:         0       0       0       0       0
  1834 ;;      Locals:         0       0       0       0       0
  1835 ;;      Temps:          0       0       0       0       0
  1836 ;;      Totals:         0       0       0       0       0
  1837 ;;Total ram usage:        0 bytes
  1838 ;; Hardware stack levels used:    1
  1839 ;; Hardware stack levels required when called:    2
  1840 ;; This function calls:
  1841 ;;		Nothing
  1842 ;; This function is called by:
  1843 ;;		_GflushLoop
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           
  1848                           ;psect for function _FlushTime
  1849  011C                     _FlushTime:	
  1850                           
  1851                           ;incstack = 0
  1852                           ; Regs used in _FlushTime: []
  1853  011C  0008               	return
  1854  011D                     __end_of_FlushTime:	
  1855  011D                     __ptext18:	
  1856 ;; *************** function _FlushCon *****************
  1857 ;; Defined at:
  1858 ;;		line 105 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\flush.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;		None
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;		None
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1867 ;; Tracked objects:
  1868 ;;		On entry : 300/0
  1869 ;;		On exit  : 300/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1872 ;;      Params:         0       0       0       0       0
  1873 ;;      Locals:         0       0       0       0       0
  1874 ;;      Temps:          0       0       0       0       0
  1875 ;;      Totals:         0       0       0       0       0
  1876 ;;Total ram usage:        0 bytes
  1877 ;; Hardware stack levels used:    1
  1878 ;; Hardware stack levels required when called:    2
  1879 ;; This function calls:
  1880 ;;		Nothing
  1881 ;; This function is called by:
  1882 ;;		_GflushLoop
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           
  1887                           ;psect for function _FlushCon
  1888  011D                     _FlushCon:	
  1889  011D                     l5577:	
  1890                           ;incstack = 0
  1891                           ; Regs used in _FlushCon: [wreg-fsr0h+status,2+status,0]
  1892                           
  1893                           
  1894                           ;flush.c: 107: switch (SEQflsuh)
  1895  011D  29B9               	goto	l5655
  1896  011E                     l2864:	
  1897                           ;flush.c: 108: {
  1898                           ;flush.c: 109: case FLUSH_INIT_0:
  1899                           
  1900                           
  1901                           ;flush.c: 110: Fflush1.bits.bit_6 = 0;
  1902  011E  1378               	bcf	_Fflush1,6	;volatile
  1903                           
  1904                           ;flush.c: 111: RA2 = 0;
  1905  011F  1105               	bcf	5,2	;volatile
  1906                           
  1907                           ;flush.c: 112: RA4 = 0;
  1908  0120  1205               	bcf	5,4	;volatile
  1909                           
  1910                           ;flush.c: 113: if((Fflush1.bits.bit_1 == 1) || (Fflush1.bits.bit_3 == 1))
  1911  0121  18F8               	btfsc	_Fflush1,1	;volatile
  1912  0122  2925               	goto	l5581
  1913  0123  1DF8               	btfss	_Fflush1,3	;volatile
  1914  0124  0008               	return
  1915  0125                     l5581:	
  1916                           
  1917                           ;flush.c: 114: {
  1918                           ;flush.c: 115: SEQflsuh = FLUSH_INIT_1;
  1919  0125  3001               	movlw	1
  1920  0126  2928               	goto	L2
  1921  0127                     l5585:	
  1922                           
  1923                           ;flush.c: 124: {
  1924                           ;flush.c: 125: SEQflsuh = FLUSH_END_0;
  1925  0127  3009               	movlw	9
  1926  0128                     L2:	
  1927  0128  00BD               	movwf	_SEQflsuh	;volatile
  1928                           
  1929                           ;flush.c: 116: CNTflush = 0;
  1930  0129  01F6               	clrf	_CNTflush	;volatile
  1931  012A  01F7               	clrf	_CNTflush+1	;volatile
  1932  012B  0008               	return
  1933  012C                     l2869:	
  1934                           ;flush.c: 119: case FLUSH_INIT_1:
  1935                           
  1936                           
  1937                           ;flush.c: 120: Fflush1.bits.bit_6 = 1;
  1938  012C  1778               	bsf	_Fflush1,6	;volatile
  1939                           
  1940                           ;flush.c: 121: RA2 = 0;
  1941  012D  1105               	bcf	5,2	;volatile
  1942                           
  1943                           ;flush.c: 122: RA4 = 0;
  1944  012E  1205               	bcf	5,4	;volatile
  1945                           
  1946                           ;flush.c: 123: if(Fbodysensor.bits.bit_0 == 1)
  1947  012F  187A               	btfsc	_Fbodysensor,0	;volatile
  1948  0130  2927               	goto	l5585
  1949                           
  1950                           ;flush.c: 128: }
  1951                           ;flush.c: 129: if(++CNTflush >= 5)
  1952  0131  0AF6               	incf	_CNTflush,f	;volatile
  1953  0132  1903               	skipnz
  1954  0133  0AF7               	incf	_CNTflush+1,f	;volatile
  1955  0134  3000               	movlw	0
  1956  0135  0277               	subwf	_CNTflush+1,w	;volatile
  1957  0136  3005               	movlw	5
  1958  0137  1903               	skipnz
  1959  0138  0276               	subwf	_CNTflush,w	;volatile
  1960  0139  1C03               	skipc
  1961  013A  0008               	return
  1962                           
  1963                           ;flush.c: 130: {
  1964                           ;flush.c: 131: CNTflush = 0;
  1965  013B  01F6               	clrf	_CNTflush	;volatile
  1966  013C  01F7               	clrf	_CNTflush+1	;volatile
  1967                           
  1968                           ;flush.c: 132: SEQflsuh = FLUSH_INIT_2;
  1969  013D  3002               	movlw	2
  1970  013E  00BD               	movwf	_SEQflsuh	;volatile
  1971  013F  0008               	return
  1972  0140                     l2872:	
  1973                           ;flush.c: 135: case FLUSH_INIT_2:
  1974                           
  1975                           
  1976                           ;flush.c: 136: Fflush1.bits.bit_6 = 1;
  1977  0140  1778               	bsf	_Fflush1,6	;volatile
  1978                           
  1979                           ;flush.c: 137: RA2 = 0;
  1980  0141  1105               	bcf	5,2	;volatile
  1981                           
  1982                           ;flush.c: 138: RA4 = 0;
  1983  0142  1205               	bcf	5,4	;volatile
  1984                           
  1985                           ;flush.c: 139: if(Fbodysensor.bits.bit_0 == 1)
  1986  0143  187A               	btfsc	_Fbodysensor,0	;volatile
  1987  0144  2927               	goto	l5585
  1988                           
  1989                           ;flush.c: 144: }
  1990                           ;flush.c: 146: if(Fflush1.bits.bit_1 == 1)
  1991  0145  1CF8               	btfss	_Fflush1,1	;volatile
  1992  0146  294A               	goto	l2874
  1993                           
  1994                           ;flush.c: 147: {
  1995                           ;flush.c: 148: SEQflsuh = FLUSH_BIG_0;
  1996  0147  3003               	movlw	3
  1997  0148  00BD               	movwf	_SEQflsuh	;volatile
  1998                           
  1999                           ;flush.c: 149: }
  2000  0149  0008               	return
  2001  014A                     l2874:	
  2002                           
  2003                           ;flush.c: 150: else if(Fflush1.bits.bit_3 == 1)
  2004  014A  1DF8               	btfss	_Fflush1,3	;volatile
  2005  014B  0008               	return
  2006                           
  2007                           ;flush.c: 151: {
  2008                           ;flush.c: 152: SEQflsuh = FLUSH_SML_0;
  2009  014C  3006               	movlw	6
  2010  014D  00BD               	movwf	_SEQflsuh	;volatile
  2011  014E  0008               	return
  2012  014F                     l2877:	
  2013                           ;flush.c: 155: case FLUSH_BIG_0:
  2014                           
  2015                           
  2016                           ;flush.c: 156: Fflush1.bits.bit_6 = 1;
  2017                           
  2018                           ;flush.c: 157: RA2 = 0;
  2019                           
  2020                           ;flush.c: 158: RA4 = 1;
  2021                           
  2022                           ;flush.c: 159: if(++CNTflush >= 10)
  2023  014F  2201  120A  118A   	fcall	PL4	;call to abstracted procedure
  2024  0152  1903               	skipnz
  2025  0153  0276               	subwf	_CNTflush,w	;volatile
  2026  0154  1C03               	skipc
  2027  0155  0008               	return
  2028                           
  2029                           ;flush.c: 160: {
  2030                           ;flush.c: 161: CNTflush = 0;
  2031  0156  01F6               	clrf	_CNTflush	;volatile
  2032  0157  01F7               	clrf	_CNTflush+1	;volatile
  2033                           
  2034                           ;flush.c: 162: SEQflsuh = FLUSH_BIG_1;
  2035  0158  3004               	movlw	4
  2036  0159  00BD               	movwf	_SEQflsuh	;volatile
  2037  015A  0008               	return
  2038  015B                     l2879:	
  2039                           ;flush.c: 165: case FLUSH_BIG_1:
  2040                           
  2041                           
  2042                           ;flush.c: 166: Fflush1.bits.bit_6 = 1;
  2043  015B  1778               	bsf	_Fflush1,6	;volatile
  2044                           
  2045                           ;flush.c: 167: RA2 = 1;
  2046  015C  1505               	bsf	5,2	;volatile
  2047                           
  2048                           ;flush.c: 168: RA4 = 1;
  2049  015D  1605               	bsf	5,4	;volatile
  2050                           
  2051                           ;flush.c: 170: if(++CNTflush >= 100)
  2052  015E  0AF6               	incf	_CNTflush,f	;volatile
  2053  015F  1903               	skipnz
  2054  0160  0AF7               	incf	_CNTflush+1,f	;volatile
  2055  0161  3000               	movlw	0
  2056  0162  0277               	subwf	_CNTflush+1,w	;volatile
  2057  0163  3064               	movlw	100
  2058  0164  1903               	skipnz
  2059  0165  0276               	subwf	_CNTflush,w	;volatile
  2060  0166  1C03               	skipc
  2061  0167  0008               	return
  2062                           
  2063                           ;flush.c: 171: {
  2064                           ;flush.c: 172: CNTflush = 0;
  2065  0168  01F6               	clrf	_CNTflush	;volatile
  2066  0169  01F7               	clrf	_CNTflush+1	;volatile
  2067                           
  2068                           ;flush.c: 173: SEQflsuh = FLUSH_BIG_2;
  2069  016A  3005               	movlw	5
  2070  016B  00BD               	movwf	_SEQflsuh	;volatile
  2071  016C  0008               	return
  2072  016D                     l2881:	
  2073                           ;flush.c: 183: case FLUSH_BIG_2:
  2074                           
  2075                           
  2076                           ;flush.c: 184: Fflush1.bits.bit_6 = 1;
  2077                           
  2078                           ;flush.c: 185: RA2 = 0;
  2079                           
  2080                           ;flush.c: 186: RA4 = 1;
  2081                           
  2082                           ;flush.c: 187: if(++CNTflush >= 10)
  2083  016D  2201  120A  118A   	fcall	PL4	;call to abstracted procedure
  2084  0170                     L1:	
  2085  0170  1903               	skipnz
  2086  0171  0276               	subwf	_CNTflush,w	;volatile
  2087  0172  1C03               	skipc
  2088  0173  0008               	return
  2089                           
  2090                           ;flush.c: 188: {
  2091                           ;flush.c: 189: CNTflush = 0;
  2092  0174  01F6               	clrf	_CNTflush	;volatile
  2093  0175  01F7               	clrf	_CNTflush+1	;volatile
  2094                           
  2095                           ;flush.c: 190: SEQflsuh = FLUSH_END_0;
  2096  0176  3009               	movlw	9
  2097  0177  00BD               	movwf	_SEQflsuh	;volatile
  2098  0178  0008               	return
  2099  0179                     l2883:	
  2100                           ;flush.c: 194: case FLUSH_SML_0:
  2101                           
  2102                           
  2103                           ;flush.c: 195: Fflush1.bits.bit_6 = 1;
  2104                           
  2105                           ;flush.c: 196: RA2 = 0;
  2106                           
  2107                           ;flush.c: 197: RA4 = 0;
  2108                           
  2109                           ;flush.c: 198: if(++CNTflush >= 5)
  2110  0179  21F8  120A  118A   	fcall	PL2	;call to abstracted procedure
  2111  017C  1903               	skipnz
  2112  017D  0276               	subwf	_CNTflush,w	;volatile
  2113  017E  1C03               	skipc
  2114  017F  0008               	return
  2115                           
  2116                           ;flush.c: 199: {
  2117                           ;flush.c: 200: CNTflush = 0;
  2118  0180  01F6               	clrf	_CNTflush	;volatile
  2119  0181  01F7               	clrf	_CNTflush+1	;volatile
  2120                           
  2121                           ;flush.c: 201: SEQflsuh = FLUSH_SML_1;
  2122  0182  3007               	movlw	7
  2123  0183  00BD               	movwf	_SEQflsuh	;volatile
  2124  0184  0008               	return
  2125  0185                     l2885:	
  2126                           ;flush.c: 204: case FLUSH_SML_1:
  2127                           
  2128                           
  2129                           ;flush.c: 205: Fflush1.bits.bit_6 = 1;
  2130  0185  1778               	bsf	_Fflush1,6	;volatile
  2131                           
  2132                           ;flush.c: 206: RA2 = 1;
  2133  0186  1505               	bsf	5,2	;volatile
  2134                           
  2135                           ;flush.c: 207: RA4 = 0;
  2136  0187  1205               	bcf	5,4	;volatile
  2137                           
  2138                           ;flush.c: 208: if(++CNTflush >= 200)
  2139  0188  0AF6               	incf	_CNTflush,f	;volatile
  2140  0189  1903               	skipnz
  2141  018A  0AF7               	incf	_CNTflush+1,f	;volatile
  2142  018B  3000               	movlw	0
  2143  018C  0277               	subwf	_CNTflush+1,w	;volatile
  2144  018D  30C8               	movlw	200
  2145  018E  1903               	skipnz
  2146  018F  0276               	subwf	_CNTflush,w	;volatile
  2147  0190  1C03               	skipc
  2148  0191  0008               	return
  2149                           
  2150                           ;flush.c: 209: {
  2151                           ;flush.c: 210: CNTflush = 0;
  2152  0192  01F6               	clrf	_CNTflush	;volatile
  2153  0193  01F7               	clrf	_CNTflush+1	;volatile
  2154                           
  2155                           ;flush.c: 211: SEQflsuh = FLUSH_SML_2;
  2156  0194  3008               	movlw	8
  2157  0195  00BD               	movwf	_SEQflsuh	;volatile
  2158  0196  0008               	return
  2159  0197                     l2887:	
  2160                           ;flush.c: 214: case FLUSH_SML_2:
  2161                           
  2162                           
  2163                           ;flush.c: 215: Fflush1.bits.bit_6 = 1;
  2164                           
  2165                           ;flush.c: 216: RA2 = 0;
  2166                           
  2167                           ;flush.c: 217: RA4 = 0;
  2168                           
  2169                           ;flush.c: 218: if(++CNTflush >= 5)
  2170  0197  21F8  120A  118A   	fcall	PL2	;call to abstracted procedure
  2171  019A  2970               	goto	L1
  2172  019B                     l2889:	
  2173                           ;flush.c: 225: case FLUSH_END_0:
  2174                           
  2175                           
  2176                           ;flush.c: 226: Fflush1.bits.bit_6 = 1;
  2177                           
  2178                           ;flush.c: 227: RA2 = 0;
  2179                           
  2180                           ;flush.c: 228: RA4 = 0;
  2181                           
  2182                           ;flush.c: 229: if(++CNTflush >= 5)
  2183  019B  21F8  120A  118A   	fcall	PL2	;call to abstracted procedure
  2184  019E  1903               	skipnz
  2185  019F  0276               	subwf	_CNTflush,w	;volatile
  2186  01A0  1C03               	skipc
  2187  01A1  0008               	return
  2188                           
  2189                           ;flush.c: 230: {
  2190                           ;flush.c: 231: CNTflush = 0;
  2191  01A2  01F6               	clrf	_CNTflush	;volatile
  2192  01A3  01F7               	clrf	_CNTflush+1	;volatile
  2193                           
  2194                           ;flush.c: 232: SEQflsuh = FLUSH_END_1;
  2195  01A4  300A               	movlw	10
  2196  01A5  00BD               	movwf	_SEQflsuh	;volatile
  2197  01A6  0008               	return
  2198  01A7                     l2891:	
  2199                           ;flush.c: 235: case FLUSH_END_1:
  2200                           
  2201                           
  2202                           ;flush.c: 236: Fflush1.bits.bit_6 = 0;
  2203  01A7  1378               	bcf	_Fflush1,6	;volatile
  2204                           
  2205                           ;flush.c: 237: RA2 = 0;
  2206  01A8  1105               	bcf	5,2	;volatile
  2207                           
  2208                           ;flush.c: 238: RA4 = 0;
  2209  01A9  1205               	bcf	5,4	;volatile
  2210                           
  2211                           ;flush.c: 239: SEQflsuh = FLUSH_INIT_0;
  2212  01AA  01BD               	clrf	_SEQflsuh	;volatile
  2213                           
  2214                           ;flush.c: 240: CNTflush = 0;
  2215  01AB  01F6               	clrf	_CNTflush	;volatile
  2216  01AC  01F7               	clrf	_CNTflush+1	;volatile
  2217                           
  2218                           ;flush.c: 241: Fflush1.bits.bit_1 = 0;
  2219  01AD  10F8               	bcf	_Fflush1,1	;volatile
  2220                           
  2221                           ;flush.c: 242: Fflush1.bits.bit_3 = 0;
  2222  01AE  11F8               	bcf	_Fflush1,3	;volatile
  2223                           
  2224                           ;flush.c: 243: break;
  2225  01AF  0008               	return
  2226  01B0                     l2892:	
  2227                           ;flush.c: 244: default:
  2228                           
  2229                           
  2230                           ;flush.c: 245: Fflush1.bits.bit_6 = 0;
  2231  01B0  1378               	bcf	_Fflush1,6	;volatile
  2232                           
  2233                           ;flush.c: 246: RA2 = 0;
  2234  01B1  1105               	bcf	5,2	;volatile
  2235                           
  2236                           ;flush.c: 247: RA4 = 0;
  2237  01B2  1205               	bcf	5,4	;volatile
  2238                           
  2239                           ;flush.c: 248: Fflush1.bits.bit_1 = 0;
  2240  01B3  10F8               	bcf	_Fflush1,1	;volatile
  2241                           
  2242                           ;flush.c: 249: Fflush1.bits.bit_3 = 0;
  2243  01B4  11F8               	bcf	_Fflush1,3	;volatile
  2244                           
  2245                           ;flush.c: 250: SEQflsuh = FLUSH_INIT_0;
  2246  01B5  01BD               	clrf	_SEQflsuh	;volatile
  2247                           
  2248                           ;flush.c: 251: CNTflush = 0;
  2249  01B6  01F6               	clrf	_CNTflush	;volatile
  2250  01B7  01F7               	clrf	_CNTflush+1	;volatile
  2251                           
  2252                           ;flush.c: 252: break;
  2253  01B8  0008               	return
  2254  01B9                     l5655:	
  2255  01B9  083D               	movf	_SEQflsuh,w	;volatile
  2256                           
  2257                           ; Switch size 1, requested type "space"
  2258                           ; Number of cases is 11, Range of values is 0 to 10
  2259                           ; switch strategies available:
  2260                           ; Name         Instructions Cycles
  2261                           ; simple_byte           34    18 (average)
  2262                           ; direct_byte           41     8 (fixed)
  2263                           ; jumptable            260     6 (fixed)
  2264                           ;	Chosen strategy is simple_byte
  2265  01BA  3A00               	xorlw	0	; case 0
  2266  01BB  1903               	skipnz
  2267  01BC  291E               	goto	l2864
  2268  01BD  3A01               	xorlw	1	; case 1
  2269  01BE  1903               	skipnz
  2270  01BF  292C               	goto	l2869
  2271  01C0  3A03               	xorlw	3	; case 2
  2272  01C1  1903               	skipnz
  2273  01C2  2940               	goto	l2872
  2274  01C3  3A01               	xorlw	1	; case 3
  2275  01C4  1903               	skipnz
  2276  01C5  294F               	goto	l2877
  2277  01C6  3A07               	xorlw	7	; case 4
  2278  01C7  1903               	skipnz
  2279  01C8  295B               	goto	l2879
  2280  01C9  3A01               	xorlw	1	; case 5
  2281  01CA  1903               	skipnz
  2282  01CB  296D               	goto	l2881
  2283  01CC  3A03               	xorlw	3	; case 6
  2284  01CD  1903               	skipnz
  2285  01CE  2979               	goto	l2883
  2286  01CF  3A01               	xorlw	1	; case 7
  2287  01D0  1903               	skipnz
  2288  01D1  2985               	goto	l2885
  2289  01D2  3A0F               	xorlw	15	; case 8
  2290  01D3  1903               	skipnz
  2291  01D4  2997               	goto	l2887
  2292  01D5  3A01               	xorlw	1	; case 9
  2293  01D6  1903               	skipnz
  2294  01D7  299B               	goto	l2889
  2295  01D8  3A03               	xorlw	3	; case 10
  2296  01D9  1903               	skipnz
  2297  01DA  29A7               	goto	l2891
  2298  01DB  29B0               	goto	l2892
  2299  01DC  0008               	return
  2300  01DD                     __end_of_FlushCon:	
  2301  01DD                     __ptext17:	
  2302 ;; *************** function _FlushJudge *****************
  2303 ;; Defined at:
  2304 ;;		line 39 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\flush.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;		None
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;		None
  2309 ;; Return value:  Size  Location     Type
  2310 ;;                  1    wreg      void 
  2311 ;; Registers used:
  2312 ;;		None
  2313 ;; Tracked objects:
  2314 ;;		On entry : 300/0
  2315 ;;		On exit  : 300/0
  2316 ;;		Unchanged: 300/0
  2317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2318 ;;      Params:         0       0       0       0       0
  2319 ;;      Locals:         0       0       0       0       0
  2320 ;;      Temps:          0       0       0       0       0
  2321 ;;      Totals:         0       0       0       0       0
  2322 ;;Total ram usage:        0 bytes
  2323 ;; Hardware stack levels used:    1
  2324 ;; Hardware stack levels required when called:    2
  2325 ;; This function calls:
  2326 ;;		Nothing
  2327 ;; This function is called by:
  2328 ;;		_GflushLoop
  2329 ;; This function uses a non-reentrant model
  2330 ;;
  2331                           
  2332                           
  2333                           ;psect for function _FlushJudge
  2334  01DD                     _FlushJudge:	
  2335                           
  2336                           ;flush.c: 59: if(Fbodysensor.bits.bit_4 == 1)
  2337                           
  2338                           ;incstack = 0
  2339                           ; Regs used in _FlushJudge: []
  2340  01DD  1E7A               	btfss	_Fbodysensor,4	;volatile
  2341  01DE  29E2               	goto	l2853
  2342                           
  2343                           ;flush.c: 60: {
  2344                           ;flush.c: 63: Fflush1.bits.bit_2 = 0;
  2345  01DF  1178               	bcf	_Fflush1,2	;volatile
  2346                           
  2347                           ;flush.c: 64: Fflush1.bits.bit_0 = 1;
  2348  01E0  1478               	bsf	_Fflush1,0	;volatile
  2349                           
  2350                           ;flush.c: 65: }
  2351  01E1  29E4               	goto	l2854
  2352  01E2                     l2853:	
  2353                           
  2354                           ;flush.c: 66: else
  2355                           ;flush.c: 67: {
  2356                           ;flush.c: 68: Fflush1.bits.bit_2 = 0;
  2357  01E2  1178               	bcf	_Fflush1,2	;volatile
  2358                           
  2359                           ;flush.c: 69: Fflush1.bits.bit_0 = 0;
  2360  01E3  1078               	bcf	_Fflush1,0	;volatile
  2361  01E4                     l2854:	
  2362                           
  2363                           ;flush.c: 70: }
  2364                           ;flush.c: 74: if (Fbodysensor.bits.bit_2 == 1)
  2365  01E4  197A               	btfsc	_Fbodysensor,2	;volatile
  2366                           
  2367                           ;flush.c: 75: {
  2368                           ;flush.c: 76: Fflush1.bits.bit_7 = 1;
  2369  01E5  17F8               	bsf	_Fflush1,7	;volatile
  2370                           
  2371                           ;flush.c: 77: }
  2372                           ;flush.c: 78: if (Fflush1.bits.bit_7 == 1)
  2373  01E6  1FF8               	btfss	_Fflush1,7	;volatile
  2374  01E7  0008               	return
  2375                           
  2376                           ;flush.c: 79: {
  2377                           ;flush.c: 80: if (Fflush1.bits.bit_6 == 1)
  2378  01E8  1F78               	btfss	_Fflush1,6	;volatile
  2379  01E9  29ED               	goto	l2857
  2380                           
  2381                           ;flush.c: 81: {
  2382                           ;flush.c: 82: Fflush1.bits.bit_2 = 0;
  2383  01EA  1178               	bcf	_Fflush1,2	;volatile
  2384                           
  2385                           ;flush.c: 83: Fflush1.bits.bit_0 = 0;
  2386  01EB  1078               	bcf	_Fflush1,0	;volatile
  2387                           
  2388                           ;flush.c: 84: return;
  2389  01EC  0008               	return
  2390  01ED                     l2857:	
  2391                           
  2392                           ;flush.c: 85: }
  2393                           ;flush.c: 86: Fflush1.bits.bit_7 = 0;
  2394  01ED  13F8               	bcf	_Fflush1,7	;volatile
  2395                           
  2396                           ;flush.c: 87: if(Fflush1.bits.bit_0 == 1)
  2397  01EE  1C78               	btfss	_Fflush1,0	;volatile
  2398  01EF  29F3               	goto	l2859
  2399                           
  2400                           ;flush.c: 88: {
  2401                           ;flush.c: 89: Fflush1.bits.bit_0 = 0;
  2402  01F0  1078               	bcf	_Fflush1,0	;volatile
  2403                           
  2404                           ;flush.c: 90: Fflush1.bits.bit_1 = 1;
  2405  01F1  14F8               	bsf	_Fflush1,1	;volatile
  2406                           
  2407                           ;flush.c: 91: return;
  2408  01F2  0008               	return
  2409  01F3                     l2859:	
  2410                           
  2411                           ;flush.c: 92: }
  2412                           ;flush.c: 93: if(Fflush1.bits.bit_2 == 1)
  2413  01F3  1D78               	btfss	_Fflush1,2	;volatile
  2414  01F4  0008               	return
  2415                           
  2416                           ;flush.c: 94: {
  2417                           ;flush.c: 95: Fflush1.bits.bit_2 = 0;
  2418  01F5  1178               	bcf	_Fflush1,2	;volatile
  2419                           
  2420                           ;flush.c: 96: Fflush1.bits.bit_3 = 1;
  2421  01F6  15F8               	bsf	_Fflush1,3	;volatile
  2422  01F7  0008               	return
  2423  01F8                     __end_of_FlushJudge:	
  2424  01F8                     PL2:	
  2425  01F8  1778               	bsf	_Fflush1,6	;volatile
  2426  01F9  1105               	bcf	5,2	;volatile
  2427  01FA  1205               	bcf	5,4	;volatile
  2428  01FB  0AF6               	incf	_CNTflush,f	;volatile
  2429  01FC  1903               	skipnz
  2430  01FD  0AF7               	incf	_CNTflush+1,f	;volatile
  2431  01FE  3000               	movlw	0
  2432  01FF  0277               	subwf	_CNTflush+1,w	;volatile
  2433  0200  3405               	retlw	5
  2434  0201                     __end_ofPL2:	
  2435  0201                     PL4:	
  2436  0201  1778               	bsf	_Fflush1,6	;volatile
  2437  0202  1105               	bcf	5,2	;volatile
  2438  0203  1605               	bsf	5,4	;volatile
  2439  0204  0AF6               	incf	_CNTflush,f	;volatile
  2440  0205  1903               	skipnz
  2441  0206  0AF7               	incf	_CNTflush+1,f	;volatile
  2442  0207  3000               	movlw	0
  2443  0208  0277               	subwf	_CNTflush+1,w	;volatile
  2444  0209  340A               	retlw	10
  2445  020A                     __end_ofPL4:	
  2446                           
  2447                           	psect	text19
  2448  0279                     __ptext19:	
  2449 ;; *************** function _FCTloop *****************
  2450 ;; Defined at:
  2451 ;;		line 16 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\fct.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;		None
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;		None
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  1    wreg      void 
  2458 ;; Registers used:
  2459 ;;		wreg, status,2, status,0, pclath, cstack
  2460 ;; Tracked objects:
  2461 ;;		On entry : 300/0
  2462 ;;		On exit  : 300/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2465 ;;      Params:         0       0       0       0       0
  2466 ;;      Locals:         0       0       0       0       0
  2467 ;;      Temps:          0       0       0       0       0
  2468 ;;      Totals:         0       0       0       0       0
  2469 ;;Total ram usage:        0 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    3
  2472 ;; This function calls:
  2473 ;;		_FCTjudge
  2474 ;;		_FCTkey
  2475 ;; This function is called by:
  2476 ;;		_main
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           
  2481                           ;psect for function _FCTloop
  2482  0279                     _FCTloop:	
  2483                           
  2484                           ;fct.c: 18: FCTkey();
  2485                           
  2486                           ;incstack = 0
  2487                           ; Regs used in _FCTloop: [wreg+status,2+status,0+pclath+cstack]
  2488  0279  22CE  120A  118A   	fcall	_FCTkey
  2489                           
  2490                           ;fct.c: 19: FCTjudge();
  2491  027C  2A7D               	ljmp	l5761
  2492  027D                     __end_of_FCTloop:	
  2493  027D                     __ptext21:	
  2494 ;; *************** function _FCTjudge *****************
  2495 ;; Defined at:
  2496 ;;		line 39 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\fct.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;		None
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;		None
  2501 ;; Return value:  Size  Location     Type
  2502 ;;                  1    wreg      void 
  2503 ;; Registers used:
  2504 ;;		wreg, status,2, status,0
  2505 ;; Tracked objects:
  2506 ;;		On entry : 300/0
  2507 ;;		On exit  : 300/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2510 ;;      Params:         0       0       0       0       0
  2511 ;;      Locals:         0       0       0       0       0
  2512 ;;      Temps:          0       0       0       0       0
  2513 ;;      Totals:         0       0       0       0       0
  2514 ;;Total ram usage:        0 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    2
  2517 ;; This function calls:
  2518 ;;		Nothing
  2519 ;; This function is called by:
  2520 ;;		_FCTloop
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           
  2525                           ;psect for function _FCTjudge
  2526  027D                     _FCTjudge:	
  2527  027D                     l5761:	
  2528                           ;incstack = 0
  2529                           ; Regs used in _FCTjudge: [wreg+status,2+status,0]
  2530                           
  2531                           
  2532                           ;fct.c: 41: if(fctBits001.bits.bit_0 == 1)
  2533  027D  1C79               	btfss	_fctBits001,0	;volatile
  2534  027E  2ACA               	goto	l5807
  2535                           
  2536                           ;fct.c: 42: {
  2537                           ;fct.c: 43: if(RB1 == 0)
  2538  027F  1886               	btfsc	6,1	;volatile
  2539  0280  2A9E               	goto	l5783
  2540                           
  2541                           ;fct.c: 44: {
  2542                           ;fct.c: 45: if(++CNTfctSensior >= 50)
  2543  0281  3032               	movlw	50
  2544  0282  0AB9               	incf	_CNTfctSensior,f	;volatile
  2545  0283  0239               	subwf	_CNTfctSensior,w	;volatile
  2546  0284  1C03               	skipc
  2547  0285  0008               	return
  2548                           
  2549                           ;fct.c: 46: {
  2550                           ;fct.c: 47: CNTfct = 0;
  2551  0286  01A0               	clrf	_CNTfct	;volatile
  2552  0287  01A1               	clrf	_CNTfct+1	;volatile
  2553                           
  2554                           ;fct.c: 48: CNTfctSensior = 50;
  2555  0288  3032               	movlw	50
  2556  0289  00B9               	movwf	_CNTfctSensior	;volatile
  2557                           
  2558                           ;fct.c: 49: if(++CNTfctFlashLed >= 50)
  2559  028A  0AB8               	incf	_CNTfctFlashLed,f	;volatile
  2560  028B  0238               	subwf	_CNTfctFlashLed,w	;volatile
  2561  028C  1C03               	skipc
  2562  028D  2A90               	goto	l5775
  2563                           
  2564                           ;fct.c: 50: {
  2565                           ;fct.c: 51: CNTfctFlashLed = 0;
  2566  028E  01B8               	clrf	_CNTfctFlashLed	;volatile
  2567                           
  2568                           ;fct.c: 52: }
  2569  028F  0008               	return
  2570  0290                     l5775:	
  2571                           
  2572                           ;fct.c: 53: else if(CNTfctFlashLed == 25)
  2573  0290  3019               	movlw	25
  2574  0291  0638               	xorwf	_CNTfctFlashLed,w	;volatile
  2575  0292  1D03               	btfss	3,2
  2576  0293  2A98               	goto	l5779
  2577                           
  2578                           ;fct.c: 54: {
  2579                           ;fct.c: 55: RA5 = 1;
  2580  0294  1685               	bsf	5,5	;volatile
  2581                           
  2582                           ;fct.c: 56: RA2 = 1;
  2583  0295  1505               	bsf	5,2	;volatile
  2584                           
  2585                           ;fct.c: 57: RA4 = 1;
  2586  0296  1605               	bsf	5,4	;volatile
  2587                           
  2588                           ;fct.c: 58: }
  2589  0297  0008               	return
  2590  0298                     l5779:	
  2591                           
  2592                           ;fct.c: 59: else if(CNTfctFlashLed == 1)
  2593  0298  0B38               	decfsz	_CNTfctFlashLed,w	;volatile
  2594  0299  0008               	return
  2595                           
  2596                           ;fct.c: 60: {
  2597                           ;fct.c: 61: RA5 = 0;
  2598  029A  1285               	bcf	5,5	;volatile
  2599                           
  2600                           ;fct.c: 62: RA2 = 0;
  2601  029B  1105               	bcf	5,2	;volatile
  2602                           
  2603                           ;fct.c: 63: RA4 = 0;
  2604  029C  1205               	bcf	5,4	;volatile
  2605                           
  2606                           ;fct.c: 64: }
  2607                           ;fct.c: 65: }
  2608                           ;fct.c: 66: }
  2609  029D  0008               	return
  2610  029E                     l5783:	
  2611                           
  2612                           ;fct.c: 67: else
  2613                           ;fct.c: 68: {
  2614                           ;fct.c: 69: CNTfctSensior = 0;
  2615  029E  01B9               	clrf	_CNTfctSensior	;volatile
  2616                           
  2617                           ;fct.c: 70: if(++CNTfct >= 100)
  2618  029F  0AA0               	incf	_CNTfct,f	;volatile
  2619  02A0  1903               	skipnz
  2620  02A1  0AA1               	incf	_CNTfct+1,f	;volatile
  2621  02A2  3000               	movlw	0
  2622  02A3  0221               	subwf	_CNTfct+1,w	;volatile
  2623  02A4  3064               	movlw	100
  2624  02A5  1903               	skipnz
  2625  02A6  0220               	subwf	_CNTfct,w	;volatile
  2626  02A7  1C03               	skipc
  2627  02A8  2AAF               	goto	l5795
  2628                           
  2629                           ;fct.c: 71: {
  2630                           ;fct.c: 72: CNTfct = 0;
  2631  02A9  01A0               	clrf	_CNTfct	;volatile
  2632  02AA  01A1               	clrf	_CNTfct+1	;volatile
  2633                           
  2634                           ;fct.c: 74: RA5 = 0;
  2635  02AB  1285               	bcf	5,5	;volatile
  2636                           
  2637                           ;fct.c: 75: RA2 = 0;
  2638  02AC  1105               	bcf	5,2	;volatile
  2639                           
  2640                           ;fct.c: 76: RA4 = 0;
  2641  02AD  1205               	bcf	5,4	;volatile
  2642                           
  2643                           ;fct.c: 77: }
  2644  02AE  0008               	return
  2645  02AF                     l5795:	
  2646                           
  2647                           ;fct.c: 78: else if(CNTfct == 75)
  2648  02AF  304B               	movlw	75
  2649  02B0  0620               	xorwf	_CNTfct,w	;volatile
  2650  02B1  0421               	iorwf	_CNTfct+1,w	;volatile
  2651  02B2  1D03               	btfss	3,2
  2652  02B3  2AB8               	goto	l5799
  2653                           
  2654                           ;fct.c: 79: {
  2655                           ;fct.c: 80: RA5 = 1;
  2656  02B4  1685               	bsf	5,5	;volatile
  2657                           
  2658                           ;fct.c: 81: RA2 = 0;
  2659  02B5  1105               	bcf	5,2	;volatile
  2660                           
  2661                           ;fct.c: 82: RA4 = 0;
  2662  02B6  1205               	bcf	5,4	;volatile
  2663                           
  2664                           ;fct.c: 83: }
  2665  02B7  0008               	return
  2666  02B8                     l5799:	
  2667                           
  2668                           ;fct.c: 84: else if(CNTfct == 50)
  2669  02B8  3032               	movlw	50
  2670  02B9  0620               	xorwf	_CNTfct,w	;volatile
  2671  02BA  0421               	iorwf	_CNTfct+1,w	;volatile
  2672  02BB  1D03               	btfss	3,2
  2673  02BC  2AC1               	goto	l5803
  2674                           
  2675                           ;fct.c: 85: {
  2676                           ;fct.c: 86: RA5 = 0;
  2677  02BD  1285               	bcf	5,5	;volatile
  2678                           
  2679                           ;fct.c: 87: RA2 = 1;
  2680  02BE  1505               	bsf	5,2	;volatile
  2681                           
  2682                           ;fct.c: 88: RA4 = 0;
  2683  02BF  1205               	bcf	5,4	;volatile
  2684                           
  2685                           ;fct.c: 89: }
  2686  02C0  0008               	return
  2687  02C1                     l5803:	
  2688                           
  2689                           ;fct.c: 90: else if(CNTfct == 25)
  2690  02C1  3019               	movlw	25
  2691  02C2  0620               	xorwf	_CNTfct,w	;volatile
  2692  02C3  0421               	iorwf	_CNTfct+1,w	;volatile
  2693  02C4  1D03               	btfss	3,2
  2694  02C5  0008               	return
  2695                           
  2696                           ;fct.c: 91: {
  2697                           ;fct.c: 92: RA5 = 0;
  2698  02C6  1285               	bcf	5,5	;volatile
  2699                           
  2700                           ;fct.c: 93: RA2 = 0;
  2701  02C7  1105               	bcf	5,2	;volatile
  2702                           
  2703                           ;fct.c: 94: RA4 = 1;
  2704  02C8  1605               	bsf	5,4	;volatile
  2705  02C9  0008               	return
  2706  02CA                     l5807:	
  2707                           
  2708                           ;fct.c: 98: else
  2709                           ;fct.c: 99: {
  2710                           ;fct.c: 100: CNTfctSensior = 0;
  2711  02CA  01B9               	clrf	_CNTfctSensior	;volatile
  2712                           
  2713                           ;fct.c: 101: CNTfct = 0;
  2714  02CB  01A0               	clrf	_CNTfct	;volatile
  2715  02CC  01A1               	clrf	_CNTfct+1	;volatile
  2716  02CD  0008               	return
  2717  02CE                     __end_of_FCTjudge:	
  2718  02CE                     __ptext20:	
  2719 ;; *************** function _FCTkey *****************
  2720 ;; Defined at:
  2721 ;;		line 22 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\fct.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;		None
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;		None
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      void 
  2728 ;; Registers used:
  2729 ;;		wreg, status,2, status,0
  2730 ;; Tracked objects:
  2731 ;;		On entry : 300/0
  2732 ;;		On exit  : 300/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2735 ;;      Params:         0       0       0       0       0
  2736 ;;      Locals:         0       0       0       0       0
  2737 ;;      Temps:          0       0       0       0       0
  2738 ;;      Totals:         0       0       0       0       0
  2739 ;;Total ram usage:        0 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; Hardware stack levels required when called:    2
  2742 ;; This function calls:
  2743 ;;		Nothing
  2744 ;; This function is called by:
  2745 ;;		_FCTloop
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           
  2750                           ;psect for function _FCTkey
  2751  02CE                     _FCTkey:	
  2752                           
  2753                           ;fct.c: 24: if(RB0 == 1)
  2754                           
  2755                           ;incstack = 0
  2756                           ; Regs used in _FCTkey: [wreg+status,2+status,0]
  2757  02CE  1C06               	btfss	6,0	;volatile
  2758  02CF  2AD9               	goto	l4764
  2759                           
  2760                           ;fct.c: 25: {
  2761                           ;fct.c: 26: if(++CNTfctStart >= 50)
  2762  02D0  3032               	movlw	50
  2763  02D1  0ABA               	incf	_CNTfctStart,f	;volatile
  2764  02D2  023A               	subwf	_CNTfctStart,w	;volatile
  2765  02D3  1C03               	skipc
  2766  02D4  0008               	return
  2767                           
  2768                           ;fct.c: 27: {
  2769                           ;fct.c: 28: CNTfctStart = 50;
  2770  02D5  3032               	movlw	50
  2771  02D6  00BA               	movwf	_CNTfctStart	;volatile
  2772                           
  2773                           ;fct.c: 29: fctBits001.bits.bit_0 = 1;
  2774  02D7  1479               	bsf	_fctBits001,0	;volatile
  2775  02D8  0008               	return
  2776  02D9                     l4764:	
  2777                           
  2778                           ;fct.c: 32: else
  2779                           ;fct.c: 33: {
  2780                           ;fct.c: 34: fctBits001.bits.bit_0 = 0;
  2781  02D9  1079               	bcf	_fctBits001,0	;volatile
  2782                           
  2783                           ;fct.c: 35: CNTfctStart = 0;
  2784  02DA  01BA               	clrf	_CNTfctStart	;volatile
  2785  02DB  0008               	return
  2786  02DC                     __end_of_FCTkey:	
  2787                           
  2788                           	psect	text22
  2789  02DC                     __ptext22:	
  2790 ;; *************** function _Delay_nms *****************
  2791 ;; Defined at:
  2792 ;;		line 35 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\main.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;  inittempl       2    4[COMMON] unsigned int 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  i               2    0[BANK0 ] unsigned int 
  2797 ;;  gtemp           1    2[BANK0 ] unsigned char 
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  1    wreg      void 
  2800 ;; Registers used:
  2801 ;;		wreg, status,2, status,0, pclath, cstack
  2802 ;; Tracked objects:
  2803 ;;		On entry : 300/100
  2804 ;;		On exit  : 300/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2807 ;;      Params:         2       0       0       0       0
  2808 ;;      Locals:         0       3       0       0       0
  2809 ;;      Temps:          0       0       0       0       0
  2810 ;;      Totals:         2       3       0       0       0
  2811 ;;Total ram usage:        5 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; Hardware stack levels required when called:    3
  2814 ;; This function calls:
  2815 ;;		_Delay
  2816 ;; This function is called by:
  2817 ;;		_main
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           
  2822                           ;psect for function _Delay_nms
  2823  02DC                     _Delay_nms:	
  2824                           
  2825                           ;main.c: 37: unsigned int i;
  2826                           ;main.c: 38: unsigned char gtemp;
  2827                           ;main.c: 40: gtemp = 0;
  2828                           
  2829                           ;incstack = 0
  2830                           ; Regs used in _Delay_nms: [wreg+status,2+status,0+pclath+cstack]
  2831  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  2832  02DD  01C8               	clrf	Delay_nms@gtemp
  2833                           
  2834                           ;main.c: 41: if (GIE == 1)
  2835  02DE  1F8B               	btfss	11,7	;volatile
  2836  02DF  2AE3               	goto	l5939
  2837                           
  2838                           ;main.c: 42: {
  2839                           ;main.c: 43: gtemp = 1;
  2840  02E0  01C8               	clrf	Delay_nms@gtemp
  2841  02E1  0AC8               	incf	Delay_nms@gtemp,f
  2842                           
  2843                           ;main.c: 44: GIE = 0;
  2844  02E2  138B               	bcf	11,7	;volatile
  2845  02E3                     l5939:	
  2846                           
  2847                           ;main.c: 45: }
  2848                           ;main.c: 46: for (i = 0; i < inittempl; i++)
  2849  02E3  01C6               	clrf	Delay_nms@i
  2850  02E4  01C7               	clrf	Delay_nms@i+1
  2851  02E5                     l5945:	
  2852  02E5  0875               	movf	Delay_nms@inittempl+1,w
  2853  02E6  0247               	subwf	Delay_nms@i+1,w
  2854  02E7  1D03               	skipz
  2855  02E8  2AEB               	goto	u1295
  2856  02E9  0874               	movf	Delay_nms@inittempl,w
  2857  02EA  0246               	subwf	Delay_nms@i,w
  2858  02EB                     u1295:	
  2859  02EB  1803               	btfsc	3,0
  2860  02EC  2AFA               	goto	l5947
  2861                           
  2862                           ;main.c: 47: {
  2863                           ;main.c: 48: Delay(154);
  2864  02ED  309A               	movlw	154
  2865  02EE  00F2               	movwf	Delay@dtemp
  2866  02EF  01F3               	clrf	Delay@dtemp+1
  2867  02F0  22FE  120A  118A   	fcall	_Delay
  2868  02F3  0064               	clrwdt	;# 
  2869  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  2870  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  2871  02F6  0AC6               	incf	Delay_nms@i,f
  2872  02F7  1903               	skipnz
  2873  02F8  0AC7               	incf	Delay_nms@i+1,f
  2874  02F9  2AE5               	goto	l5945
  2875  02FA                     l5947:	
  2876                           
  2877                           ;main.c: 50: }
  2878                           ;main.c: 51: if (gtemp == 1)
  2879  02FA  0B48               	decfsz	Delay_nms@gtemp,w
  2880  02FB  0008               	return
  2881                           
  2882                           ;main.c: 52: GIE = 1;
  2883  02FC  178B               	bsf	11,7	;volatile
  2884  02FD  0008               	return
  2885  02FE                     __end_of_Delay_nms:	
  2886  02FE                     __ptext23:	
  2887 ;; *************** function _Delay *****************
  2888 ;; Defined at:
  2889 ;;		line 27 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\main.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;  dtemp           2    2[COMMON] unsigned int 
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;		None
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  1    wreg      void 
  2896 ;; Registers used:
  2897 ;;		wreg, status,2, status,0
  2898 ;; Tracked objects:
  2899 ;;		On entry : 200/0
  2900 ;;		On exit  : 200/0
  2901 ;;		Unchanged: 200/0
  2902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2903 ;;      Params:         2       0       0       0       0
  2904 ;;      Locals:         0       0       0       0       0
  2905 ;;      Temps:          0       0       0       0       0
  2906 ;;      Totals:         2       0       0       0       0
  2907 ;;Total ram usage:        2 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; Hardware stack levels required when called:    2
  2910 ;; This function calls:
  2911 ;;		Nothing
  2912 ;; This function is called by:
  2913 ;;		_Delay_nms
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           
  2918                           ;psect for function _Delay
  2919  02FE                     _Delay:	
  2920  02FE                     l5931:	
  2921                           ;main.c: 29: while (dtemp--)
  2922                           
  2923                           ;incstack = 0
  2924                           ; Regs used in _Delay: [wreg+status,2+status,0]
  2925                           
  2926  02FE  3001               	movlw	1
  2927  02FF  02F2               	subwf	Delay@dtemp,f
  2928  0300  3000               	movlw	0
  2929  0301  1C03               	skipc
  2930  0302  03F3               	decf	Delay@dtemp+1,f
  2931  0303  02F3               	subwf	Delay@dtemp+1,f
  2932  0304  0F72               	incfsz	Delay@dtemp,w
  2933  0305  2AFE               	goto	l5931
  2934  0306  0A73               	incf	Delay@dtemp+1,w
  2935  0307  1903               	btfsc	3,2
  2936  0308  0008               	return
  2937  0309  2AFE               	goto	l5931
  2938  030A                     __end_of_Delay:	
  2939                           
  2940                           	psect	text24
  2941  030A                     __ptext24:	
  2942 ;; *************** function _Int_ALL *****************
  2943 ;; Defined at:
  2944 ;;		line 562 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\main.c"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;		None
  2947 ;; Auto vars:     Size  Location     Type
  2948 ;;		None
  2949 ;; Return value:  Size  Location     Type
  2950 ;;                  1    wreg      void 
  2951 ;; Registers used:
  2952 ;;		wreg, status,2, status,0, pclath, cstack
  2953 ;; Tracked objects:
  2954 ;;		On entry : 0/0
  2955 ;;		On exit  : 300/0
  2956 ;;		Unchanged: 0/0
  2957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2958 ;;      Params:         0       0       0       0       0
  2959 ;;      Locals:         0       0       0       0       0
  2960 ;;      Temps:          2       0       0       0       0
  2961 ;;      Totals:         2       0       0       0       0
  2962 ;;Total ram usage:        2 bytes
  2963 ;; Hardware stack levels used:    1
  2964 ;; Hardware stack levels required when called:    1
  2965 ;; This function calls:
  2966 ;;		_INT_LED_SHOW
  2967 ;; This function is called by:
  2968 ;;		Interrupt level 1
  2969 ;; This function uses a non-reentrant model
  2970 ;;
  2971                           
  2972                           
  2973                           ;psect for function _Int_ALL
  2974  030A                     _Int_ALL:	
  2975                           
  2976                           ;main.c: 565: if (TMR1IF)
  2977  030A  1283               	bcf	3,5	;RP0=0, select bank0
  2978  030B  1303               	bcf	3,6	;RP1=0, select bank0
  2979  030C  1C0C               	btfss	12,0	;volatile
  2980  030D  2B22               	goto	i1l5923
  2981                           
  2982                           ;main.c: 566: {
  2983                           ;main.c: 572: TMR1 = 0xE0C0;
  2984  030E  30E0               	movlw	224
  2985  030F  008F               	movwf	15	;volatile
  2986  0310  30C0               	movlw	192
  2987  0311  008E               	movwf	14	;volatile
  2988                           
  2989                           ;main.c: 573: TMR1IF = 0;
  2990  0312  100C               	bcf	12,0	;volatile
  2991                           
  2992                           ;main.c: 576: Fsys1.bits.bit_1 = 1;
  2993  0313  14C5               	bsf	_Fsys1,1	;volatile
  2994                           
  2995                           ;main.c: 579: if (++MainTime_1s >= 1000)
  2996  0314  0AAE               	incf	_MainTime_1s,f	;volatile
  2997  0315  1903               	skipnz
  2998  0316  0AAF               	incf	_MainTime_1s+1,f	;volatile
  2999  0317  3003               	movlw	3
  3000  0318  022F               	subwf	_MainTime_1s+1,w	;volatile
  3001  0319  30E8               	movlw	232
  3002  031A  1903               	skipnz
  3003  031B  022E               	subwf	_MainTime_1s,w	;volatile
  3004  031C  1C03               	skipc
  3005  031D  2B22               	goto	i1l5923
  3006                           
  3007                           ;main.c: 580: {
  3008                           ;main.c: 581: MainTime_1s = 0;
  3009  031E  01AE               	clrf	_MainTime_1s	;volatile
  3010  031F  01AF               	clrf	_MainTime_1s+1	;volatile
  3011                           
  3012                           ;main.c: 582: Fsys1s.byte = 0xFF;
  3013  0320  30FF               	movlw	255
  3014  0321  00C4               	movwf	_Fsys1s	;volatile
  3015  0322                     i1l5923:	
  3016                           
  3017                           ;main.c: 590: }
  3018                           ;main.c: 591: }
  3019                           ;main.c: 594: if (TMR2IF)
  3020  0322  1C8C               	btfss	12,1	;volatile
  3021  0323  2B26               	goto	i1l1942
  3022                           
  3023                           ;main.c: 595: {
  3024                           ;main.c: 596: TMR2IF = 0;
  3025  0324  108C               	bcf	12,1	;volatile
  3026                           
  3027                           ;main.c: 597: INT_LED_SHOW();
  3028  0325  232D               	fcall	_INT_LED_SHOW
  3029  0326                     i1l1942:	
  3030  0326  0871               	movf	??_Int_ALL+1,w
  3031  0327  008A               	movwf	10
  3032  0328  0E70               	swapf	??_Int_ALL^(0+-128),w
  3033  0329  0083               	movwf	3
  3034  032A  0EFE               	swapf	126,f
  3035  032B  0E7E               	swapf	126,w
  3036  032C  0009               	retfie
  3037  032D                     __end_of_Int_ALL:	
  3038  032D                     __ptext25:	
  3039 ;; *************** function _INT_LED_SHOW *****************
  3040 ;; Defined at:
  3041 ;;		line 193 in file "D:\mywork.wqs\ARROW\ABM007_79F133\ABM007_79F133\source\light.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;		None
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;		None
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      void 
  3048 ;; Registers used:
  3049 ;;		None
  3050 ;; Tracked objects:
  3051 ;;		On entry : 300/0
  3052 ;;		On exit  : 300/0
  3053 ;;		Unchanged: 300/0
  3054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3055 ;;      Params:         0       0       0       0       0
  3056 ;;      Locals:         0       0       0       0       0
  3057 ;;      Temps:          0       0       0       0       0
  3058 ;;      Totals:         0       0       0       0       0
  3059 ;;Total ram usage:        0 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; This function calls:
  3062 ;;		Nothing
  3063 ;; This function is called by:
  3064 ;;		_Int_ALL
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           
  3069                           ;psect for function _INT_LED_SHOW
  3070  032D                     _INT_LED_SHOW:	
  3071                           
  3072                           ;incstack = 0
  3073                           ; Regs used in _INT_LED_SHOW: []
  3074  032D  0008               	return
  3075  032E                     __end_of_INT_LED_SHOW:	
  3076  007E                     btemp	set	126	;btemp
  3077  007E                     wtemp0	set	126
  3078                           
  3079                           	psect	intentry
  3080  0004                     __pintentry:	
  3081                           ;incstack = 0
  3082                           ; Regs used in _Int_ALL: [wreg+status,2+status,0+pclath+cstack]
  3083                           
  3084  0004                     interrupt_function:	
  3085  007E                     saved_w	set	btemp
  3086  0004  00FE               	movwf	btemp
  3087  0005  0E03               	swapf	3,w
  3088  0006  00F0               	movwf	??_Int_ALL
  3089  0007  080A               	movf	10,w
  3090  0008  00F1               	movwf	??_Int_ALL+1
  3091  0009  120A  118A  2B0A   	ljmp	_Int_ALL


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      11
    BANK0            80      3      41
    BANK1            80      0       0
    BANK3            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Delay_nms
    _GsensorLoop->_SensorControl
    _Delay_nms->_Delay

Critical Paths under _Int_ALL in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Delay_nms

Critical Paths under _Int_ALL in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Int_ALL in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Int_ALL in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Int_ALL in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     244
                          _Delay_nms
                            _FCTloop
                         _GflushLoop
                           _GledLoop
                        _GsensorLoop
                          _Init_GPIO
                            _Init_IC
                        _Init_TIMER1
                        _Init_TIMER2
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_IC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_GPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GsensorLoop                                          0     0      0       0
                      _SensorControl
                        _SensorJudge
                          _SensorKey
                         _SensorTime
 ---------------------------------------------------------------------------------
 (2) _SensorTime                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorKey                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorJudge                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorControl                                        1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GledLoop                                             0     0      0       0
                            _LED_Con
                          _LED_Judge
                            _LED_Key
                           _LED_Time
 ---------------------------------------------------------------------------------
 (2) _LED_Time                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Key                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Judge                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Con                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GflushLoop                                           0     0      0       0
                           _FlushCon
                         _FlushJudge
                          _FlushTime
 ---------------------------------------------------------------------------------
 (2) _FlushTime                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FlushJudge                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FlushCon                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FCTloop                                              0     0      0       0
                           _FCTjudge
                             _FCTkey
 ---------------------------------------------------------------------------------
 (2) _FCTkey                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FCTjudge                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay_nms                                            5     3      2     244
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _Delay                                                2     0      2      85
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Int_ALL                                              2     2      0       0
                                              0 COMMON     2     2      0
                       _INT_LED_SHOW
 ---------------------------------------------------------------------------------
 (4) _INT_LED_SHOW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_nms
     _Delay
   _FCTloop
     _FCTjudge
     _FCTkey
   _GflushLoop
     _FlushCon
     _FlushJudge
     _FlushTime
   _GledLoop
     _LED_Con
     _LED_Judge
     _LED_Key
     _LED_Time
   _GsensorLoop
     _SensorControl
     _SensorJudge
     _SensorKey
     _SensorTime
   _Init_GPIO
   _Init_IC
   _Init_TIMER1
   _Init_TIMER2

 _Int_ALL (ROOT)
   _INT_LED_SHOW

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      3      29       4       51.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BITBANK3            50      0       0       7        0.0%
BANK3               50      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
ABS                  0      0      34      11        0.0%
DATA                 0      0      34      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Apr 28 17:54:25 2024

                     PL2 01F8                       PL4 0201                       PL6 010C  
                     fsr 0004                      _GIE 005F                      _RA2 002A  
                    _RB0 0030                      _RB1 0031                      _RA4 002C  
                    _RA5 002D                      _PR2 0092                      u590 0342  
                    u980 0068                      u990 006E                      u982 0069  
                    u992 006F                      indf 0000          __end_of_LED_Con 0346  
        __end_of_LED_Key 0339          __end_of_FCTloop 027D                     l1922 0240  
                   l1918 0238                     l1927 0248                     l2853 01E2  
                   l2854 01E4                     l3831 0092                     l2872 0140  
                   l2864 011E                     l3840 00BE                     l2881 016D  
                   l2857 01ED                     l3817 0049                     l2874 014A  
                   l2891 01A7                     l2883 0179                     l2859 01F3  
                   l3835 00AA                     l2892 01B0                     l3844 00D6  
                   l2885 0185                     l2877 014F                     l2869 012C  
                   l3829 007E                     l3854 0076                     l2887 0197  
                   l2879 015B                     l3855 0077                     l5703 0081  
                   l2889 019B                     l5721 00D3                     l5713 00BB  
                   l5803 02C1                     l5555 034C                     l5731 00EC  
                   l4764 02D9                     l5581 0125                     l5557 033C  
                   l5709 00B1                     l5741 00FA                     l5807 02CA  
                   l5655 01B9                     l5743 0062                     l5735 00F7  
                   l5671 0041                     l5761 027D                     l5585 0127  
                   l5577 011D                     l5729 00E9                     l5931 02FE  
                   l5691 008F                     l5677 004E                     l5775 0290  
                   l5783 029E                     l5945 02E5                     l5947 02FA  
                   l5939 02E3                     l5795 02AF                     l5779 0298  
                   l5699 00A7                     l5971 0232                     l5981 0250  
                   l5799 02B8                     l5983 0270                     l5967 022B  
                   u1020 007B                     u1295 02EB                     _PIE1 008C  
                   _PIE2 008D                     _PIR1 000C                     _PIR2 000D  
                   _TMR1 000E                     _WPUA 018E                     _WPUB 0095  
                   _WPUC 018F                     _main 020A            ??_Init_TIMER1 0072  
          ??_Init_TIMER2 0072                     btemp 007E                     start 000C  
     __size_of_LED_Judge 0008               _FledBits01 0042          __end_of_Int_ALL 032D  
        __end_of_Init_IC 0360         __end_of_LED_Time 033C         __end_of_FCTjudge 02CE  
          ??_GsensorLoop 0073                    ?_main 0070                    _T1CON 0010  
                  _T2CON 0012                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _Delay 02FE                    _Fsys1 0045  
             _GflushLoop 0115                    _templ 0040                    pclath 000A  
                  status 0003                    wtemp0 007E               _FlushJudge 01DD  
       __end_of_GledLoop 0338          __initialization 000F             __end_of_main 0279  
    __end_of_Init_TIMER1 0388      __end_of_Init_TIMER2 037D         __end_of_FlushCon 01DD  
     __size_of_Delay_nms 0022                   ??_main 0076              _Fbodysensor 007A  
              ??_LED_Con 0072                ??_LED_Key 0072                ??_FCTloop 0072  
                 ?_Delay 0072        __end_of_LED_Judge 034E    __end_of_SensorControl 007D  
    __end_of_GsensorLoop 0029                   i1l1942 0326                   _FCTkey 02CE  
                 i1l5923 0322                   _INTCON 000B                   _CNTfct 0020  
     __size_of_Init_GPIO 0012                   _OSCCON 008F                   _TMR1IE 0460  
                 _TMR1IF 0060                   _TMR2IE 0461                   _TMR2IF 0061  
     __size_of_FlushTime 0001            ?_INT_LED_SHOW 0070                   _WDTCON 0105  
              ??_Int_ALL 0070                ??_Init_IC 0072                   _RX_Buf 0041  
          _CNTfctSensior 0039            _CNTbodyInTime 0024                   _Fsys1m 0043  
                 _Fsys1s 0044            _CNTbreath_Led 0036               _SensorTime 002A  
          ??_SensorJudge 0072              _MainTime_1s 002E       __size_of_SensorKey 0001  
                 saved_w 007E       Delay_nms@inittempl 0074              ?_GflushLoop 0070  
         ??_INT_LED_SHOW 0070        __end_of_Delay_nms 02FE  __end_of__initialization 001B  
              ?_LED_Time 0070                ?_FCTjudge 0070              _Init_TIMER1 037D  
            _Init_TIMER2 0372              ?_FlushJudge 0070            __end_of_Delay 030A  
         __pcstackCOMMON 0070               __end_ofPL2 0201               __end_ofPL4 020A  
             __end_ofPL6 0115        __end_of_Init_GPIO 0372        __end_of_FlushTime 011D  
            _GsensorLoop 001F      __end_of_SensorJudge 010C                  ??_Delay 0074  
              ?_GledLoop 0070               __pbssBANK0 0020                  ?_FCTkey 0070  
             _fctBits001 0079                ?_FlushCon 0070               ??_LED_Time 0072  
             ??_FCTjudge 0072        __end_of_SensorKey 002A               __pmaintext 020A  
            ?_SensorTime 0070               __pintentry 0004      __size_of_GflushLoop 0007  
         _CNTfctFlashLed 0038                  _LED_Con 033C                  _LED_Key 0338  
                _FCTloop 0279      __size_of_FlushJudge 001B               ??_GledLoop 0072  
                _SEQbody 003B                  _SEQmain 003F               ??_FlushCon 0072  
        __size_of_FCTkey 000E                  _Fflush1 0078                  _Int_ALL 030A  
                _Init_IC 034E           _CNTbreath_Led1 0034           _CNTbreath_Led2 0032  
         _CNTbreath_Led3 0030              _SensorJudge 007D     __end_of_INT_LED_SHOW 032E  
                __ptext0 0000                  __ptext1 0372                  __ptext2 037D  
                __ptext3 034E                  __ptext4 0360                  __ptext5 001F  
                __ptext6 002A                  __ptext7 0029                  __ptext8 007D  
                __ptext9 0062                _AD_Result 002C                  clrloop0 0389  
              _LED_Judge 0346     end_of_initialization 001B      __size_of_SensorTime 0038  
              _CNTbody_h 002A                _CNTbody_l 0028           Delay_nms@gtemp 0048  
           ??_GflushLoop 0072               ?_LED_Judge 0070           __end_of_FCTkey 02DC  
           ?_Init_TIMER1 0070             ?_Init_TIMER2 0070             ??_FlushJudge 0072  
              _BufCntAdd 0026                _Delay_nms 02DC        __size_of_LED_Time 0003  
      __size_of_FCTjudge 0051   __size_of_SensorControl 001B       __end_of_GflushLoop 011C  
           ?_GsensorLoop 0070      start_initialization 000F                _Init_GPIO 0360  
              _FlushTime 011C       __end_of_FlushJudge 01F8                 ??_FCTkey 0072  
      __size_of_GledLoop 000A        __size_of_FlushCon 00C0               ?_Delay_nms 0074  
              _SensorKey 0029    __size_of_INT_LED_SHOW 0001             ??_SensorTime 0072  
               ?_LED_Con 0070                 ?_LED_Key 0070                 ?_FCTloop 0070  
            __pbssCOMMON 0076               ?_Init_GPIO 0070                ___latbits 0002  
          __pcstackBANK0 0046               ?_FlushTime 0070            _SensorControl 0062  
            ??_LED_Judge 0072       __end_of_SensorTime 0062             _INT_LED_SHOW 032D  
               ?_Int_ALL 0070                 ?_Init_IC 0070               ?_SensorKey 0070  
           ?_SensorJudge 0070           __size_of_Delay 000C           ?_SensorControl 0070  
      interrupt_function 0004                 _LED_Time 0339                 _FCTjudge 027D  
              clear_ram0 0388                 _CNTflush 0076              ??_Delay_nms 0076  
   __size_of_Init_TIMER1 000B     __size_of_Init_TIMER2 000B                 _SEQflsuh 003D  
   __size_of_GsensorLoop 000A              ??_Init_GPIO 0072         __size_of_LED_Con 000A  
       __size_of_LED_Key 0001              ??_FlushTime 0072         __size_of_FCTloop 0004  
               _GledLoop 032E                 _FlushCon 011D         __size_of_Int_ALL 0023  
       __size_of_Init_IC 0012          _CNTbodyExitTime 0022              _CNTfctStart 003A  
            ??_SensorKey 0072          ??_SensorControl 0072                 __ptext10 032E  
               __ptext11 0339                 __ptext20 02CE                 __ptext12 0338  
               __ptext21 027D                 __ptext13 0346                 __ptext22 02DC  
               __ptext14 033C                 __ptext23 02FE                 __ptext15 0115  
               __ptext24 030A                 __ptext16 011C                 __ptext25 032D  
               __ptext17 01DD                 __ptext18 011D                 __ptext19 0279  
          __size_of_main 006F          _u8stsBodySensor 003C            _MainTime_1min 003E  
             Delay@dtemp 0072     __size_of_SensorJudge 008F               Delay_nms@i 0046  
               intlevel1 0000               _OPTION_REG 0081  
