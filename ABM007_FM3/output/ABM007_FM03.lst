

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 03 16:45:55 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	79F133
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text10,local,class=CODE,merge=1,delta=2
    18                           	psect	text15,local,class=CODE,merge=1,delta=2
    19                           	psect	text22,local,class=CODE,merge=1,delta=2
    20                           	psect	text31,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	pa_nodes0,global,class=CODE,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 1.45
    26                           ; Generated 16/11/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F887 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	text0
    61  0000                     __ptext0:	
    62  000E                     _TMR1	set	14
    63  0012                     _T2CON	set	18
    64  0010                     _T1CON	set	16
    65  000D                     _PIR2	set	13
    66  000C                     _PIR1	set	12
    67  000B                     _INTCON	set	11
    68  0007                     _PORTC	set	7
    69  0006                     _PORTB	set	6
    70  0005                     _PORTA	set	5
    71  0060                     _TMR1IF	set	96
    72  0061                     _TMR2IF	set	97
    73  005F                     _GIE	set	95
    74  0030                     _RB0	set	48
    75  0031                     _RB1	set	49
    76  0032                     _RB2	set	50
    77  0029                     _RA1	set	41
    78  002A                     _RA2	set	42
    79  002C                     _RA4	set	44
    80  002D                     _RA5	set	45
    81  002E                     _RA6	set	46
    82  0095                     _WPUB	set	149
    83  0092                     _PR2	set	146
    84  008F                     _OSCCON	set	143
    85  008D                     _PIE2	set	141
    86  008C                     _PIE1	set	140
    87  0087                     _TRISC	set	135
    88  0086                     _TRISB	set	134
    89  0085                     _TRISA	set	133
    90  0081                     _OPTION_REG	set	129
    91  0460                     _TMR1IE	set	1120
    92  0461                     _TMR2IE	set	1121
    93  0105                     _WDTCON	set	261
    94  018F                     _WPUC	set	399
    95  018E                     _WPUA	set	398
    96                           
    97                           	psect	cinit
    98  000F                     start_initialization:	
    99                           ; #config settings
   100                           
   101  000F                     __initialization:	
   102  000F  3020               	movlw	low __pbssBANK0
   103                           
   104                           ; Clear objects allocated to COMMON
   105  0010  01F9               	clrf	__pbssCOMMON& (0+127)
   106  0011  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   107                           
   108                           ; Clear objects allocated to BANK0
   109  0012  1383               	bcf	3,7	;select IRP bank0
   110  0013  0084               	movwf	4
   111  0014  305A               	movlw	low (__pbssBANK0+58)
   112  0015  120A  118A  24B2   	fcall	clear_ram0
   113  0018                     end_of_initialization:	
   114                           ;End of C runtime variable initialization code
   115                           
   116  0018                     __end_of__initialization:	
   117  0018  0183               	clrf	3
   118  0019  120A  118A  2BA7   	ljmp	_main	;jump to C main() function
   119                           
   120                           	psect	bssCOMMON
   121  0079                     __pbssCOMMON:	
   122  0079                     _SeletedLine:	
   123  0079                     	ds	1
   124  007A                     _Fbodysensor:	
   125  007A                     	ds	1
   126                           
   127                           	psect	bssBANK0
   128  0020                     __pbssBANK0:	
   129  0020                     _flag_time:	
   130  0020                     	ds	2
   131  0022                     _CNTkey2:	
   132  0022                     	ds	2
   133  0024                     _CNTkey1:	
   134  0024                     	ds	2
   135  0026                     _CNTfct:	
   136  0026                     	ds	2
   137  0028                     _CNTfctStart:	
   138  0028                     	ds	2
   139  002A                     _CNTbodyExitTime:	
   140  002A                     	ds	2
   141  002C                     _CNTbodyInTime:	
   142  002C                     	ds	2
   143  002E                     _BufCntAdd:	
   144  002E                     	ds	2
   145  0030                     _CNTbody_l:	
   146  0030                     	ds	2
   147  0032                     _CNTbody_h:	
   148  0032                     	ds	2
   149  0034                     _CNTflush:	
   150  0034                     	ds	2
   151  0036                     _AD_Result:	
   152  0036                     	ds	2
   153  0038                     _MainTime_1s:	
   154  0038                     	ds	2
   155  003A                     _CNTbreath_Led3:	
   156  003A                     	ds	2
   157  003C                     _CNTbreath_Led2:	
   158  003C                     	ds	2
   159  003E                     _CNTbreath_Led1:	
   160  003E                     	ds	2
   161  0040                     _CNTbreath_Led:	
   162  0040                     	ds	2
   163  0042                     _CurrentIO:	
   164  0042                     	ds	1
   165  0043                     _CNTfctFlashLed:	
   166  0043                     	ds	1
   167  0044                     _CNTfctSensior:	
   168  0044                     	ds	1
   169  0045                     _SEQbody:	
   170  0045                     	ds	1
   171  0046                     _u8stsBodySensor:	
   172  0046                     	ds	1
   173  0047                     _SEQflsuh:	
   174  0047                     	ds	1
   175  0048                     _Fflush1:	
   176  0048                     	ds	1
   177  0049                     _MainTime_1min:	
   178  0049                     	ds	1
   179  004A                     _SEQmain:	
   180  004A                     	ds	1
   181  004B                     _templ:	
   182  004B                     	ds	1
   183  004C                     _RX_Buf:	
   184  004C                     	ds	1
   185  004D                     _FledBits01:	
   186  004D                     	ds	1
   187  004E                     _Fsys1m:	
   188  004E                     	ds	1
   189  004F                     _Fsys1s:	
   190  004F                     	ds	1
   191  0050                     _Fsys1:	
   192  0050                     	ds	1
   193  0051                     _fctBits001:	
   194  0051                     	ds	1
   195  0052                     _KeyLines:	
   196  0052                     	ds	8
   197                           
   198                           	psect	clrtext
   199  04B2                     clear_ram0:	
   200                           ;	Called with FSR containing the base address, and
   201                           ;	W with the last address+1
   202                           
   203  04B2  0064               	clrwdt	;clear the watchdog before getting into this loop
   204  04B3                     clrloop0:	
   205  04B3  0180               	clrf	0	;clear RAM location pointed to by FSR
   206  04B4  0A84               	incf	4,f	;increment pointer
   207  04B5  0604               	xorwf	4,w	;XOR with final address
   208  04B6  1903               	btfsc	3,2	;have we reached the end yet?
   209  04B7  3400               	retlw	0	;all done for this memory range, return
   210  04B8  0604               	xorwf	4,w	;XOR again to restore value
   211  04B9  2CB3               	goto	clrloop0	;do the next byte
   212                           
   213                           	psect	cstackCOMMON
   214  0070                     __pcstackCOMMON:	
   215  0070                     ?_LED_Time:	
   216  0070                     ?_LED_Key:	
   217                           ; 1 bytes @ 0x0
   218                           
   219  0070                     ?_LED_Judge:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0070                     ?_LED_Con:	
   223                           ; 1 bytes @ 0x0
   224                           
   225  0070                     ?_FCTloop:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ?_GsensorLoop:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_GflushLoop:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     ?_FlushTime:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ?_FlushJudge:	
   238                           ; 1 bytes @ 0x0
   239                           
   240  0070                     ?_FlushCon:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ?_GkeyLoop:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0070                     ?_SensorKey:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0070                     ?_SensorTime:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_SensorJudge:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_SensorControl:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_FCTkey:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_FCTjudge:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?_ScanKey:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_KeyControl:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ?_GledLoop:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?_INT_LED_SHOW:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ??_INT_LED_SHOW:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ?_Init_GPIO:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?_Init_IC:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ?_Init_TIMER1:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?_Init_TIMER2:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_main:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_Int_ALL:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ??_Int_ALL:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_G_KEY:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_R_KEY:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_key1:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?_key2:	
   310                           ; 1 bytes @ 0x0
   311                           
   312                           
   313                           ; 1 bytes @ 0x0
   314  0070                     	ds	2
   315  0072                     ??_LED_Time:	
   316  0072                     ??_LED_Key:	
   317                           ; 1 bytes @ 0x2
   318                           
   319  0072                     ??_LED_Judge:	
   320                           ; 1 bytes @ 0x2
   321                           
   322  0072                     ??_LED_Con:	
   323                           ; 1 bytes @ 0x2
   324                           
   325  0072                     ??_FlushTime:	
   326                           ; 1 bytes @ 0x2
   327                           
   328  0072                     ??_FlushCon:	
   329                           ; 1 bytes @ 0x2
   330                           
   331  0072                     ??_SensorKey:	
   332                           ; 1 bytes @ 0x2
   333                           
   334  0072                     ??_SensorTime:	
   335                           ; 1 bytes @ 0x2
   336                           
   337  0072                     ??_SensorJudge:	
   338                           ; 1 bytes @ 0x2
   339                           
   340  0072                     ??_SensorControl:	
   341                           ; 1 bytes @ 0x2
   342                           
   343  0072                     ??_FCTjudge:	
   344                           ; 1 bytes @ 0x2
   345                           
   346  0072                     ??_ScanKey:	
   347                           ; 1 bytes @ 0x2
   348                           
   349  0072                     ??_KeyControl:	
   350                           ; 1 bytes @ 0x2
   351                           
   352  0072                     ??_GledLoop:	
   353                           ; 1 bytes @ 0x2
   354                           
   355  0072                     ?_Delay:	
   356                           ; 1 bytes @ 0x2
   357                           
   358  0072                     ??_Init_GPIO:	
   359                           ; 1 bytes @ 0x2
   360                           
   361  0072                     ??_Init_IC:	
   362                           ; 1 bytes @ 0x2
   363                           
   364  0072                     ??_Init_TIMER1:	
   365                           ; 1 bytes @ 0x2
   366                           
   367  0072                     ??_Init_TIMER2:	
   368                           ; 1 bytes @ 0x2
   369                           
   370  0072                     ??_G_KEY:	
   371                           ; 1 bytes @ 0x2
   372                           
   373  0072                     ??_R_KEY:	
   374                           ; 1 bytes @ 0x2
   375                           
   376  0072                     ??_key1:	
   377                           ; 1 bytes @ 0x2
   378                           
   379  0072                     ??_key2:	
   380                           ; 1 bytes @ 0x2
   381                           
   382  0072                     ScanKey@line_num:	
   383                           ; 1 bytes @ 0x2
   384                           
   385  0072                     Delay@dtemp:	
   386                           ; 1 bytes @ 0x2
   387                           
   388                           
   389                           ; 2 bytes @ 0x2
   390  0072                     	ds	1
   391  0073                     ??_GsensorLoop:	
   392                           
   393                           ; 1 bytes @ 0x3
   394  0073                     	ds	1
   395  0074                     ??_GkeyLoop:	
   396  0074                     ??_Delay:	
   397                           ; 1 bytes @ 0x4
   398                           
   399  0074                     ?_Delay_nms:	
   400                           ; 1 bytes @ 0x4
   401                           
   402  0074                     Delay_nms@inittempl:	
   403                           ; 1 bytes @ 0x4
   404                           
   405                           
   406                           ; 2 bytes @ 0x4
   407  0074                     	ds	2
   408  0076                     ??_FlushJudge:	
   409  0076                     ??_Delay_nms:	
   410                           ; 1 bytes @ 0x6
   411                           
   412  0076                     FlushJudge@Key_Step:	
   413                           ; 1 bytes @ 0x6
   414                           
   415  0076                     Delay_nms@i:	
   416                           ; 1 bytes @ 0x6
   417                           
   418                           
   419                           ; 2 bytes @ 0x6
   420  0076                     	ds	1
   421  0077                     ??_GflushLoop:	
   422                           
   423                           ; 1 bytes @ 0x7
   424  0077                     	ds	1
   425  0078                     Delay_nms@gtemp:	
   426                           
   427                           ; 1 bytes @ 0x8
   428  0078                     	ds	1
   429  0079                     ??_FCTloop:	
   430  0079                     ??_FCTkey:	
   431                           ; 1 bytes @ 0x9
   432                           
   433  0079                     ??_main:	
   434                           ; 1 bytes @ 0x9
   435                           
   436                           
   437                           	psect	cstackBANK0
   438  005A                     __pcstackBANK0:	
   439                           ; 1 bytes @ 0x9
   440                           
   441  005A                     _KeyControl$3140:	
   442                           
   443                           ; 2 bytes @ 0x0
   444  005A                     	ds	2
   445  005C                     _KeyControl$3141:	
   446                           
   447                           ; 2 bytes @ 0x2
   448  005C                     	ds	2
   449  005E                     _KeyControl$3142:	
   450                           
   451                           ; 2 bytes @ 0x4
   452  005E                     	ds	2
   453  0060                     KeyControl@this:	
   454                           
   455                           ; 1 bytes @ 0x6
   456  0060                     	ds	1
   457                           
   458                           	psect	maintext
   459  03A7                     __pmaintext:	
   460 ;;
   461 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   462 ;;
   463 ;; *************** function _main *****************
   464 ;; Defined at:
   465 ;;		line 473 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\main.c"
   466 ;; Parameters:    Size  Location     Type
   467 ;;		None
   468 ;; Auto vars:     Size  Location     Type
   469 ;;		None
   470 ;; Return value:  Size  Location     Type
   471 ;;                  1    wreg      void 
   472 ;; Registers used:
   473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   474 ;; Tracked objects:
   475 ;;		On entry : B00/0
   476 ;;		On exit  : 300/0
   477 ;;		Unchanged: 0/0
   478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   479 ;;      Params:         0       0       0       0       0
   480 ;;      Locals:         0       0       0       0       0
   481 ;;      Temps:          0       0       0       0       0
   482 ;;      Totals:         0       0       0       0       0
   483 ;;Total ram usage:        0 bytes
   484 ;; Hardware stack levels required when called:    6
   485 ;; This function calls:
   486 ;;		_Delay_nms
   487 ;;		_FCTloop
   488 ;;		_GflushLoop
   489 ;;		_GledLoop
   490 ;;		_GsensorLoop
   491 ;;		_Init_GPIO
   492 ;;		_Init_IC
   493 ;;		_Init_TIMER1
   494 ;;		_Init_TIMER2
   495 ;; This function is called by:
   496 ;;		Startup code after reset
   497 ;; This function uses a non-reentrant model
   498 ;;
   499                           
   500                           
   501                           ;psect for function _main
   502  03A7                     _main:	
   503                           
   504                           ;incstack = 0
   505                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   506  03A7  0000               	nop	;# 
   507  03A8  0064               	clrwdt	;# 
   508                           
   509                           ;main.c: 478: INTCON = 0;
   510  03A9  018B               	clrf	11	;volatile
   511                           
   512                           ;main.c: 480: Init_GPIO();
   513  03AA  120A  118A  2473  120A  118A  	fcall	_Init_GPIO
   514                           
   515                           ;main.c: 481: Init_IC();
   516  03AF  120A  118A  2488  120A  118A  	fcall	_Init_IC
   517                           
   518                           ;main.c: 482: Delay_nms(200);
   519  03B4  30C8               	movlw	200
   520  03B5  00F4               	movwf	Delay_nms@inittempl
   521  03B6  01F5               	clrf	Delay_nms@inittempl+1
   522  03B7  120A  118A  237C  120A  118A  	fcall	_Delay_nms
   523                           
   524                           ;main.c: 483: Init_TIMER1();
   525  03BC  120A  118A  249A  120A  118A  	fcall	_Init_TIMER1
   526                           
   527                           ;main.c: 484: Init_TIMER2();
   528  03C1  120A  118A  24A7  120A  118A  	fcall	_Init_TIMER2
   529                           
   530                           ;main.c: 495: INTCON = 0XC0;
   531  03C6  30C0               	movlw	192
   532  03C7  008B               	movwf	11	;volatile
   533  03C8                     l7311:	
   534                           
   535                           ;main.c: 499: {
   536                           ;main.c: 501: if (Fsys1.bits.bit_1 == 1)
   537  03C8  1CD0               	btfss	_Fsys1,1	;volatile
   538  03C9  2BC8               	goto	l7311
   539  03CA  0064               	clrwdt	;# 
   540                           
   541                           ;main.c: 505: Fsys1.bits.bit_1 = 0;
   542  03CB  1283               	bcf	3,5	;RP0=0, select bank0
   543  03CC  1303               	bcf	3,6	;RP1=0, select bank0
   544  03CD  10D0               	bcf	_Fsys1,1	;volatile
   545                           
   546                           ;main.c: 506: switch (SEQmain)
   547  03CE  2BED               	goto	l7325
   548  03CF                     l7315:	
   549                           
   550                           ;main.c: 509: FCTloop();
   551  03CF  120A  118A  2326  120A  118A  	fcall	_FCTloop
   552                           
   553                           ;main.c: 510: break;
   554  03D4  2C0D               	goto	l7327
   555  03D5                     l1924:	
   556                           ;main.c: 511: case 1:
   557                           
   558                           
   559                           ;main.c: 512: if(fctBits001.bits.bit_0 == 0)
   560  03D5  1851               	btfsc	_fctBits001,0	;volatile
   561  03D6  2C0D               	goto	l7327
   562                           
   563                           ;main.c: 513: {
   564                           ;main.c: 514: GsensorLoop();
   565  03D7  120A  118A  2230  120A  118A  	fcall	_GsensorLoop
   566  03DC  2C0D               	goto	l7327
   567  03DD                     l1928:	
   568                           ;main.c: 523: case 4:
   569                           
   570                           
   571                           ;main.c: 524: if(fctBits001.bits.bit_0 == 0)
   572  03DD  1851               	btfsc	_fctBits001,0	;volatile
   573  03DE  2C0D               	goto	l7327
   574                           
   575                           ;main.c: 525: {
   576                           ;main.c: 526: GflushLoop();
   577  03DF  120A  118A  201C  120A  118A  	fcall	_GflushLoop
   578  03E4  2C0D               	goto	l7327
   579  03E5                     l1933:	
   580                           ;main.c: 538: case 8:
   581                           
   582                           
   583                           ;main.c: 539: if(fctBits001.bits.bit_0 == 0)
   584  03E5  1851               	btfsc	_fctBits001,0	;volatile
   585  03E6  2C0D               	goto	l7327
   586                           
   587                           ;main.c: 540: {
   588                           ;main.c: 541: GledLoop();
   589  03E7  120A  118A  2453  120A  118A  	fcall	_GledLoop
   590  03EC  2C0D               	goto	l7327
   591  03ED                     l7325:	
   592  03ED  084A               	movf	_SEQmain,w	;volatile
   593                           
   594                           ; Switch size 1, requested type "space"
   595                           ; Number of cases is 10, Range of values is 0 to 9
   596                           ; switch strategies available:
   597                           ; Name         Instructions Cycles
   598                           ; simple_byte           31    16 (average)
   599                           ; direct_byte           38     8 (fixed)
   600                           ; jumptable            260     6 (fixed)
   601                           ;	Chosen strategy is simple_byte
   602  03EE  3A00               	xorlw	0	; case 0
   603  03EF  1903               	skipnz
   604  03F0  2BCF               	goto	l7315
   605  03F1  3A01               	xorlw	1	; case 1
   606  03F2  1903               	skipnz
   607  03F3  2BD5               	goto	l1924
   608  03F4  3A03               	xorlw	3	; case 2
   609  03F5  1903               	skipnz
   610  03F6  2C0D               	goto	l7327
   611  03F7  3A01               	xorlw	1	; case 3
   612  03F8  1903               	skipnz
   613  03F9  2C0D               	goto	l7327
   614  03FA  3A07               	xorlw	7	; case 4
   615  03FB  1903               	skipnz
   616  03FC  2BDD               	goto	l1928
   617  03FD  3A01               	xorlw	1	; case 5
   618  03FE  1903               	skipnz
   619  03FF  2C0D               	goto	l7327
   620  0400  3A03               	xorlw	3	; case 6
   621  0401  1903               	skipnz
   622  0402  2C0D               	goto	l7327
   623  0403  3A01               	xorlw	1	; case 7
   624  0404  1903               	skipnz
   625  0405  2C0D               	goto	l7327
   626  0406  3A0F               	xorlw	15	; case 8
   627  0407  1903               	skipnz
   628  0408  2BE5               	goto	l1933
   629  0409  3A01               	xorlw	1	; case 9
   630  040A  1903               	skipnz
   631  040B  2C0D               	goto	l7327
   632  040C  2C0D               	goto	l7327
   633  040D                     l7327:	
   634                           
   635                           ;main.c: 551: if (++SEQmain >= 10)
   636  040D  300A               	movlw	10
   637  040E  1283               	bcf	3,5	;RP0=0, select bank0
   638  040F  1303               	bcf	3,6	;RP1=0, select bank0
   639  0410  0ACA               	incf	_SEQmain,f	;volatile
   640  0411  024A               	subwf	_SEQmain,w	;volatile
   641  0412  1C03               	skipc
   642  0413  2BC8               	goto	l7311
   643                           
   644                           ;main.c: 552: {
   645                           ;main.c: 553: SEQmain = 0;
   646  0414  01CA               	clrf	_SEQmain	;volatile
   647  0415  2BC8               	goto	l7311
   648  0416                     __end_of_main:	
   649                           
   650                           	psect	text1
   651  04A7                     __ptext1:	
   652 ;; *************** function _Init_TIMER2 *****************
   653 ;; Defined at:
   654 ;;		line 174 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\main.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;		None
   657 ;; Auto vars:     Size  Location     Type
   658 ;;		None
   659 ;; Return value:  Size  Location     Type
   660 ;;                  1    wreg      void 
   661 ;; Registers used:
   662 ;;		wreg
   663 ;; Tracked objects:
   664 ;;		On entry : 300/0
   665 ;;		On exit  : 300/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   668 ;;      Params:         0       0       0       0       0
   669 ;;      Locals:         0       0       0       0       0
   670 ;;      Temps:          0       0       0       0       0
   671 ;;      Totals:         0       0       0       0       0
   672 ;;Total ram usage:        0 bytes
   673 ;; Hardware stack levels used:    1
   674 ;; Hardware stack levels required when called:    2
   675 ;; This function calls:
   676 ;;		Nothing
   677 ;; This function is called by:
   678 ;;		_main
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           
   683                           ;psect for function _Init_TIMER2
   684  04A7                     _Init_TIMER2:	
   685                           
   686                           ;main.c: 176: PR2 = 24;
   687                           
   688                           ;incstack = 0
   689                           ; Regs used in _Init_TIMER2: [wreg]
   690  04A7  3018               	movlw	24
   691  04A8  1683               	bsf	3,5	;RP0=1, select bank1
   692  04A9  0092               	movwf	18	;volatile
   693                           
   694                           ;main.c: 177: TMR2IF = 0;
   695  04AA  1283               	bcf	3,5	;RP0=0, select bank0
   696  04AB  108C               	bcf	12,1	;volatile
   697                           
   698                           ;main.c: 178: TMR2IE = 1;
   699  04AC  1683               	bsf	3,5	;RP0=1, select bank1
   700  04AD  148C               	bsf	12,1	;volatile
   701                           
   702                           ;main.c: 179: T2CON = 5;
   703  04AE  3005               	movlw	5
   704  04AF  1283               	bcf	3,5	;RP0=0, select bank0
   705  04B0  0092               	movwf	18	;volatile
   706  04B1  0008               	return
   707  04B2                     __end_of_Init_TIMER2:	
   708                           
   709                           	psect	text2
   710  049A                     __ptext2:	
   711 ;; *************** function _Init_TIMER1 *****************
   712 ;; Defined at:
   713 ;;		line 152 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\main.c"
   714 ;; Parameters:    Size  Location     Type
   715 ;;		None
   716 ;; Auto vars:     Size  Location     Type
   717 ;;		None
   718 ;; Return value:  Size  Location     Type
   719 ;;                  1    wreg      void 
   720 ;; Registers used:
   721 ;;		wreg
   722 ;; Tracked objects:
   723 ;;		On entry : 0/100
   724 ;;		On exit  : 300/0
   725 ;;		Unchanged: 0/0
   726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   727 ;;      Params:         0       0       0       0       0
   728 ;;      Locals:         0       0       0       0       0
   729 ;;      Temps:          0       0       0       0       0
   730 ;;      Totals:         0       0       0       0       0
   731 ;;Total ram usage:        0 bytes
   732 ;; Hardware stack levels used:    1
   733 ;; Hardware stack levels required when called:    2
   734 ;; This function calls:
   735 ;;		Nothing
   736 ;; This function is called by:
   737 ;;		_main
   738 ;; This function uses a non-reentrant model
   739 ;;
   740                           
   741                           
   742                           ;psect for function _Init_TIMER1
   743  049A                     _Init_TIMER1:	
   744                           
   745                           ;main.c: 156: TMR1 = 0xE0C0;
   746                           
   747                           ;incstack = 0
   748                           ; Regs used in _Init_TIMER1: [wreg]
   749  049A  30E0               	movlw	224
   750  049B  1283               	bcf	3,5	;RP0=0, select bank0
   751  049C  1303               	bcf	3,6	;RP1=0, select bank0
   752  049D  008F               	movwf	15	;volatile
   753  049E  30C0               	movlw	192
   754  049F  008E               	movwf	14	;volatile
   755                           
   756                           ;main.c: 157: TMR1IF = 0;
   757  04A0  100C               	bcf	12,0	;volatile
   758                           
   759                           ;main.c: 158: TMR1IE = 1;
   760  04A1  1683               	bsf	3,5	;RP0=1, select bank1
   761  04A2  140C               	bsf	12,0	;volatile
   762                           
   763                           ;main.c: 159: T1CON = 0x01;
   764  04A3  3001               	movlw	1
   765  04A4  1283               	bcf	3,5	;RP0=0, select bank0
   766  04A5  0090               	movwf	16	;volatile
   767  04A6  0008               	return
   768  04A7                     __end_of_Init_TIMER1:	
   769                           
   770                           	psect	text3
   771  0488                     __ptext3:	
   772 ;; *************** function _Init_IC *****************
   773 ;; Defined at:
   774 ;;		line 96 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\main.c"
   775 ;; Parameters:    Size  Location     Type
   776 ;;		None
   777 ;; Auto vars:     Size  Location     Type
   778 ;;		None
   779 ;; Return value:  Size  Location     Type
   780 ;;                  1    wreg      void 
   781 ;; Registers used:
   782 ;;		wreg, status,2
   783 ;; Tracked objects:
   784 ;;		On entry : 300/300
   785 ;;		On exit  : 300/100
   786 ;;		Unchanged: 0/0
   787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   788 ;;      Params:         0       0       0       0       0
   789 ;;      Locals:         0       0       0       0       0
   790 ;;      Temps:          0       0       0       0       0
   791 ;;      Totals:         0       0       0       0       0
   792 ;;Total ram usage:        0 bytes
   793 ;; Hardware stack levels used:    1
   794 ;; Hardware stack levels required when called:    2
   795 ;; This function calls:
   796 ;;		Nothing
   797 ;; This function is called by:
   798 ;;		_main
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           
   803                           ;psect for function _Init_IC
   804  0488                     _Init_IC:	
   805                           
   806                           ;incstack = 0
   807                           ; Regs used in _Init_IC: [wreg+status,2]
   808  0488  0064               	clrwdt	;# 
   809                           
   810                           ;main.c: 103: INTCON = 0x00;
   811  0489  018B               	clrf	11	;volatile
   812                           
   813                           ;main.c: 108: PIR1 = 0;
   814  048A  1283               	bcf	3,5	;RP0=0, select bank0
   815  048B  1303               	bcf	3,6	;RP1=0, select bank0
   816  048C  018C               	clrf	12	;volatile
   817                           
   818                           ;main.c: 113: PIR2 = 0;
   819  048D  018D               	clrf	13	;volatile
   820                           
   821                           ;main.c: 118: WDTCON = 0x01;
   822  048E  3001               	movlw	1
   823  048F  1703               	bsf	3,6	;RP1=1, select bank2
   824  0490  0085               	movwf	5	;volatile
   825                           
   826                           ;main.c: 123: OPTION_REG = 0b00001110;
   827  0491  300E               	movlw	14
   828  0492  1683               	bsf	3,5	;RP0=1, select bank1
   829  0493  1303               	bcf	3,6	;RP1=0, select bank1
   830  0494  0081               	movwf	1	;volatile
   831                           
   832                           ;main.c: 128: OSCCON = 0x71;
   833  0495  3071               	movlw	113
   834  0496  008F               	movwf	15	;volatile
   835                           
   836                           ;main.c: 133: PIE1 = 0;
   837  0497  018C               	clrf	12	;volatile
   838                           
   839                           ;main.c: 138: PIE2 = 0;
   840  0498  018D               	clrf	13	;volatile
   841  0499  0008               	return
   842  049A                     __end_of_Init_IC:	
   843                           
   844                           	psect	text4
   845  0473                     __ptext4:	
   846 ;; *************** function _Init_GPIO *****************
   847 ;; Defined at:
   848 ;;		line 62 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\main.c"
   849 ;; Parameters:    Size  Location     Type
   850 ;;		None
   851 ;; Auto vars:     Size  Location     Type
   852 ;;		None
   853 ;; Return value:  Size  Location     Type
   854 ;;                  1    wreg      void 
   855 ;; Registers used:
   856 ;;		wreg, status,2
   857 ;; Tracked objects:
   858 ;;		On entry : 0/0
   859 ;;		On exit  : 300/300
   860 ;;		Unchanged: 0/0
   861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   862 ;;      Params:         0       0       0       0       0
   863 ;;      Locals:         0       0       0       0       0
   864 ;;      Temps:          0       0       0       0       0
   865 ;;      Totals:         0       0       0       0       0
   866 ;;Total ram usage:        0 bytes
   867 ;; Hardware stack levels used:    1
   868 ;; Hardware stack levels required when called:    2
   869 ;; This function calls:
   870 ;;		Nothing
   871 ;; This function is called by:
   872 ;;		_main
   873 ;; This function uses a non-reentrant model
   874 ;;
   875                           
   876                           
   877                           ;psect for function _Init_GPIO
   878  0473                     _Init_GPIO:	
   879                           
   880                           ;main.c: 66: PORTA = 0B01000000;
   881                           
   882                           ;incstack = 0
   883                           ; Regs used in _Init_GPIO: [wreg+status,2]
   884  0473  3040               	movlw	64
   885  0474  1283               	bcf	3,5	;RP0=0, select bank0
   886  0475  1303               	bcf	3,6	;RP1=0, select bank0
   887  0476  0085               	movwf	5	;volatile
   888                           
   889                           ;main.c: 67: PORTB = 0B00000001;
   890  0477  3001               	movlw	1
   891  0478  0086               	movwf	6	;volatile
   892                           
   893                           ;main.c: 68: PORTC = 0B00000000;
   894  0479  0187               	clrf	7	;volatile
   895                           
   896                           ;main.c: 71: TRISA = 0B01000000;
   897  047A  3040               	movlw	64
   898  047B  1683               	bsf	3,5	;RP0=1, select bank1
   899  047C  0085               	movwf	5	;volatile
   900                           
   901                           ;main.c: 72: TRISB = 0B00000111;
   902  047D  3007               	movlw	7
   903  047E  0086               	movwf	6	;volatile
   904                           
   905                           ;main.c: 73: TRISC = 0B00000000;
   906  047F  0187               	clrf	7	;volatile
   907                           
   908                           ;main.c: 76: WPUA = 0B00000000;
   909  0480  1703               	bsf	3,6	;RP1=1, select bank3
   910  0481  018E               	clrf	14	;volatile
   911                           
   912                           ;main.c: 77: WPUB = 0B00000010;
   913  0482  3002               	movlw	2
   914  0483  1303               	bcf	3,6	;RP1=0, select bank1
   915  0484  0095               	movwf	21	;volatile
   916                           
   917                           ;main.c: 78: WPUC = 0B00000000;
   918  0485  1703               	bsf	3,6	;RP1=1, select bank3
   919  0486  018F               	clrf	15	;volatile
   920  0487  0008               	return
   921  0488                     __end_of_Init_GPIO:	
   922                           
   923                           	psect	text5
   924  0230                     __ptext5:	
   925 ;; *************** function _GsensorLoop *****************
   926 ;; Defined at:
   927 ;;		line 19 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\sensor.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;		None
   930 ;; Auto vars:     Size  Location     Type
   931 ;;		None
   932 ;; Return value:  Size  Location     Type
   933 ;;                  1    wreg      void 
   934 ;; Registers used:
   935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   936 ;; Tracked objects:
   937 ;;		On entry : 300/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   941 ;;      Params:         0       0       0       0       0
   942 ;;      Locals:         0       0       0       0       0
   943 ;;      Temps:          0       0       0       0       0
   944 ;;      Totals:         0       0       0       0       0
   945 ;;Total ram usage:        0 bytes
   946 ;; Hardware stack levels used:    1
   947 ;; Hardware stack levels required when called:    3
   948 ;; This function calls:
   949 ;;		_SensorControl
   950 ;;		_SensorJudge
   951 ;;		_SensorKey
   952 ;;		_SensorTime
   953 ;; This function is called by:
   954 ;;		_main
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           
   959                           ;psect for function _GsensorLoop
   960  0230                     _GsensorLoop:	
   961                           
   962                           ;sensor.c: 21: SensorKey();
   963                           
   964                           ;incstack = 0
   965                           ; Regs used in _GsensorLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   966  0230  223A  120A  118A   	fcall	_SensorKey
   967                           
   968                           ;sensor.c: 22: SensorTime();
   969  0233  223B  120A  118A   	fcall	_SensorTime
   970                           
   971                           ;sensor.c: 23: SensorJudge();
   972  0236  228E  120A  118A   	fcall	_SensorJudge
   973                           
   974                           ;sensor.c: 24: SensorControl();
   975  0239  2A73               	ljmp	l7001
   976  023A                     __end_of_GsensorLoop:	
   977  023A                     __ptext7:	
   978 ;; *************** function _SensorKey *****************
   979 ;; Defined at:
   980 ;;		line 27 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\sensor.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;		None
   985 ;; Return value:  Size  Location     Type
   986 ;;                  1    wreg      void 
   987 ;; Registers used:
   988 ;;		None
   989 ;; Tracked objects:
   990 ;;		On entry : 300/0
   991 ;;		On exit  : 300/0
   992 ;;		Unchanged: 300/0
   993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   994 ;;      Params:         0       0       0       0       0
   995 ;;      Locals:         0       0       0       0       0
   996 ;;      Temps:          0       0       0       0       0
   997 ;;      Totals:         0       0       0       0       0
   998 ;;Total ram usage:        0 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:    2
  1001 ;; This function calls:
  1002 ;;		Nothing
  1003 ;; This function is called by:
  1004 ;;		_GsensorLoop
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           
  1009                           ;psect for function _SensorKey
  1010  023A                     _SensorKey:	
  1011                           
  1012                           ;incstack = 0
  1013                           ; Regs used in _SensorKey: []
  1014  023A  0008               	return
  1015  023B                     __end_of_SensorKey:	
  1016  023B                     __ptext6:	
  1017 ;; *************** function _SensorTime *****************
  1018 ;; Defined at:
  1019 ;;		line 33 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\sensor.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;		None
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;		None
  1024 ;; Return value:  Size  Location     Type
  1025 ;;                  1    wreg      void 
  1026 ;; Registers used:
  1027 ;;		wreg, status,2, status,0
  1028 ;; Tracked objects:
  1029 ;;		On entry : 300/0
  1030 ;;		On exit  : 300/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1033 ;;      Params:         0       0       0       0       0
  1034 ;;      Locals:         0       0       0       0       0
  1035 ;;      Temps:          0       0       0       0       0
  1036 ;;      Totals:         0       0       0       0       0
  1037 ;;Total ram usage:        0 bytes
  1038 ;; Hardware stack levels used:    1
  1039 ;; Hardware stack levels required when called:    2
  1040 ;; This function calls:
  1041 ;;		Nothing
  1042 ;; This function is called by:
  1043 ;;		_GsensorLoop
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           
  1048                           ;psect for function _SensorTime
  1049  023B                     _SensorTime:	
  1050                           
  1051                           ;sensor.c: 35: if(Fbodysensor.bits.bit_0 == 1)
  1052                           
  1053                           ;incstack = 0
  1054                           ; Regs used in _SensorTime: [wreg+status,2+status,0]
  1055  023B  1C7A               	btfss	_Fbodysensor,0	;volatile
  1056  023C  2A5F               	goto	l6935
  1057                           
  1058                           ;sensor.c: 36: {
  1059                           ;sensor.c: 37: Fbodysensor.bits.bit_5 = 0;
  1060  023D  12FA               	bcf	_Fbodysensor,5	;volatile
  1061                           
  1062                           ;sensor.c: 38: CNTbodyExitTime = 0;
  1063  023E  01AA               	clrf	_CNTbodyExitTime	;volatile
  1064  023F  01AB               	clrf	_CNTbodyExitTime+1	;volatile
  1065                           
  1066                           ;sensor.c: 39: if(FledBits01.bits.bit_2 == 0)
  1067  0240  194D               	btfsc	_FledBits01,2	;volatile
  1068  0241  2A5A               	goto	l3831
  1069                           
  1070                           ;sensor.c: 40: {
  1071                           ;sensor.c: 41: if(++CNTbodyInTime >= 6000)
  1072  0242  0AAC               	incf	_CNTbodyInTime,f	;volatile
  1073  0243  1903               	skipnz
  1074  0244  0AAD               	incf	_CNTbodyInTime+1,f	;volatile
  1075  0245  3017               	movlw	23
  1076  0246  022D               	subwf	_CNTbodyInTime+1,w	;volatile
  1077  0247  3070               	movlw	112
  1078  0248  1903               	skipnz
  1079  0249  022C               	subwf	_CNTbodyInTime,w	;volatile
  1080  024A  1C03               	skipc
  1081  024B  2A52               	goto	l6929
  1082                           
  1083                           ;sensor.c: 42: {
  1084                           ;sensor.c: 43: CNTbodyInTime = 6000;
  1085  024C  3070               	movlw	112
  1086  024D  00AC               	movwf	_CNTbodyInTime	;volatile
  1087  024E  3017               	movlw	23
  1088  024F  00AD               	movwf	_CNTbodyInTime+1	;volatile
  1089                           
  1090                           ;sensor.c: 44: Fbodysensor.bits.bit_3 = 1;
  1091  0250  15FA               	bsf	_Fbodysensor,3	;volatile
  1092                           
  1093                           ;sensor.c: 45: }
  1094  0251  0008               	return
  1095  0252                     l6929:	
  1096                           
  1097                           ;sensor.c: 46: else if(CNTbodyInTime >= 500)
  1098  0252  3001               	movlw	1
  1099  0253  022D               	subwf	_CNTbodyInTime+1,w	;volatile
  1100  0254  30F4               	movlw	244
  1101  0255  1903               	skipnz
  1102  0256  022C               	subwf	_CNTbodyInTime,w	;volatile
  1103  0257  1803               	btfsc	3,0
  1104                           
  1105                           ;sensor.c: 47: {
  1106                           ;sensor.c: 48: Fbodysensor.bits.bit_4 = 1;
  1107  0258  167A               	bsf	_Fbodysensor,4	;volatile
  1108  0259  0008               	return
  1109  025A                     l3831:	
  1110                           
  1111                           ;sensor.c: 51: else
  1112                           ;sensor.c: 52: {
  1113                           ;sensor.c: 53: if(Fbodysensor.bits.bit_4 == 0)
  1114  025A  1A7A               	btfsc	_Fbodysensor,4	;volatile
  1115  025B  0008               	return
  1116                           
  1117                           ;sensor.c: 54: {
  1118                           ;sensor.c: 55: CNTbodyInTime = 0;
  1119  025C  01AC               	clrf	_CNTbodyInTime	;volatile
  1120  025D  01AD               	clrf	_CNTbodyInTime+1	;volatile
  1121                           
  1122                           ;sensor.c: 56: }
  1123                           ;sensor.c: 57: }
  1124                           ;sensor.c: 58: }
  1125  025E  0008               	return
  1126  025F                     l6935:	
  1127                           
  1128                           ;sensor.c: 59: else
  1129                           ;sensor.c: 60: {
  1130                           ;sensor.c: 61: CNTbodyInTime = 0;
  1131  025F  01AC               	clrf	_CNTbodyInTime	;volatile
  1132  0260  01AD               	clrf	_CNTbodyInTime+1	;volatile
  1133                           
  1134                           ;sensor.c: 62: Fbodysensor.bits.bit_4 = 0;
  1135  0261  127A               	bcf	_Fbodysensor,4	;volatile
  1136                           
  1137                           ;sensor.c: 63: Fbodysensor.bits.bit_3 = 0;
  1138  0262  11FA               	bcf	_Fbodysensor,3	;volatile
  1139                           
  1140                           ;sensor.c: 64: if(++CNTbodyExitTime >= 500)
  1141  0263  0AAA               	incf	_CNTbodyExitTime,f	;volatile
  1142  0264  1903               	skipnz
  1143  0265  0AAB               	incf	_CNTbodyExitTime+1,f	;volatile
  1144  0266  3001               	movlw	1
  1145  0267  022B               	subwf	_CNTbodyExitTime+1,w	;volatile
  1146  0268  30F4               	movlw	244
  1147  0269  1903               	skipnz
  1148  026A  022A               	subwf	_CNTbodyExitTime,w	;volatile
  1149  026B  1C03               	skipc
  1150  026C  0008               	return
  1151                           
  1152                           ;sensor.c: 65: {
  1153                           ;sensor.c: 66: CNTbodyExitTime = 500;
  1154  026D  30F4               	movlw	244
  1155  026E  00AA               	movwf	_CNTbodyExitTime	;volatile
  1156  026F  3001               	movlw	1
  1157  0270  00AB               	movwf	_CNTbodyExitTime+1	;volatile
  1158                           
  1159                           ;sensor.c: 67: Fbodysensor.bits.bit_5 = 1;
  1160  0271  16FA               	bsf	_Fbodysensor,5	;volatile
  1161  0272  0008               	return
  1162  0273                     __end_of_SensorTime:	
  1163  0273                     __ptext9:	
  1164 ;; *************** function _SensorControl *****************
  1165 ;; Defined at:
  1166 ;;		line 179 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\sensor.c"
  1167 ;; Parameters:    Size  Location     Type
  1168 ;;		None
  1169 ;; Auto vars:     Size  Location     Type
  1170 ;;		None
  1171 ;; Return value:  Size  Location     Type
  1172 ;;                  1    wreg      void 
  1173 ;; Registers used:
  1174 ;;		wreg
  1175 ;; Tracked objects:
  1176 ;;		On entry : 300/0
  1177 ;;		On exit  : 0/0
  1178 ;;		Unchanged: 0/0
  1179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1180 ;;      Params:         0       0       0       0       0
  1181 ;;      Locals:         0       0       0       0       0
  1182 ;;      Temps:          1       0       0       0       0
  1183 ;;      Totals:         1       0       0       0       0
  1184 ;;Total ram usage:        1 bytes
  1185 ;; Hardware stack levels used:    1
  1186 ;; Hardware stack levels required when called:    2
  1187 ;; This function calls:
  1188 ;;		Nothing
  1189 ;; This function is called by:
  1190 ;;		_GsensorLoop
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           
  1195                           ;psect for function _SensorControl
  1196  0273                     _SensorControl:	
  1197  0273                     l7001:	
  1198                           ;incstack = 0
  1199                           ; Regs used in _SensorControl: [wreg]
  1200                           
  1201                           
  1202                           ;sensor.c: 181: Fbodysensor.bits.bit_1 = 0;
  1203  0273  10FA               	bcf	_Fbodysensor,1	;volatile
  1204                           
  1205                           ;sensor.c: 182: Fbodysensor.bits.bit_2 = 0;
  1206  0274  117A               	bcf	_Fbodysensor,2	;volatile
  1207                           
  1208                           ;sensor.c: 183: if(Fbodysensor.bits.bit_6 != Fbodysensor.bits.bit_0)
  1209  0275  1C7A               	btfss	_Fbodysensor,0	;volatile
  1210  0276  2A79               	goto	u1560
  1211  0277  3001               	movlw	1
  1212  0278  2A7A               	goto	u1562
  1213  0279                     u1560:	
  1214  0279  3000               	movlw	0
  1215  027A                     u1562:	
  1216  027A  00F2               	movwf	??_SensorControl
  1217  027B  1F7A               	btfss	_Fbodysensor,6	;volatile
  1218  027C  2A7F               	goto	u1570
  1219  027D  3001               	movlw	1
  1220  027E  2A80               	goto	u1572
  1221  027F                     u1570:	
  1222  027F  3000               	movlw	0
  1223  0280                     u1572:	
  1224  0280  0672               	xorwf	??_SensorControl,w
  1225  0281  1903               	skipnz
  1226  0282  0008               	return
  1227                           
  1228                           ;sensor.c: 184: {
  1229                           ;sensor.c: 185: if(Fbodysensor.bits.bit_0 == 1)
  1230  0283  1C7A               	btfss	_Fbodysensor,0	;volatile
  1231  0284  2A87               	goto	l3868
  1232                           
  1233                           ;sensor.c: 186: {
  1234                           ;sensor.c: 187: Fbodysensor.bits.bit_1 = 1;
  1235  0285  14FA               	bsf	_Fbodysensor,1	;volatile
  1236                           
  1237                           ;sensor.c: 188: }
  1238  0286  2A88               	goto	l3869
  1239  0287                     l3868:	
  1240                           
  1241                           ;sensor.c: 189: else
  1242                           ;sensor.c: 190: {
  1243                           ;sensor.c: 191: Fbodysensor.bits.bit_2 = 1;
  1244  0287  157A               	bsf	_Fbodysensor,2	;volatile
  1245  0288                     l3869:	
  1246                           
  1247                           ;sensor.c: 192: }
  1248                           ;sensor.c: 193: Fbodysensor.bits.bit_6 = Fbodysensor.bits.bit_0;
  1249  0288  1C7A               	btfss	_Fbodysensor,0	;volatile
  1250  0289  2A8C               	goto	u1600
  1251  028A  177A               	bsf	_Fbodysensor,6	;volatile
  1252  028B  0008               	return
  1253  028C                     u1600:	
  1254  028C  137A               	bcf	_Fbodysensor,6	;volatile
  1255  028D  0008               	return
  1256  028E                     __end_of_SensorControl:	
  1257  028E                     __ptext8:	
  1258 ;; *************** function _SensorJudge *****************
  1259 ;; Defined at:
  1260 ;;		line 73 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\sensor.c"
  1261 ;; Parameters:    Size  Location     Type
  1262 ;;		None
  1263 ;; Auto vars:     Size  Location     Type
  1264 ;;		None
  1265 ;; Return value:  Size  Location     Type
  1266 ;;                  1    wreg      void 
  1267 ;; Registers used:
  1268 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1269 ;; Tracked objects:
  1270 ;;		On entry : 300/0
  1271 ;;		On exit  : 300/0
  1272 ;;		Unchanged: 0/0
  1273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1274 ;;      Params:         0       0       0       0       0
  1275 ;;      Locals:         0       0       0       0       0
  1276 ;;      Temps:          0       0       0       0       0
  1277 ;;      Totals:         0       0       0       0       0
  1278 ;;Total ram usage:        0 bytes
  1279 ;; Hardware stack levels used:    1
  1280 ;; Hardware stack levels required when called:    2
  1281 ;; This function calls:
  1282 ;;		Nothing
  1283 ;; This function is called by:
  1284 ;;		_GsensorLoop
  1285 ;; This function uses a non-reentrant model
  1286 ;;
  1287                           
  1288                           
  1289                           ;psect for function _SensorJudge
  1290  028E                     _SensorJudge:	
  1291                           
  1292                           ;sensor.c: 75: switch (SEQbody)
  1293                           
  1294                           ;incstack = 0
  1295                           ; Regs used in _SensorJudge: [wreg-fsr0h+status,2+status,0]
  1296  028E  2B0B               	goto	l6999
  1297  028F                     l3843:	
  1298                           ;sensor.c: 76: {
  1299                           ;sensor.c: 77: case 0:
  1300                           
  1301                           
  1302                           ;sensor.c: 78: Fbodysensor.bits.bit_0 = 0;
  1303  028F  107A               	bcf	_Fbodysensor,0	;volatile
  1304                           
  1305                           ;sensor.c: 79: FledBits01.bits.bit_2 = 0;
  1306  0290  114D               	bcf	_FledBits01,2	;volatile
  1307                           
  1308                           ;sensor.c: 110: }
  1309  0291  2AA0               	goto	l6949
  1310  0292                     l6961:	
  1311                           
  1312                           ;sensor.c: 111: else
  1313                           ;sensor.c: 112: {
  1314                           ;sensor.c: 113: if(++CNTbody_l >= 6)
  1315  0292  0AB0               	incf	_CNTbody_l,f	;volatile
  1316  0293  1903               	skipnz
  1317  0294  0AB1               	incf	_CNTbody_l+1,f	;volatile
  1318  0295  3000               	movlw	0
  1319  0296  0231               	subwf	_CNTbody_l+1,w	;volatile
  1320  0297  3006               	movlw	6
  1321  0298  1903               	skipnz
  1322  0299  0230               	subwf	_CNTbody_l,w	;volatile
  1323  029A  1C03               	skipc
  1324  029B  2AC2               	goto	l6967
  1325                           
  1326                           ;sensor.c: 114: {
  1327                           ;sensor.c: 115: CNTbody_h = 0;
  1328  029C  01B2               	clrf	_CNTbody_h	;volatile
  1329  029D  01B3               	clrf	_CNTbody_h+1	;volatile
  1330                           
  1331                           ;sensor.c: 116: CNTbody_l = 0;
  1332  029E  01B0               	clrf	_CNTbody_l	;volatile
  1333  029F  01B1               	clrf	_CNTbody_l+1	;volatile
  1334  02A0                     l6949:	
  1335                           
  1336                           ;sensor.c: 80: SEQbody = 1;
  1337  02A0  3001               	movlw	1
  1338  02A1  00C5               	movwf	_SEQbody	;volatile
  1339                           
  1340                           ;sensor.c: 81: break;
  1341  02A2  0008               	return
  1342  02A3                     l3845:	
  1343                           ;sensor.c: 84: case 1:
  1344                           
  1345                           
  1346                           ;sensor.c: 85: Fbodysensor.bits.bit_0 = 0;
  1347  02A3  107A               	bcf	_Fbodysensor,0	;volatile
  1348                           
  1349                           ;sensor.c: 86: FledBits01.bits.bit_2 = 0;
  1350  02A4  114D               	bcf	_FledBits01,2	;volatile
  1351                           
  1352                           ;sensor.c: 87: if(RB1 == 0)
  1353  02A5  1886               	btfsc	6,1	;volatile
  1354  02A6  2AB8               	goto	l6957
  1355                           
  1356                           ;sensor.c: 88: {
  1357                           ;sensor.c: 89: if(++CNTbody_h >= 3)
  1358  02A7  0AB2               	incf	_CNTbody_h,f	;volatile
  1359  02A8  1903               	skipnz
  1360  02A9  0AB3               	incf	_CNTbody_h+1,f	;volatile
  1361  02AA  3000               	movlw	0
  1362  02AB  0233               	subwf	_CNTbody_h+1,w	;volatile
  1363  02AC  3003               	movlw	3
  1364  02AD  1903               	skipnz
  1365  02AE  0232               	subwf	_CNTbody_h,w	;volatile
  1366  02AF  1C03               	skipc
  1367  02B0  0008               	return
  1368                           
  1369                           ;sensor.c: 90: {
  1370                           ;sensor.c: 91: CNTbody_h = 0;
  1371  02B1  01B2               	clrf	_CNTbody_h	;volatile
  1372  02B2  01B3               	clrf	_CNTbody_h+1	;volatile
  1373                           
  1374                           ;sensor.c: 92: CNTbody_l = 0;
  1375  02B3  01B0               	clrf	_CNTbody_l	;volatile
  1376  02B4  01B1               	clrf	_CNTbody_l+1	;volatile
  1377                           
  1378                           ;sensor.c: 93: SEQbody = 2;
  1379  02B5  3002               	movlw	2
  1380  02B6  00C5               	movwf	_SEQbody	;volatile
  1381                           
  1382                           ;sensor.c: 94: break;
  1383  02B7  0008               	return
  1384  02B8                     l6957:	
  1385                           
  1386                           ;sensor.c: 97: else
  1387                           ;sensor.c: 98: {
  1388                           ;sensor.c: 99: CNTbody_h = 0;
  1389  02B8  01B2               	clrf	_CNTbody_h	;volatile
  1390  02B9  01B3               	clrf	_CNTbody_h+1	;volatile
  1391  02BA  0008               	return
  1392  02BB                     l3849:	
  1393                           ;sensor.c: 104: case 2:
  1394                           
  1395                           
  1396                           ;sensor.c: 105: Fbodysensor.bits.bit_0 = 0;
  1397  02BB  107A               	bcf	_Fbodysensor,0	;volatile
  1398                           
  1399                           ;sensor.c: 106: FledBits01.bits.bit_2 = 0;
  1400  02BC  114D               	bcf	_FledBits01,2	;volatile
  1401                           
  1402                           ;sensor.c: 107: if(RB1 == 0)
  1403  02BD  1886               	btfsc	6,1	;volatile
  1404  02BE  2A92               	goto	l6961
  1405                           
  1406                           ;sensor.c: 108: {
  1407                           ;sensor.c: 109: ++CNTbody_h;
  1408  02BF  0AB2               	incf	_CNTbody_h,f	;volatile
  1409  02C0  1903               	skipnz
  1410  02C1  0AB3               	incf	_CNTbody_h+1,f	;volatile
  1411  02C2                     l6967:	
  1412                           
  1413                           ;sensor.c: 119: }
  1414                           ;sensor.c: 120: }
  1415                           ;sensor.c: 121: BufCntAdd = CNTbody_h +CNTbody_l;
  1416  02C2  231D  120A  118A   	fcall	PL8	;call to abstracted procedure
  1417                           
  1418                           ;sensor.c: 122: if(BufCntAdd >= 30)
  1419  02C5  3000               	movlw	0
  1420  02C6  022F               	subwf	_BufCntAdd+1,w	;volatile
  1421  02C7  301E               	movlw	30
  1422  02C8  1903               	skipnz
  1423  02C9  022E               	subwf	_BufCntAdd,w	;volatile
  1424  02CA  1C03               	skipc
  1425  02CB  0008               	return
  1426  02CC                     l6971:	
  1427                           
  1428                           ;sensor.c: 123: {
  1429                           ;sensor.c: 124: SEQbody = 3;
  1430  02CC  3003               	movlw	3
  1431  02CD  00C5               	movwf	_SEQbody	;volatile
  1432                           
  1433                           ;sensor.c: 125: break;
  1434  02CE  0008               	return
  1435  02CF                     l3854:	
  1436                           ;sensor.c: 129: case 3:
  1437                           
  1438                           
  1439                           ;sensor.c: 130: Fbodysensor.bits.bit_0 = 1;
  1440  02CF  147A               	bsf	_Fbodysensor,0	;volatile
  1441                           
  1442                           ;sensor.c: 131: FledBits01.bits.bit_2 = 0;
  1443  02D0  114D               	bcf	_FledBits01,2	;volatile
  1444                           
  1445                           ;sensor.c: 132: if(RB1 == 1)
  1446  02D1  1C86               	btfss	6,1	;volatile
  1447  02D2  2AE4               	goto	l6979
  1448                           
  1449                           ;sensor.c: 133: {
  1450                           ;sensor.c: 134: if(++CNTbody_l >= 3)
  1451  02D3  0AB0               	incf	_CNTbody_l,f	;volatile
  1452  02D4  1903               	skipnz
  1453  02D5  0AB1               	incf	_CNTbody_l+1,f	;volatile
  1454  02D6  3000               	movlw	0
  1455  02D7  0231               	subwf	_CNTbody_l+1,w	;volatile
  1456  02D8  3003               	movlw	3
  1457  02D9  1903               	skipnz
  1458  02DA  0230               	subwf	_CNTbody_l,w	;volatile
  1459  02DB  1C03               	skipc
  1460  02DC  0008               	return
  1461                           
  1462                           ;sensor.c: 135: {
  1463                           ;sensor.c: 136: CNTbody_h = 0;
  1464  02DD  01B2               	clrf	_CNTbody_h	;volatile
  1465  02DE  01B3               	clrf	_CNTbody_h+1	;volatile
  1466                           
  1467                           ;sensor.c: 137: CNTbody_l = 0;
  1468  02DF  01B0               	clrf	_CNTbody_l	;volatile
  1469  02E0  01B1               	clrf	_CNTbody_l+1	;volatile
  1470                           
  1471                           ;sensor.c: 138: SEQbody = 4;
  1472  02E1  3004               	movlw	4
  1473  02E2  00C5               	movwf	_SEQbody	;volatile
  1474                           
  1475                           ;sensor.c: 139: break;
  1476  02E3  0008               	return
  1477  02E4                     l6979:	
  1478                           
  1479                           ;sensor.c: 142: else
  1480                           ;sensor.c: 143: {
  1481                           ;sensor.c: 144: CNTbody_l = 0;
  1482  02E4  01B0               	clrf	_CNTbody_l	;volatile
  1483  02E5  01B1               	clrf	_CNTbody_l+1	;volatile
  1484  02E6  0008               	return
  1485  02E7                     l3858:	
  1486                           ;sensor.c: 148: case 4:
  1487                           
  1488                           
  1489                           ;sensor.c: 149: Fbodysensor.bits.bit_0 = 1;
  1490  02E7  147A               	bsf	_Fbodysensor,0	;volatile
  1491                           
  1492                           ;sensor.c: 150: FledBits01.bits.bit_2 = 1;
  1493  02E8  154D               	bsf	_FledBits01,2	;volatile
  1494                           
  1495                           ;sensor.c: 151: if(RB1 == 0)
  1496  02E9  1886               	btfsc	6,1	;volatile
  1497  02EA  2AFA               	goto	l6987
  1498                           
  1499                           ;sensor.c: 152: {
  1500                           ;sensor.c: 153: if(++CNTbody_h >= 6)
  1501  02EB  0AB2               	incf	_CNTbody_h,f	;volatile
  1502  02EC  1903               	skipnz
  1503  02ED  0AB3               	incf	_CNTbody_h+1,f	;volatile
  1504  02EE  3000               	movlw	0
  1505  02EF  0233               	subwf	_CNTbody_h+1,w	;volatile
  1506  02F0  3006               	movlw	6
  1507  02F1  1903               	skipnz
  1508  02F2  0232               	subwf	_CNTbody_h,w	;volatile
  1509  02F3  1C03               	skipc
  1510  02F4  2AFD               	goto	l6989
  1511                           
  1512                           ;sensor.c: 154: {
  1513                           ;sensor.c: 155: CNTbody_h = 0;
  1514  02F5  01B2               	clrf	_CNTbody_h	;volatile
  1515  02F6  01B3               	clrf	_CNTbody_h+1	;volatile
  1516                           
  1517                           ;sensor.c: 156: CNTbody_l = 0;
  1518  02F7  01B0               	clrf	_CNTbody_l	;volatile
  1519  02F8  01B1               	clrf	_CNTbody_l+1	;volatile
  1520  02F9  2ACC               	goto	l6971
  1521  02FA                     l6987:	
  1522                           
  1523                           ;sensor.c: 161: else
  1524                           ;sensor.c: 162: {
  1525                           ;sensor.c: 163: ++CNTbody_l;
  1526  02FA  0AB0               	incf	_CNTbody_l,f	;volatile
  1527  02FB  1903               	skipnz
  1528  02FC  0AB1               	incf	_CNTbody_l+1,f	;volatile
  1529  02FD                     l6989:	
  1530                           
  1531                           ;sensor.c: 164: }
  1532                           ;sensor.c: 165: BufCntAdd = CNTbody_h +CNTbody_l;
  1533  02FD  231D  120A  118A   	fcall	PL8	;call to abstracted procedure
  1534                           
  1535                           ;sensor.c: 166: if(BufCntAdd >= 500)
  1536  0300  3001               	movlw	1
  1537  0301  022F               	subwf	_BufCntAdd+1,w	;volatile
  1538  0302  30F4               	movlw	244
  1539  0303  1903               	skipnz
  1540  0304  022E               	subwf	_BufCntAdd,w	;volatile
  1541  0305  1C03               	skipc
  1542  0306  0008               	return
  1543  0307  2AA0               	goto	l6949
  1544  0308                     l6993:	
  1545                           
  1546                           ;sensor.c: 173: SEQbody = 0;
  1547  0308  01C5               	clrf	_SEQbody	;volatile
  1548                           
  1549                           ;sensor.c: 174: FledBits01.bits.bit_2 = 0;
  1550  0309  114D               	bcf	_FledBits01,2	;volatile
  1551                           
  1552                           ;sensor.c: 175: break;
  1553  030A  0008               	return
  1554  030B                     l6999:	
  1555  030B  0845               	movf	_SEQbody,w	;volatile
  1556                           
  1557                           ; Switch size 1, requested type "space"
  1558                           ; Number of cases is 5, Range of values is 0 to 4
  1559                           ; switch strategies available:
  1560                           ; Name         Instructions Cycles
  1561                           ; simple_byte           16     9 (average)
  1562                           ; direct_byte           23     8 (fixed)
  1563                           ; jumptable            260     6 (fixed)
  1564                           ;	Chosen strategy is simple_byte
  1565  030C  3A00               	xorlw	0	; case 0
  1566  030D  1903               	skipnz
  1567  030E  2A8F               	goto	l3843
  1568  030F  3A01               	xorlw	1	; case 1
  1569  0310  1903               	skipnz
  1570  0311  2AA3               	goto	l3845
  1571  0312  3A03               	xorlw	3	; case 2
  1572  0313  1903               	skipnz
  1573  0314  2ABB               	goto	l3849
  1574  0315  3A01               	xorlw	1	; case 3
  1575  0316  1903               	skipnz
  1576  0317  2ACF               	goto	l3854
  1577  0318  3A07               	xorlw	7	; case 4
  1578  0319  1903               	skipnz
  1579  031A  2AE7               	goto	l3858
  1580  031B  2B08               	goto	l6993
  1581  031C  0008               	return
  1582  031D                     __end_of_SensorJudge:	
  1583  031D                     PL8:	
  1584  031D  0830               	movf	_CNTbody_l,w	;volatile
  1585  031E  0732               	addwf	_CNTbody_h,w	;volatile
  1586  031F  00AE               	movwf	_BufCntAdd	;volatile
  1587  0320  0831               	movf	_CNTbody_l+1,w	;volatile
  1588  0321  1803               	skipnc
  1589  0322  0A31               	incf	_CNTbody_l+1,w	;volatile
  1590  0323  0733               	addwf	_CNTbody_h+1,w	;volatile
  1591  0324  00AF               	movwf	_BufCntAdd+1	;volatile
  1592  0325  0008               	return
  1593  0326                     __end_ofPL8:	
  1594                           
  1595                           	psect	text10
  1596  0453                     __ptext10:	
  1597 ;; *************** function _GledLoop *****************
  1598 ;; Defined at:
  1599 ;;		line 16 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\light.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;		None
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;		None
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      void 
  1606 ;; Registers used:
  1607 ;;		status,2, status,0, pclath, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 300/0
  1610 ;;		On exit  : 300/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1613 ;;      Params:         0       0       0       0       0
  1614 ;;      Locals:         0       0       0       0       0
  1615 ;;      Temps:          0       0       0       0       0
  1616 ;;      Totals:         0       0       0       0       0
  1617 ;;Total ram usage:        0 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    3
  1620 ;; This function calls:
  1621 ;;		_LED_Con
  1622 ;;		_LED_Judge
  1623 ;;		_LED_Key
  1624 ;;		_LED_Time
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           
  1631                           ;psect for function _GledLoop
  1632  0453                     _GledLoop:	
  1633                           
  1634                           ;light.c: 18: LED_Time();
  1635                           
  1636                           ;incstack = 0
  1637                           ; Regs used in _GledLoop: [status,2+status,0+pclath+cstack]
  1638  0453  245E  120A  118A   	fcall	_LED_Time
  1639                           
  1640                           ;light.c: 19: LED_Key();
  1641  0456  245D  120A  118A   	fcall	_LED_Key
  1642                           
  1643                           ;light.c: 20: LED_Judge();
  1644  0459  246B  120A  118A   	fcall	_LED_Judge
  1645                           
  1646                           ;light.c: 21: LED_Con();
  1647  045C  2C61               	ljmp	l6801
  1648  045D                     __end_of_GledLoop:	
  1649  045D                     __ptext12:	
  1650 ;; *************** function _LED_Key *****************
  1651 ;; Defined at:
  1652 ;;		line 24 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\light.c"
  1653 ;; Parameters:    Size  Location     Type
  1654 ;;		None
  1655 ;; Auto vars:     Size  Location     Type
  1656 ;;		None
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  1    wreg      void 
  1659 ;; Registers used:
  1660 ;;		None
  1661 ;; Tracked objects:
  1662 ;;		On entry : 300/0
  1663 ;;		On exit  : 300/0
  1664 ;;		Unchanged: 300/0
  1665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1666 ;;      Params:         0       0       0       0       0
  1667 ;;      Locals:         0       0       0       0       0
  1668 ;;      Temps:          0       0       0       0       0
  1669 ;;      Totals:         0       0       0       0       0
  1670 ;;Total ram usage:        0 bytes
  1671 ;; Hardware stack levels used:    1
  1672 ;; Hardware stack levels required when called:    2
  1673 ;; This function calls:
  1674 ;;		Nothing
  1675 ;; This function is called by:
  1676 ;;		_GledLoop
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           
  1681                           ;psect for function _LED_Key
  1682  045D                     _LED_Key:	
  1683                           
  1684                           ;incstack = 0
  1685                           ; Regs used in _LED_Key: []
  1686  045D  0008               	return
  1687  045E                     __end_of_LED_Key:	
  1688  045E                     __ptext11:	
  1689 ;; *************** function _LED_Time *****************
  1690 ;; Defined at:
  1691 ;;		line 45 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\light.c"
  1692 ;; Parameters:    Size  Location     Type
  1693 ;;		None
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;		None
  1696 ;; Return value:  Size  Location     Type
  1697 ;;                  1    wreg      void 
  1698 ;; Registers used:
  1699 ;;		None
  1700 ;; Tracked objects:
  1701 ;;		On entry : 300/0
  1702 ;;		On exit  : 300/0
  1703 ;;		Unchanged: 0/0
  1704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1705 ;;      Params:         0       0       0       0       0
  1706 ;;      Locals:         0       0       0       0       0
  1707 ;;      Temps:          0       0       0       0       0
  1708 ;;      Totals:         0       0       0       0       0
  1709 ;;Total ram usage:        0 bytes
  1710 ;; Hardware stack levels used:    1
  1711 ;; Hardware stack levels required when called:    2
  1712 ;; This function calls:
  1713 ;;		Nothing
  1714 ;; This function is called by:
  1715 ;;		_GledLoop
  1716 ;; This function uses a non-reentrant model
  1717 ;;
  1718                           
  1719                           
  1720                           ;psect for function _LED_Time
  1721  045E                     _LED_Time:	
  1722                           
  1723                           ;light.c: 47: if(Fsys1m.bits.bit_0 == 1)
  1724                           
  1725                           ;incstack = 0
  1726                           ; Regs used in _LED_Time: []
  1727  045E  184E               	btfsc	_Fsys1m,0	;volatile
  1728                           
  1729                           ;light.c: 48: {
  1730                           ;light.c: 49: Fsys1m.bits.bit_0 = 0;
  1731  045F  104E               	bcf	_Fsys1m,0	;volatile
  1732  0460  0008               	return
  1733  0461                     __end_of_LED_Time:	
  1734  0461                     __ptext14:	
  1735 ;; *************** function _LED_Con *****************
  1736 ;; Defined at:
  1737 ;;		line 84 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\light.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;		None
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;		None
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      void 
  1744 ;; Registers used:
  1745 ;;		None
  1746 ;; Tracked objects:
  1747 ;;		On entry : 300/0
  1748 ;;		On exit  : 300/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1751 ;;      Params:         0       0       0       0       0
  1752 ;;      Locals:         0       0       0       0       0
  1753 ;;      Temps:          0       0       0       0       0
  1754 ;;      Totals:         0       0       0       0       0
  1755 ;;Total ram usage:        0 bytes
  1756 ;; Hardware stack levels used:    1
  1757 ;; Hardware stack levels required when called:    2
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_GledLoop
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           
  1766                           ;psect for function _LED_Con
  1767  0461                     _LED_Con:	
  1768  0461                     l6801:	
  1769                           ;incstack = 0
  1770                           ; Regs used in _LED_Con: []
  1771                           
  1772                           
  1773                           ;light.c: 86: RA5 = FledBits01.bits.bit_0;
  1774  0461  1C4D               	btfss	_FledBits01,0	;volatile
  1775  0462  2C67               	goto	u1150
  1776  0463  1283               	bcf	3,5	;RP0=0, select bank0
  1777  0464  1303               	bcf	3,6	;RP1=0, select bank0
  1778  0465  1685               	bsf	5,5	;volatile
  1779  0466  0008               	return
  1780  0467                     u1150:	
  1781  0467  1283               	bcf	3,5	;RP0=0, select bank0
  1782  0468  1303               	bcf	3,6	;RP1=0, select bank0
  1783  0469  1285               	bcf	5,5	;volatile
  1784  046A  0008               	return
  1785  046B                     __end_of_LED_Con:	
  1786  046B                     __ptext13:	
  1787 ;; *************** function _LED_Judge *****************
  1788 ;; Defined at:
  1789 ;;		line 53 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\light.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;		None
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;		None
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      void 
  1796 ;; Registers used:
  1797 ;;		None
  1798 ;; Tracked objects:
  1799 ;;		On entry : 300/0
  1800 ;;		On exit  : 300/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1803 ;;      Params:         0       0       0       0       0
  1804 ;;      Locals:         0       0       0       0       0
  1805 ;;      Temps:          0       0       0       0       0
  1806 ;;      Totals:         0       0       0       0       0
  1807 ;;Total ram usage:        0 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; Hardware stack levels required when called:    2
  1810 ;; This function calls:
  1811 ;;		Nothing
  1812 ;; This function is called by:
  1813 ;;		_GledLoop
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           
  1818                           ;psect for function _LED_Judge
  1819  046B                     _LED_Judge:	
  1820                           
  1821                           ;light.c: 55: if(Fbodysensor.bits.bit_0 == 1)
  1822                           
  1823                           ;incstack = 0
  1824                           ; Regs used in _LED_Judge: []
  1825  046B  1C7A               	btfss	_Fbodysensor,0	;volatile
  1826  046C  2C71               	goto	l6799
  1827                           
  1828                           ;light.c: 56: {
  1829                           ;light.c: 57: FledBits01.bits.bit_0 = 1;
  1830  046D  144D               	bsf	_FledBits01,0	;volatile
  1831                           
  1832                           ;light.c: 58: if(Fbodysensor.bits.bit_4 == 0)
  1833  046E  1E7A               	btfss	_Fbodysensor,4	;volatile
  1834                           
  1835                           ;light.c: 59: {
  1836                           ;light.c: 60: if(FledBits01.bits.bit_2 == 1)
  1837  046F  1D4D               	btfss	_FledBits01,2	;volatile
  1838  0470  0008               	return
  1839  0471                     l6799:	
  1840                           
  1841                           ;light.c: 61: {
  1842                           ;light.c: 62: FledBits01.bits.bit_0 = 0;
  1843  0471  104D               	bcf	_FledBits01,0	;volatile
  1844  0472  0008               	return
  1845  0473                     __end_of_LED_Judge:	
  1846                           
  1847                           	psect	text15
  1848  001C                     __ptext15:	
  1849 ;; *************** function _GflushLoop *****************
  1850 ;; Defined at:
  1851 ;;		line 15 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\flush.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  1    wreg      void 
  1858 ;; Registers used:
  1859 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1860 ;; Tracked objects:
  1861 ;;		On entry : 300/0
  1862 ;;		On exit  : 300/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1865 ;;      Params:         0       0       0       0       0
  1866 ;;      Locals:         0       0       0       0       0
  1867 ;;      Temps:          0       0       0       0       0
  1868 ;;      Totals:         0       0       0       0       0
  1869 ;;Total ram usage:        0 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:    5
  1872 ;; This function calls:
  1873 ;;		_FlushCon
  1874 ;;		_FlushJudge
  1875 ;;		_FlushTime
  1876 ;; This function is called by:
  1877 ;;		_main
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881                           
  1882                           ;psect for function _GflushLoop
  1883  001C                     _GflushLoop:	
  1884                           
  1885                           ;flush.c: 17: FlushTime();
  1886                           
  1887                           ;incstack = 0
  1888                           ; Regs used in _GflushLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1889  001C  2023  120A  118A   	fcall	_FlushTime
  1890                           
  1891                           ;flush.c: 18: FlushJudge();
  1892  001F  20EC  120A  118A   	fcall	_FlushJudge
  1893                           
  1894                           ;flush.c: 19: FlushCon();
  1895  0022  2824               	ljmp	l6835
  1896  0023                     __end_of_GflushLoop:	
  1897  0023                     __ptext16:	
  1898 ;; *************** function _FlushTime *****************
  1899 ;; Defined at:
  1900 ;;		line 22 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\flush.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;		None
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;		None
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  1    wreg      void 
  1907 ;; Registers used:
  1908 ;;		None
  1909 ;; Tracked objects:
  1910 ;;		On entry : 300/0
  1911 ;;		On exit  : 300/0
  1912 ;;		Unchanged: 300/0
  1913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1914 ;;      Params:         0       0       0       0       0
  1915 ;;      Locals:         0       0       0       0       0
  1916 ;;      Temps:          0       0       0       0       0
  1917 ;;      Totals:         0       0       0       0       0
  1918 ;;Total ram usage:        0 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; Hardware stack levels required when called:    2
  1921 ;; This function calls:
  1922 ;;		Nothing
  1923 ;; This function is called by:
  1924 ;;		_GflushLoop
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           
  1929                           ;psect for function _FlushTime
  1930  0023                     _FlushTime:	
  1931                           
  1932                           ;incstack = 0
  1933                           ; Regs used in _FlushTime: []
  1934  0023  0008               	return
  1935  0024                     __end_of_FlushTime:	
  1936  0024                     __ptext21:	
  1937 ;; *************** function _FlushCon *****************
  1938 ;; Defined at:
  1939 ;;		line 107 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\flush.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;		None
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;		None
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  1    wreg      void 
  1946 ;; Registers used:
  1947 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1948 ;; Tracked objects:
  1949 ;;		On entry : 300/0
  1950 ;;		On exit  : 300/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1953 ;;      Params:         0       0       0       0       0
  1954 ;;      Locals:         0       0       0       0       0
  1955 ;;      Temps:          0       0       0       0       0
  1956 ;;      Totals:         0       0       0       0       0
  1957 ;;Total ram usage:        0 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:    2
  1960 ;; This function calls:
  1961 ;;		Nothing
  1962 ;; This function is called by:
  1963 ;;		_GflushLoop
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           
  1968                           ;psect for function _FlushCon
  1969  0024                     _FlushCon:	
  1970  0024                     l6835:	
  1971                           ;incstack = 0
  1972                           ; Regs used in _FlushCon: [wreg-fsr0h+status,2+status,0]
  1973                           
  1974                           
  1975                           ;flush.c: 109: switch (SEQflsuh)
  1976  0024  28C8               	goto	l6913
  1977  0025                     l2878:	
  1978                           ;flush.c: 110: {
  1979                           ;flush.c: 111: case FLUSH_INIT_0:
  1980                           
  1981                           
  1982                           ;flush.c: 112: Fflush1.bits.bit_6 = 0;
  1983  0025  1348               	bcf	_Fflush1,6	;volatile
  1984                           
  1985                           ;flush.c: 113: RA2 = 0;
  1986  0026  1105               	bcf	5,2	;volatile
  1987                           
  1988                           ;flush.c: 114: RA4 = 0;
  1989  0027  1205               	bcf	5,4	;volatile
  1990                           
  1991                           ;flush.c: 115: RA1 = 0;
  1992  0028  1085               	bcf	5,1	;volatile
  1993                           
  1994                           ;flush.c: 116: if((Fflush1.bits.bit_1 == 1) || (Fflush1.bits.bit_3 == 1))
  1995  0029  18C8               	btfsc	_Fflush1,1	;volatile
  1996  002A  282D               	goto	l6839
  1997  002B  1DC8               	btfss	_Fflush1,3	;volatile
  1998  002C  0008               	return
  1999  002D                     l6839:	
  2000                           
  2001                           ;flush.c: 117: {
  2002                           ;flush.c: 118: SEQflsuh = FLUSH_INIT_1;
  2003  002D  3001               	movlw	1
  2004  002E  2830               	goto	L15
  2005  002F                     l6843:	
  2006                           
  2007                           ;flush.c: 128: {
  2008                           ;flush.c: 129: SEQflsuh = FLUSH_END_0;
  2009  002F  3009               	movlw	9
  2010  0030                     L15:	
  2011  0030  00C7               	movwf	_SEQflsuh	;volatile
  2012                           
  2013                           ;flush.c: 119: CNTflush = 0;
  2014  0031  01B4               	clrf	_CNTflush	;volatile
  2015  0032  01B5               	clrf	_CNTflush+1	;volatile
  2016  0033  0008               	return
  2017  0034                     l2883:	
  2018                           ;flush.c: 122: case FLUSH_INIT_1:
  2019                           
  2020                           
  2021                           ;flush.c: 123: Fflush1.bits.bit_6 = 1;
  2022  0034  1748               	bsf	_Fflush1,6	;volatile
  2023                           
  2024                           ;flush.c: 124: RA2 = 0;
  2025  0035  1105               	bcf	5,2	;volatile
  2026                           
  2027                           ;flush.c: 125: RA4 = 0;
  2028  0036  1205               	bcf	5,4	;volatile
  2029                           
  2030                           ;flush.c: 126: RA1 = 0;
  2031  0037  1085               	bcf	5,1	;volatile
  2032                           
  2033                           ;flush.c: 127: if(Fbodysensor.bits.bit_0 == 1)
  2034  0038  187A               	btfsc	_Fbodysensor,0	;volatile
  2035  0039  282F               	goto	l6843
  2036                           
  2037                           ;flush.c: 132: }
  2038                           ;flush.c: 133: if(++CNTflush >= 5)
  2039  003A  0AB4               	incf	_CNTflush,f	;volatile
  2040  003B  1903               	skipnz
  2041  003C  0AB5               	incf	_CNTflush+1,f	;volatile
  2042  003D  3000               	movlw	0
  2043  003E  0235               	subwf	_CNTflush+1,w	;volatile
  2044  003F  3005               	movlw	5
  2045  0040  1903               	skipnz
  2046  0041  0234               	subwf	_CNTflush,w	;volatile
  2047  0042  1C03               	skipc
  2048  0043  0008               	return
  2049                           
  2050                           ;flush.c: 134: {
  2051                           ;flush.c: 135: CNTflush = 0;
  2052  0044  01B4               	clrf	_CNTflush	;volatile
  2053  0045  01B5               	clrf	_CNTflush+1	;volatile
  2054                           
  2055                           ;flush.c: 136: SEQflsuh = FLUSH_INIT_2;
  2056  0046  3002               	movlw	2
  2057  0047  00C7               	movwf	_SEQflsuh	;volatile
  2058  0048  0008               	return
  2059  0049                     l2886:	
  2060                           ;flush.c: 139: case FLUSH_INIT_2:
  2061                           
  2062                           
  2063                           ;flush.c: 140: Fflush1.bits.bit_6 = 1;
  2064  0049  1748               	bsf	_Fflush1,6	;volatile
  2065                           
  2066                           ;flush.c: 141: RA2 = 0;
  2067  004A  1105               	bcf	5,2	;volatile
  2068                           
  2069                           ;flush.c: 142: RA4 = 0;
  2070  004B  1205               	bcf	5,4	;volatile
  2071                           
  2072                           ;flush.c: 143: RA1 = 0;
  2073  004C  1085               	bcf	5,1	;volatile
  2074                           
  2075                           ;flush.c: 144: if(Fbodysensor.bits.bit_0 == 1)
  2076  004D  187A               	btfsc	_Fbodysensor,0	;volatile
  2077  004E  282F               	goto	l6843
  2078                           
  2079                           ;flush.c: 149: }
  2080                           ;flush.c: 151: if(Fflush1.bits.bit_1 == 1)
  2081  004F  1CC8               	btfss	_Fflush1,1	;volatile
  2082  0050  2854               	goto	l2888
  2083                           
  2084                           ;flush.c: 152: {
  2085                           ;flush.c: 153: SEQflsuh = FLUSH_BIG_0;
  2086  0051  3003               	movlw	3
  2087  0052  00C7               	movwf	_SEQflsuh	;volatile
  2088                           
  2089                           ;flush.c: 154: }
  2090  0053  0008               	return
  2091  0054                     l2888:	
  2092                           
  2093                           ;flush.c: 155: else if(Fflush1.bits.bit_3 == 1)
  2094  0054  1DC8               	btfss	_Fflush1,3	;volatile
  2095  0055  0008               	return
  2096                           
  2097                           ;flush.c: 156: {
  2098                           ;flush.c: 157: SEQflsuh = FLUSH_SML_0;
  2099  0056  3006               	movlw	6
  2100  0057  00C7               	movwf	_SEQflsuh	;volatile
  2101  0058  0008               	return
  2102  0059                     l2891:	
  2103                           ;flush.c: 160: case FLUSH_BIG_0:
  2104                           
  2105                           
  2106                           ;flush.c: 161: Fflush1.bits.bit_6 = 1;
  2107                           
  2108                           ;flush.c: 162: RA2 = 0;
  2109                           
  2110                           ;flush.c: 163: RA4 = 1;
  2111                           
  2112                           ;flush.c: 164: RA1 = 1;
  2113                           
  2114                           ;flush.c: 165: if(++CNTflush >= 10)
  2115  0059  221F  120A  118A   	fcall	PL4	;call to abstracted procedure
  2116  005C  1903               	skipnz
  2117  005D  0234               	subwf	_CNTflush,w	;volatile
  2118  005E  1C03               	skipc
  2119  005F  0008               	return
  2120                           
  2121                           ;flush.c: 166: {
  2122                           ;flush.c: 167: CNTflush = 0;
  2123  0060  01B4               	clrf	_CNTflush	;volatile
  2124  0061  01B5               	clrf	_CNTflush+1	;volatile
  2125                           
  2126                           ;flush.c: 168: SEQflsuh = FLUSH_BIG_1;
  2127  0062  3004               	movlw	4
  2128  0063  00C7               	movwf	_SEQflsuh	;volatile
  2129  0064  0008               	return
  2130  0065                     l2893:	
  2131                           ;flush.c: 171: case FLUSH_BIG_1:
  2132                           
  2133                           
  2134                           ;flush.c: 172: Fflush1.bits.bit_6 = 1;
  2135  0065  1748               	bsf	_Fflush1,6	;volatile
  2136                           
  2137                           ;flush.c: 173: RA2 = 1;
  2138  0066  1505               	bsf	5,2	;volatile
  2139                           
  2140                           ;flush.c: 174: RA4 = 1;
  2141  0067  1605               	bsf	5,4	;volatile
  2142                           
  2143                           ;flush.c: 175: RA1 = 1;
  2144  0068  1485               	bsf	5,1	;volatile
  2145                           
  2146                           ;flush.c: 177: if(++CNTflush >= 100)
  2147  0069  0AB4               	incf	_CNTflush,f	;volatile
  2148  006A  1903               	skipnz
  2149  006B  0AB5               	incf	_CNTflush+1,f	;volatile
  2150  006C  3000               	movlw	0
  2151  006D  0235               	subwf	_CNTflush+1,w	;volatile
  2152  006E  3064               	movlw	100
  2153  006F  1903               	skipnz
  2154  0070  0234               	subwf	_CNTflush,w	;volatile
  2155  0071  1C03               	skipc
  2156  0072  0008               	return
  2157                           
  2158                           ;flush.c: 178: {
  2159                           ;flush.c: 179: CNTflush = 0;
  2160  0073  01B4               	clrf	_CNTflush	;volatile
  2161  0074  01B5               	clrf	_CNTflush+1	;volatile
  2162                           
  2163                           ;flush.c: 180: SEQflsuh = FLUSH_BIG_2;
  2164  0075  3005               	movlw	5
  2165  0076  00C7               	movwf	_SEQflsuh	;volatile
  2166  0077  0008               	return
  2167  0078                     l2895:	
  2168                           ;flush.c: 191: case FLUSH_BIG_2:
  2169                           
  2170                           
  2171                           ;flush.c: 192: Fflush1.bits.bit_6 = 1;
  2172                           
  2173                           ;flush.c: 193: RA2 = 0;
  2174                           
  2175                           ;flush.c: 194: RA4 = 1;
  2176                           
  2177                           ;flush.c: 195: RA1 = 1;
  2178                           
  2179                           ;flush.c: 196: if(++CNTflush >= 10)
  2180  0078  221F  120A  118A   	fcall	PL4	;call to abstracted procedure
  2181  007B                     L14:	
  2182  007B  1903               	skipnz
  2183  007C  0234               	subwf	_CNTflush,w	;volatile
  2184  007D  1C03               	skipc
  2185  007E  0008               	return
  2186                           
  2187                           ;flush.c: 197: {
  2188                           ;flush.c: 198: CNTflush = 0;
  2189  007F  01B4               	clrf	_CNTflush	;volatile
  2190  0080  01B5               	clrf	_CNTflush+1	;volatile
  2191                           
  2192                           ;flush.c: 199: SEQflsuh = FLUSH_END_0;
  2193  0081  3009               	movlw	9
  2194  0082  00C7               	movwf	_SEQflsuh	;volatile
  2195  0083  0008               	return
  2196  0084                     l2897:	
  2197                           ;flush.c: 203: case FLUSH_SML_0:
  2198                           
  2199                           
  2200                           ;flush.c: 204: Fflush1.bits.bit_6 = 1;
  2201                           
  2202                           ;flush.c: 205: RA2 = 0;
  2203                           
  2204                           ;flush.c: 206: RA4 = 1;
  2205                           
  2206                           ;flush.c: 207: RA1 = 0;
  2207                           
  2208                           ;flush.c: 208: if(++CNTflush >= 5)
  2209  0084  2215  120A  118A   	fcall	PL2	;call to abstracted procedure
  2210  0087  1903               	skipnz
  2211  0088  0234               	subwf	_CNTflush,w	;volatile
  2212  0089  1C03               	skipc
  2213  008A  0008               	return
  2214                           
  2215                           ;flush.c: 209: {
  2216                           ;flush.c: 210: CNTflush = 0;
  2217  008B  01B4               	clrf	_CNTflush	;volatile
  2218  008C  01B5               	clrf	_CNTflush+1	;volatile
  2219                           
  2220                           ;flush.c: 211: SEQflsuh = FLUSH_SML_1;
  2221  008D  3007               	movlw	7
  2222  008E  00C7               	movwf	_SEQflsuh	;volatile
  2223  008F  0008               	return
  2224  0090                     l2899:	
  2225                           ;flush.c: 214: case FLUSH_SML_1:
  2226                           
  2227                           
  2228                           ;flush.c: 215: Fflush1.bits.bit_6 = 1;
  2229  0090  1748               	bsf	_Fflush1,6	;volatile
  2230                           
  2231                           ;flush.c: 216: RA2 = 1;
  2232  0091  1505               	bsf	5,2	;volatile
  2233                           
  2234                           ;flush.c: 217: RA4 = 1;
  2235  0092  1605               	bsf	5,4	;volatile
  2236                           
  2237                           ;flush.c: 218: RA1 = 0;
  2238                           
  2239                           ;flush.c: 220: if(++CNTflush >= 100)
  2240  0093  2229  120A  118A   	fcall	PL6	;call to abstracted procedure
  2241  0096  3064               	movlw	100
  2242  0097  1903               	skipnz
  2243  0098  0234               	subwf	_CNTflush,w	;volatile
  2244  0099  1C03               	skipc
  2245  009A  0008               	return
  2246                           
  2247                           ;flush.c: 221: {
  2248                           ;flush.c: 222: CNTflush = 0;
  2249  009B  01B4               	clrf	_CNTflush	;volatile
  2250  009C  01B5               	clrf	_CNTflush+1	;volatile
  2251                           
  2252                           ;flush.c: 223: SEQflsuh = FLUSH_SML_2;
  2253  009D  3008               	movlw	8
  2254  009E  00C7               	movwf	_SEQflsuh	;volatile
  2255  009F  0008               	return
  2256  00A0                     l2901:	
  2257                           ;flush.c: 226: case FLUSH_SML_2:
  2258                           
  2259                           
  2260                           ;flush.c: 227: Fflush1.bits.bit_6 = 1;
  2261                           
  2262                           ;flush.c: 228: RA2 = 0;
  2263                           
  2264                           ;flush.c: 229: RA4 = 1;
  2265                           
  2266                           ;flush.c: 230: RA1 = 0;
  2267                           
  2268                           ;flush.c: 231: if(++CNTflush >= 5)
  2269  00A0  2215  120A  118A   	fcall	PL2	;call to abstracted procedure
  2270  00A3  287B               	goto	L14
  2271  00A4                     l2903:	
  2272                           ;flush.c: 238: case FLUSH_END_0:
  2273                           
  2274                           
  2275                           ;flush.c: 239: Fflush1.bits.bit_6 = 1;
  2276  00A4  1748               	bsf	_Fflush1,6	;volatile
  2277                           
  2278                           ;flush.c: 240: RA2 = 0;
  2279  00A5  1105               	bcf	5,2	;volatile
  2280                           
  2281                           ;flush.c: 241: RA4 = 0;
  2282  00A6  1205               	bcf	5,4	;volatile
  2283                           
  2284                           ;flush.c: 242: RA1 = 0;
  2285                           
  2286                           ;flush.c: 243: if(++CNTflush >= 5)
  2287  00A7  2229  120A  118A   	fcall	PL6	;call to abstracted procedure
  2288  00AA  3005               	movlw	5
  2289  00AB  1903               	skipnz
  2290  00AC  0234               	subwf	_CNTflush,w	;volatile
  2291  00AD  1C03               	skipc
  2292  00AE  0008               	return
  2293                           
  2294                           ;flush.c: 244: {
  2295                           ;flush.c: 245: CNTflush = 0;
  2296  00AF  01B4               	clrf	_CNTflush	;volatile
  2297  00B0  01B5               	clrf	_CNTflush+1	;volatile
  2298                           
  2299                           ;flush.c: 246: SEQflsuh = FLUSH_END_1;
  2300  00B1  300A               	movlw	10
  2301  00B2  00C7               	movwf	_SEQflsuh	;volatile
  2302  00B3  0008               	return
  2303  00B4                     l2905:	
  2304                           ;flush.c: 249: case FLUSH_END_1:
  2305                           
  2306                           
  2307                           ;flush.c: 250: Fflush1.bits.bit_6 = 0;
  2308  00B4  1348               	bcf	_Fflush1,6	;volatile
  2309                           
  2310                           ;flush.c: 251: RA2 = 0;
  2311  00B5  1105               	bcf	5,2	;volatile
  2312                           
  2313                           ;flush.c: 252: RA4 = 0;
  2314  00B6  1205               	bcf	5,4	;volatile
  2315                           
  2316                           ;flush.c: 253: RA1 = 0;
  2317  00B7  1085               	bcf	5,1	;volatile
  2318                           
  2319                           ;flush.c: 254: SEQflsuh = FLUSH_INIT_0;
  2320  00B8  01C7               	clrf	_SEQflsuh	;volatile
  2321                           
  2322                           ;flush.c: 255: CNTflush = 0;
  2323  00B9  01B4               	clrf	_CNTflush	;volatile
  2324  00BA  01B5               	clrf	_CNTflush+1	;volatile
  2325                           
  2326                           ;flush.c: 256: Fflush1.bits.bit_1 = 0;
  2327  00BB  10C8               	bcf	_Fflush1,1	;volatile
  2328                           
  2329                           ;flush.c: 257: Fflush1.bits.bit_3 = 0;
  2330  00BC  11C8               	bcf	_Fflush1,3	;volatile
  2331                           
  2332                           ;flush.c: 258: break;
  2333  00BD  0008               	return
  2334  00BE                     l2906:	
  2335                           ;flush.c: 259: default:
  2336                           
  2337                           
  2338                           ;flush.c: 260: Fflush1.bits.bit_6 = 0;
  2339  00BE  1348               	bcf	_Fflush1,6	;volatile
  2340                           
  2341                           ;flush.c: 261: RA2 = 0;
  2342  00BF  1105               	bcf	5,2	;volatile
  2343                           
  2344                           ;flush.c: 262: RA4 = 0;
  2345  00C0  1205               	bcf	5,4	;volatile
  2346                           
  2347                           ;flush.c: 263: RA1 = 0;
  2348  00C1  1085               	bcf	5,1	;volatile
  2349                           
  2350                           ;flush.c: 264: Fflush1.bits.bit_1 = 0;
  2351  00C2  10C8               	bcf	_Fflush1,1	;volatile
  2352                           
  2353                           ;flush.c: 265: Fflush1.bits.bit_3 = 0;
  2354  00C3  11C8               	bcf	_Fflush1,3	;volatile
  2355                           
  2356                           ;flush.c: 266: SEQflsuh = FLUSH_INIT_0;
  2357  00C4  01C7               	clrf	_SEQflsuh	;volatile
  2358                           
  2359                           ;flush.c: 267: CNTflush = 0;
  2360  00C5  01B4               	clrf	_CNTflush	;volatile
  2361  00C6  01B5               	clrf	_CNTflush+1	;volatile
  2362                           
  2363                           ;flush.c: 268: break;
  2364  00C7  0008               	return
  2365  00C8                     l6913:	
  2366  00C8  0847               	movf	_SEQflsuh,w	;volatile
  2367                           
  2368                           ; Switch size 1, requested type "space"
  2369                           ; Number of cases is 11, Range of values is 0 to 10
  2370                           ; switch strategies available:
  2371                           ; Name         Instructions Cycles
  2372                           ; simple_byte           34    18 (average)
  2373                           ; direct_byte           41     8 (fixed)
  2374                           ; jumptable            260     6 (fixed)
  2375                           ;	Chosen strategy is simple_byte
  2376  00C9  3A00               	xorlw	0	; case 0
  2377  00CA  1903               	skipnz
  2378  00CB  2825               	goto	l2878
  2379  00CC  3A01               	xorlw	1	; case 1
  2380  00CD  1903               	skipnz
  2381  00CE  2834               	goto	l2883
  2382  00CF  3A03               	xorlw	3	; case 2
  2383  00D0  1903               	skipnz
  2384  00D1  2849               	goto	l2886
  2385  00D2  3A01               	xorlw	1	; case 3
  2386  00D3  1903               	skipnz
  2387  00D4  2859               	goto	l2891
  2388  00D5  3A07               	xorlw	7	; case 4
  2389  00D6  1903               	skipnz
  2390  00D7  2865               	goto	l2893
  2391  00D8  3A01               	xorlw	1	; case 5
  2392  00D9  1903               	skipnz
  2393  00DA  2878               	goto	l2895
  2394  00DB  3A03               	xorlw	3	; case 6
  2395  00DC  1903               	skipnz
  2396  00DD  2884               	goto	l2897
  2397  00DE  3A01               	xorlw	1	; case 7
  2398  00DF  1903               	skipnz
  2399  00E0  2890               	goto	l2899
  2400  00E1  3A0F               	xorlw	15	; case 8
  2401  00E2  1903               	skipnz
  2402  00E3  28A0               	goto	l2901
  2403  00E4  3A01               	xorlw	1	; case 9
  2404  00E5  1903               	skipnz
  2405  00E6  28A4               	goto	l2903
  2406  00E7  3A03               	xorlw	3	; case 10
  2407  00E8  1903               	skipnz
  2408  00E9  28B4               	goto	l2905
  2409  00EA  28BE               	goto	l2906
  2410  00EB  0008               	return
  2411  00EC                     __end_of_FlushCon:	
  2412  00EC                     __ptext17:	
  2413 ;; *************** function _FlushJudge *****************
  2414 ;; Defined at:
  2415 ;;		line 26 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\flush.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;		None
  2418 ;; Auto vars:     Size  Location     Type
  2419 ;;  Key_Step        1    6[COMMON] unsigned char 
  2420 ;; Return value:  Size  Location     Type
  2421 ;;                  1    wreg      void 
  2422 ;; Registers used:
  2423 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2424 ;; Tracked objects:
  2425 ;;		On entry : 300/0
  2426 ;;		On exit  : 300/0
  2427 ;;		Unchanged: 0/0
  2428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2429 ;;      Params:         0       0       0       0       0
  2430 ;;      Locals:         1       0       0       0       0
  2431 ;;      Temps:          0       0       0       0       0
  2432 ;;      Totals:         1       0       0       0       0
  2433 ;;Total ram usage:        1 bytes
  2434 ;; Hardware stack levels used:    1
  2435 ;; Hardware stack levels required when called:    4
  2436 ;; This function calls:
  2437 ;;		_GkeyLoop
  2438 ;; This function is called by:
  2439 ;;		_GflushLoop
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           
  2444                           ;psect for function _FlushJudge
  2445  00EC                     _FlushJudge:	
  2446                           
  2447                           ;flush.c: 31: if(Fbodysensor.bits.bit_3 == 1)
  2448                           
  2449                           ;incstack = 0
  2450                           ; Regs used in _FlushJudge: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2451  00EC  1DFA               	btfss	_Fbodysensor,3	;volatile
  2452  00ED  28F1               	goto	l2861
  2453                           
  2454                           ;flush.c: 32: {
  2455                           ;flush.c: 33: Fflush1.bits.bit_0 = 1;
  2456  00EE  1448               	bsf	_Fflush1,0	;volatile
  2457                           
  2458                           ;flush.c: 34: Fflush1.bits.bit_2 = 0;
  2459  00EF  1148               	bcf	_Fflush1,2	;volatile
  2460                           
  2461                           ;flush.c: 35: }
  2462  00F0  2907               	goto	l2862
  2463  00F1                     l2861:	
  2464                           
  2465                           ;flush.c: 36: else if(Fbodysensor.bits.bit_4 == 1)
  2466  00F1  1E7A               	btfss	_Fbodysensor,4	;volatile
  2467  00F2  28F5               	goto	l7265
  2468                           
  2469                           ;flush.c: 37: {
  2470                           ;flush.c: 38: Fflush1.bits.bit_2 = 1;
  2471  00F3  1548               	bsf	_Fflush1,2	;volatile
  2472  00F4  28F9               	goto	L1
  2473  00F5                     l7265:	
  2474                           ;flush.c: 40: }
  2475                           
  2476                           ;flush.c: 39: Fflush1.bits.bit_0 = 0;
  2477                           
  2478                           
  2479                           ;flush.c: 41: else if (SEQflsuh)
  2480  00F5  0847               	movf	_SEQflsuh,w	;volatile
  2481  00F6  1903               	btfsc	3,2
  2482  00F7  28FB               	goto	l7269
  2483  00F8                     l7267:	
  2484                           
  2485                           ;flush.c: 42: {
  2486                           ;flush.c: 43: Fflush1.bits.bit_2 = 0;
  2487  00F8  1148               	bcf	_Fflush1,2	;volatile
  2488  00F9                     L1:	
  2489                           
  2490                           ;flush.c: 44: Fflush1.bits.bit_0 = 0;
  2491  00F9  1048               	bcf	_Fflush1,0	;volatile
  2492                           
  2493                           ;flush.c: 45: }
  2494  00FA  2907               	goto	l2862
  2495  00FB                     l7269:	
  2496                           
  2497                           ;flush.c: 46: else
  2498                           ;flush.c: 47: {
  2499                           ;flush.c: 48: Key_Step = GkeyLoop();
  2500  00FB  211B  120A  118A   	fcall	_GkeyLoop
  2501  00FE  00F6               	movwf	FlushJudge@Key_Step
  2502                           
  2503                           ;flush.c: 49: if (Key_Step)
  2504  00FF  0876               	movf	FlushJudge@Key_Step,w
  2505  0100  1903               	btfsc	3,2
  2506  0101  28F8               	goto	l7267
  2507                           
  2508                           ;flush.c: 50: {
  2509                           ;flush.c: 51: SEQflsuh = Key_Step;
  2510  0102  0876               	movf	FlushJudge@Key_Step,w
  2511  0103  00C7               	movwf	_SEQflsuh	;volatile
  2512                           
  2513                           ;flush.c: 52: CNTflush = 0;
  2514  0104  01B4               	clrf	_CNTflush	;volatile
  2515  0105  01B5               	clrf	_CNTflush+1	;volatile
  2516                           
  2517                           ;flush.c: 53: Fflush1.bits.bit_7 = 1;
  2518  0106  17C8               	bsf	_Fflush1,7	;volatile
  2519  0107                     l2862:	
  2520                           ;flush.c: 54: }else
  2521                           
  2522                           
  2523                           ;flush.c: 58: }
  2524                           ;flush.c: 59: }
  2525                           ;flush.c: 76: if (Fbodysensor.bits.bit_2 == 1)
  2526  0107  197A               	btfsc	_Fbodysensor,2	;volatile
  2527                           
  2528                           ;flush.c: 77: {
  2529                           ;flush.c: 78: Fflush1.bits.bit_7 = 1;
  2530  0108  17C8               	bsf	_Fflush1,7	;volatile
  2531                           
  2532                           ;flush.c: 79: }
  2533                           ;flush.c: 80: if (Fflush1.bits.bit_7 == 1)
  2534  0109  1FC8               	btfss	_Fflush1,7	;volatile
  2535  010A  0008               	return
  2536                           
  2537                           ;flush.c: 81: {
  2538                           ;flush.c: 82: if (Fflush1.bits.bit_6 == 1)
  2539  010B  1F48               	btfss	_Fflush1,6	;volatile
  2540  010C  2910               	goto	l2871
  2541                           
  2542                           ;flush.c: 83: {
  2543                           ;flush.c: 84: Fflush1.bits.bit_2 = 0;
  2544  010D  1148               	bcf	_Fflush1,2	;volatile
  2545                           
  2546                           ;flush.c: 85: Fflush1.bits.bit_0 = 0;
  2547  010E  1048               	bcf	_Fflush1,0	;volatile
  2548                           
  2549                           ;flush.c: 86: return;
  2550  010F  0008               	return
  2551  0110                     l2871:	
  2552                           
  2553                           ;flush.c: 87: }
  2554                           ;flush.c: 88: Fflush1.bits.bit_7 = 0;
  2555  0110  13C8               	bcf	_Fflush1,7	;volatile
  2556                           
  2557                           ;flush.c: 89: if(Fflush1.bits.bit_0 == 1)
  2558  0111  1C48               	btfss	_Fflush1,0	;volatile
  2559  0112  2916               	goto	l2873
  2560                           
  2561                           ;flush.c: 90: {
  2562                           ;flush.c: 91: Fflush1.bits.bit_0 = 0;
  2563  0113  1048               	bcf	_Fflush1,0	;volatile
  2564                           
  2565                           ;flush.c: 92: Fflush1.bits.bit_1 = 1;
  2566  0114  14C8               	bsf	_Fflush1,1	;volatile
  2567                           
  2568                           ;flush.c: 93: return;
  2569  0115  0008               	return
  2570  0116                     l2873:	
  2571                           
  2572                           ;flush.c: 94: }
  2573                           ;flush.c: 95: if(Fflush1.bits.bit_2 == 1)
  2574  0116  1D48               	btfss	_Fflush1,2	;volatile
  2575  0117  0008               	return
  2576                           
  2577                           ;flush.c: 96: {
  2578                           ;flush.c: 97: Fflush1.bits.bit_2 = 0;
  2579  0118  1148               	bcf	_Fflush1,2	;volatile
  2580                           
  2581                           ;flush.c: 98: Fflush1.bits.bit_3 = 1;
  2582  0119  15C8               	bsf	_Fflush1,3	;volatile
  2583  011A  0008               	return
  2584  011B                     __end_of_FlushJudge:	
  2585  011B                     __ptext18:	
  2586 ;; *************** function _GkeyLoop *****************
  2587 ;; Defined at:
  2588 ;;		line 7 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\key.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;		None
  2591 ;; Auto vars:     Size  Location     Type
  2592 ;;		None
  2593 ;; Return value:  Size  Location     Type
  2594 ;;                  1    wreg      unsigned char 
  2595 ;; Registers used:
  2596 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2597 ;; Tracked objects:
  2598 ;;		On entry : 300/0
  2599 ;;		On exit  : 300/0
  2600 ;;		Unchanged: 0/0
  2601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2602 ;;      Params:         0       0       0       0       0
  2603 ;;      Locals:         0       0       0       0       0
  2604 ;;      Temps:          2       0       0       0       0
  2605 ;;      Totals:         2       0       0       0       0
  2606 ;;Total ram usage:        2 bytes
  2607 ;; Hardware stack levels used:    1
  2608 ;; Hardware stack levels required when called:    3
  2609 ;; This function calls:
  2610 ;;		_KeyControl
  2611 ;;		_ScanKey
  2612 ;; This function is called by:
  2613 ;;		_FlushJudge
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           
  2618                           ;psect for function _GkeyLoop
  2619  011B                     _GkeyLoop:	
  2620                           
  2621                           ;key.c: 9: for ( SeletedLine = 0; SeletedLine < 2; SeletedLine++)
  2622                           
  2623                           ;incstack = 0
  2624                           ; Regs used in _GkeyLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2625  011B  01F9               	clrf	_SeletedLine	;volatile
  2626  011C                     L7:	
  2627  011C  3002               	movlw	2
  2628  011D  0279               	subwf	_SeletedLine,w	;volatile
  2629  011E  1803               	btfsc	3,0
  2630  011F  3400               	retlw	0
  2631                           
  2632                           ;key.c: 10: {
  2633                           ;key.c: 11: KeyLines[SeletedLine].flags.level =ScanKey(SeletedLine);
  2634  0120  0879               	movf	_SeletedLine,w	;volatile
  2635  0121  2202  120A  118A   	fcall	_ScanKey
  2636  0124  00F4               	movwf	??_GkeyLoop
  2637  0125  0879               	movf	_SeletedLine,w	;volatile
  2638  0126  00F5               	movwf	??_GkeyLoop+1
  2639  0127  3001               	movlw	1
  2640  0128  1003               	clrc
  2641  0129                     L2:	
  2642  0129  0DF5               	rlf	??_GkeyLoop+1,f
  2643  012A  3EFF               	addlw	-1
  2644  012B  1003               	clrc
  2645  012C  1D03               	skipz
  2646  012D  2929               	goto	L2
  2647  012E  0D75               	rlf	??_GkeyLoop+1,w
  2648  012F  3E52               	addlw	(low (_KeyLines| 0))& (0+255)
  2649  0130  0084               	movwf	4
  2650  0131  0DF4               	rlf	??_GkeyLoop,f
  2651  0132  0DF4               	rlf	??_GkeyLoop,f
  2652  0133  1383               	bcf	3,7	;select IRP bank0
  2653  0134  0800               	movf	0,w
  2654  0135  0674               	xorwf	??_GkeyLoop,w
  2655  0136  39FB               	andlw	-5
  2656  0137  0674               	xorwf	??_GkeyLoop,w
  2657  0138  0080               	movwf	0
  2658                           
  2659                           ;key.c: 13: if(KeyLines[SeletedLine].flags.is_forbidden)
  2660  0139  0879               	movf	_SeletedLine,w	;volatile
  2661  013A  00F4               	movwf	??_GkeyLoop
  2662  013B  3001               	movlw	1
  2663  013C  1003               	clrc
  2664  013D                     L3:	
  2665  013D  0DF4               	rlf	??_GkeyLoop,f
  2666  013E  3EFF               	addlw	-1
  2667  013F  1003               	clrc
  2668  0140  1D03               	skipz
  2669  0141  293D               	goto	L3
  2670  0142  0D74               	rlf	??_GkeyLoop,w
  2671  0143  3E52               	addlw	(low (_KeyLines| 0))& (0+255)
  2672  0144  0084               	movwf	4
  2673  0145  1C00               	btfss	0,0
  2674  0146  2963               	goto	l7233
  2675                           
  2676                           ;key.c: 14: {
  2677                           ;key.c: 15: if (KeyLines[SeletedLine].flags.level)
  2678  0147  0879               	movf	_SeletedLine,w	;volatile
  2679  0148  00F4               	movwf	??_GkeyLoop
  2680  0149  3001               	movlw	1
  2681  014A  1003               	clrc
  2682  014B                     L4:	
  2683  014B  0DF4               	rlf	??_GkeyLoop,f
  2684  014C  3EFF               	addlw	-1
  2685  014D  1003               	clrc
  2686  014E  1D03               	skipz
  2687  014F  294B               	goto	L4
  2688  0150  0D74               	rlf	??_GkeyLoop,w
  2689  0151  3E52               	addlw	(low (_KeyLines| 0))& (0+255)
  2690  0152  0084               	movwf	4
  2691  0153  1D00               	btfss	0,2
  2692  0154  2983               	goto	l7249
  2693                           
  2694                           ;key.c: 16: {
  2695                           ;key.c: 17: KeyLines[SeletedLine].flags.is_forbidden = 0;
  2696  0155  0879               	movf	_SeletedLine,w	;volatile
  2697  0156  00F4               	movwf	??_GkeyLoop
  2698  0157  3001               	movlw	1
  2699  0158  1003               	clrc
  2700  0159                     L5:	
  2701  0159  0DF4               	rlf	??_GkeyLoop,f
  2702  015A  3EFF               	addlw	-1
  2703  015B  1003               	clrc
  2704  015C  1D03               	skipz
  2705  015D  2959               	goto	L5
  2706  015E  0D74               	rlf	??_GkeyLoop,w
  2707  015F  3E52               	addlw	(low (_KeyLines| 0))& (0+255)
  2708  0160  0084               	movwf	4
  2709  0161  1000               	bcf	0,0
  2710  0162  2983               	goto	l7249
  2711  0163                     l7233:	
  2712                           
  2713                           ;key.c: 20: }
  2714                           ;key.c: 21: if (KeyControl(&KeyLines[SeletedLine]))
  2715  0163  0879               	movf	_SeletedLine,w	;volatile
  2716  0164  00F4               	movwf	??_GkeyLoop
  2717  0165  3001               	movlw	1
  2718  0166  1003               	clrc
  2719  0167                     L6:	
  2720  0167  0DF4               	rlf	??_GkeyLoop,f
  2721  0168  3EFF               	addlw	-1
  2722  0169  1003               	clrc
  2723  016A  1D03               	skipz
  2724  016B  2967               	goto	L6
  2725  016C  0D74               	rlf	??_GkeyLoop,w
  2726  016D  3E52               	addlw	(low (_KeyLines| 0))& (0+255)
  2727  016E  2185  120A  118A   	fcall	_KeyControl
  2728  0171  3A00               	xorlw	0
  2729  0172  1D03               	btfss	3,2
  2730  0173  297B               	goto	l7247
  2731  0174  2983               	goto	l7249
  2732  0175                     l5728:	
  2733                           ;key.c: 24: {
  2734                           ;key.c: 25: case PortA:
  2735                           
  2736                           
  2737                           ;key.c: 26: Fflush1.bits.bit_0 = 1;
  2738  0175  1448               	bsf	_Fflush1,0	;volatile
  2739                           
  2740                           ;key.c: 27: KeyLines[PortB].flags.is_forbidden = 1;
  2741  0176  1456               	bsf	_KeyLines+4,0	;volatile
  2742                           
  2743                           ;key.c: 28: return FLUSH_BIG_0;
  2744  0177  3403               	retlw	3
  2745  0178                     l5730:	
  2746                           ;key.c: 29: case PortB:
  2747                           
  2748                           
  2749                           ;key.c: 30: Fflush1.bits.bit_2 = 1;
  2750  0178  1548               	bsf	_Fflush1,2	;volatile
  2751                           
  2752                           ;key.c: 31: KeyLines[PortA].flags.is_forbidden = 1;
  2753  0179  1452               	bsf	_KeyLines,0	;volatile
  2754                           
  2755                           ;key.c: 32: return FLUSH_SML_0;
  2756  017A  3406               	retlw	6
  2757  017B                     l7247:	
  2758  017B  0879               	movf	_SeletedLine,w	;volatile
  2759                           
  2760                           ; Switch size 1, requested type "space"
  2761                           ; Number of cases is 2, Range of values is 0 to 1
  2762                           ; switch strategies available:
  2763                           ; Name         Instructions Cycles
  2764                           ; simple_byte            7     4 (average)
  2765                           ; direct_byte           14     8 (fixed)
  2766                           ; jumptable            260     6 (fixed)
  2767                           ;	Chosen strategy is simple_byte
  2768  017C  3A00               	xorlw	0	; case 0
  2769  017D  1903               	skipnz
  2770  017E  2975               	goto	l5728
  2771  017F  3A01               	xorlw	1	; case 1
  2772  0180  1903               	skipnz
  2773  0181  2978               	goto	l5730
  2774  0182  2983               	goto	l7249
  2775  0183                     l7249:	
  2776  0183  0AF9               	incf	_SeletedLine,f	;volatile
  2777  0184  291C               	goto	L7
  2778  0185                     __end_of_GkeyLoop:	
  2779                           ;key.c: 38: }
  2780                           ;key.c: 39: }
  2781                           ;key.c: 40: return 0;
  2782                           
  2783  0185                     __ptext20:	
  2784 ;; *************** function _KeyControl *****************
  2785 ;; Defined at:
  2786 ;;		line 58 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\key.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;  this            1    wreg     PTR struct _KEY_PRIVATE
  2789 ;;		 -> KeyLines(8), 
  2790 ;; Auto vars:     Size  Location     Type
  2791 ;;  this            1    6[BANK0 ] PTR struct _KEY_PRIVATE
  2792 ;;		 -> KeyLines(8), 
  2793 ;; Return value:  Size  Location     Type
  2794 ;;                  1    wreg      unsigned char 
  2795 ;; Registers used:
  2796 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2797 ;; Tracked objects:
  2798 ;;		On entry : B00/0
  2799 ;;		On exit  : B00/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2802 ;;      Params:         0       0       0       0       0
  2803 ;;      Locals:         0       7       0       0       0
  2804 ;;      Temps:          2       0       0       0       0
  2805 ;;      Totals:         2       7       0       0       0
  2806 ;;Total ram usage:        9 bytes
  2807 ;; Hardware stack levels used:    1
  2808 ;; Hardware stack levels required when called:    2
  2809 ;; This function calls:
  2810 ;;		Nothing
  2811 ;; This function is called by:
  2812 ;;		_GkeyLoop
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815                           
  2816                           
  2817                           ;psect for function _KeyControl
  2818  0185                     _KeyControl:	
  2819                           
  2820                           ;incstack = 0
  2821                           ; Regs used in _KeyControl: [wreg-fsr0h+status,2+status,0]
  2822                           ;KeyControl@this stored from wreg
  2823  0185  00E0               	movwf	KeyControl@this
  2824                           
  2825                           ;key.c: 60: if(!(this->flags.level))
  2826  0186  0084               	movwf	4
  2827                           
  2828                           ;key.c: 61: {
  2829                           ;key.c: 62: if (this->flags.is_pressing)
  2830  0187  0860               	movf	KeyControl@this,w
  2831  0188  1900               	btfsc	0,2
  2832  0189  29DB               	goto	L11
  2833  018A  0084               	movwf	4
  2834                           
  2835                           ;key.c: 63: {
  2836                           ;key.c: 64: this->cnt = 0;
  2837  018B  0A60               	incf	KeyControl@this,w
  2838  018C  1C80               	btfss	0,1
  2839  018D  29C0               	goto	L12
  2840  018E  0084               	movwf	4
  2841  018F  0180               	clrf	0
  2842                           
  2843                           ;key.c: 66: if (((++(this->cnt_timeout)) > (600)?(0 == ((this->cnt_timeout) = 0)):0))
  2844  0190  0860               	movf	KeyControl@this,w
  2845  0191  3E02               	addlw	2
  2846  0192  0084               	movwf	4
  2847  0193  3001               	movlw	1
  2848  0194  0780               	addwf	0,f
  2849  0195  0A84               	incf	4,f
  2850  0196  1803               	skipnc
  2851  0197  0A80               	incf	0,f
  2852  0198  0384               	decf	4,f
  2853  0199  0800               	movf	0,w
  2854  019A  00F2               	movwf	??_KeyControl
  2855  019B  0A84               	incf	4,f
  2856  019C  0800               	movf	0,w
  2857  019D  00F3               	movwf	??_KeyControl+1
  2858  019E  3002               	movlw	2
  2859  019F  0273               	subwf	??_KeyControl+1,w
  2860  01A0  3059               	movlw	89
  2861  01A1  1903               	skipnz
  2862  01A2  0272               	subwf	??_KeyControl,w
  2863  01A3  1803               	skipnc
  2864  01A4  29A7               	goto	l7179
  2865  01A5  01DA               	clrf	_KeyControl$3140
  2866  01A6  29B7               	goto	L8
  2867  01A7                     l7179:	
  2868  01A7  0860               	movf	KeyControl@this,w
  2869  01A8  3E02               	addlw	2
  2870  01A9  0084               	movwf	4
  2871  01AA  0180               	clrf	0
  2872  01AB  0A84               	incf	4,f
  2873  01AC  0180               	clrf	0
  2874  01AD  01F2               	clrf	??_KeyControl
  2875  01AE  01F3               	clrf	??_KeyControl+1
  2876  01AF  0872               	movf	??_KeyControl,w
  2877  01B0  0473               	iorwf	??_KeyControl+1,w
  2878  01B1  1D03               	btfss	3,2
  2879  01B2  29B5               	goto	u1880
  2880  01B3  3001               	movlw	1
  2881  01B4  29B6               	goto	u1890
  2882  01B5                     u1880:	
  2883  01B5  3000               	movlw	0
  2884  01B6                     u1890:	
  2885  01B6  00DA               	movwf	_KeyControl$3140
  2886  01B7                     L8:	
  2887  01B7  01DB               	clrf	_KeyControl$3140+1
  2888  01B8  085A               	movf	_KeyControl$3140,w
  2889  01B9  045B               	iorwf	_KeyControl$3140+1,w
  2890  01BA  1903               	btfsc	3,2
  2891  01BB  3400               	retlw	0
  2892                           
  2893                           ;key.c: 67: {
  2894                           ;key.c: 68: this->flags.is_forbidden = 1;
  2895  01BC  0860               	movf	KeyControl@this,w
  2896  01BD  0084               	movwf	4
  2897  01BE  1400               	bsf	0,0
  2898  01BF  3400               	retlw	0
  2899  01C0                     L12:	
  2900                           ;key.c: 72: {
  2901                           ;key.c: 73: if (((++(this->cnt)) > (10)?(0 == ((this->cnt) = 0)):0))
  2902                           
  2903  01C0  0084               	movwf	4
  2904  01C1  300B               	movlw	11
  2905  01C2  0A80               	incf	0,f
  2906  01C3  0200               	subwf	0,w
  2907  01C4  1803               	skipnc
  2908  01C5  29C8               	goto	l7189
  2909  01C6  01DC               	clrf	_KeyControl$3141
  2910  01C7  29D1               	goto	L9
  2911  01C8                     l7189:	
  2912  01C8  0A60               	incf	KeyControl@this,w
  2913  01C9  0084               	movwf	4
  2914  01CA  0180               	clrf	0
  2915  01CB  1D03               	btfss	3,2
  2916  01CC  29CF               	goto	u1920
  2917  01CD  3001               	movlw	1
  2918  01CE  29D0               	goto	u1930
  2919  01CF                     u1920:	
  2920  01CF  3000               	movlw	0
  2921  01D0                     u1930:	
  2922  01D0  00DC               	movwf	_KeyControl$3141
  2923  01D1                     L9:	
  2924  01D1  01DD               	clrf	_KeyControl$3141+1
  2925  01D2  085C               	movf	_KeyControl$3141,w
  2926  01D3  045D               	iorwf	_KeyControl$3141+1,w
  2927  01D4  1903               	btfsc	3,2
  2928  01D5  3400               	retlw	0
  2929                           
  2930                           ;key.c: 74: {
  2931                           ;key.c: 75: this->flags.is_pressing = 1;
  2932  01D6  0860               	movf	KeyControl@this,w
  2933  01D7  0084               	movwf	4
  2934  01D8  3001               	movlw	1
  2935  01D9  1480               	bsf	0,1
  2936                           
  2937                           ;key.c: 76: return 1;
  2938  01DA  0008               	return
  2939  01DB                     L11:	
  2940                           ;key.c: 81: else
  2941                           ;key.c: 82: {
  2942                           ;key.c: 83: if (this->flags.is_pressing)
  2943                           
  2944  01DB  0084               	movwf	4
  2945                           
  2946                           ;key.c: 84: {
  2947                           ;key.c: 85: if (((++(this->cnt)) > (10)?(0 == ((this->cnt) = 0)):0))
  2948  01DC  0A60               	incf	KeyControl@this,w
  2949  01DD  1C80               	btfss	0,1
  2950  01DE  29F9               	goto	L13
  2951  01DF  0084               	movwf	4
  2952  01E0  300B               	movlw	11
  2953  01E1  0A80               	incf	0,f
  2954  01E2  0200               	subwf	0,w
  2955  01E3  1803               	skipnc
  2956  01E4  29E7               	goto	l7205
  2957  01E5  01DE               	clrf	_KeyControl$3142
  2958  01E6  29F0               	goto	L10
  2959  01E7                     l7205:	
  2960  01E7  0A60               	incf	KeyControl@this,w
  2961  01E8  0084               	movwf	4
  2962  01E9  0180               	clrf	0
  2963  01EA  1D03               	btfss	3,2
  2964  01EB  29EE               	goto	u1970
  2965  01EC  3001               	movlw	1
  2966  01ED  29EF               	goto	u1980
  2967  01EE                     u1970:	
  2968  01EE  3000               	movlw	0
  2969  01EF                     u1980:	
  2970  01EF  00DE               	movwf	_KeyControl$3142
  2971  01F0                     L10:	
  2972  01F0  01DF               	clrf	_KeyControl$3142+1
  2973  01F1  085E               	movf	_KeyControl$3142,w
  2974  01F2  045F               	iorwf	_KeyControl$3142+1,w
  2975  01F3  1903               	btfsc	3,2
  2976  01F4  3400               	retlw	0
  2977                           
  2978                           ;key.c: 86: {
  2979                           ;key.c: 87: this->flags.is_pressing = 0;
  2980  01F5  0860               	movf	KeyControl@this,w
  2981  01F6  0084               	movwf	4
  2982  01F7  1080               	bcf	0,1
  2983  01F8  3400               	retlw	0
  2984  01F9                     L13:	
  2985                           ;key.c: 90: {
  2986                           ;key.c: 91: this->cnt = 0;
  2987                           
  2988  01F9  0084               	movwf	4
  2989  01FA  0180               	clrf	0
  2990                           
  2991                           ;key.c: 92: this->cnt_timeout = 0;
  2992  01FB  0860               	movf	KeyControl@this,w
  2993  01FC  3E02               	addlw	2
  2994  01FD  0084               	movwf	4
  2995  01FE  0180               	clrf	0
  2996  01FF  0A84               	incf	4,f
  2997  0200  0180               	clrf	0
  2998                           
  2999                           ;key.c: 93: }
  3000                           ;key.c: 95: }
  3001                           ;key.c: 96: return 0;
  3002  0201  3400               	retlw	0
  3003  0202                     __end_of_KeyControl:	
  3004  0202                     __ptext19:	
  3005 ;; *************** function _ScanKey *****************
  3006 ;; Defined at:
  3007 ;;		line 45 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\key.c"
  3008 ;; Parameters:    Size  Location     Type
  3009 ;;  line_num        1    wreg     enum E876
  3010 ;; Auto vars:     Size  Location     Type
  3011 ;;  line_num        1    2[COMMON] enum E876
  3012 ;; Return value:  Size  Location     Type
  3013 ;;                  1    wreg      unsigned char 
  3014 ;; Registers used:
  3015 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3016 ;; Tracked objects:
  3017 ;;		On entry : 300/0
  3018 ;;		On exit  : 300/0
  3019 ;;		Unchanged: 0/0
  3020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3021 ;;      Params:         0       0       0       0       0
  3022 ;;      Locals:         1       0       0       0       0
  3023 ;;      Temps:          0       0       0       0       0
  3024 ;;      Totals:         1       0       0       0       0
  3025 ;;Total ram usage:        1 bytes
  3026 ;; Hardware stack levels used:    1
  3027 ;; Hardware stack levels required when called:    2
  3028 ;; This function calls:
  3029 ;;		Nothing
  3030 ;; This function is called by:
  3031 ;;		_GkeyLoop
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           
  3036                           ;psect for function _ScanKey
  3037  0202                     _ScanKey:	
  3038                           
  3039                           ;incstack = 0
  3040                           ; Regs used in _ScanKey: [wreg-fsr0h+status,2+status,0]
  3041                           ;ScanKey@line_num stored from wreg
  3042  0202  00F2               	movwf	ScanKey@line_num
  3043                           
  3044                           ;key.c: 47: switch (line_num)
  3045  0203  2A0C               	goto	l6673
  3046  0204                     l6663:	
  3047                           
  3048                           ;key.c: 50: return RA6;
  3049  0204  3000               	movlw	0
  3050  0205  1B05               	btfsc	5,6	;volatile
  3051  0206  3001               	movlw	1
  3052  0207  0008               	return
  3053  0208                     l6667:	
  3054                           
  3055                           ;key.c: 52: return RB0;
  3056  0208  3000               	movlw	0
  3057  0209  1806               	btfsc	6,0	;volatile
  3058  020A  3001               	movlw	1
  3059  020B  0008               	return
  3060  020C                     l6673:	
  3061  020C  0872               	movf	ScanKey@line_num,w
  3062                           
  3063                           ; Switch size 1, requested type "space"
  3064                           ; Number of cases is 2, Range of values is 0 to 1
  3065                           ; switch strategies available:
  3066                           ; Name         Instructions Cycles
  3067                           ; simple_byte            7     4 (average)
  3068                           ; direct_byte           14     8 (fixed)
  3069                           ; jumptable            260     6 (fixed)
  3070                           ;	Chosen strategy is simple_byte
  3071  020D  3A00               	xorlw	0	; case 0
  3072  020E  1903               	skipnz
  3073  020F  2A04               	goto	l6663
  3074  0210  3A01               	xorlw	1	; case 1
  3075  0211  1903               	skipnz
  3076  0212  2A08               	goto	l6667
  3077  0213  2A14               	goto	l5737
  3078  0214                     l5737:	
  3079  0214  0008               	return
  3080  0215                     __end_of_ScanKey:	
  3081  0215                     PL2:	
  3082  0215  1748               	bsf	_Fflush1,6	;volatile
  3083  0216  1105               	bcf	5,2	;volatile
  3084  0217  1605               	bsf	5,4	;volatile
  3085  0218  1085               	bcf	5,1	;volatile
  3086  0219  0AB4               	incf	_CNTflush,f	;volatile
  3087  021A  1903               	skipnz
  3088  021B  0AB5               	incf	_CNTflush+1,f	;volatile
  3089  021C  3000               	movlw	0
  3090  021D  0235               	subwf	_CNTflush+1,w	;volatile
  3091  021E  3405               	retlw	5
  3092  021F                     __end_ofPL2:	
  3093  021F                     PL4:	
  3094  021F  1748               	bsf	_Fflush1,6	;volatile
  3095  0220  1105               	bcf	5,2	;volatile
  3096  0221  1605               	bsf	5,4	;volatile
  3097  0222  1485               	bsf	5,1	;volatile
  3098  0223  0AB4               	incf	_CNTflush,f	;volatile
  3099  0224  1903               	skipnz
  3100  0225  0AB5               	incf	_CNTflush+1,f	;volatile
  3101  0226  3000               	movlw	0
  3102  0227  0235               	subwf	_CNTflush+1,w	;volatile
  3103  0228  340A               	retlw	10
  3104  0229                     __end_ofPL4:	
  3105  0229                     PL6:	
  3106  0229  1085               	bcf	5,1	;volatile
  3107  022A  0AB4               	incf	_CNTflush,f	;volatile
  3108  022B  1903               	skipnz
  3109  022C  0AB5               	incf	_CNTflush+1,f	;volatile
  3110  022D  3000               	movlw	0
  3111  022E  0235               	subwf	_CNTflush+1,w	;volatile
  3112  022F  0008               	return
  3113  0230                     __end_ofPL6:	
  3114                           
  3115                           	psect	text22
  3116  0326                     __ptext22:	
  3117 ;; *************** function _FCTloop *****************
  3118 ;; Defined at:
  3119 ;;		line 21 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\fct.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;		None
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;		None
  3124 ;; Return value:  Size  Location     Type
  3125 ;;                  1    wreg      void 
  3126 ;; Registers used:
  3127 ;;		wreg, status,2, status,0, pclath, cstack
  3128 ;; Tracked objects:
  3129 ;;		On entry : 300/0
  3130 ;;		On exit  : 300/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3133 ;;      Params:         0       0       0       0       0
  3134 ;;      Locals:         0       0       0       0       0
  3135 ;;      Temps:          0       0       0       0       0
  3136 ;;      Totals:         0       0       0       0       0
  3137 ;;Total ram usage:        0 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:    5
  3140 ;; This function calls:
  3141 ;;		_FCTjudge
  3142 ;;		_FCTkey
  3143 ;; This function is called by:
  3144 ;;		_main
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           
  3149                           ;psect for function _FCTloop
  3150  0326                     _FCTloop:	
  3151                           
  3152                           ;fct.c: 23: FCTkey();
  3153                           
  3154                           ;incstack = 0
  3155                           ; Regs used in _FCTloop: [wreg+status,2+status,0+pclath+cstack]
  3156  0326  2360  120A  118A   	fcall	_FCTkey
  3157                           
  3158                           ;fct.c: 24: FCTjudge();
  3159  0329  2B2A               	ljmp	l7025
  3160  032A                     __end_of_FCTloop:	
  3161  032A                     __ptext26:	
  3162 ;; *************** function _FCTjudge *****************
  3163 ;; Defined at:
  3164 ;;		line 107 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\fct.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;		None
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;		None
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  1    wreg      void 
  3171 ;; Registers used:
  3172 ;;		wreg, status,2, status,0, pclath, cstack
  3173 ;; Tracked objects:
  3174 ;;		On entry : 300/0
  3175 ;;		On exit  : 300/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3178 ;;      Params:         0       0       0       0       0
  3179 ;;      Locals:         0       0       0       0       0
  3180 ;;      Temps:          0       0       0       0       0
  3181 ;;      Totals:         0       0       0       0       0
  3182 ;;Total ram usage:        0 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; Hardware stack levels required when called:    3
  3185 ;; This function calls:
  3186 ;;		_G_KEY
  3187 ;;		_R_KEY
  3188 ;;		_key1
  3189 ;;		_key2
  3190 ;; This function is called by:
  3191 ;;		_FCTloop
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           
  3196                           ;psect for function _FCTjudge
  3197  032A                     _FCTjudge:	
  3198  032A                     l7025:	
  3199                           ;incstack = 0
  3200                           ; Regs used in _FCTjudge: [wreg+status,2+status,0+pclath+cstack]
  3201                           
  3202                           
  3203                           ;fct.c: 109: if(fctBits001.bits.bit_0 == 1)
  3204  032A  1C51               	btfss	_fctBits001,0	;volatile
  3205  032B  2B43               	goto	l4808
  3206                           
  3207                           ;fct.c: 110: {
  3208                           ;fct.c: 111: if(++flag_time == 1500)
  3209  032C  0AA0               	incf	_flag_time,f	;volatile
  3210  032D  1903               	skipnz
  3211  032E  0AA1               	incf	_flag_time+1,f	;volatile
  3212  032F  30DC               	movlw	220
  3213  0330  0620               	xorwf	_flag_time,w	;volatile
  3214  0331  3005               	movlw	5
  3215  0332  1903               	skipnz
  3216  0333  0621               	xorwf	_flag_time+1,w	;volatile
  3217  0334  1D03               	btfss	3,2
  3218  0335  2B39               	goto	l7033
  3219                           
  3220                           ;fct.c: 112: {
  3221                           ;fct.c: 113: fctBits001.bits.bit_0 = 0;
  3222  0336  1051               	bcf	_fctBits001,0	;volatile
  3223                           
  3224                           ;fct.c: 114: flag_time = 0;
  3225  0337  01A0               	clrf	_flag_time	;volatile
  3226  0338  01A1               	clrf	_flag_time+1	;volatile
  3227  0339                     l7033:	
  3228                           
  3229                           ;fct.c: 115: }
  3230                           ;fct.c: 116: if(RB1 == 0)
  3231  0339  1886               	btfsc	6,1	;volatile
  3232  033A  2B3C               	goto	l4810
  3233                           
  3234                           ;fct.c: 117: {
  3235                           ;fct.c: 118: R_KEY();
  3236  033B  2B51               	ljmp	l6783
  3237  033C                     l4810:	
  3238                           ;fct.c: 119: }
  3239                           
  3240                           
  3241                           ;fct.c: 120: else
  3242                           ;fct.c: 121: {
  3243                           ;fct.c: 122: if(RA6 == 0)
  3244  033C  1B05               	btfsc	5,6	;volatile
  3245  033D  2B3F               	goto	l4812
  3246                           
  3247                           ;fct.c: 123: {
  3248                           ;fct.c: 124: key1();
  3249  033E  2B56               	ljmp	l6785
  3250  033F                     l4812:	
  3251                           ;fct.c: 125: }
  3252                           
  3253                           
  3254                           ;fct.c: 126: else
  3255                           ;fct.c: 127: {
  3256                           ;fct.c: 128: if(RB0 == 0)
  3257  033F  1806               	btfsc	6,0	;volatile
  3258  0340  2B42               	goto	l7041
  3259                           
  3260                           ;fct.c: 129: {
  3261                           ;fct.c: 130: key2();
  3262  0341  2B5B               	ljmp	l6787
  3263  0342                     l7041:	
  3264                           ;fct.c: 131: }
  3265                           
  3266                           
  3267                           ;fct.c: 132: else
  3268                           ;fct.c: 133: {
  3269                           ;fct.c: 134: G_KEY();
  3270  0342  2B4C               	ljmp	l6781
  3271  0343                     l4808:	
  3272                           
  3273                           ;fct.c: 139: else if(fctBits001.bits.bit_0 == 0)
  3274  0343  1851               	btfsc	_fctBits001,0	;volatile
  3275  0344  0008               	return
  3276                           
  3277                           ;fct.c: 140: {
  3278                           ;fct.c: 141: RA5 = 0;
  3279  0345  1285               	bcf	5,5	;volatile
  3280                           
  3281                           ;fct.c: 142: RA2 = 0;
  3282  0346  1105               	bcf	5,2	;volatile
  3283                           
  3284                           ;fct.c: 143: RA4 = 0;
  3285  0347  1205               	bcf	5,4	;volatile
  3286                           
  3287                           ;fct.c: 144: RA1 = 0;
  3288  0348  1085               	bcf	5,1	;volatile
  3289                           
  3290                           ;fct.c: 145: flag_time = 0;
  3291  0349  01A0               	clrf	_flag_time	;volatile
  3292  034A  01A1               	clrf	_flag_time+1	;volatile
  3293  034B  0008               	return
  3294  034C                     __end_of_FCTjudge:	
  3295  034C                     __ptext30:	
  3296 ;; *************** function _G_KEY *****************
  3297 ;; Defined at:
  3298 ;;		line 75 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\fct.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;		None
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;		None
  3303 ;; Return value:  Size  Location     Type
  3304 ;;                  1    wreg      void 
  3305 ;; Registers used:
  3306 ;;		None
  3307 ;; Tracked objects:
  3308 ;;		On entry : 300/0
  3309 ;;		On exit  : 300/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3312 ;;      Params:         0       0       0       0       0
  3313 ;;      Locals:         0       0       0       0       0
  3314 ;;      Temps:          0       0       0       0       0
  3315 ;;      Totals:         0       0       0       0       0
  3316 ;;Total ram usage:        0 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; Hardware stack levels required when called:    2
  3319 ;; This function calls:
  3320 ;;		Nothing
  3321 ;; This function is called by:
  3322 ;;		_FCTjudge
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           
  3327                           ;psect for function _G_KEY
  3328  034C                     _G_KEY:	
  3329  034C                     l6781:	
  3330                           ;incstack = 0
  3331                           ; Regs used in _G_KEY: []
  3332                           
  3333                           
  3334                           ;fct.c: 77: RA5 = 0;
  3335  034C  1285               	bcf	5,5	;volatile
  3336                           
  3337                           ;fct.c: 78: RA2 = 0;
  3338  034D  1105               	bcf	5,2	;volatile
  3339                           
  3340                           ;fct.c: 79: RA4 = 1;
  3341  034E  1605               	bsf	5,4	;volatile
  3342                           
  3343                           ;fct.c: 80: RA1 = 0;
  3344  034F  1085               	bcf	5,1	;volatile
  3345  0350  0008               	return
  3346  0351                     __end_of_G_KEY:	
  3347  0351                     __ptext29:	
  3348 ;; *************** function _R_KEY *****************
  3349 ;; Defined at:
  3350 ;;		line 83 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\fct.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;		None
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;		None
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  1    wreg      void 
  3357 ;; Registers used:
  3358 ;;		None
  3359 ;; Tracked objects:
  3360 ;;		On entry : 300/0
  3361 ;;		On exit  : 300/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3364 ;;      Params:         0       0       0       0       0
  3365 ;;      Locals:         0       0       0       0       0
  3366 ;;      Temps:          0       0       0       0       0
  3367 ;;      Totals:         0       0       0       0       0
  3368 ;;Total ram usage:        0 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    2
  3371 ;; This function calls:
  3372 ;;		Nothing
  3373 ;; This function is called by:
  3374 ;;		_FCTjudge
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           
  3379                           ;psect for function _R_KEY
  3380  0351                     _R_KEY:	
  3381  0351                     l6783:	
  3382                           ;incstack = 0
  3383                           ; Regs used in _R_KEY: []
  3384                           
  3385                           
  3386                           ;fct.c: 85: RA5 = 0;
  3387  0351  1285               	bcf	5,5	;volatile
  3388                           
  3389                           ;fct.c: 86: RA2 = 1;
  3390  0352  1505               	bsf	5,2	;volatile
  3391                           
  3392                           ;fct.c: 87: RA4 = 1;
  3393  0353  1605               	bsf	5,4	;volatile
  3394                           
  3395                           ;fct.c: 88: RA1 = 0;
  3396  0354  1085               	bcf	5,1	;volatile
  3397  0355  0008               	return
  3398  0356                     __end_of_R_KEY:	
  3399  0356                     __ptext28:	
  3400 ;; *************** function _key1 *****************
  3401 ;; Defined at:
  3402 ;;		line 91 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\fct.c"
  3403 ;; Parameters:    Size  Location     Type
  3404 ;;		None
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;		None
  3407 ;; Return value:  Size  Location     Type
  3408 ;;                  1    wreg      void 
  3409 ;; Registers used:
  3410 ;;		None
  3411 ;; Tracked objects:
  3412 ;;		On entry : 300/0
  3413 ;;		On exit  : 300/0
  3414 ;;		Unchanged: 0/0
  3415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3416 ;;      Params:         0       0       0       0       0
  3417 ;;      Locals:         0       0       0       0       0
  3418 ;;      Temps:          0       0       0       0       0
  3419 ;;      Totals:         0       0       0       0       0
  3420 ;;Total ram usage:        0 bytes
  3421 ;; Hardware stack levels used:    1
  3422 ;; Hardware stack levels required when called:    2
  3423 ;; This function calls:
  3424 ;;		Nothing
  3425 ;; This function is called by:
  3426 ;;		_FCTjudge
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           
  3431                           ;psect for function _key1
  3432  0356                     _key1:	
  3433  0356                     l6785:	
  3434                           ;incstack = 0
  3435                           ; Regs used in _key1: []
  3436                           
  3437                           
  3438                           ;fct.c: 93: RA5 = 1;
  3439  0356  1685               	bsf	5,5	;volatile
  3440                           
  3441                           ;fct.c: 94: RA2 = 0;
  3442  0357  1105               	bcf	5,2	;volatile
  3443                           
  3444                           ;fct.c: 95: RA4 = 1;
  3445  0358  1605               	bsf	5,4	;volatile
  3446                           
  3447                           ;fct.c: 96: RA1 = 0;
  3448  0359  1085               	bcf	5,1	;volatile
  3449  035A  0008               	return
  3450  035B                     __end_of_key1:	
  3451  035B                     __ptext27:	
  3452 ;; *************** function _key2 *****************
  3453 ;; Defined at:
  3454 ;;		line 99 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\fct.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;		None
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;		None
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      void 
  3461 ;; Registers used:
  3462 ;;		None
  3463 ;; Tracked objects:
  3464 ;;		On entry : 300/0
  3465 ;;		On exit  : 300/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3468 ;;      Params:         0       0       0       0       0
  3469 ;;      Locals:         0       0       0       0       0
  3470 ;;      Temps:          0       0       0       0       0
  3471 ;;      Totals:         0       0       0       0       0
  3472 ;;Total ram usage:        0 bytes
  3473 ;; Hardware stack levels used:    1
  3474 ;; Hardware stack levels required when called:    2
  3475 ;; This function calls:
  3476 ;;		Nothing
  3477 ;; This function is called by:
  3478 ;;		_FCTjudge
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482                           
  3483                           ;psect for function _key2
  3484  035B                     _key2:	
  3485  035B                     l6787:	
  3486                           ;incstack = 0
  3487                           ; Regs used in _key2: []
  3488                           
  3489                           
  3490                           ;fct.c: 101: RA5 = 0;
  3491  035B  1285               	bcf	5,5	;volatile
  3492                           
  3493                           ;fct.c: 102: RA2 = 0;
  3494  035C  1105               	bcf	5,2	;volatile
  3495                           
  3496                           ;fct.c: 103: RA4 = 1;
  3497  035D  1605               	bsf	5,4	;volatile
  3498                           
  3499                           ;fct.c: 104: RA1 = 1;
  3500  035E  1485               	bsf	5,1	;volatile
  3501  035F  0008               	return
  3502  0360                     __end_of_key2:	
  3503  0360                     __ptext23:	
  3504 ;; *************** function _FCTkey *****************
  3505 ;; Defined at:
  3506 ;;		line 50 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\fct.c"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;		None
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;		None
  3511 ;; Return value:  Size  Location     Type
  3512 ;;                  1    wreg      void 
  3513 ;; Registers used:
  3514 ;;		wreg, status,2, status,0, pclath, cstack
  3515 ;; Tracked objects:
  3516 ;;		On entry : 300/0
  3517 ;;		On exit  : 300/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3520 ;;      Params:         0       0       0       0       0
  3521 ;;      Locals:         0       0       0       0       0
  3522 ;;      Temps:          0       0       0       0       0
  3523 ;;      Totals:         0       0       0       0       0
  3524 ;;Total ram usage:        0 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; Hardware stack levels required when called:    4
  3527 ;; This function calls:
  3528 ;;		_Delay_nms
  3529 ;; This function is called by:
  3530 ;;		_FCTloop
  3531 ;; This function uses a non-reentrant model
  3532 ;;
  3533                           
  3534                           
  3535                           ;psect for function _FCTkey
  3536  0360                     _FCTkey:	
  3537                           
  3538                           ;fct.c: 52: if(fctBits001.bits.bit_0 == 1)
  3539                           
  3540                           ;incstack = 0
  3541                           ; Regs used in _FCTkey: [wreg+status,2+status,0+pclath+cstack]
  3542  0360  1851               	btfsc	_fctBits001,0	;volatile
  3543                           
  3544                           ;fct.c: 53: {
  3545                           ;fct.c: 54: if(RB2 == 1)
  3546  0361  1D06               	btfss	6,2	;volatile
  3547  0362  2B70               	goto	l4788
  3548                           
  3549                           ;fct.c: 55: {
  3550                           ;fct.c: 56: Delay_nms(1000);
  3551  0363  30E8               	movlw	232
  3552  0364  00F4               	movwf	Delay_nms@inittempl
  3553  0365  3003               	movlw	3
  3554  0366  00F5               	movwf	Delay_nms@inittempl+1
  3555  0367  237C  120A  118A   	fcall	_Delay_nms
  3556                           
  3557                           ;fct.c: 57: if(RB2 == 1)
  3558  036A  1283               	bcf	3,5	;RP0=0, select bank0
  3559  036B  1303               	bcf	3,6	;RP1=0, select bank0
  3560  036C  1D06               	btfss	6,2	;volatile
  3561  036D  2B70               	goto	l4788
  3562                           
  3563                           ;fct.c: 58: {
  3564                           ;fct.c: 59: fctBits001.bits.bit_0 = 0;
  3565  036E  1051               	bcf	_fctBits001,0	;volatile
  3566                           
  3567                           ;fct.c: 60: return;
  3568  036F  0008               	return
  3569  0370                     l4788:	
  3570                           
  3571                           ;fct.c: 61: }
  3572                           ;fct.c: 62: }
  3573                           ;fct.c: 63: }
  3574                           ;fct.c: 64: if(RB2 == 1)
  3575  0370  1D06               	btfss	6,2	;volatile
  3576  0371  0008               	return
  3577                           
  3578                           ;fct.c: 65: {
  3579                           ;fct.c: 66: Delay_nms(1000);
  3580  0372  30E8               	movlw	232
  3581  0373  00F4               	movwf	Delay_nms@inittempl
  3582  0374  3003               	movlw	3
  3583  0375  00F5               	movwf	Delay_nms@inittempl+1
  3584  0376  237C               	fcall	_Delay_nms
  3585                           
  3586                           ;fct.c: 67: if(RB2 == 1)
  3587  0377  1283               	bcf	3,5	;RP0=0, select bank0
  3588  0378  1303               	bcf	3,6	;RP1=0, select bank0
  3589  0379  1906               	btfsc	6,2	;volatile
  3590                           
  3591                           ;fct.c: 68: {
  3592                           ;fct.c: 69: fctBits001.bits.bit_0 = 1;
  3593  037A  1451               	bsf	_fctBits001,0	;volatile
  3594                           
  3595                           ;fct.c: 70: return;
  3596  037B  0008               	return
  3597  037C                     __end_of_FCTkey:	
  3598  037C                     __ptext24:	
  3599 ;; *************** function _Delay_nms *****************
  3600 ;; Defined at:
  3601 ;;		line 35 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\main.c"
  3602 ;; Parameters:    Size  Location     Type
  3603 ;;  inittempl       2    4[COMMON] unsigned int 
  3604 ;; Auto vars:     Size  Location     Type
  3605 ;;  i               2    6[COMMON] unsigned int 
  3606 ;;  gtemp           1    8[COMMON] unsigned char 
  3607 ;; Return value:  Size  Location     Type
  3608 ;;                  1    wreg      void 
  3609 ;; Registers used:
  3610 ;;		wreg, status,2, status,0, pclath, cstack
  3611 ;; Tracked objects:
  3612 ;;		On entry : 200/100
  3613 ;;		On exit  : 0/0
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3616 ;;      Params:         2       0       0       0       0
  3617 ;;      Locals:         3       0       0       0       0
  3618 ;;      Temps:          0       0       0       0       0
  3619 ;;      Totals:         5       0       0       0       0
  3620 ;;Total ram usage:        5 bytes
  3621 ;; Hardware stack levels used:    1
  3622 ;; Hardware stack levels required when called:    3
  3623 ;; This function calls:
  3624 ;;		_Delay
  3625 ;; This function is called by:
  3626 ;;		_main
  3627 ;;		_FCTkey
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631                           
  3632                           ;psect for function _Delay_nms
  3633  037C                     _Delay_nms:	
  3634                           
  3635                           ;main.c: 37: unsigned int i;
  3636                           ;main.c: 38: unsigned char gtemp;
  3637                           ;main.c: 40: gtemp = 0;
  3638                           
  3639                           ;incstack = 0
  3640                           ; Regs used in _Delay_nms: [wreg+status,2+status,0+pclath+cstack]
  3641  037C  01F8               	clrf	Delay_nms@gtemp
  3642                           
  3643                           ;main.c: 41: if (GIE == 1)
  3644  037D  1F8B               	btfss	11,7	;volatile
  3645  037E  2B82               	goto	l6731
  3646                           
  3647                           ;main.c: 42: {
  3648                           ;main.c: 43: gtemp = 1;
  3649  037F  01F8               	clrf	Delay_nms@gtemp
  3650  0380  0AF8               	incf	Delay_nms@gtemp,f
  3651                           
  3652                           ;main.c: 44: GIE = 0;
  3653  0381  138B               	bcf	11,7	;volatile
  3654  0382                     l6731:	
  3655                           
  3656                           ;main.c: 45: }
  3657                           ;main.c: 46: for (i = 0; i < inittempl; i++)
  3658  0382  01F6               	clrf	Delay_nms@i
  3659  0383  01F7               	clrf	Delay_nms@i+1
  3660  0384                     l6737:	
  3661  0384  0875               	movf	Delay_nms@inittempl+1,w
  3662  0385  0277               	subwf	Delay_nms@i+1,w
  3663  0386  1D03               	skipz
  3664  0387  2B8A               	goto	u995
  3665  0388  0874               	movf	Delay_nms@inittempl,w
  3666  0389  0276               	subwf	Delay_nms@i,w
  3667  038A                     u995:	
  3668  038A  1803               	btfsc	3,0
  3669  038B  2B97               	goto	l6739
  3670                           
  3671                           ;main.c: 47: {
  3672                           ;main.c: 48: Delay(154);
  3673  038C  309A               	movlw	154
  3674  038D  00F2               	movwf	Delay@dtemp
  3675  038E  01F3               	clrf	Delay@dtemp+1
  3676  038F  239B  120A  118A   	fcall	_Delay
  3677  0392  0064               	clrwdt	;# 
  3678  0393  0AF6               	incf	Delay_nms@i,f
  3679  0394  1903               	skipnz
  3680  0395  0AF7               	incf	Delay_nms@i+1,f
  3681  0396  2B84               	goto	l6737
  3682  0397                     l6739:	
  3683                           
  3684                           ;main.c: 50: }
  3685                           ;main.c: 51: if (gtemp == 1)
  3686  0397  0B78               	decfsz	Delay_nms@gtemp,w
  3687  0398  0008               	return
  3688                           
  3689                           ;main.c: 52: GIE = 1;
  3690  0399  178B               	bsf	11,7	;volatile
  3691  039A  0008               	return
  3692  039B                     __end_of_Delay_nms:	
  3693  039B                     __ptext25:	
  3694 ;; *************** function _Delay *****************
  3695 ;; Defined at:
  3696 ;;		line 27 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\main.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;  dtemp           2    2[COMMON] unsigned int 
  3699 ;; Auto vars:     Size  Location     Type
  3700 ;;		None
  3701 ;; Return value:  Size  Location     Type
  3702 ;;                  1    wreg      void 
  3703 ;; Registers used:
  3704 ;;		wreg, status,2, status,0
  3705 ;; Tracked objects:
  3706 ;;		On entry : 0/100
  3707 ;;		On exit  : 0/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3710 ;;      Params:         2       0       0       0       0
  3711 ;;      Locals:         0       0       0       0       0
  3712 ;;      Temps:          0       0       0       0       0
  3713 ;;      Totals:         2       0       0       0       0
  3714 ;;Total ram usage:        2 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; Hardware stack levels required when called:    2
  3717 ;; This function calls:
  3718 ;;		Nothing
  3719 ;; This function is called by:
  3720 ;;		_Delay_nms
  3721 ;; This function uses a non-reentrant model
  3722 ;;
  3723                           
  3724                           
  3725                           ;psect for function _Delay
  3726  039B                     _Delay:	
  3727  039B                     l6659:	
  3728                           ;main.c: 29: while (dtemp--)
  3729                           
  3730                           ;incstack = 0
  3731                           ; Regs used in _Delay: [wreg+status,2+status,0]
  3732                           
  3733  039B  3001               	movlw	1
  3734  039C  02F2               	subwf	Delay@dtemp,f
  3735  039D  3000               	movlw	0
  3736  039E  1C03               	skipc
  3737  039F  03F3               	decf	Delay@dtemp+1,f
  3738  03A0  02F3               	subwf	Delay@dtemp+1,f
  3739  03A1  0F72               	incfsz	Delay@dtemp,w
  3740  03A2  2B9B               	goto	l6659
  3741  03A3  0A73               	incf	Delay@dtemp+1,w
  3742  03A4  1903               	btfsc	3,2
  3743  03A5  0008               	return
  3744  03A6  2B9B               	goto	l6659
  3745  03A7                     __end_of_Delay:	
  3746                           
  3747                           	psect	text31
  3748  0416                     __ptext31:	
  3749 ;; *************** function _Int_ALL *****************
  3750 ;; Defined at:
  3751 ;;		line 563 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\main.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;		None
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;		None
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  1    wreg      void 
  3758 ;; Registers used:
  3759 ;;		wreg, status,2, status,0, pclath, cstack
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 300/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3765 ;;      Params:         0       0       0       0       0
  3766 ;;      Locals:         0       0       0       0       0
  3767 ;;      Temps:          2       0       0       0       0
  3768 ;;      Totals:         2       0       0       0       0
  3769 ;;Total ram usage:        2 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; Hardware stack levels required when called:    1
  3772 ;; This function calls:
  3773 ;;		_INT_LED_SHOW
  3774 ;; This function is called by:
  3775 ;;		Interrupt level 1
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           
  3780                           ;psect for function _Int_ALL
  3781  0416                     _Int_ALL:	
  3782                           
  3783                           ;main.c: 566: if (TMR1IF)
  3784  0416  1283               	bcf	3,5	;RP0=0, select bank0
  3785  0417  1303               	bcf	3,6	;RP1=0, select bank0
  3786  0418  1C0C               	btfss	12,0	;volatile
  3787  0419  2C2E               	goto	i1l7163
  3788                           
  3789                           ;main.c: 567: {
  3790                           ;main.c: 573: TMR1 = 0xE0C0;
  3791  041A  30E0               	movlw	224
  3792  041B  008F               	movwf	15	;volatile
  3793  041C  30C0               	movlw	192
  3794  041D  008E               	movwf	14	;volatile
  3795                           
  3796                           ;main.c: 574: TMR1IF = 0;
  3797  041E  100C               	bcf	12,0	;volatile
  3798                           
  3799                           ;main.c: 577: Fsys1.bits.bit_1 = 1;
  3800  041F  14D0               	bsf	_Fsys1,1	;volatile
  3801                           
  3802                           ;main.c: 580: if (++MainTime_1s >= 1000)
  3803  0420  0AB8               	incf	_MainTime_1s,f	;volatile
  3804  0421  1903               	skipnz
  3805  0422  0AB9               	incf	_MainTime_1s+1,f	;volatile
  3806  0423  3003               	movlw	3
  3807  0424  0239               	subwf	_MainTime_1s+1,w	;volatile
  3808  0425  30E8               	movlw	232
  3809  0426  1903               	skipnz
  3810  0427  0238               	subwf	_MainTime_1s,w	;volatile
  3811  0428  1C03               	skipc
  3812  0429  2C2E               	goto	i1l7163
  3813                           
  3814                           ;main.c: 581: {
  3815                           ;main.c: 582: MainTime_1s = 0;
  3816  042A  01B8               	clrf	_MainTime_1s	;volatile
  3817  042B  01B9               	clrf	_MainTime_1s+1	;volatile
  3818                           
  3819                           ;main.c: 583: Fsys1s.byte = 0xFF;
  3820  042C  30FF               	movlw	255
  3821  042D  00CF               	movwf	_Fsys1s	;volatile
  3822  042E                     i1l7163:	
  3823                           
  3824                           ;main.c: 591: }
  3825                           ;main.c: 592: }
  3826                           ;main.c: 595: if (TMR2IF)
  3827  042E  1C8C               	btfss	12,1	;volatile
  3828  042F  2C32               	goto	i1l1948
  3829                           
  3830                           ;main.c: 596: {
  3831                           ;main.c: 597: TMR2IF = 0;
  3832  0430  108C               	bcf	12,1	;volatile
  3833                           
  3834                           ;main.c: 598: INT_LED_SHOW();
  3835  0431  2439               	fcall	_INT_LED_SHOW
  3836  0432                     i1l1948:	
  3837  0432  0871               	movf	??_Int_ALL+1,w
  3838  0433  008A               	movwf	10
  3839  0434  0E70               	swapf	??_Int_ALL^(0+-128),w
  3840  0435  0083               	movwf	3
  3841  0436  0EFE               	swapf	126,f
  3842  0437  0E7E               	swapf	126,w
  3843  0438  0009               	retfie
  3844  0439                     __end_of_Int_ALL:	
  3845  0439                     __ptext32:	
  3846 ;; *************** function _INT_LED_SHOW *****************
  3847 ;; Defined at:
  3848 ;;		line 193 in file "C:\Users\ÍôÇ¿Éý\Desktop\ABM007_79F133_\ABM007_79F133\source\light.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;		None
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;		None
  3853 ;; Return value:  Size  Location     Type
  3854 ;;                  1    wreg      void 
  3855 ;; Registers used:
  3856 ;;		wreg, status,2, status,0
  3857 ;; Tracked objects:
  3858 ;;		On entry : 300/0
  3859 ;;		On exit  : 300/0
  3860 ;;		Unchanged: 0/0
  3861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3862 ;;      Params:         0       0       0       0       0
  3863 ;;      Locals:         0       0       0       0       0
  3864 ;;      Temps:          0       0       0       0       0
  3865 ;;      Totals:         0       0       0       0       0
  3866 ;;Total ram usage:        0 bytes
  3867 ;; Hardware stack levels used:    1
  3868 ;; This function calls:
  3869 ;;		Nothing
  3870 ;; This function is called by:
  3871 ;;		_Int_ALL
  3872 ;; This function uses a non-reentrant model
  3873 ;;
  3874                           
  3875                           
  3876                           ;psect for function _INT_LED_SHOW
  3877  0439                     _INT_LED_SHOW:	
  3878                           
  3879                           ;light.c: 196: if((FledBits01.bits.bit_0 == 1) && (fctBits001.bits.bit_0 == 0))
  3880                           
  3881                           ;incstack = 0
  3882                           ; Regs used in _INT_LED_SHOW: [wreg+status,2+status,0]
  3883  0439  184D               	btfsc	_FledBits01,0	;volatile
  3884  043A  1851               	btfsc	_fctBits001,0	;volatile
  3885  043B  0008               	return
  3886                           
  3887                           ;light.c: 197: {
  3888                           ;light.c: 198: if (++CNTbreath_Led == 80)
  3889  043C  0AC0               	incf	_CNTbreath_Led,f	;volatile
  3890  043D  1903               	skipnz
  3891  043E  0AC1               	incf	_CNTbreath_Led+1,f	;volatile
  3892  043F  3050               	movlw	80
  3893  0440  0640               	xorwf	_CNTbreath_Led,w	;volatile
  3894  0441  0441               	iorwf	_CNTbreath_Led+1,w	;volatile
  3895  0442  1D03               	btfss	3,2
  3896  0443  2C47               	goto	i1l7059
  3897                           
  3898                           ;light.c: 199: {
  3899                           ;light.c: 200: CNTbreath_Led = 0;
  3900  0444  01C0               	clrf	_CNTbreath_Led	;volatile
  3901  0445  01C1               	clrf	_CNTbreath_Led+1	;volatile
  3902                           
  3903                           ;light.c: 201: RA5 = 0;
  3904  0446  1285               	bcf	5,5	;volatile
  3905  0447                     i1l7059:	
  3906                           
  3907                           ;light.c: 202: }
  3908                           ;light.c: 203: if (CNTbreath_Led >= CNTbreath_Led2)
  3909  0447  083D               	movf	_CNTbreath_Led2+1,w	;volatile
  3910  0448  0241               	subwf	_CNTbreath_Led+1,w	;volatile
  3911  0449  1D03               	skipz
  3912  044A  2C4D               	goto	u176_25
  3913  044B  083C               	movf	_CNTbreath_Led2,w	;volatile
  3914  044C  0240               	subwf	_CNTbreath_Led,w	;volatile
  3915  044D                     u176_25:	
  3916  044D  1C03               	skipc
  3917  044E  2C51               	goto	i1l935
  3918                           
  3919                           ;light.c: 204: {
  3920                           ;light.c: 205: RA5 = 1;
  3921  044F  1685               	bsf	5,5	;volatile
  3922                           
  3923                           ;light.c: 206: }
  3924  0450  0008               	return
  3925  0451                     i1l935:	
  3926                           
  3927                           ;light.c: 207: else
  3928                           ;light.c: 208: {
  3929                           ;light.c: 209: RA5 = 0;
  3930  0451  1285               	bcf	5,5	;volatile
  3931  0452  0008               	return
  3932  0453                     __end_of_INT_LED_SHOW:	
  3933  007E                     btemp	set	126	;btemp
  3934  007E                     wtemp0	set	126
  3935                           
  3936                           	psect	intentry
  3937  0004                     __pintentry:	
  3938                           ;incstack = 0
  3939                           ; Regs used in _Int_ALL: [wreg+status,2+status,0+pclath+cstack]
  3940                           
  3941  0004                     interrupt_function:	
  3942  007E                     saved_w	set	btemp
  3943  0004  00FE               	movwf	btemp
  3944  0005  0E03               	swapf	3,w
  3945  0006  00F0               	movwf	??_Int_ALL
  3946  0007  080A               	movf	10,w
  3947  0008  00F1               	movwf	??_Int_ALL+1
  3948  0009  120A  118A  2C16   	ljmp	_Int_ALL


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80      7      65
    BANK1            80      0       0
    BANK3            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    KeyControl@this	PTR struct _KEY_PRIVATE size(1) Largest target is 8
		 -> KeyLines(BANK0[8]), 


Critical Paths under _main in COMMON

    _main->_Delay_nms
    _GsensorLoop->_SensorControl
    _GflushLoop->_FlushJudge
    _FlushJudge->_GkeyLoop
    _GkeyLoop->_KeyControl
    _FCTkey->_Delay_nms
    _Delay_nms->_Delay

Critical Paths under _Int_ALL in COMMON

    None.

Critical Paths under _main in BANK0

    _GkeyLoop->_KeyControl

Critical Paths under _Int_ALL in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Int_ALL in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Int_ALL in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Int_ALL in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1395
                          _Delay_nms
                            _FCTloop
                         _GflushLoop
                           _GledLoop
                        _GsensorLoop
                          _Init_GPIO
                            _Init_IC
                        _Init_TIMER1
                        _Init_TIMER2
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_IC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_GPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GsensorLoop                                          0     0      0       0
                      _SensorControl
                        _SensorJudge
                          _SensorKey
                         _SensorTime
 ---------------------------------------------------------------------------------
 (2) _SensorTime                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorKey                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorJudge                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SensorControl                                        1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GledLoop                                             0     0      0       0
                            _LED_Con
                          _LED_Judge
                            _LED_Key
                           _LED_Time
 ---------------------------------------------------------------------------------
 (2) _LED_Time                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Key                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Judge                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_Con                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GflushLoop                                           0     0      0     699
                           _FlushCon
                         _FlushJudge
                          _FlushTime
 ---------------------------------------------------------------------------------
 (2) _FlushTime                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FlushJudge                                           1     1      0     699
                                              6 COMMON     1     1      0
                           _GkeyLoop
 ---------------------------------------------------------------------------------
 (3) _GkeyLoop                                             2     2      0     631
                                              4 COMMON     2     2      0
                         _KeyControl
                            _ScanKey
 ---------------------------------------------------------------------------------
 (4) _ScanKey                                              1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _KeyControl                                           9     9      0     609
                                              2 COMMON     2     2      0
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _FlushCon                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FCTloop                                              0     0      0     348
                           _FCTjudge
                             _FCTkey
 ---------------------------------------------------------------------------------
 (2) _FCTkey                                               0     0      0     348
                          _Delay_nms
 ---------------------------------------------------------------------------------
 (3) _Delay_nms                                            5     3      2     348
                                              4 COMMON     5     3      2
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _Delay                                                2     0      2      86
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _FCTjudge                                             0     0      0       0
                              _G_KEY
                              _R_KEY
                               _key1
                               _key2
 ---------------------------------------------------------------------------------
 (3) _key2                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _key1                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _R_KEY                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _G_KEY                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Int_ALL                                              2     2      0       0
                                              0 COMMON     2     2      0
                       _INT_LED_SHOW
 ---------------------------------------------------------------------------------
 (6) _INT_LED_SHOW                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_nms
     _Delay
   _FCTloop
     _FCTjudge
       _G_KEY
       _R_KEY
       _key1
       _key2
     _FCTkey
       _Delay_nms
         _Delay
   _GflushLoop
     _FlushCon
     _FlushJudge
       _GkeyLoop
         _KeyControl
         _ScanKey
     _FlushTime
   _GledLoop
     _LED_Con
     _LED_Judge
     _LED_Key
     _LED_Time
   _GsensorLoop
     _SensorControl
     _SensorJudge
     _SensorKey
     _SensorTime
   _Init_GPIO
   _Init_IC
   _Init_TIMER1
   _Init_TIMER2

 _Int_ALL (ROOT)
   _INT_LED_SHOW

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      7      41       4       81.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BITBANK3            50      0       0       7        0.0%
BANK3               50      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
ABS                  0      0      4C      11        0.0%
DATA                 0      0      4C      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 03 16:45:55 2024

                     PL2 0215                       PL4 021F                       PL6 0229  
                     PL8 031D                       fsr 0004                      _GIE 005F  
                    _RA1 0029                      _RA2 002A                      _RB0 0030  
                    _RB1 0031                      _RA4 002C                      _RB2 0032  
                    _RA5 002D                      _RA6 002E                      _PR2 0092  
                    u995 038A                      fsr0 0004                      indf 0000  
        __end_of_LED_Con 046B          __end_of_LED_Key 045E          __end_of_FCTloop 032A  
                   l1924 03D5                     l2901 00A0                     l1933 03E5  
                   l2903 00A4                     l1928 03DD                     l2905 00B4  
                   l7001 0273                     l2906 00BE                     l2861 00F1  
                   l2862 0107                     l2871 0110                     l3831 025A  
                   l7041 0342                     l7033 0339                     l7025 032A  
                   l2873 0116                     l4810 033C                     l2891 0059  
                   l2883 0034                     l3843 028F                     l4812 033F  
                   l2893 0065                     l7205 01E7                     l3845 02A3  
                   l2886 0049                     l2878 0025                     l3854 02CF  
                   l2895 0078                     l7311 03C8                     l4808 0343  
                   l2888 0054                     l2897 0084                     l7233 0163  
                   l3849 02BB                     l5730 0178                     l3858 02E7  
                   l2899 0090                     l7315 03CF                     l3868 0287  
                   l3869 0288                     l7325 03ED                     l7247 017B  
                   l7327 040D                     l5728 0175                     l5737 0214  
                   l7249 0183                     l7265 00F5                     l6801 0461  
                   l6731 0382                     l7179 01A7                     l7267 00F8  
                   l4788 0370                     l7189 01C8                     l7269 00FB  
                   l6663 0204                     l6737 0384                     l6913 00C8  
                   l6673 020C                     l6659 039B                     l6739 0397  
                   l6843 002F                     l6835 0024                     l6667 0208  
                   l6781 034C                     l6783 0351                     l6839 002D  
                   l6935 025F                     l6785 0356                     l6961 0292  
                   l6929 0252                     l6787 035B                     l6971 02CC  
                   l6957 02B8                     l6949 02A0                     l6799 0471  
                   l6967 02C2                     l6993 0308                     l6987 02FA  
                   l6979 02E4                     l6989 02FD                     l6999 030B  
                   u1150 0467                     u1600 028C                     u1560 0279  
                   u1570 027F                     u1562 027A                     u1572 0280  
                   _PIE1 008C                     u1920 01CF                     _PIE2 008D  
                   u1930 01D0                     u1880 01B5                     u1970 01EE  
                   u1890 01B6                     u1980 01EF                     _PIR1 000C  
                   _PIR2 000D                     _TMR1 000E                     _WPUA 018E  
                   _WPUB 0095                     _WPUC 018F                     _key1 0356  
                   _key2 035B                     _main 03A7            ??_Init_TIMER1 0072  
          ??_Init_TIMER2 0072                     btemp 007E                     start 000C  
     __size_of_LED_Judge 0008               _FledBits01 004D          __end_of_Int_ALL 0439  
        __end_of_Init_IC 049A          __end_of_ScanKey 0215         __end_of_LED_Time 0461  
       __end_of_FCTjudge 034C            ??_GsensorLoop 0073                    ?_key1 0070  
                  ?_key2 0070                    ?_main 0070                    _T1CON 0010  
                  _T2CON 0012                    i1l935 0451                    _G_KEY 034C  
                  _PORTA 0005                    _PORTB 0006                    _PORTC 0007  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _R_KEY 0351                    _Delay 039B                    _Fsys1 0050  
             _GflushLoop 001C                    _templ 004B                    pclath 000A  
             _KeyControl 0185                    status 0003                    wtemp0 007E  
             _FlushJudge 00EC         __end_of_GledLoop 045D          __initialization 000F  
       __end_of_GkeyLoop 0185             __end_of_key1 035B             __end_of_key2 0360  
           __end_of_main 0416      __end_of_Init_TIMER1 04A7      __end_of_Init_TIMER2 04B2  
     FlushJudge@Key_Step 0076         __end_of_FlushCon 00EC       __size_of_Delay_nms 001F  
                 ??_key1 0072                   ??_key2 0072                   ??_main 0079  
            _Fbodysensor 007A                   ?_G_KEY 0070                ??_LED_Con 0072  
              ??_LED_Key 0072                ??_FCTloop 0079                   ?_R_KEY 0070  
                 ?_Delay 0072        __end_of_LED_Judge 0473    __end_of_SensorControl 028E  
    __end_of_GsensorLoop 023A                   i1l1948 0432                   i1l7059 0447  
                 i1l7163 042E                   _FCTkey 0360                   _INTCON 000B  
                 _CNTfct 0026                   u176_25 044D       __size_of_Init_GPIO 0015  
                 _OSCCON 008F                   _TMR1IE 0460                   _TMR1IF 0060  
                 _TMR2IE 0461                   _TMR2IF 0061       __size_of_FlushTime 0001  
          ?_INT_LED_SHOW 0070                   _WDTCON 0105                ??_Int_ALL 0070  
              ??_Init_IC 0072                   _RX_Buf 004C            _CNTfctSensior 0044  
              ??_ScanKey 0072            _CNTbodyInTime 002C                   _Fsys1m 004E  
                 _Fsys1s 004F            _CNTbreath_Led 0040               _SensorTime 023B  
          ??_SensorJudge 0072           KeyControl@this 0060              _MainTime_1s 0038  
     __size_of_SensorKey 0001                   saved_w 007E       Delay_nms@inittempl 0074  
            ?_GflushLoop 0070              ?_KeyControl 0070           ??_INT_LED_SHOW 0070  
      __end_of_Delay_nms 039B  __end_of__initialization 0018                ?_LED_Time 0070  
              ?_FCTjudge 0070              _Init_TIMER1 049A              _Init_TIMER2 04A7  
          __end_of_G_KEY 0351              ?_FlushJudge 0070            __end_of_R_KEY 0356  
          __end_of_Delay 03A7           __pcstackCOMMON 0070               __end_ofPL2 021F  
             __end_ofPL4 0229               __end_ofPL6 0230               __end_ofPL8 0326  
      __end_of_Init_GPIO 0488        __end_of_FlushTime 0024              _GsensorLoop 0230  
                ??_G_KEY 0072      __end_of_SensorJudge 031D                  ??_R_KEY 0072  
                ??_Delay 0074                ?_GledLoop 0070                ?_GkeyLoop 0070  
             __pbssBANK0 0020                  ?_FCTkey 0070               _fctBits001 0051  
              ?_FlushCon 0070               ??_LED_Time 0072               ??_FCTjudge 0072  
      __end_of_SensorKey 023B               __pmaintext 03A7              ?_SensorTime 0070  
             __pintentry 0004      __size_of_GflushLoop 0007          ScanKey@line_num 0072  
    __size_of_KeyControl 007D           _CNTfctFlashLed 0043                  _LED_Con 0461  
                _LED_Key 045D                  _FCTloop 0326                  _CNTkey1 0024  
                _CNTkey2 0022      __size_of_FlushJudge 002F               ??_GledLoop 0072  
            _SeletedLine 0079                  _SEQbody 0045                  _SEQmain 004A  
             ??_GkeyLoop 0074               ??_FlushCon 0072          __size_of_FCTkey 001C  
                _Fflush1 0048                  _Int_ALL 0416                  _Init_IC 0488  
                _ScanKey 0202           _CNTbreath_Led1 003E           _CNTbreath_Led2 003C  
         _CNTbreath_Led3 003A              _SensorJudge 028E     __end_of_INT_LED_SHOW 0453  
                __ptext0 0000                  __ptext1 04A7                  __ptext2 049A  
                __ptext3 0488                  __ptext4 0473                  __ptext5 0230  
                __ptext6 023B                  __ptext7 023A                  __ptext8 028E  
                __ptext9 0273                _AD_Result 0036                  clrloop0 04B3  
              _LED_Judge 046B     end_of_initialization 0018      __size_of_SensorTime 0038  
              _CNTbody_h 0032                _CNTbody_l 0030           Delay_nms@gtemp 0078  
           ??_GflushLoop 0077               ?_LED_Judge 0070             ??_KeyControl 0072  
         __end_of_FCTkey 037C             ?_Init_TIMER1 0070             ?_Init_TIMER2 0070  
           ??_FlushJudge 0076                _BufCntAdd 002E                _Delay_nms 037C  
      __size_of_LED_Time 0003        __size_of_FCTjudge 0022   __size_of_SensorControl 001B  
     __end_of_GflushLoop 0023             ?_GsensorLoop 0070       __end_of_KeyControl 0202  
    start_initialization 000F                _Init_GPIO 0473                _FlushTime 0023  
              _CurrentIO 0042       __end_of_FlushJudge 011B                 ??_FCTkey 0079  
      __size_of_GledLoop 000A        __size_of_GkeyLoop 006A        __size_of_FlushCon 00C8  
             ?_Delay_nms 0074                _SensorKey 023A    __size_of_INT_LED_SHOW 001A  
           ??_SensorTime 0072                 ?_LED_Con 0070                 ?_LED_Key 0070  
               ?_FCTloop 0070              __pbssCOMMON 0079               ?_Init_GPIO 0070  
              ___latbits 0002            __pcstackBANK0 005A               ?_FlushTime 0070  
          _SensorControl 0273              ??_LED_Judge 0072       __end_of_SensorTime 0273  
        _KeyControl$3140 005A          _KeyControl$3141 005C          _KeyControl$3142 005E  
           _INT_LED_SHOW 0439                 ?_Int_ALL 0070                 ?_Init_IC 0070  
               ?_ScanKey 0070               ?_SensorKey 0070                _flag_time 0020  
           ?_SensorJudge 0070           __size_of_G_KEY 0005           __size_of_R_KEY 0005  
         __size_of_Delay 000C           ?_SensorControl 0070        interrupt_function 0004  
               _LED_Time 045E                 _FCTjudge 032A                clear_ram0 04B2  
               _CNTflush 0034              ??_Delay_nms 0076     __size_of_Init_TIMER1 000D  
   __size_of_Init_TIMER2 000B                 _SEQflsuh 0047     __size_of_GsensorLoop 000A  
            ??_Init_GPIO 0072         __size_of_LED_Con 000A         __size_of_LED_Key 0001  
            ??_FlushTime 0072         __size_of_FCTloop 0004                 _GledLoop 0453  
               _GkeyLoop 011B                 _KeyLines 0052                 _FlushCon 0024  
       __size_of_Int_ALL 0023         __size_of_Init_IC 0012          _CNTbodyExitTime 002A  
       __size_of_ScanKey 0013              _CNTfctStart 0028              ??_SensorKey 0072  
        ??_SensorControl 0072                 __ptext10 0453                 __ptext11 045E  
               __ptext20 0185                 __ptext12 045D                 __ptext21 0024  
               __ptext13 046B                 __ptext30 034C                 __ptext22 0326  
               __ptext14 0461                 __ptext31 0416                 __ptext23 0360  
               __ptext15 001C                 __ptext32 0439                 __ptext24 037C  
               __ptext16 0023                 __ptext25 039B                 __ptext17 00EC  
               __ptext26 032A                 __ptext18 011B                 __ptext27 035B  
               __ptext19 0202                 __ptext28 0356                 __ptext29 0351  
          __size_of_key1 0005            __size_of_key2 0005            __size_of_main 006F  
        _u8stsBodySensor 0046            _MainTime_1min 0049               Delay@dtemp 0072  
   __size_of_SensorJudge 008F               Delay_nms@i 0076                 intlevel1 0000  
             _OPTION_REG 0081  
